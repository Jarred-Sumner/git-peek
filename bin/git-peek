#!/usr/bin/env node --no-warnings
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (callback, module2) => () => {
  if (!module2) {
    module2 = {exports: {}};
    callback(module2.exports, module2);
  }
  return module2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true})), module2);
};

// node_modules/.pnpm/protocols@1.4.8/node_modules/protocols/lib/index.js
var require_lib = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function protocols(input, first) {
    if (first === true) {
      first = 0;
    }
    var index = input.indexOf("://"), splits = input.substring(0, index).split("+").filter(Boolean);
    if (typeof first === "number") {
      return splits[first];
    }
    return splits;
  };
});

// node_modules/.pnpm/is-ssh@1.3.2/node_modules/is-ssh/lib/index.js
var require_lib2 = __commonJS((exports2, module2) => {
  "use strict";
  var protocols = require_lib();
  function isSsh(input) {
    if (Array.isArray(input)) {
      return input.indexOf("ssh") !== -1 || input.indexOf("rsync") !== -1;
    }
    if (typeof input !== "string") {
      return false;
    }
    var prots = protocols(input);
    input = input.substring(input.indexOf("://") + 3);
    if (isSsh(prots)) {
      return true;
    }
    return input.indexOf("@") < input.indexOf(":");
  }
  module2.exports = isSsh;
});

// node_modules/.pnpm/strict-uri-encode@2.0.0/node_modules/strict-uri-encode/index.js
var require_strict_uri_encode = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (str) => encodeURIComponent(str).replace(/[!'()*]/g, (x) => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);
});

// node_modules/.pnpm/decode-uri-component@0.2.0/node_modules/decode-uri-component/index.js
var require_decode_uri_component = __commonJS((exports2, module2) => {
  "use strict";
  var token = "%[a-f0-9]{2}";
  var singleMatcher = new RegExp(token, "gi");
  var multiMatcher = new RegExp("(" + token + ")+", "gi");
  function decodeComponents(components, split) {
    try {
      return decodeURIComponent(components.join(""));
    } catch (err) {
    }
    if (components.length === 1) {
      return components;
    }
    split = split || 1;
    var left = components.slice(0, split);
    var right = components.slice(split);
    return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
  }
  function decode(input) {
    try {
      return decodeURIComponent(input);
    } catch (err) {
      var tokens = input.match(singleMatcher);
      for (var i = 1; i < tokens.length; i++) {
        input = decodeComponents(tokens, i).join("");
        tokens = input.match(singleMatcher);
      }
      return input;
    }
  }
  function customDecodeURIComponent(input) {
    var replaceMap = {
      "%FE%FF": "\uFFFD\uFFFD",
      "%FF%FE": "\uFFFD\uFFFD"
    };
    var match = multiMatcher.exec(input);
    while (match) {
      try {
        replaceMap[match[0]] = decodeURIComponent(match[0]);
      } catch (err) {
        var result = decode(match[0]);
        if (result !== match[0]) {
          replaceMap[match[0]] = result;
        }
      }
      match = multiMatcher.exec(input);
    }
    replaceMap["%C2"] = "\uFFFD";
    var entries = Object.keys(replaceMap);
    for (var i = 0; i < entries.length; i++) {
      var key = entries[i];
      input = input.replace(new RegExp(key, "g"), replaceMap[key]);
    }
    return input;
  }
  module2.exports = function(encodedURI) {
    if (typeof encodedURI !== "string") {
      throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
    }
    try {
      encodedURI = encodedURI.replace(/\+/g, " ");
      return decodeURIComponent(encodedURI);
    } catch (err) {
      return customDecodeURIComponent(encodedURI);
    }
  };
});

// node_modules/.pnpm/split-on-first@1.1.0/node_modules/split-on-first/index.js
var require_split_on_first = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (string, separator) => {
    if (!(typeof string === "string" && typeof separator === "string")) {
      throw new TypeError("Expected the arguments to be of type `string`");
    }
    if (separator === "") {
      return [string];
    }
    const separatorIndex = string.indexOf(separator);
    if (separatorIndex === -1) {
      return [string];
    }
    return [
      string.slice(0, separatorIndex),
      string.slice(separatorIndex + separator.length)
    ];
  };
});

// node_modules/.pnpm/filter-obj@1.1.0/node_modules/filter-obj/index.js
var require_filter_obj = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function(obj, predicate) {
    var ret = {};
    var keys = Object.keys(obj);
    var isArr = Array.isArray(predicate);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var val = obj[key];
      if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {
        ret[key] = val;
      }
    }
    return ret;
  };
});

// node_modules/.pnpm/query-string@6.14.0/node_modules/query-string/index.js
var require_query_string = __commonJS((exports2) => {
  "use strict";
  var strictUriEncode = require_strict_uri_encode();
  var decodeComponent = require_decode_uri_component();
  var splitOnFirst = require_split_on_first();
  var filterObject = require_filter_obj();
  var isNullOrUndefined = (value) => value === null || value === void 0;
  function encoderForArrayFormat(options) {
    switch (options.arrayFormat) {
      case "index":
        return (key) => (result, value) => {
          const index = result.length;
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          if (value === null) {
            return [...result, [encode(key, options), "[", index, "]"].join("")];
          }
          return [
            ...result,
            [encode(key, options), "[", encode(index, options), "]=", encode(value, options)].join("")
          ];
        };
      case "bracket":
        return (key) => (result, value) => {
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          if (value === null) {
            return [...result, [encode(key, options), "[]"].join("")];
          }
          return [...result, [encode(key, options), "[]=", encode(value, options)].join("")];
        };
      case "comma":
      case "separator":
        return (key) => (result, value) => {
          if (value === null || value === void 0 || value.length === 0) {
            return result;
          }
          if (result.length === 0) {
            return [[encode(key, options), "=", encode(value, options)].join("")];
          }
          return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
        };
      default:
        return (key) => (result, value) => {
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          if (value === null) {
            return [...result, encode(key, options)];
          }
          return [...result, [encode(key, options), "=", encode(value, options)].join("")];
        };
    }
  }
  function parserForArrayFormat(options) {
    let result;
    switch (options.arrayFormat) {
      case "index":
        return (key, value, accumulator) => {
          result = /\[(\d*)\]$/.exec(key);
          key = key.replace(/\[\d*\]$/, "");
          if (!result) {
            accumulator[key] = value;
            return;
          }
          if (accumulator[key] === void 0) {
            accumulator[key] = {};
          }
          accumulator[key][result[1]] = value;
        };
      case "bracket":
        return (key, value, accumulator) => {
          result = /(\[\])$/.exec(key);
          key = key.replace(/\[\]$/, "");
          if (!result) {
            accumulator[key] = value;
            return;
          }
          if (accumulator[key] === void 0) {
            accumulator[key] = [value];
            return;
          }
          accumulator[key] = [].concat(accumulator[key], value);
        };
      case "comma":
      case "separator":
        return (key, value, accumulator) => {
          const isArray = typeof value === "string" && value.includes(options.arrayFormatSeparator);
          const isEncodedArray = typeof value === "string" && !isArray && decode(value, options).includes(options.arrayFormatSeparator);
          value = isEncodedArray ? decode(value, options) : value;
          const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map((item) => decode(item, options)) : value === null ? value : decode(value, options);
          accumulator[key] = newValue;
        };
      default:
        return (key, value, accumulator) => {
          if (accumulator[key] === void 0) {
            accumulator[key] = value;
            return;
          }
          accumulator[key] = [].concat(accumulator[key], value);
        };
    }
  }
  function validateArrayFormatSeparator(value) {
    if (typeof value !== "string" || value.length !== 1) {
      throw new TypeError("arrayFormatSeparator must be single character string");
    }
  }
  function encode(value, options) {
    if (options.encode) {
      return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
    }
    return value;
  }
  function decode(value, options) {
    if (options.decode) {
      return decodeComponent(value);
    }
    return value;
  }
  function keysSorter(input) {
    if (Array.isArray(input)) {
      return input.sort();
    }
    if (typeof input === "object") {
      return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map((key) => input[key]);
    }
    return input;
  }
  function removeHash(input) {
    const hashStart = input.indexOf("#");
    if (hashStart !== -1) {
      input = input.slice(0, hashStart);
    }
    return input;
  }
  function getHash(url) {
    let hash = "";
    const hashStart = url.indexOf("#");
    if (hashStart !== -1) {
      hash = url.slice(hashStart);
    }
    return hash;
  }
  function extract(input) {
    input = removeHash(input);
    const queryStart = input.indexOf("?");
    if (queryStart === -1) {
      return "";
    }
    return input.slice(queryStart + 1);
  }
  function parseValue(value, options) {
    if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === "string" && value.trim() !== "")) {
      value = Number(value);
    } else if (options.parseBooleans && value !== null && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
      value = value.toLowerCase() === "true";
    }
    return value;
  }
  function parse2(query2, options) {
    options = Object.assign({
      decode: true,
      sort: true,
      arrayFormat: "none",
      arrayFormatSeparator: ",",
      parseNumbers: false,
      parseBooleans: false
    }, options);
    validateArrayFormatSeparator(options.arrayFormatSeparator);
    const formatter = parserForArrayFormat(options);
    const ret = Object.create(null);
    if (typeof query2 !== "string") {
      return ret;
    }
    query2 = query2.trim().replace(/^[?#&]/, "");
    if (!query2) {
      return ret;
    }
    for (const param of query2.split("&")) {
      if (param === "") {
        continue;
      }
      let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, " ") : param, "=");
      value = value === void 0 ? null : ["comma", "separator"].includes(options.arrayFormat) ? value : decode(value, options);
      formatter(decode(key, options), value, ret);
    }
    for (const key of Object.keys(ret)) {
      const value = ret[key];
      if (typeof value === "object" && value !== null) {
        for (const k of Object.keys(value)) {
          value[k] = parseValue(value[k], options);
        }
      } else {
        ret[key] = parseValue(value, options);
      }
    }
    if (options.sort === false) {
      return ret;
    }
    return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
      const value = ret[key];
      if (Boolean(value) && typeof value === "object" && !Array.isArray(value)) {
        result[key] = keysSorter(value);
      } else {
        result[key] = value;
      }
      return result;
    }, Object.create(null));
  }
  exports2.extract = extract;
  exports2.parse = parse2;
  exports2.stringify = (object, options) => {
    if (!object) {
      return "";
    }
    options = Object.assign({
      encode: true,
      strict: true,
      arrayFormat: "none",
      arrayFormatSeparator: ","
    }, options);
    validateArrayFormatSeparator(options.arrayFormatSeparator);
    const shouldFilter = (key) => options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === "";
    const formatter = encoderForArrayFormat(options);
    const objectCopy = {};
    for (const key of Object.keys(object)) {
      if (!shouldFilter(key)) {
        objectCopy[key] = object[key];
      }
    }
    const keys = Object.keys(objectCopy);
    if (options.sort !== false) {
      keys.sort(options.sort);
    }
    return keys.map((key) => {
      const value = object[key];
      if (value === void 0) {
        return "";
      }
      if (value === null) {
        return encode(key, options);
      }
      if (Array.isArray(value)) {
        return value.reduce(formatter(key), []).join("&");
      }
      return encode(key, options) + "=" + encode(value, options);
    }).filter((x) => x.length > 0).join("&");
  };
  exports2.parseUrl = (url, options) => {
    options = Object.assign({
      decode: true
    }, options);
    const [url_, hash] = splitOnFirst(url, "#");
    return Object.assign({
      url: url_.split("?")[0] || "",
      query: parse2(extract(url), options)
    }, options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {});
  };
  exports2.stringifyUrl = (object, options) => {
    options = Object.assign({
      encode: true,
      strict: true
    }, options);
    const url = removeHash(object.url).split("?")[0] || "";
    const queryFromUrl = exports2.extract(object.url);
    const parsedQueryFromUrl = exports2.parse(queryFromUrl, {sort: false});
    const query2 = Object.assign(parsedQueryFromUrl, object.query);
    let queryString = exports2.stringify(query2, options);
    if (queryString) {
      queryString = `?${queryString}`;
    }
    let hash = getHash(object.url);
    if (object.fragmentIdentifier) {
      hash = `#${encode(object.fragmentIdentifier, options)}`;
    }
    return `${url}${queryString}${hash}`;
  };
  exports2.pick = (input, filter, options) => {
    options = Object.assign({
      parseFragmentIdentifier: true
    }, options);
    const {url, query: query2, fragmentIdentifier} = exports2.parseUrl(input, options);
    return exports2.stringifyUrl({
      url,
      query: filterObject(query2, filter),
      fragmentIdentifier
    }, options);
  };
  exports2.exclude = (input, filter, options) => {
    const exclusionFilter = Array.isArray(filter) ? (key) => !filter.includes(key) : (key, value) => !filter(key, value);
    return exports2.pick(input, exclusionFilter, options);
  };
});

// node_modules/.pnpm/parse-path@4.0.3/node_modules/parse-path/lib/index.js
var require_lib3 = __commonJS((exports2, module2) => {
  "use strict";
  var protocols = require_lib();
  var isSsh = require_lib2();
  var qs2 = require_query_string();
  function parsePath(url) {
    url = (url || "").trim();
    var output = {
      protocols: protocols(url),
      protocol: null,
      port: null,
      resource: "",
      user: "",
      pathname: "",
      hash: "",
      search: "",
      href: url,
      query: Object.create(null)
    }, protocolIndex = url.indexOf("://"), resourceIndex = -1, splits = null, parts = null;
    if (url.startsWith(".")) {
      if (url.startsWith("./")) {
        url = url.substring(2);
      }
      output.pathname = url;
      output.protocol = "file";
    }
    var firstChar = url.charAt(1);
    if (!output.protocol) {
      output.protocol = output.protocols[0];
      if (!output.protocol) {
        if (isSsh(url)) {
          output.protocol = "ssh";
        } else if (firstChar === "/" || firstChar === "~") {
          url = url.substring(2);
          output.protocol = "file";
        } else {
          output.protocol = "file";
        }
      }
    }
    if (protocolIndex !== -1) {
      url = url.substring(protocolIndex + 3);
    }
    parts = url.split(/\/|\\/);
    if (output.protocol !== "file") {
      output.resource = parts.shift();
    } else {
      output.resource = "";
    }
    splits = output.resource.split("@");
    if (splits.length === 2) {
      output.user = splits[0];
      output.resource = splits[1];
    }
    splits = output.resource.split(":");
    if (splits.length === 2) {
      output.resource = splits[0];
      if (splits[1]) {
        output.port = Number(splits[1]);
        if (isNaN(output.port)) {
          output.port = null;
          parts.unshift(splits[1]);
        }
      } else {
        output.port = null;
      }
    }
    parts = parts.filter(Boolean);
    if (output.protocol === "file") {
      output.pathname = output.href;
    } else {
      output.pathname = output.pathname || (output.protocol !== "file" || output.href[0] === "/" ? "/" : "") + parts.join("/");
    }
    splits = output.pathname.split("#");
    if (splits.length === 2) {
      output.pathname = splits[0];
      output.hash = splits[1];
    }
    splits = output.pathname.split("?");
    if (splits.length === 2) {
      output.pathname = splits[0];
      output.search = splits[1];
    }
    output.query = qs2.parse(output.search);
    output.href = output.href.replace(/\/$/, "");
    output.pathname = output.pathname.replace(/\/$/, "");
    return output;
  }
  module2.exports = parsePath;
});

// node_modules/.pnpm/normalize-url@3.3.0/node_modules/normalize-url/index.js
var require_normalize_url = __commonJS((exports2, module2) => {
  "use strict";
  var URLParser = typeof URL === "undefined" ? require("url").URL : URL;
  var testParameter = (name, filters) => {
    return filters.some((filter) => filter instanceof RegExp ? filter.test(name) : filter === name);
  };
  module2.exports = (urlString, opts) => {
    opts = Object.assign({
      defaultProtocol: "http:",
      normalizeProtocol: true,
      forceHttp: false,
      forceHttps: false,
      stripHash: true,
      stripWWW: true,
      removeQueryParameters: [/^utm_\w+/i],
      removeTrailingSlash: true,
      removeDirectoryIndex: false,
      sortQueryParameters: true
    }, opts);
    if (Reflect.has(opts, "normalizeHttps")) {
      opts.forceHttp = opts.normalizeHttps;
    }
    if (Reflect.has(opts, "normalizeHttp")) {
      opts.forceHttps = opts.normalizeHttp;
    }
    if (Reflect.has(opts, "stripFragment")) {
      opts.stripHash = opts.stripFragment;
    }
    urlString = urlString.trim();
    const hasRelativeProtocol = urlString.startsWith("//");
    const isRelativeUrl = !hasRelativeProtocol && /^\.*\//.test(urlString);
    if (!isRelativeUrl) {
      urlString = urlString.replace(/^(?!(?:\w+:)?\/\/)|^\/\//, opts.defaultProtocol);
    }
    const urlObj = new URLParser(urlString);
    if (opts.forceHttp && opts.forceHttps) {
      throw new Error("The `forceHttp` and `forceHttps` options cannot be used together");
    }
    if (opts.forceHttp && urlObj.protocol === "https:") {
      urlObj.protocol = "http:";
    }
    if (opts.forceHttps && urlObj.protocol === "http:") {
      urlObj.protocol = "https:";
    }
    if (opts.stripHash) {
      urlObj.hash = "";
    }
    if (urlObj.pathname) {
      urlObj.pathname = urlObj.pathname.replace(/((?![https?:]).)\/{2,}/g, (_, p1) => {
        if (/^(?!\/)/g.test(p1)) {
          return `${p1}/`;
        }
        return "/";
      });
    }
    if (urlObj.pathname) {
      urlObj.pathname = decodeURI(urlObj.pathname);
    }
    if (opts.removeDirectoryIndex === true) {
      opts.removeDirectoryIndex = [/^index\.[a-z]+$/];
    }
    if (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length > 0) {
      let pathComponents = urlObj.pathname.split("/");
      const lastComponent = pathComponents[pathComponents.length - 1];
      if (testParameter(lastComponent, opts.removeDirectoryIndex)) {
        pathComponents = pathComponents.slice(0, pathComponents.length - 1);
        urlObj.pathname = pathComponents.slice(1).join("/") + "/";
      }
    }
    if (urlObj.hostname) {
      urlObj.hostname = urlObj.hostname.replace(/\.$/, "");
      if (opts.stripWWW && /^www\.([a-z\-\d]{2,63})\.([a-z\.]{2,5})$/.test(urlObj.hostname)) {
        urlObj.hostname = urlObj.hostname.replace(/^www\./, "");
      }
    }
    if (Array.isArray(opts.removeQueryParameters)) {
      for (const key of [...urlObj.searchParams.keys()]) {
        if (testParameter(key, opts.removeQueryParameters)) {
          urlObj.searchParams.delete(key);
        }
      }
    }
    if (opts.sortQueryParameters) {
      urlObj.searchParams.sort();
    }
    urlString = urlObj.toString();
    if (opts.removeTrailingSlash || urlObj.pathname === "/") {
      urlString = urlString.replace(/\/$/, "");
    }
    if (hasRelativeProtocol && !opts.normalizeProtocol) {
      urlString = urlString.replace(/^http:\/\//, "//");
    }
    return urlString;
  };
});

// node_modules/.pnpm/parse-url@5.0.2/node_modules/parse-url/lib/index.js
var require_lib4 = __commonJS((exports2, module2) => {
  "use strict";
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  var parsePath = require_lib3();
  var normalizeUrl = require_normalize_url();
  function parseUrl(url) {
    var normalize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (typeof url !== "string" || !url.trim()) {
      throw new Error("Invalid url.");
    }
    if (normalize) {
      if ((typeof normalize === "undefined" ? "undefined" : _typeof(normalize)) !== "object") {
        normalize = {
          stripFragment: false
        };
      }
      url = normalizeUrl(url, normalize);
    }
    var parsed = parsePath(url);
    return parsed;
  }
  module2.exports = parseUrl;
});

// node_modules/.pnpm/git-up@4.0.2/node_modules/git-up/lib/index.js
var require_lib5 = __commonJS((exports2, module2) => {
  "use strict";
  var parseUrl = require_lib4();
  var isSsh = require_lib2();
  function gitUp(input) {
    var output = parseUrl(input);
    output.token = "";
    var splits = output.user.split(":");
    if (splits.length === 2) {
      if (splits[1] === "x-oauth-basic") {
        output.token = splits[0];
      } else if (splits[0] === "x-token-auth") {
        output.token = splits[1];
      }
    }
    if (isSsh(output.protocols) || isSsh(input)) {
      output.protocol = "ssh";
    } else if (output.protocols.length) {
      output.protocol = output.protocols[0];
    } else {
      output.protocol = "file";
    }
    output.href = output.href.replace(/\/$/, "");
    return output;
  }
  module2.exports = gitUp;
});

// node_modules/.pnpm/git-url-parse@11.4.4/node_modules/git-url-parse/lib/index.js
var require_lib6 = __commonJS((exports2, module2) => {
  "use strict";
  var gitUp = require_lib5();
  function gitUrlParse(url) {
    if (typeof url !== "string") {
      throw new Error("The url must be a string.");
    }
    var urlInfo = gitUp(url), sourceParts = urlInfo.resource.split("."), splits = null;
    urlInfo.toString = function(type) {
      return gitUrlParse.stringify(this, type);
    };
    urlInfo.source = sourceParts.length > 2 ? sourceParts.slice(1 - sourceParts.length).join(".") : urlInfo.source = urlInfo.resource;
    urlInfo.git_suffix = /\.git$/.test(urlInfo.pathname);
    urlInfo.name = decodeURIComponent(urlInfo.pathname.replace(/^\//, "").replace(/\.git$/, ""));
    urlInfo.owner = decodeURIComponent(urlInfo.user);
    switch (urlInfo.source) {
      case "git.cloudforge.com":
        urlInfo.owner = urlInfo.user;
        urlInfo.organization = sourceParts[0];
        urlInfo.source = "cloudforge.com";
        break;
      case "visualstudio.com":
        if (urlInfo.resource === "vs-ssh.visualstudio.com") {
          splits = urlInfo.name.split("/");
          if (splits.length === 4) {
            urlInfo.organization = splits[1];
            urlInfo.owner = splits[2];
            urlInfo.name = splits[3];
            urlInfo.full_name = splits[2] + "/" + splits[3];
          }
          break;
        } else {
          splits = urlInfo.name.split("/");
          if (splits.length === 2) {
            urlInfo.owner = splits[1];
            urlInfo.name = splits[1];
            urlInfo.full_name = "_git/" + urlInfo.name;
          } else if (splits.length === 3) {
            urlInfo.name = splits[2];
            if (splits[0] === "DefaultCollection") {
              urlInfo.owner = splits[2];
              urlInfo.organization = splits[0];
              urlInfo.full_name = urlInfo.organization + "/_git/" + urlInfo.name;
            } else {
              urlInfo.owner = splits[0];
              urlInfo.full_name = urlInfo.owner + "/_git/" + urlInfo.name;
            }
          } else if (splits.length === 4) {
            urlInfo.organization = splits[0];
            urlInfo.owner = splits[1];
            urlInfo.name = splits[3];
            urlInfo.full_name = urlInfo.organization + "/" + urlInfo.owner + "/_git/" + urlInfo.name;
          }
          break;
        }
      case "dev.azure.com":
      case "azure.com":
        if (urlInfo.resource === "ssh.dev.azure.com") {
          splits = urlInfo.name.split("/");
          if (splits.length === 4) {
            urlInfo.organization = splits[1];
            urlInfo.owner = splits[2];
            urlInfo.name = splits[3];
          }
          break;
        } else {
          splits = urlInfo.name.split("/");
          if (splits.length === 5) {
            urlInfo.organization = splits[0];
            urlInfo.owner = splits[1];
            urlInfo.name = splits[4];
            urlInfo.full_name = "_git/" + urlInfo.name;
          } else if (splits.length === 3) {
            urlInfo.name = splits[2];
            if (splits[0] === "DefaultCollection") {
              urlInfo.owner = splits[2];
              urlInfo.organization = splits[0];
              urlInfo.full_name = urlInfo.organization + "/_git/" + urlInfo.name;
            } else {
              urlInfo.owner = splits[0];
              urlInfo.full_name = urlInfo.owner + "/_git/" + urlInfo.name;
            }
          } else if (splits.length === 4) {
            urlInfo.organization = splits[0];
            urlInfo.owner = splits[1];
            urlInfo.name = splits[3];
            urlInfo.full_name = urlInfo.organization + "/" + urlInfo.owner + "/_git/" + urlInfo.name;
          }
          if (urlInfo.query && urlInfo.query["path"]) {
            urlInfo.filepath = urlInfo.query["path"].replace(/^\/+/g, "");
          }
          if (urlInfo.query && urlInfo.query["version"]) {
            urlInfo.ref = urlInfo.query["version"].replace(/^GB/, "");
          }
          break;
        }
      default:
        splits = urlInfo.name.split("/");
        var nameIndex = splits.length - 1;
        if (splits.length >= 2) {
          var dashIndex = splits.indexOf("-", 2);
          var blobIndex = splits.indexOf("blob", 2);
          var treeIndex = splits.indexOf("tree", 2);
          var commitIndex = splits.indexOf("commit", 2);
          var srcIndex = splits.indexOf("src", 2);
          var rawIndex = splits.indexOf("raw", 2);
          nameIndex = dashIndex > 0 ? dashIndex - 1 : blobIndex > 0 ? blobIndex - 1 : treeIndex > 0 ? treeIndex - 1 : commitIndex > 0 ? commitIndex - 1 : srcIndex > 0 ? srcIndex - 1 : rawIndex > 0 ? rawIndex - 1 : nameIndex;
          urlInfo.owner = splits.slice(0, nameIndex).join("/");
          urlInfo.name = splits[nameIndex];
          if (commitIndex) {
            urlInfo.commit = splits[nameIndex + 2];
          }
        }
        urlInfo.ref = "";
        urlInfo.filepathtype = "";
        urlInfo.filepath = "";
        var offsetNameIndex = splits.length > nameIndex && splits[nameIndex + 1] === "-" ? nameIndex + 1 : nameIndex;
        if (splits.length > offsetNameIndex + 2 && ["raw", "src", "blob", "tree"].indexOf(splits[offsetNameIndex + 1]) >= 0) {
          urlInfo.filepathtype = splits[offsetNameIndex + 1];
          urlInfo.ref = splits[offsetNameIndex + 2];
          if (splits.length > offsetNameIndex + 3) {
            urlInfo.filepath = splits.slice(offsetNameIndex + 3).join("/");
          }
        }
        urlInfo.organization = urlInfo.owner;
        break;
    }
    if (!urlInfo.full_name) {
      urlInfo.full_name = urlInfo.owner;
      if (urlInfo.name) {
        urlInfo.full_name && (urlInfo.full_name += "/");
        urlInfo.full_name += urlInfo.name;
      }
    }
    if (urlInfo.owner.startsWith("scm/")) {
      urlInfo.source = "bitbucket-server";
      urlInfo.owner = urlInfo.owner.replace("scm/", "");
      urlInfo.organization = urlInfo.owner;
      urlInfo.full_name = urlInfo.owner + "/" + urlInfo.name;
    }
    var bitbucket = /(projects|users)\/(.*?)\/repos\/(.*?)\/(raw|browse)(?:\/(?:$|(.+?)))?$/;
    var matches = bitbucket.exec(urlInfo.pathname);
    if (matches != null) {
      urlInfo.source = "bitbucket-server";
      if (matches[1] === "users") {
        urlInfo.owner = "~" + matches[2];
      } else {
        urlInfo.owner = matches[2];
      }
      urlInfo.organization = urlInfo.owner;
      urlInfo.name = matches[3];
      urlInfo.filepathtype = matches[4];
      urlInfo.filepath = matches[5];
      urlInfo.full_name = urlInfo.owner + "/" + urlInfo.name;
      if (urlInfo.query.at) {
        urlInfo.ref = urlInfo.query.at;
      } else {
        urlInfo.ref = "";
      }
    }
    return urlInfo;
  }
  gitUrlParse.stringify = function(obj, type) {
    type = type || (obj.protocols && obj.protocols.length ? obj.protocols.join("+") : obj.protocol);
    var port = obj.port ? ":" + obj.port : "";
    var user = obj.user || "git";
    var maybeGitSuffix = obj.git_suffix ? ".git" : "";
    switch (type) {
      case "ssh":
        if (port)
          return "ssh://" + user + "@" + obj.resource + port + "/" + obj.full_name + maybeGitSuffix;
        else
          return user + "@" + obj.resource + ":" + obj.full_name + maybeGitSuffix;
      case "git+ssh":
      case "ssh+git":
      case "ftp":
      case "ftps":
        return type + "://" + user + "@" + obj.resource + port + "/" + obj.full_name + maybeGitSuffix;
      case "http":
      case "https":
        var auth = obj.token ? buildToken(obj) : obj.user && (obj.protocols.includes("http") || obj.protocols.includes("https")) ? obj.user + "@" : "";
        return type + "://" + auth + obj.resource + port + "/" + buildPath(obj) + maybeGitSuffix;
      default:
        return obj.href;
    }
  };
  /*!
   * buildToken
   * Builds OAuth token prefix (helper function)
   *
   * @name buildToken
   * @function
   * @param {GitUrl} obj The parsed Git url object.
   * @return {String} token prefix
   */
  function buildToken(obj) {
    switch (obj.source) {
      case "bitbucket.org":
        return "x-token-auth:" + obj.token + "@";
      default:
        return obj.token + "@";
    }
  }
  function buildPath(obj) {
    switch (obj.source) {
      case "bitbucket-server":
        return "scm/" + obj.full_name;
      default:
        return "" + obj.full_name;
    }
  }
  module2.exports = gitUrlParse;
});

// node_modules/.pnpm/is-plain-obj@1.1.0/node_modules/is-plain-obj/index.js
var require_is_plain_obj = __commonJS((exports2, module2) => {
  "use strict";
  var toString = Object.prototype.toString;
  module2.exports = function(x) {
    var prototype;
    return toString.call(x) === "[object Object]" && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));
  };
});

// node_modules/.pnpm/arrify@1.0.1/node_modules/arrify/index.js
var require_arrify = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function(val) {
    if (val === null || val === void 0) {
      return [];
    }
    return Array.isArray(val) ? val : [val];
  };
});

// node_modules/.pnpm/kind-of@6.0.3/node_modules/kind-of/index.js
var require_kind_of = __commonJS((exports2, module2) => {
  var toString = Object.prototype.toString;
  module2.exports = function kindOf(val) {
    if (val === void 0)
      return "undefined";
    if (val === null)
      return "null";
    var type = typeof val;
    if (type === "boolean")
      return "boolean";
    if (type === "string")
      return "string";
    if (type === "number")
      return "number";
    if (type === "symbol")
      return "symbol";
    if (type === "function") {
      return isGeneratorFn(val) ? "generatorfunction" : "function";
    }
    if (isArray(val))
      return "array";
    if (isBuffer(val))
      return "buffer";
    if (isArguments(val))
      return "arguments";
    if (isDate(val))
      return "date";
    if (isError(val))
      return "error";
    if (isRegexp(val))
      return "regexp";
    switch (ctorName(val)) {
      case "Symbol":
        return "symbol";
      case "Promise":
        return "promise";
      case "WeakMap":
        return "weakmap";
      case "WeakSet":
        return "weakset";
      case "Map":
        return "map";
      case "Set":
        return "set";
      case "Int8Array":
        return "int8array";
      case "Uint8Array":
        return "uint8array";
      case "Uint8ClampedArray":
        return "uint8clampedarray";
      case "Int16Array":
        return "int16array";
      case "Uint16Array":
        return "uint16array";
      case "Int32Array":
        return "int32array";
      case "Uint32Array":
        return "uint32array";
      case "Float32Array":
        return "float32array";
      case "Float64Array":
        return "float64array";
    }
    if (isGeneratorObj(val)) {
      return "generator";
    }
    type = toString.call(val);
    switch (type) {
      case "[object Object]":
        return "object";
      case "[object Map Iterator]":
        return "mapiterator";
      case "[object Set Iterator]":
        return "setiterator";
      case "[object String Iterator]":
        return "stringiterator";
      case "[object Array Iterator]":
        return "arrayiterator";
    }
    return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
  };
  function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
  }
  function isArray(val) {
    if (Array.isArray)
      return Array.isArray(val);
    return val instanceof Array;
  }
  function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
  }
  function isDate(val) {
    if (val instanceof Date)
      return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
  }
  function isRegexp(val) {
    if (val instanceof RegExp)
      return true;
    return typeof val.flags === "string" && typeof val.ignoreCase === "boolean" && typeof val.multiline === "boolean" && typeof val.global === "boolean";
  }
  function isGeneratorFn(name, val) {
    return ctorName(name) === "GeneratorFunction";
  }
  function isGeneratorObj(val) {
    return typeof val.throw === "function" && typeof val.return === "function" && typeof val.next === "function";
  }
  function isArguments(val) {
    try {
      if (typeof val.length === "number" && typeof val.callee === "function") {
        return true;
      }
    } catch (err) {
      if (err.message.indexOf("callee") !== -1) {
        return true;
      }
    }
    return false;
  }
  function isBuffer(val) {
    if (val.constructor && typeof val.constructor.isBuffer === "function") {
      return val.constructor.isBuffer(val);
    }
    return false;
  }
});

// node_modules/.pnpm/minimist-options@4.1.0/node_modules/minimist-options/index.js
var require_minimist_options = __commonJS((exports2, module2) => {
  "use strict";
  var isPlainObject = require_is_plain_obj();
  var arrify = require_arrify();
  var kindOf = require_kind_of();
  var push = (obj, prop, value) => {
    if (!obj[prop]) {
      obj[prop] = [];
    }
    obj[prop].push(value);
  };
  var insert = (obj, prop, key, value) => {
    if (!obj[prop]) {
      obj[prop] = {};
    }
    obj[prop][key] = value;
  };
  var prettyPrint = (output) => {
    return Array.isArray(output) ? `[${output.map(prettyPrint).join(", ")}]` : kindOf(output) === "string" ? JSON.stringify(output) : output;
  };
  var resolveType = (value) => {
    if (Array.isArray(value) && value.length > 0) {
      const [element] = value;
      return `${kindOf(element)}-array`;
    }
    return kindOf(value);
  };
  var normalizeExpectedType = (type, defaultValue) => {
    const inferredType = type === "array" ? "string-array" : type;
    if (arrayTypes.includes(inferredType) && Array.isArray(defaultValue) && defaultValue.length === 0) {
      return "array";
    }
    return inferredType;
  };
  var passthroughOptions = ["stopEarly", "unknown", "--"];
  var primitiveTypes = ["string", "boolean", "number"];
  var arrayTypes = primitiveTypes.map((t) => `${t}-array`);
  var availableTypes = [...primitiveTypes, "array", ...arrayTypes];
  var buildOptions = (options) => {
    options = options || {};
    const result = {};
    passthroughOptions.forEach((key) => {
      if (options[key]) {
        result[key] = options[key];
      }
    });
    Object.keys(options).forEach((key) => {
      let value = options[key];
      if (key === "arguments") {
        key = "_";
      }
      if (typeof value === "string") {
        value = {type: value};
      }
      if (isPlainObject(value)) {
        const props = value;
        const {type} = props;
        if (type) {
          if (!availableTypes.includes(type)) {
            throw new TypeError(`Expected type of "${key}" to be one of ${prettyPrint(availableTypes)}, got ${prettyPrint(type)}`);
          }
          if (arrayTypes.includes(type)) {
            const [elementType] = type.split("-");
            push(result, "array", {key, [elementType]: true});
          } else {
            push(result, type, key);
          }
        }
        if ({}.hasOwnProperty.call(props, "default")) {
          const {default: defaultValue} = props;
          const defaultType = resolveType(defaultValue);
          const expectedType = normalizeExpectedType(type, defaultValue);
          if (expectedType && expectedType !== defaultType) {
            throw new TypeError(`Expected "${key}" default value to be of type "${expectedType}", got ${prettyPrint(defaultType)}`);
          }
          insert(result, "default", key, defaultValue);
        }
        arrify(props.alias).forEach((alias) => {
          insert(result, "alias", alias, key);
        });
      }
    });
    return result;
  };
  module2.exports = buildOptions;
  module2.exports.default = buildOptions;
});

// node_modules/.pnpm/yargs-parser@20.2.4/node_modules/yargs-parser/build/index.cjs
var require_build = __commonJS((exports2, module2) => {
  "use strict";
  var util = require("util");
  var fs2 = require("fs");
  var path2 = require("path");
  function camelCase(str) {
    str = str.toLocaleLowerCase();
    if (str.indexOf("-") === -1 && str.indexOf("_") === -1) {
      return str;
    } else {
      let camelcase = "";
      let nextChrUpper = false;
      const leadingHyphens = str.match(/^-+/);
      for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {
        let chr = str.charAt(i);
        if (nextChrUpper) {
          nextChrUpper = false;
          chr = chr.toLocaleUpperCase();
        }
        if (i !== 0 && (chr === "-" || chr === "_")) {
          nextChrUpper = true;
          continue;
        } else if (chr !== "-" && chr !== "_") {
          camelcase += chr;
        }
      }
      return camelcase;
    }
  }
  function decamelize(str, joinString) {
    const lowercase = str.toLocaleLowerCase();
    joinString = joinString || "-";
    let notCamelcase = "";
    for (let i = 0; i < str.length; i++) {
      const chrLower = lowercase.charAt(i);
      const chrString = str.charAt(i);
      if (chrLower !== chrString && i > 0) {
        notCamelcase += `${joinString}${lowercase.charAt(i)}`;
      } else {
        notCamelcase += chrString;
      }
    }
    return notCamelcase;
  }
  function looksLikeNumber(x) {
    if (x === null || x === void 0)
      return false;
    if (typeof x === "number")
      return true;
    if (/^0x[0-9a-f]+$/i.test(x))
      return true;
    if (x.length > 1 && x[0] === "0")
      return false;
    return /^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
  }
  function tokenizeArgString(argString) {
    if (Array.isArray(argString)) {
      return argString.map((e) => typeof e !== "string" ? e + "" : e);
    }
    argString = argString.trim();
    let i = 0;
    let prevC = null;
    let c = null;
    let opening = null;
    const args = [];
    for (let ii = 0; ii < argString.length; ii++) {
      prevC = c;
      c = argString.charAt(ii);
      if (c === " " && !opening) {
        if (!(prevC === " ")) {
          i++;
        }
        continue;
      }
      if (c === opening) {
        opening = null;
      } else if ((c === "'" || c === '"') && !opening) {
        opening = c;
      }
      if (!args[i])
        args[i] = "";
      args[i] += c;
    }
    return args;
  }
  var mixin;
  var YargsParser = class {
    constructor(_mixin) {
      mixin = _mixin;
    }
    parse(argsInput, options) {
      const opts = Object.assign({
        alias: void 0,
        array: void 0,
        boolean: void 0,
        config: void 0,
        configObjects: void 0,
        configuration: void 0,
        coerce: void 0,
        count: void 0,
        default: void 0,
        envPrefix: void 0,
        narg: void 0,
        normalize: void 0,
        string: void 0,
        number: void 0,
        __: void 0,
        key: void 0
      }, options);
      const args = tokenizeArgString(argsInput);
      const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));
      const configuration = Object.assign({
        "boolean-negation": true,
        "camel-case-expansion": true,
        "combine-arrays": false,
        "dot-notation": true,
        "duplicate-arguments-array": true,
        "flatten-duplicate-arrays": true,
        "greedy-arrays": true,
        "halt-at-non-option": false,
        "nargs-eats-options": false,
        "negation-prefix": "no-",
        "parse-numbers": true,
        "parse-positional-numbers": true,
        "populate--": false,
        "set-placeholder-key": false,
        "short-option-groups": true,
        "strip-aliased": false,
        "strip-dashed": false,
        "unknown-options-as-args": false
      }, opts.configuration);
      const defaults = Object.assign(Object.create(null), opts.default);
      const configObjects = opts.configObjects || [];
      const envPrefix = opts.envPrefix;
      const notFlagsOption = configuration["populate--"];
      const notFlagsArgv = notFlagsOption ? "--" : "_";
      const newAliases = Object.create(null);
      const defaulted = Object.create(null);
      const __ = opts.__ || mixin.format;
      const flags = {
        aliases: Object.create(null),
        arrays: Object.create(null),
        bools: Object.create(null),
        strings: Object.create(null),
        numbers: Object.create(null),
        counts: Object.create(null),
        normalize: Object.create(null),
        configs: Object.create(null),
        nargs: Object.create(null),
        coercions: Object.create(null),
        keys: []
      };
      const negative = /^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/;
      const negatedBoolean = new RegExp("^--" + configuration["negation-prefix"] + "(.+)");
      [].concat(opts.array || []).filter(Boolean).forEach(function(opt) {
        const key = typeof opt === "object" ? opt.key : opt;
        const assignment = Object.keys(opt).map(function(key2) {
          const arrayFlagKeys = {
            boolean: "bools",
            string: "strings",
            number: "numbers"
          };
          return arrayFlagKeys[key2];
        }).filter(Boolean).pop();
        if (assignment) {
          flags[assignment][key] = true;
        }
        flags.arrays[key] = true;
        flags.keys.push(key);
      });
      [].concat(opts.boolean || []).filter(Boolean).forEach(function(key) {
        flags.bools[key] = true;
        flags.keys.push(key);
      });
      [].concat(opts.string || []).filter(Boolean).forEach(function(key) {
        flags.strings[key] = true;
        flags.keys.push(key);
      });
      [].concat(opts.number || []).filter(Boolean).forEach(function(key) {
        flags.numbers[key] = true;
        flags.keys.push(key);
      });
      [].concat(opts.count || []).filter(Boolean).forEach(function(key) {
        flags.counts[key] = true;
        flags.keys.push(key);
      });
      [].concat(opts.normalize || []).filter(Boolean).forEach(function(key) {
        flags.normalize[key] = true;
        flags.keys.push(key);
      });
      if (typeof opts.narg === "object") {
        Object.entries(opts.narg).forEach(([key, value]) => {
          if (typeof value === "number") {
            flags.nargs[key] = value;
            flags.keys.push(key);
          }
        });
      }
      if (typeof opts.coerce === "object") {
        Object.entries(opts.coerce).forEach(([key, value]) => {
          if (typeof value === "function") {
            flags.coercions[key] = value;
            flags.keys.push(key);
          }
        });
      }
      if (typeof opts.config !== "undefined") {
        if (Array.isArray(opts.config) || typeof opts.config === "string") {
          [].concat(opts.config).filter(Boolean).forEach(function(key) {
            flags.configs[key] = true;
          });
        } else if (typeof opts.config === "object") {
          Object.entries(opts.config).forEach(([key, value]) => {
            if (typeof value === "boolean" || typeof value === "function") {
              flags.configs[key] = value;
            }
          });
        }
      }
      extendAliases(opts.key, aliases, opts.default, flags.arrays);
      Object.keys(defaults).forEach(function(key) {
        (flags.aliases[key] || []).forEach(function(alias) {
          defaults[alias] = defaults[key];
        });
      });
      let error = null;
      checkConfiguration();
      let notFlags = [];
      const argv = Object.assign(Object.create(null), {_: []});
      const argvReturn = {};
      for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        let broken;
        let key;
        let letters;
        let m;
        let next;
        let value;
        if (arg !== "--" && isUnknownOptionAsArg(arg)) {
          pushPositional(arg);
        } else if (arg.match(/^--.+=/) || !configuration["short-option-groups"] && arg.match(/^-.+=/)) {
          m = arg.match(/^--?([^=]+)=([\s\S]*)$/);
          if (m !== null && Array.isArray(m) && m.length >= 3) {
            if (checkAllAliases(m[1], flags.arrays)) {
              i = eatArray(i, m[1], args, m[2]);
            } else if (checkAllAliases(m[1], flags.nargs) !== false) {
              i = eatNargs(i, m[1], args, m[2]);
            } else {
              setArg(m[1], m[2]);
            }
          }
        } else if (arg.match(negatedBoolean) && configuration["boolean-negation"]) {
          m = arg.match(negatedBoolean);
          if (m !== null && Array.isArray(m) && m.length >= 2) {
            key = m[1];
            setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);
          }
        } else if (arg.match(/^--.+/) || !configuration["short-option-groups"] && arg.match(/^-[^-]+/)) {
          m = arg.match(/^--?(.+)/);
          if (m !== null && Array.isArray(m) && m.length >= 2) {
            key = m[1];
            if (checkAllAliases(key, flags.arrays)) {
              i = eatArray(i, key, args);
            } else if (checkAllAliases(key, flags.nargs) !== false) {
              i = eatNargs(i, key, args);
            } else {
              next = args[i + 1];
              if (next !== void 0 && (!next.match(/^-/) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
                setArg(key, next);
                i++;
              } else if (/^(true|false)$/.test(next)) {
                setArg(key, next);
                i++;
              } else {
                setArg(key, defaultValue(key));
              }
            }
          }
        } else if (arg.match(/^-.\..+=/)) {
          m = arg.match(/^-([^=]+)=([\s\S]*)$/);
          if (m !== null && Array.isArray(m) && m.length >= 3) {
            setArg(m[1], m[2]);
          }
        } else if (arg.match(/^-.\..+/) && !arg.match(negative)) {
          next = args[i + 1];
          m = arg.match(/^-(.\..+)/);
          if (m !== null && Array.isArray(m) && m.length >= 2) {
            key = m[1];
            if (next !== void 0 && !next.match(/^-/) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
              setArg(key, next);
              i++;
            } else {
              setArg(key, defaultValue(key));
            }
          }
        } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {
          letters = arg.slice(1, -1).split("");
          broken = false;
          for (let j = 0; j < letters.length; j++) {
            next = arg.slice(j + 2);
            if (letters[j + 1] && letters[j + 1] === "=") {
              value = arg.slice(j + 3);
              key = letters[j];
              if (checkAllAliases(key, flags.arrays)) {
                i = eatArray(i, key, args, value);
              } else if (checkAllAliases(key, flags.nargs) !== false) {
                i = eatNargs(i, key, args, value);
              } else {
                setArg(key, value);
              }
              broken = true;
              break;
            }
            if (next === "-") {
              setArg(letters[j], next);
              continue;
            }
            if (/[A-Za-z]/.test(letters[j]) && /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next) && checkAllAliases(next, flags.bools) === false) {
              setArg(letters[j], next);
              broken = true;
              break;
            }
            if (letters[j + 1] && letters[j + 1].match(/\W/)) {
              setArg(letters[j], next);
              broken = true;
              break;
            } else {
              setArg(letters[j], defaultValue(letters[j]));
            }
          }
          key = arg.slice(-1)[0];
          if (!broken && key !== "-") {
            if (checkAllAliases(key, flags.arrays)) {
              i = eatArray(i, key, args);
            } else if (checkAllAliases(key, flags.nargs) !== false) {
              i = eatNargs(i, key, args);
            } else {
              next = args[i + 1];
              if (next !== void 0 && (!/^(-|--)[^-]/.test(next) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
                setArg(key, next);
                i++;
              } else if (/^(true|false)$/.test(next)) {
                setArg(key, next);
                i++;
              } else {
                setArg(key, defaultValue(key));
              }
            }
          }
        } else if (arg.match(/^-[0-9]$/) && arg.match(negative) && checkAllAliases(arg.slice(1), flags.bools)) {
          key = arg.slice(1);
          setArg(key, defaultValue(key));
        } else if (arg === "--") {
          notFlags = args.slice(i + 1);
          break;
        } else if (configuration["halt-at-non-option"]) {
          notFlags = args.slice(i);
          break;
        } else {
          pushPositional(arg);
        }
      }
      applyEnvVars(argv, true);
      applyEnvVars(argv, false);
      setConfig(argv);
      setConfigObjects();
      applyDefaultsAndAliases(argv, flags.aliases, defaults, true);
      applyCoercions(argv);
      if (configuration["set-placeholder-key"])
        setPlaceholderKeys(argv);
      Object.keys(flags.counts).forEach(function(key) {
        if (!hasKey(argv, key.split(".")))
          setArg(key, 0);
      });
      if (notFlagsOption && notFlags.length)
        argv[notFlagsArgv] = [];
      notFlags.forEach(function(key) {
        argv[notFlagsArgv].push(key);
      });
      if (configuration["camel-case-expansion"] && configuration["strip-dashed"]) {
        Object.keys(argv).filter((key) => key !== "--" && key.includes("-")).forEach((key) => {
          delete argv[key];
        });
      }
      if (configuration["strip-aliased"]) {
        [].concat(...Object.keys(aliases).map((k) => aliases[k])).forEach((alias) => {
          if (configuration["camel-case-expansion"] && alias.includes("-")) {
            delete argv[alias.split(".").map((prop) => camelCase(prop)).join(".")];
          }
          delete argv[alias];
        });
      }
      function pushPositional(arg) {
        const maybeCoercedNumber = maybeCoerceNumber("_", arg);
        if (typeof maybeCoercedNumber === "string" || typeof maybeCoercedNumber === "number") {
          argv._.push(maybeCoercedNumber);
        }
      }
      function eatNargs(i, key, args2, argAfterEqualSign) {
        let ii;
        let toEat = checkAllAliases(key, flags.nargs);
        toEat = typeof toEat !== "number" || isNaN(toEat) ? 1 : toEat;
        if (toEat === 0) {
          if (!isUndefined(argAfterEqualSign)) {
            error = Error(__("Argument unexpected for: %s", key));
          }
          setArg(key, defaultValue(key));
          return i;
        }
        let available = isUndefined(argAfterEqualSign) ? 0 : 1;
        if (configuration["nargs-eats-options"]) {
          if (args2.length - (i + 1) + available < toEat) {
            error = Error(__("Not enough arguments following: %s", key));
          }
          available = toEat;
        } else {
          for (ii = i + 1; ii < args2.length; ii++) {
            if (!args2[ii].match(/^-[^0-9]/) || args2[ii].match(negative) || isUnknownOptionAsArg(args2[ii]))
              available++;
            else
              break;
          }
          if (available < toEat)
            error = Error(__("Not enough arguments following: %s", key));
        }
        let consumed = Math.min(available, toEat);
        if (!isUndefined(argAfterEqualSign) && consumed > 0) {
          setArg(key, argAfterEqualSign);
          consumed--;
        }
        for (ii = i + 1; ii < consumed + i + 1; ii++) {
          setArg(key, args2[ii]);
        }
        return i + consumed;
      }
      function eatArray(i, key, args2, argAfterEqualSign) {
        let argsToSet = [];
        let next = argAfterEqualSign || args2[i + 1];
        const nargsCount = checkAllAliases(key, flags.nargs);
        if (checkAllAliases(key, flags.bools) && !/^(true|false)$/.test(next)) {
          argsToSet.push(true);
        } else if (isUndefined(next) || isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) {
          if (defaults[key] !== void 0) {
            const defVal = defaults[key];
            argsToSet = Array.isArray(defVal) ? defVal : [defVal];
          }
        } else {
          if (!isUndefined(argAfterEqualSign)) {
            argsToSet.push(processValue(key, argAfterEqualSign));
          }
          for (let ii = i + 1; ii < args2.length; ii++) {
            if (!configuration["greedy-arrays"] && argsToSet.length > 0 || nargsCount && typeof nargsCount === "number" && argsToSet.length >= nargsCount)
              break;
            next = args2[ii];
            if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))
              break;
            i = ii;
            argsToSet.push(processValue(key, next));
          }
        }
        if (typeof nargsCount === "number" && (nargsCount && argsToSet.length < nargsCount || isNaN(nargsCount) && argsToSet.length === 0)) {
          error = Error(__("Not enough arguments following: %s", key));
        }
        setArg(key, argsToSet);
        return i;
      }
      function setArg(key, val) {
        if (/-/.test(key) && configuration["camel-case-expansion"]) {
          const alias = key.split(".").map(function(prop) {
            return camelCase(prop);
          }).join(".");
          addNewAlias(key, alias);
        }
        const value = processValue(key, val);
        const splitKey = key.split(".");
        setKey(argv, splitKey, value);
        if (flags.aliases[key]) {
          flags.aliases[key].forEach(function(x) {
            const keyProperties = x.split(".");
            setKey(argv, keyProperties, value);
          });
        }
        if (splitKey.length > 1 && configuration["dot-notation"]) {
          (flags.aliases[splitKey[0]] || []).forEach(function(x) {
            let keyProperties = x.split(".");
            const a = [].concat(splitKey);
            a.shift();
            keyProperties = keyProperties.concat(a);
            if (!(flags.aliases[key] || []).includes(keyProperties.join("."))) {
              setKey(argv, keyProperties, value);
            }
          });
        }
        if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {
          const keys = [key].concat(flags.aliases[key] || []);
          keys.forEach(function(key2) {
            Object.defineProperty(argvReturn, key2, {
              enumerable: true,
              get() {
                return val;
              },
              set(value2) {
                val = typeof value2 === "string" ? mixin.normalize(value2) : value2;
              }
            });
          });
        }
      }
      function addNewAlias(key, alias) {
        if (!(flags.aliases[key] && flags.aliases[key].length)) {
          flags.aliases[key] = [alias];
          newAliases[alias] = true;
        }
        if (!(flags.aliases[alias] && flags.aliases[alias].length)) {
          addNewAlias(alias, key);
        }
      }
      function processValue(key, val) {
        if (typeof val === "string" && (val[0] === "'" || val[0] === '"') && val[val.length - 1] === val[0]) {
          val = val.substring(1, val.length - 1);
        }
        if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {
          if (typeof val === "string")
            val = val === "true";
        }
        let value = Array.isArray(val) ? val.map(function(v) {
          return maybeCoerceNumber(key, v);
        }) : maybeCoerceNumber(key, val);
        if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === "boolean")) {
          value = increment();
        }
        if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {
          if (Array.isArray(val))
            value = val.map((val2) => {
              return mixin.normalize(val2);
            });
          else
            value = mixin.normalize(val);
        }
        return value;
      }
      function maybeCoerceNumber(key, value) {
        if (!configuration["parse-positional-numbers"] && key === "_")
          return value;
        if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {
          const shouldCoerceNumber = looksLikeNumber(value) && configuration["parse-numbers"] && Number.isSafeInteger(Math.floor(parseFloat(`${value}`)));
          if (shouldCoerceNumber || !isUndefined(value) && checkAllAliases(key, flags.numbers)) {
            value = Number(value);
          }
        }
        return value;
      }
      function setConfig(argv2) {
        const configLookup = Object.create(null);
        applyDefaultsAndAliases(configLookup, flags.aliases, defaults);
        Object.keys(flags.configs).forEach(function(configKey) {
          const configPath = argv2[configKey] || configLookup[configKey];
          if (configPath) {
            try {
              let config = null;
              const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);
              const resolveConfig = flags.configs[configKey];
              if (typeof resolveConfig === "function") {
                try {
                  config = resolveConfig(resolvedConfigPath);
                } catch (e) {
                  config = e;
                }
                if (config instanceof Error) {
                  error = config;
                  return;
                }
              } else {
                config = mixin.require(resolvedConfigPath);
              }
              setConfigObject(config);
            } catch (ex) {
              if (ex.name === "PermissionDenied")
                error = ex;
              else if (argv2[configKey])
                error = Error(__("Invalid JSON config file: %s", configPath));
            }
          }
        });
      }
      function setConfigObject(config, prev) {
        Object.keys(config).forEach(function(key) {
          const value = config[key];
          const fullKey = prev ? prev + "." + key : key;
          if (typeof value === "object" && value !== null && !Array.isArray(value) && configuration["dot-notation"]) {
            setConfigObject(value, fullKey);
          } else {
            if (!hasKey(argv, fullKey.split(".")) || checkAllAliases(fullKey, flags.arrays) && configuration["combine-arrays"]) {
              setArg(fullKey, value);
            }
          }
        });
      }
      function setConfigObjects() {
        if (typeof configObjects !== "undefined") {
          configObjects.forEach(function(configObject) {
            setConfigObject(configObject);
          });
        }
      }
      function applyEnvVars(argv2, configOnly) {
        if (typeof envPrefix === "undefined")
          return;
        const prefix = typeof envPrefix === "string" ? envPrefix : "";
        const env2 = mixin.env();
        Object.keys(env2).forEach(function(envVar) {
          if (prefix === "" || envVar.lastIndexOf(prefix, 0) === 0) {
            const keys = envVar.split("__").map(function(key, i) {
              if (i === 0) {
                key = key.substring(prefix.length);
              }
              return camelCase(key);
            });
            if ((configOnly && flags.configs[keys.join(".")] || !configOnly) && !hasKey(argv2, keys)) {
              setArg(keys.join("."), env2[envVar]);
            }
          }
        });
      }
      function applyCoercions(argv2) {
        let coerce;
        const applied = new Set();
        Object.keys(argv2).forEach(function(key) {
          if (!applied.has(key)) {
            coerce = checkAllAliases(key, flags.coercions);
            if (typeof coerce === "function") {
              try {
                const value = maybeCoerceNumber(key, coerce(argv2[key]));
                [].concat(flags.aliases[key] || [], key).forEach((ali) => {
                  applied.add(ali);
                  argv2[ali] = value;
                });
              } catch (err) {
                error = err;
              }
            }
          }
        });
      }
      function setPlaceholderKeys(argv2) {
        flags.keys.forEach((key) => {
          if (~key.indexOf("."))
            return;
          if (typeof argv2[key] === "undefined")
            argv2[key] = void 0;
        });
        return argv2;
      }
      function applyDefaultsAndAliases(obj, aliases2, defaults2, canLog = false) {
        Object.keys(defaults2).forEach(function(key) {
          if (!hasKey(obj, key.split("."))) {
            setKey(obj, key.split("."), defaults2[key]);
            if (canLog)
              defaulted[key] = true;
            (aliases2[key] || []).forEach(function(x) {
              if (hasKey(obj, x.split(".")))
                return;
              setKey(obj, x.split("."), defaults2[key]);
            });
          }
        });
      }
      function hasKey(obj, keys) {
        let o = obj;
        if (!configuration["dot-notation"])
          keys = [keys.join(".")];
        keys.slice(0, -1).forEach(function(key2) {
          o = o[key2] || {};
        });
        const key = keys[keys.length - 1];
        if (typeof o !== "object")
          return false;
        else
          return key in o;
      }
      function setKey(obj, keys, value) {
        let o = obj;
        if (!configuration["dot-notation"])
          keys = [keys.join(".")];
        keys.slice(0, -1).forEach(function(key2) {
          key2 = sanitizeKey(key2);
          if (typeof o === "object" && o[key2] === void 0) {
            o[key2] = {};
          }
          if (typeof o[key2] !== "object" || Array.isArray(o[key2])) {
            if (Array.isArray(o[key2])) {
              o[key2].push({});
            } else {
              o[key2] = [o[key2], {}];
            }
            o = o[key2][o[key2].length - 1];
          } else {
            o = o[key2];
          }
        });
        const key = sanitizeKey(keys[keys.length - 1]);
        const isTypeArray = checkAllAliases(keys.join("."), flags.arrays);
        const isValueArray = Array.isArray(value);
        let duplicate = configuration["duplicate-arguments-array"];
        if (!duplicate && checkAllAliases(key, flags.nargs)) {
          duplicate = true;
          if (!isUndefined(o[key]) && flags.nargs[key] === 1 || Array.isArray(o[key]) && o[key].length === flags.nargs[key]) {
            o[key] = void 0;
          }
        }
        if (value === increment()) {
          o[key] = increment(o[key]);
        } else if (Array.isArray(o[key])) {
          if (duplicate && isTypeArray && isValueArray) {
            o[key] = configuration["flatten-duplicate-arrays"] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value]);
          } else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {
            o[key] = value;
          } else {
            o[key] = o[key].concat([value]);
          }
        } else if (o[key] === void 0 && isTypeArray) {
          o[key] = isValueArray ? value : [value];
        } else if (duplicate && !(o[key] === void 0 || checkAllAliases(key, flags.counts) || checkAllAliases(key, flags.bools))) {
          o[key] = [o[key], value];
        } else {
          o[key] = value;
        }
      }
      function extendAliases(...args2) {
        args2.forEach(function(obj) {
          Object.keys(obj || {}).forEach(function(key) {
            if (flags.aliases[key])
              return;
            flags.aliases[key] = [].concat(aliases[key] || []);
            flags.aliases[key].concat(key).forEach(function(x) {
              if (/-/.test(x) && configuration["camel-case-expansion"]) {
                const c = camelCase(x);
                if (c !== key && flags.aliases[key].indexOf(c) === -1) {
                  flags.aliases[key].push(c);
                  newAliases[c] = true;
                }
              }
            });
            flags.aliases[key].concat(key).forEach(function(x) {
              if (x.length > 1 && /[A-Z]/.test(x) && configuration["camel-case-expansion"]) {
                const c = decamelize(x, "-");
                if (c !== key && flags.aliases[key].indexOf(c) === -1) {
                  flags.aliases[key].push(c);
                  newAliases[c] = true;
                }
              }
            });
            flags.aliases[key].forEach(function(x) {
              flags.aliases[x] = [key].concat(flags.aliases[key].filter(function(y) {
                return x !== y;
              }));
            });
          });
        });
      }
      function checkAllAliases(key, flag) {
        const toCheck = [].concat(flags.aliases[key] || [], key);
        const keys = Object.keys(flag);
        const setAlias = toCheck.find((key2) => keys.includes(key2));
        return setAlias ? flag[setAlias] : false;
      }
      function hasAnyFlag(key) {
        const flagsKeys = Object.keys(flags);
        const toCheck = [].concat(flagsKeys.map((k) => flags[k]));
        return toCheck.some(function(flag) {
          return Array.isArray(flag) ? flag.includes(key) : flag[key];
        });
      }
      function hasFlagsMatching(arg, ...patterns) {
        const toCheck = [].concat(...patterns);
        return toCheck.some(function(pattern) {
          const match = arg.match(pattern);
          return match && hasAnyFlag(match[1]);
        });
      }
      function hasAllShortFlags(arg) {
        if (arg.match(negative) || !arg.match(/^-[^-]+/)) {
          return false;
        }
        let hasAllFlags = true;
        let next;
        const letters = arg.slice(1).split("");
        for (let j = 0; j < letters.length; j++) {
          next = arg.slice(j + 2);
          if (!hasAnyFlag(letters[j])) {
            hasAllFlags = false;
            break;
          }
          if (letters[j + 1] && letters[j + 1] === "=" || next === "-" || /[A-Za-z]/.test(letters[j]) && /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next) || letters[j + 1] && letters[j + 1].match(/\W/)) {
            break;
          }
        }
        return hasAllFlags;
      }
      function isUnknownOptionAsArg(arg) {
        return configuration["unknown-options-as-args"] && isUnknownOption(arg);
      }
      function isUnknownOption(arg) {
        if (arg.match(negative)) {
          return false;
        }
        if (hasAllShortFlags(arg)) {
          return false;
        }
        const flagWithEquals = /^-+([^=]+?)=[\s\S]*$/;
        const normalFlag = /^-+([^=]+?)$/;
        const flagEndingInHyphen = /^-+([^=]+?)-$/;
        const flagEndingInDigits = /^-+([^=]+?\d+)$/;
        const flagEndingInNonWordCharacters = /^-+([^=]+?)\W+.*$/;
        return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);
      }
      function defaultValue(key) {
        if (!checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts) && `${key}` in defaults) {
          return defaults[key];
        } else {
          return defaultForType(guessType(key));
        }
      }
      function defaultForType(type) {
        const def = {
          boolean: true,
          string: "",
          number: void 0,
          array: []
        };
        return def[type];
      }
      function guessType(key) {
        let type = "boolean";
        if (checkAllAliases(key, flags.strings))
          type = "string";
        else if (checkAllAliases(key, flags.numbers))
          type = "number";
        else if (checkAllAliases(key, flags.bools))
          type = "boolean";
        else if (checkAllAliases(key, flags.arrays))
          type = "array";
        return type;
      }
      function isUndefined(num) {
        return num === void 0;
      }
      function checkConfiguration() {
        Object.keys(flags.counts).find((key) => {
          if (checkAllAliases(key, flags.arrays)) {
            error = Error(__("Invalid configuration: %s, opts.count excludes opts.array.", key));
            return true;
          } else if (checkAllAliases(key, flags.nargs)) {
            error = Error(__("Invalid configuration: %s, opts.count excludes opts.narg.", key));
            return true;
          }
          return false;
        });
      }
      return {
        aliases: Object.assign({}, flags.aliases),
        argv: Object.assign(argvReturn, argv),
        configuration,
        defaulted: Object.assign({}, defaulted),
        error,
        newAliases: Object.assign({}, newAliases)
      };
    }
  };
  function combineAliases(aliases) {
    const aliasArrays = [];
    const combined = Object.create(null);
    let change = true;
    Object.keys(aliases).forEach(function(key) {
      aliasArrays.push([].concat(aliases[key], key));
    });
    while (change) {
      change = false;
      for (let i = 0; i < aliasArrays.length; i++) {
        for (let ii = i + 1; ii < aliasArrays.length; ii++) {
          const intersect = aliasArrays[i].filter(function(v) {
            return aliasArrays[ii].indexOf(v) !== -1;
          });
          if (intersect.length) {
            aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);
            aliasArrays.splice(ii, 1);
            change = true;
            break;
          }
        }
      }
    }
    aliasArrays.forEach(function(aliasArray) {
      aliasArray = aliasArray.filter(function(v, i, self2) {
        return self2.indexOf(v) === i;
      });
      const lastAlias = aliasArray.pop();
      if (lastAlias !== void 0 && typeof lastAlias === "string") {
        combined[lastAlias] = aliasArray;
      }
    });
    return combined;
  }
  function increment(orig) {
    return orig !== void 0 ? orig + 1 : 1;
  }
  function sanitizeKey(key) {
    if (key === "__proto__")
      return "___proto___";
    return key;
  }
  var minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 10;
  if (process && process.version) {
    const major = Number(process.version.match(/v([^.]+)/)[1]);
    if (major < minNodeVersion) {
      throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);
    }
  }
  var env = process ? process.env : {};
  var parser = new YargsParser({
    cwd: process.cwd,
    env: () => {
      return env;
    },
    format: util.format,
    normalize: path2.normalize,
    resolve: path2.resolve,
    require: (path3) => {
      if (true) {
        return require(path3);
      } else if (path3.match(/\.json$/)) {
        return fs2.readFileSync(path3, "utf8");
      } else {
        throw Error("only .json config files are supported in ESM");
      }
    }
  });
  var yargsParser = function Parser(args, opts) {
    const result = parser.parse(args.slice(), opts);
    return result.argv;
  };
  yargsParser.detailed = function(args, opts) {
    return parser.parse(args.slice(), opts);
  };
  yargsParser.camelCase = camelCase;
  yargsParser.decamelize = decamelize;
  yargsParser.looksLikeNumber = looksLikeNumber;
  module2.exports = yargsParser;
});

// node_modules/.pnpm/map-obj@4.1.0/node_modules/map-obj/index.js
var require_map_obj = __commonJS((exports2, module2) => {
  "use strict";
  var isObject = (value) => typeof value === "object" && value !== null;
  var isObjectCustom = (value) => isObject(value) && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);
  var mapObject = (object, mapper, options, isSeen = new WeakMap()) => {
    options = {
      deep: false,
      target: {},
      ...options
    };
    if (isSeen.has(object)) {
      return isSeen.get(object);
    }
    isSeen.set(object, options.target);
    const {target} = options;
    delete options.target;
    const mapArray = (array) => array.map((element) => isObjectCustom(element) ? mapObject(element, mapper, options, isSeen) : element);
    if (Array.isArray(object)) {
      return mapArray(object);
    }
    for (const [key, value] of Object.entries(object)) {
      let [newKey, newValue] = mapper(key, value, object);
      if (options.deep && isObjectCustom(newValue)) {
        newValue = Array.isArray(newValue) ? mapArray(newValue) : mapObject(newValue, mapper, options, isSeen);
      }
      target[newKey] = newValue;
    }
    return target;
  };
  module2.exports = (object, mapper, options) => {
    if (!isObject(object)) {
      throw new TypeError(`Expected an object, got \`${object}\` (${typeof object})`);
    }
    return mapObject(object, mapper, options);
  };
});

// node_modules/.pnpm/camelcase@5.3.1/node_modules/camelcase/index.js
var require_camelcase = __commonJS((exports2, module2) => {
  "use strict";
  var preserveCamelCase = (string) => {
    let isLastCharLower = false;
    let isLastCharUpper = false;
    let isLastLastCharUpper = false;
    for (let i = 0; i < string.length; i++) {
      const character = string[i];
      if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {
        string = string.slice(0, i) + "-" + string.slice(i);
        isLastCharLower = false;
        isLastLastCharUpper = isLastCharUpper;
        isLastCharUpper = true;
        i++;
      } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {
        string = string.slice(0, i - 1) + "-" + string.slice(i - 1);
        isLastLastCharUpper = isLastCharUpper;
        isLastCharUpper = false;
        isLastCharLower = true;
      } else {
        isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;
        isLastLastCharUpper = isLastCharUpper;
        isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;
      }
    }
    return string;
  };
  var camelCase = (input, options) => {
    if (!(typeof input === "string" || Array.isArray(input))) {
      throw new TypeError("Expected the input to be `string | string[]`");
    }
    options = Object.assign({
      pascalCase: false
    }, options);
    const postProcess = (x) => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;
    if (Array.isArray(input)) {
      input = input.map((x) => x.trim()).filter((x) => x.length).join("-");
    } else {
      input = input.trim();
    }
    if (input.length === 0) {
      return "";
    }
    if (input.length === 1) {
      return options.pascalCase ? input.toUpperCase() : input.toLowerCase();
    }
    const hasUpperCase = input !== input.toLowerCase();
    if (hasUpperCase) {
      input = preserveCamelCase(input);
    }
    input = input.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, (_, p1) => p1.toUpperCase()).replace(/\d+(\w|$)/g, (m) => m.toUpperCase());
    return postProcess(input);
  };
  module2.exports = camelCase;
  module2.exports.default = camelCase;
});

// node_modules/.pnpm/quick-lru@4.0.1/node_modules/quick-lru/index.js
var require_quick_lru = __commonJS((exports2, module2) => {
  "use strict";
  var QuickLRU = class {
    constructor(options = {}) {
      if (!(options.maxSize && options.maxSize > 0)) {
        throw new TypeError("`maxSize` must be a number greater than 0");
      }
      this.maxSize = options.maxSize;
      this.cache = new Map();
      this.oldCache = new Map();
      this._size = 0;
    }
    _set(key, value) {
      this.cache.set(key, value);
      this._size++;
      if (this._size >= this.maxSize) {
        this._size = 0;
        this.oldCache = this.cache;
        this.cache = new Map();
      }
    }
    get(key) {
      if (this.cache.has(key)) {
        return this.cache.get(key);
      }
      if (this.oldCache.has(key)) {
        const value = this.oldCache.get(key);
        this.oldCache.delete(key);
        this._set(key, value);
        return value;
      }
    }
    set(key, value) {
      if (this.cache.has(key)) {
        this.cache.set(key, value);
      } else {
        this._set(key, value);
      }
      return this;
    }
    has(key) {
      return this.cache.has(key) || this.oldCache.has(key);
    }
    peek(key) {
      if (this.cache.has(key)) {
        return this.cache.get(key);
      }
      if (this.oldCache.has(key)) {
        return this.oldCache.get(key);
      }
    }
    delete(key) {
      const deleted = this.cache.delete(key);
      if (deleted) {
        this._size--;
      }
      return this.oldCache.delete(key) || deleted;
    }
    clear() {
      this.cache.clear();
      this.oldCache.clear();
      this._size = 0;
    }
    *keys() {
      for (const [key] of this) {
        yield key;
      }
    }
    *values() {
      for (const [, value] of this) {
        yield value;
      }
    }
    *[Symbol.iterator]() {
      for (const item of this.cache) {
        yield item;
      }
      for (const item of this.oldCache) {
        const [key] = item;
        if (!this.cache.has(key)) {
          yield item;
        }
      }
    }
    get size() {
      let oldCacheSize = 0;
      for (const key of this.oldCache.keys()) {
        if (!this.cache.has(key)) {
          oldCacheSize++;
        }
      }
      return this._size + oldCacheSize;
    }
  };
  module2.exports = QuickLRU;
});

// node_modules/.pnpm/camelcase-keys@6.2.2/node_modules/camelcase-keys/index.js
var require_camelcase_keys = __commonJS((exports2, module2) => {
  "use strict";
  var mapObj = require_map_obj();
  var camelCase = require_camelcase();
  var QuickLru = require_quick_lru();
  var has = (array, key) => array.some((x) => {
    if (typeof x === "string") {
      return x === key;
    }
    x.lastIndex = 0;
    return x.test(key);
  });
  var cache = new QuickLru({maxSize: 1e5});
  var isObject = (value) => typeof value === "object" && value !== null && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);
  var camelCaseConvert = (input, options) => {
    if (!isObject(input)) {
      return input;
    }
    options = {
      deep: false,
      pascalCase: false,
      ...options
    };
    const {exclude, pascalCase, stopPaths, deep} = options;
    const stopPathsSet = new Set(stopPaths);
    const makeMapper = (parentPath) => (key, value) => {
      if (deep && isObject(value)) {
        const path2 = parentPath === void 0 ? key : `${parentPath}.${key}`;
        if (!stopPathsSet.has(path2)) {
          value = mapObj(value, makeMapper(path2));
        }
      }
      if (!(exclude && has(exclude, key))) {
        const cacheKey = pascalCase ? `${key}_` : key;
        if (cache.has(cacheKey)) {
          key = cache.get(cacheKey);
        } else {
          const ret = camelCase(key, {pascalCase});
          if (key.length < 100) {
            cache.set(cacheKey, ret);
          }
          key = ret;
        }
      }
      return [key, value];
    };
    return mapObj(input, makeMapper(void 0));
  };
  module2.exports = (input, options) => {
    if (Array.isArray(input)) {
      return Object.keys(input).map((key) => camelCaseConvert(input[key], options));
    }
    return camelCaseConvert(input, options);
  };
});

// node_modules/.pnpm/decamelize@1.2.0/node_modules/decamelize/index.js
var require_decamelize = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function(str, sep) {
    if (typeof str !== "string") {
      throw new TypeError("Expected a string");
    }
    sep = typeof sep === "undefined" ? "_" : sep;
    return str.replace(/([a-z\d])([A-Z])/g, "$1" + sep + "$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g, "$1" + sep + "$2").toLowerCase();
  };
});

// node_modules/.pnpm/map-obj@1.0.1/node_modules/map-obj/index.js
var require_map_obj2 = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function(obj, cb) {
    var ret = {};
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var res = cb(key, obj[key], obj);
      ret[res[0]] = res[1];
    }
    return ret;
  };
});

// node_modules/.pnpm/decamelize-keys@1.1.0/node_modules/decamelize-keys/index.js
var require_decamelize_keys = __commonJS((exports2, module2) => {
  "use strict";
  var mapObj = require_map_obj2();
  var decamelize = require_decamelize();
  module2.exports = function(input, separator, options) {
    if (typeof separator !== "string") {
      options = separator;
      separator = null;
    }
    options = options || {};
    separator = separator || options.separator;
    var exclude = options.exclude || [];
    return mapObj(input, function(key, val) {
      key = exclude.indexOf(key) === -1 ? decamelize(key, separator) : key;
      return [key, val];
    });
  };
});

// node_modules/.pnpm/trim-newlines@3.0.0/node_modules/trim-newlines/index.js
var require_trim_newlines = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (string) => string.replace(/^[\r\n]+/, "").replace(/[\r\n]+$/, "");
  module2.exports.start = (string) => string.replace(/^[\r\n]+/, "");
  module2.exports.end = (string) => string.replace(/[\r\n]+$/, "");
});

// node_modules/.pnpm/min-indent@1.0.1/node_modules/min-indent/index.js
var require_min_indent = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (string) => {
    const match = string.match(/^[ \t]*(?=\S)/gm);
    if (!match) {
      return 0;
    }
    return match.reduce((r, a) => Math.min(r, a.length), Infinity);
  };
});

// node_modules/.pnpm/strip-indent@3.0.0/node_modules/strip-indent/index.js
var require_strip_indent = __commonJS((exports2, module2) => {
  "use strict";
  var minIndent = require_min_indent();
  module2.exports = (string) => {
    const indent = minIndent(string);
    if (indent === 0) {
      return string;
    }
    const regex = new RegExp(`^[ \\t]{${indent}}`, "gm");
    return string.replace(regex, "");
  };
});

// node_modules/.pnpm/indent-string@4.0.0/node_modules/indent-string/index.js
var require_indent_string = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (string, count = 1, options) => {
    options = {
      indent: " ",
      includeEmptyLines: false,
      ...options
    };
    if (typeof string !== "string") {
      throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof string}\``);
    }
    if (typeof count !== "number") {
      throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof count}\``);
    }
    if (typeof options.indent !== "string") {
      throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``);
    }
    if (count === 0) {
      return string;
    }
    const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
    return string.replace(regex, options.indent.repeat(count));
  };
});

// node_modules/.pnpm/redent@3.0.0/node_modules/redent/index.js
var require_redent = __commonJS((exports2, module2) => {
  "use strict";
  var stripIndent = require_strip_indent();
  var indentString = require_indent_string();
  module2.exports = (string, count = 0, options) => indentString(stripIndent(string), count, options);
});

// node_modules/.pnpm/p-try@2.2.0/node_modules/p-try/index.js
var require_p_try = __commonJS((exports2, module2) => {
  "use strict";
  var pTry = (fn, ...arguments_) => new Promise((resolve) => {
    resolve(fn(...arguments_));
  });
  module2.exports = pTry;
  module2.exports.default = pTry;
});

// node_modules/.pnpm/p-limit@2.3.0/node_modules/p-limit/index.js
var require_p_limit = __commonJS((exports2, module2) => {
  "use strict";
  var pTry = require_p_try();
  var pLimit = (concurrency) => {
    if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
      return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));
    }
    const queue = [];
    let activeCount = 0;
    const next = () => {
      activeCount--;
      if (queue.length > 0) {
        queue.shift()();
      }
    };
    const run = (fn, resolve, ...args) => {
      activeCount++;
      const result = pTry(fn, ...args);
      resolve(result);
      result.then(next, next);
    };
    const enqueue = (fn, resolve, ...args) => {
      if (activeCount < concurrency) {
        run(fn, resolve, ...args);
      } else {
        queue.push(run.bind(null, fn, resolve, ...args));
      }
    };
    const generator = (fn, ...args) => new Promise((resolve) => enqueue(fn, resolve, ...args));
    Object.defineProperties(generator, {
      activeCount: {
        get: () => activeCount
      },
      pendingCount: {
        get: () => queue.length
      },
      clearQueue: {
        value: () => {
          queue.length = 0;
        }
      }
    });
    return generator;
  };
  module2.exports = pLimit;
  module2.exports.default = pLimit;
});

// node_modules/.pnpm/p-locate@4.1.0/node_modules/p-locate/index.js
var require_p_locate = __commonJS((exports2, module2) => {
  "use strict";
  var pLimit = require_p_limit();
  var EndError = class extends Error {
    constructor(value) {
      super();
      this.value = value;
    }
  };
  var testElement = async (element, tester) => tester(await element);
  var finder = async (element) => {
    const values = await Promise.all(element);
    if (values[1] === true) {
      throw new EndError(values[0]);
    }
    return false;
  };
  var pLocate = async (iterable, tester, options) => {
    options = {
      concurrency: Infinity,
      preserveOrder: true,
      ...options
    };
    const limit = pLimit(options.concurrency);
    const items = [...iterable].map((element) => [element, limit(testElement, element, tester)]);
    const checkLimit = pLimit(options.preserveOrder ? 1 : Infinity);
    try {
      await Promise.all(items.map((element) => checkLimit(finder, element)));
    } catch (error) {
      if (error instanceof EndError) {
        return error.value;
      }
      throw error;
    }
  };
  module2.exports = pLocate;
  module2.exports.default = pLocate;
});

// node_modules/.pnpm/locate-path@5.0.0/node_modules/locate-path/index.js
var require_locate_path = __commonJS((exports2, module2) => {
  "use strict";
  var path2 = require("path");
  var fs2 = require("fs");
  var {promisify} = require("util");
  var pLocate = require_p_locate();
  var fsStat = promisify(fs2.stat);
  var fsLStat = promisify(fs2.lstat);
  var typeMappings = {
    directory: "isDirectory",
    file: "isFile"
  };
  function checkType({type}) {
    if (type in typeMappings) {
      return;
    }
    throw new Error(`Invalid type specified: ${type}`);
  }
  var matchType = (type, stat) => type === void 0 || stat[typeMappings[type]]();
  module2.exports = async (paths, options) => {
    options = {
      cwd: process.cwd(),
      type: "file",
      allowSymlinks: true,
      ...options
    };
    checkType(options);
    const statFn = options.allowSymlinks ? fsStat : fsLStat;
    return pLocate(paths, async (path_) => {
      try {
        const stat = await statFn(path2.resolve(options.cwd, path_));
        return matchType(options.type, stat);
      } catch (_) {
        return false;
      }
    }, options);
  };
  module2.exports.sync = (paths, options) => {
    options = {
      cwd: process.cwd(),
      allowSymlinks: true,
      type: "file",
      ...options
    };
    checkType(options);
    const statFn = options.allowSymlinks ? fs2.statSync : fs2.lstatSync;
    for (const path_ of paths) {
      try {
        const stat = statFn(path2.resolve(options.cwd, path_));
        if (matchType(options.type, stat)) {
          return path_;
        }
      } catch (_) {
      }
    }
  };
});

// node_modules/.pnpm/path-exists@4.0.0/node_modules/path-exists/index.js
var require_path_exists = __commonJS((exports2, module2) => {
  "use strict";
  var fs2 = require("fs");
  var {promisify} = require("util");
  var pAccess = promisify(fs2.access);
  module2.exports = async (path2) => {
    try {
      await pAccess(path2);
      return true;
    } catch (_) {
      return false;
    }
  };
  module2.exports.sync = (path2) => {
    try {
      fs2.accessSync(path2);
      return true;
    } catch (_) {
      return false;
    }
  };
});

// node_modules/.pnpm/find-up@4.1.0/node_modules/find-up/index.js
var require_find_up = __commonJS((exports2, module2) => {
  "use strict";
  var path2 = require("path");
  var locatePath = require_locate_path();
  var pathExists = require_path_exists();
  var stop = Symbol("findUp.stop");
  module2.exports = async (name, options = {}) => {
    let directory = path2.resolve(options.cwd || "");
    const {root} = path2.parse(directory);
    const paths = [].concat(name);
    const runMatcher = async (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath(paths, locateOptions);
      }
      const foundPath = await name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = await runMatcher({...options, cwd: directory});
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path2.resolve(directory, foundPath);
      }
      if (directory === root) {
        return;
      }
      directory = path2.dirname(directory);
    }
  };
  module2.exports.sync = (name, options = {}) => {
    let directory = path2.resolve(options.cwd || "");
    const {root} = path2.parse(directory);
    const paths = [].concat(name);
    const runMatcher = (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath.sync(paths, locateOptions);
      }
      const foundPath = name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath.sync([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = runMatcher({...options, cwd: directory});
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path2.resolve(directory, foundPath);
      }
      if (directory === root) {
        return;
      }
      directory = path2.dirname(directory);
    }
  };
  module2.exports.exists = pathExists;
  module2.exports.sync.exists = pathExists.sync;
  module2.exports.stop = stop;
});

// node_modules/.pnpm/is-arrayish@0.2.1/node_modules/is-arrayish/index.js
var require_is_arrayish = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function isArrayish(obj) {
    if (!obj) {
      return false;
    }
    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && obj.splice instanceof Function;
  };
});

// node_modules/.pnpm/error-ex@1.3.2/node_modules/error-ex/index.js
var require_error_ex = __commonJS((exports2, module2) => {
  "use strict";
  var util = require("util");
  var isArrayish = require_is_arrayish();
  var errorEx = function errorEx2(name, properties) {
    if (!name || name.constructor !== String) {
      properties = name || {};
      name = Error.name;
    }
    var errorExError = function ErrorEXError(message) {
      if (!this) {
        return new ErrorEXError(message);
      }
      message = message instanceof Error ? message.message : message || this.message;
      Error.call(this, message);
      Error.captureStackTrace(this, errorExError);
      this.name = name;
      Object.defineProperty(this, "message", {
        configurable: true,
        enumerable: false,
        get: function() {
          var newMessage = message.split(/\r?\n/g);
          for (var key in properties) {
            if (!properties.hasOwnProperty(key)) {
              continue;
            }
            var modifier = properties[key];
            if ("message" in modifier) {
              newMessage = modifier.message(this[key], newMessage) || newMessage;
              if (!isArrayish(newMessage)) {
                newMessage = [newMessage];
              }
            }
          }
          return newMessage.join("\n");
        },
        set: function(v) {
          message = v;
        }
      });
      var overwrittenStack = null;
      var stackDescriptor = Object.getOwnPropertyDescriptor(this, "stack");
      var stackGetter = stackDescriptor.get;
      var stackValue = stackDescriptor.value;
      delete stackDescriptor.value;
      delete stackDescriptor.writable;
      stackDescriptor.set = function(newstack) {
        overwrittenStack = newstack;
      };
      stackDescriptor.get = function() {
        var stack = (overwrittenStack || (stackGetter ? stackGetter.call(this) : stackValue)).split(/\r?\n+/g);
        if (!overwrittenStack) {
          stack[0] = this.name + ": " + this.message;
        }
        var lineCount = 1;
        for (var key in properties) {
          if (!properties.hasOwnProperty(key)) {
            continue;
          }
          var modifier = properties[key];
          if ("line" in modifier) {
            var line = modifier.line(this[key]);
            if (line) {
              stack.splice(lineCount++, 0, "    " + line);
            }
          }
          if ("stack" in modifier) {
            modifier.stack(this[key], stack);
          }
        }
        return stack.join("\n");
      };
      Object.defineProperty(this, "stack", stackDescriptor);
    };
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(errorExError.prototype, Error.prototype);
      Object.setPrototypeOf(errorExError, Error);
    } else {
      util.inherits(errorExError, Error);
    }
    return errorExError;
  };
  errorEx.append = function(str, def) {
    return {
      message: function(v, message) {
        v = v || def;
        if (v) {
          message[0] += " " + str.replace("%s", v.toString());
        }
        return message;
      }
    };
  };
  errorEx.line = function(str, def) {
    return {
      line: function(v) {
        v = v || def;
        if (v) {
          return str.replace("%s", v.toString());
        }
        return null;
      }
    };
  };
  module2.exports = errorEx;
});

// node_modules/.pnpm/json-parse-even-better-errors@2.3.1/node_modules/json-parse-even-better-errors/index.js
var require_json_parse_even_better_errors = __commonJS((exports2, module2) => {
  "use strict";
  var hexify = (char) => {
    const h = char.charCodeAt(0).toString(16).toUpperCase();
    return "0x" + (h.length % 2 ? "0" : "") + h;
  };
  var parseError = (e, txt, context) => {
    if (!txt) {
      return {
        message: e.message + " while parsing empty string",
        position: 0
      };
    }
    const badToken = e.message.match(/^Unexpected token (.) .*position\s+(\d+)/i);
    const errIdx = badToken ? +badToken[2] : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;
    const msg = badToken ? e.message.replace(/^Unexpected token ./, `Unexpected token ${JSON.stringify(badToken[1])} (${hexify(badToken[1])})`) : e.message;
    if (errIdx !== null && errIdx !== void 0) {
      const start = errIdx <= context ? 0 : errIdx - context;
      const end = errIdx + context >= txt.length ? txt.length : errIdx + context;
      const slice = (start === 0 ? "" : "...") + txt.slice(start, end) + (end === txt.length ? "" : "...");
      const near = txt === slice ? "" : "near ";
      return {
        message: msg + ` while parsing ${near}${JSON.stringify(slice)}`,
        position: errIdx
      };
    } else {
      return {
        message: msg + ` while parsing '${txt.slice(0, context * 2)}'`,
        position: 0
      };
    }
  };
  var JSONParseError = class extends SyntaxError {
    constructor(er, txt, context, caller) {
      context = context || 20;
      const metadata = parseError(er, txt, context);
      super(metadata.message);
      Object.assign(this, metadata);
      this.code = "EJSONPARSE";
      this.systemError = er;
      Error.captureStackTrace(this, caller || this.constructor);
    }
    get name() {
      return this.constructor.name;
    }
    set name(n) {
    }
    get [Symbol.toStringTag]() {
      return this.constructor.name;
    }
  };
  var kIndent = Symbol.for("indent");
  var kNewline = Symbol.for("newline");
  var formatRE = /^\s*[{\[]((?:\r?\n)+)([\s\t]*)/;
  var emptyRE = /^(?:\{\}|\[\])((?:\r?\n)+)?$/;
  var parseJson = (txt, reviver, context) => {
    const parseText = stripBOM(txt);
    context = context || 20;
    try {
      const [, newline = "\n", indent = "  "] = parseText.match(emptyRE) || parseText.match(formatRE) || [, "", ""];
      const result = JSON.parse(parseText, reviver);
      if (result && typeof result === "object") {
        result[kNewline] = newline;
        result[kIndent] = indent;
      }
      return result;
    } catch (e) {
      if (typeof txt !== "string" && !Buffer.isBuffer(txt)) {
        const isEmptyArray = Array.isArray(txt) && txt.length === 0;
        throw Object.assign(new TypeError(`Cannot parse ${isEmptyArray ? "an empty array" : String(txt)}`), {
          code: "EJSONPARSE",
          systemError: e
        });
      }
      throw new JSONParseError(e, parseText, context, parseJson);
    }
  };
  var stripBOM = (txt) => String(txt).replace(/^\uFEFF/, "");
  module2.exports = parseJson;
  parseJson.JSONParseError = JSONParseError;
  parseJson.noExceptions = (txt, reviver) => {
    try {
      return JSON.parse(stripBOM(txt), reviver);
    } catch (e) {
    }
  };
});

// node_modules/.pnpm/lines-and-columns@1.1.6/node_modules/lines-and-columns/dist/index.js
var require_dist = __commonJS((exports2) => {
  "use strict";
  var LF = "\n";
  var CR = "\r";
  var LinesAndColumns = function() {
    function LinesAndColumns2(string) {
      this.string = string;
      var offsets = [0];
      for (var offset = 0; offset < string.length; ) {
        switch (string[offset]) {
          case LF:
            offset += LF.length;
            offsets.push(offset);
            break;
          case CR:
            offset += CR.length;
            if (string[offset] === LF) {
              offset += LF.length;
            }
            offsets.push(offset);
            break;
          default:
            offset++;
            break;
        }
      }
      this.offsets = offsets;
    }
    LinesAndColumns2.prototype.locationForIndex = function(index) {
      if (index < 0 || index > this.string.length) {
        return null;
      }
      var line = 0;
      var offsets = this.offsets;
      while (offsets[line + 1] <= index) {
        line++;
      }
      var column = index - offsets[line];
      return {line, column};
    };
    LinesAndColumns2.prototype.indexForLocation = function(location) {
      var line = location.line, column = location.column;
      if (line < 0 || line >= this.offsets.length) {
        return null;
      }
      if (column < 0 || column > this.lengthOfLine(line)) {
        return null;
      }
      return this.offsets[line] + column;
    };
    LinesAndColumns2.prototype.lengthOfLine = function(line) {
      var offset = this.offsets[line];
      var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];
      return nextOffset - offset;
    };
    return LinesAndColumns2;
  }();
  exports2.__esModule = true;
  exports2["default"] = LinesAndColumns;
});

// node_modules/.pnpm/js-tokens@4.0.0/node_modules/js-tokens/index.js
var require_js_tokens = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
  exports2.matchToToken = function(match) {
    var token = {type: "invalid", value: match[0], closed: void 0};
    if (match[1])
      token.type = "string", token.closed = !!(match[3] || match[4]);
    else if (match[5])
      token.type = "comment";
    else if (match[6])
      token.type = "comment", token.closed = !!match[7];
    else if (match[8])
      token.type = "regex";
    else if (match[9])
      token.type = "number";
    else if (match[10])
      token.type = "name";
    else if (match[11])
      token.type = "punctuator";
    else if (match[12])
      token.type = "whitespace";
    return token;
  };
});

// node_modules/.pnpm/@babel/helper-validator-identifier@7.12.11/node_modules/@babel/helper-validator-identifier/lib/identifier.js
var require_identifier = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.isIdentifierStart = isIdentifierStart;
  exports2.isIdentifierChar = isIdentifierChar;
  exports2.isIdentifierName = isIdentifierName;
  var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
  var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
  var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function isInAstralSet(code, set) {
    let pos = 65536;
    for (let i = 0, length = set.length; i < length; i += 2) {
      pos += set[i];
      if (pos > code)
        return false;
      pos += set[i + 1];
      if (pos >= code)
        return true;
    }
    return false;
  }
  function isIdentifierStart(code) {
    if (code < 65)
      return code === 36;
    if (code <= 90)
      return true;
    if (code < 97)
      return code === 95;
    if (code <= 122)
      return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes);
  }
  function isIdentifierChar(code) {
    if (code < 48)
      return code === 36;
    if (code < 58)
      return true;
    if (code < 65)
      return false;
    if (code <= 90)
      return true;
    if (code < 97)
      return code === 95;
    if (code <= 122)
      return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
  }
  function isIdentifierName(name) {
    let isFirst = true;
    for (let _i = 0, _Array$from = Array.from(name); _i < _Array$from.length; _i++) {
      const char = _Array$from[_i];
      const cp = char.codePointAt(0);
      if (isFirst) {
        if (!isIdentifierStart(cp)) {
          return false;
        }
        isFirst = false;
      } else if (!isIdentifierChar(cp)) {
        return false;
      }
    }
    return !isFirst;
  }
});

// node_modules/.pnpm/@babel/helper-validator-identifier@7.12.11/node_modules/@babel/helper-validator-identifier/lib/keyword.js
var require_keyword = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.isReservedWord = isReservedWord;
  exports2.isStrictReservedWord = isStrictReservedWord;
  exports2.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
  exports2.isStrictBindReservedWord = isStrictBindReservedWord;
  exports2.isKeyword = isKeyword;
  var reservedWords = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  };
  var keywords = new Set(reservedWords.keyword);
  var reservedWordsStrictSet = new Set(reservedWords.strict);
  var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
  function isReservedWord(word, inModule) {
    return inModule && word === "await" || word === "enum";
  }
  function isStrictReservedWord(word, inModule) {
    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
  }
  function isStrictBindOnlyReservedWord(word) {
    return reservedWordsStrictBindSet.has(word);
  }
  function isStrictBindReservedWord(word, inModule) {
    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
  }
  function isKeyword(word) {
    return keywords.has(word);
  }
});

// node_modules/.pnpm/@babel/helper-validator-identifier@7.12.11/node_modules/@babel/helper-validator-identifier/lib/index.js
var require_lib7 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  Object.defineProperty(exports2, "isIdentifierName", {
    enumerable: true,
    get: function() {
      return _identifier.isIdentifierName;
    }
  });
  Object.defineProperty(exports2, "isIdentifierChar", {
    enumerable: true,
    get: function() {
      return _identifier.isIdentifierChar;
    }
  });
  Object.defineProperty(exports2, "isIdentifierStart", {
    enumerable: true,
    get: function() {
      return _identifier.isIdentifierStart;
    }
  });
  Object.defineProperty(exports2, "isReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isReservedWord;
    }
  });
  Object.defineProperty(exports2, "isStrictBindOnlyReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isStrictBindOnlyReservedWord;
    }
  });
  Object.defineProperty(exports2, "isStrictBindReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isStrictBindReservedWord;
    }
  });
  Object.defineProperty(exports2, "isStrictReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isStrictReservedWord;
    }
  });
  Object.defineProperty(exports2, "isKeyword", {
    enumerable: true,
    get: function() {
      return _keyword.isKeyword;
    }
  });
  var _identifier = require_identifier();
  var _keyword = require_keyword();
});

// node_modules/.pnpm/escape-string-regexp@1.0.5/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp = __commonJS((exports2, module2) => {
  "use strict";
  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
  module2.exports = function(str) {
    if (typeof str !== "string") {
      throw new TypeError("Expected a string");
    }
    return str.replace(matchOperatorsRe, "\\$&");
  };
});

// node_modules/.pnpm/color-name@1.1.3/node_modules/color-name/index.js
var require_color_name = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 134, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 250, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 221],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [112, 128, 144],
    slategrey: [112, 128, 144],
    snow: [255, 250, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 50]
  };
});

// node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/conversions.js
var require_conversions = __commonJS((exports2, module2) => {
  var cssKeywords = require_color_name();
  var reverseKeywords = {};
  for (var key in cssKeywords) {
    if (cssKeywords.hasOwnProperty(key)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
  }
  var convert = module2.exports = {
    rgb: {channels: 3, labels: "rgb"},
    hsl: {channels: 3, labels: "hsl"},
    hsv: {channels: 3, labels: "hsv"},
    hwb: {channels: 3, labels: "hwb"},
    cmyk: {channels: 4, labels: "cmyk"},
    xyz: {channels: 3, labels: "xyz"},
    lab: {channels: 3, labels: "lab"},
    lch: {channels: 3, labels: "lch"},
    hex: {channels: 1, labels: ["hex"]},
    keyword: {channels: 1, labels: ["keyword"]},
    ansi16: {channels: 1, labels: ["ansi16"]},
    ansi256: {channels: 1, labels: ["ansi256"]},
    hcg: {channels: 3, labels: ["h", "c", "g"]},
    apple: {channels: 3, labels: ["r16", "g16", "b16"]},
    gray: {channels: 1, labels: ["gray"]}
  };
  for (var model in convert) {
    if (convert.hasOwnProperty(model)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      channels = convert[model].channels;
      labels = convert[model].labels;
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", {value: channels});
      Object.defineProperty(convert[model], "labels", {value: labels});
    }
  }
  var channels;
  var labels;
  convert.rgb.hsl = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert.rgb.hsv = function(rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function(c) {
      return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
      h = s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert.rgb.hwb = function(rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert.rgb.cmyk = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };
  function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
  }
  convert.rgb.keyword = function(rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for (var keyword in cssKeywords) {
      if (cssKeywords.hasOwnProperty(keyword)) {
        var value = cssKeywords[keyword];
        var distance = comparativeDistance(rgb, value);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
  };
  convert.rgb.xyz = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };
  convert.rgb.lab = function(rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.hsl.rgb = function(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    t1 = 2 * l - t2;
    rgb = [0, 0, 0];
    for (var i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function(hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert.hsv.rgb = function(hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert.hsv.hsl = function(hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert.hwb.rgb = function(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    n = wh + f * (v - wh);
    var r;
    var g;
    var b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert.cmyk.rgb = function(cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.rgb = function(xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.lab = function(xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.lab.xyz = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };
  convert.lab.lch = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };
  convert.lch.lab = function(lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [l, a, b];
  };
  convert.rgb.ansi16 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert.hsv.ansi16 = function(args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };
  convert.rgb.ansi256 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };
  convert.ansi16.rgb = function(args) {
    var color = args % 10;
    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert.ansi256.rgb = function(args) {
    if (args >= 232) {
      var c = (args - 232) * 10 + 8;
      return [c, c, c];
    }
    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert.rgb.hex = function(args) {
    var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    var string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.hex.rgb = function(args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    var colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map(function(char) {
        return char + char;
      }).join("");
    }
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 255;
    var g = integer >> 8 & 255;
    var b = integer & 255;
    return [r, g, b];
  };
  convert.rgb.hcg = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma + 4;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function(hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;
    if (l < 0.5) {
      c = 2 * s * l;
    } else {
      c = 2 * s * (1 - l);
    }
    if (c < 1) {
      f = (l - 0.5 * c) / (1 - c);
    }
    return [hsl[0], c * 100, f * 100];
  };
  convert.hsv.hcg = function(hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;
    if (c < 1) {
      f = (v - c) / (1 - c);
    }
    return [hsv[0], c * 100, f * 100];
  };
  convert.hcg.rgb = function(hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c === 0) {
      return [g * 255, g * 255, g * 255];
    }
    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c) * g;
    return [
      (c * pure[0] + mg) * 255,
      (c * pure[1] + mg) * 255,
      (c * pure[2] + mg) * 255
    ];
  };
  convert.hcg.hsv = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1 - c);
    var f = 0;
    if (v > 0) {
      f = c / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert.hcg.hsl = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1 - c) + 0.5 * c;
    var s = 0;
    if (l > 0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert.hcg.hwb = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };
  convert.hwb.hcg = function(hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;
    if (c < 1) {
      g = (v - c) / (1 - c);
    }
    return [hwb[0], c * 100, g * 100];
  };
  convert.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert.gray.hsl = convert.gray.hsv = function(args) {
    return [0, 0, args[0]];
  };
  convert.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function(gray) {
    var val = Math.round(gray[0] / 100 * 255) & 255;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.rgb.gray = function(rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
});

// node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/route.js
var require_route = __commonJS((exports2, module2) => {
  var conversions = require_conversions();
  function buildGraph() {
    var graph = {};
    var models = Object.keys(conversions);
    for (var len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      var current = queue.pop();
      var adjacents = Object.keys(conversions[current]);
      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node = graph[adjacent];
        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function(args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    var path2 = [graph[toModel].parent, toModel];
    var fn = conversions[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path2.unshift(graph[cur].parent);
      fn = link(conversions[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }
    fn.conversion = path2;
    return fn;
  }
  module2.exports = function(fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);
    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node = graph[toModel];
      if (node.parent === null) {
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
  };
});

// node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/index.js
var require_color_convert = __commonJS((exports2, module2) => {
  var conversions = require_conversions();
  var route = require_route();
  var convert = {};
  var models = Object.keys(conversions);
  function wrapRaw(fn) {
    var wrappedFn = function(args) {
      if (args === void 0 || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      return fn(args);
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    var wrappedFn = function(args) {
      if (args === void 0 || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      var result = fn(args);
      if (typeof result === "object") {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach(function(fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", {value: conversions[fromModel].channels});
    Object.defineProperty(convert[fromModel], "labels", {value: conversions[fromModel].labels});
    var routes = route(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function(toModel) {
      var fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  module2.exports = convert;
});

// node_modules/.pnpm/ansi-styles@3.2.1/node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS((exports2, module2) => {
  "use strict";
  var colorConvert = require_color_convert();
  var wrapAnsi16 = (fn, offset) => function() {
    const code = fn.apply(colorConvert, arguments);
    return `[${code + offset}m`;
  };
  var wrapAnsi256 = (fn, offset) => function() {
    const code = fn.apply(colorConvert, arguments);
    return `[${38 + offset};5;${code}m`;
  };
  var wrapAnsi16m = (fn, offset) => function() {
    const rgb = fn.apply(colorConvert, arguments);
    return `[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  function assembleStyles() {
    const codes = new Map();
    const styles = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        gray: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles.color.grey = styles.color.gray;
    for (const groupName of Object.keys(styles)) {
      const group = styles[groupName];
      for (const styleName of Object.keys(group)) {
        const style = group[styleName];
        styles[styleName] = {
          open: `[${style[0]}m`,
          close: `[${style[1]}m`
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
    }
    const ansi2ansi = (n) => n;
    const rgb2rgb = (r, g, b) => [r, g, b];
    styles.color.close = "[39m";
    styles.bgColor.close = "[49m";
    styles.color.ansi = {
      ansi: wrapAnsi16(ansi2ansi, 0)
    };
    styles.color.ansi256 = {
      ansi256: wrapAnsi256(ansi2ansi, 0)
    };
    styles.color.ansi16m = {
      rgb: wrapAnsi16m(rgb2rgb, 0)
    };
    styles.bgColor.ansi = {
      ansi: wrapAnsi16(ansi2ansi, 10)
    };
    styles.bgColor.ansi256 = {
      ansi256: wrapAnsi256(ansi2ansi, 10)
    };
    styles.bgColor.ansi16m = {
      rgb: wrapAnsi16m(rgb2rgb, 10)
    };
    for (let key of Object.keys(colorConvert)) {
      if (typeof colorConvert[key] !== "object") {
        continue;
      }
      const suite = colorConvert[key];
      if (key === "ansi16") {
        key = "ansi";
      }
      if ("ansi16" in suite) {
        styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
        styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
      }
      if ("ansi256" in suite) {
        styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
        styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
      }
      if ("rgb" in suite) {
        styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
        styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
      }
    }
    return styles;
  }
  Object.defineProperty(module2, "exports", {
    enumerable: true,
    get: assembleStyles
  });
});

// node_modules/.pnpm/has-flag@3.0.0/node_modules/has-flag/index.js
var require_has_flag = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (flag, argv) => {
    argv = argv || process.argv;
    const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
    const pos = argv.indexOf(prefix + flag);
    const terminatorPos = argv.indexOf("--");
    return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
  };
});

// node_modules/.pnpm/supports-color@5.5.0/node_modules/supports-color/index.js
var require_supports_color = __commonJS((exports2, module2) => {
  "use strict";
  var os = require("os");
  var hasFlag = require_has_flag();
  var env = process.env;
  var forceColor;
  if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
    forceColor = false;
  } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
    forceColor = true;
  }
  if ("FORCE_COLOR" in env) {
    forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
  }
  function translateLevel(level) {
    if (level === 0) {
      return false;
    }
    return {
      level,
      hasBasic: true,
      has256: level >= 2,
      has16m: level >= 3
    };
  }
  function supportsColor(stream) {
    if (forceColor === false) {
      return 0;
    }
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
      return 3;
    }
    if (hasFlag("color=256")) {
      return 2;
    }
    if (stream && !stream.isTTY && forceColor !== true) {
      return 0;
    }
    const min = forceColor ? 1 : 0;
    if (process.platform === "win32") {
      const osRelease = os.release().split(".");
      if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
        return Number(osRelease[2]) >= 14931 ? 3 : 2;
      }
      return 1;
    }
    if ("CI" in env) {
      if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
        return 1;
      }
      return min;
    }
    if ("TEAMCITY_VERSION" in env) {
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === "truecolor") {
      return 3;
    }
    if ("TERM_PROGRAM" in env) {
      const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (env.TERM_PROGRAM) {
        case "iTerm.app":
          return version >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
      return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
      return 1;
    }
    if ("COLORTERM" in env) {
      return 1;
    }
    if (env.TERM === "dumb") {
      return min;
    }
    return min;
  }
  function getSupportLevel(stream) {
    const level = supportsColor(stream);
    return translateLevel(level);
  }
  module2.exports = {
    supportsColor: getSupportLevel,
    stdout: getSupportLevel(process.stdout),
    stderr: getSupportLevel(process.stderr)
  };
});

// node_modules/.pnpm/chalk@2.4.2/node_modules/chalk/templates.js
var require_templates = __commonJS((exports2, module2) => {
  "use strict";
  var TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
  var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
  var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
  var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
  var ESCAPES = new Map([
    ["n", "\n"],
    ["r", "\r"],
    ["t", "	"],
    ["b", "\b"],
    ["f", "\f"],
    ["v", "\v"],
    ["0", "\0"],
    ["\\", "\\"],
    ["e", ""],
    ["a", "\x07"]
  ]);
  function unescape2(c) {
    if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
      return String.fromCharCode(parseInt(c.slice(1), 16));
    }
    return ESCAPES.get(c) || c;
  }
  function parseArguments(name, args) {
    const results = [];
    const chunks = args.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks) {
      if (!isNaN(chunk)) {
        results.push(Number(chunk));
      } else if (matches = chunk.match(STRING_REGEX)) {
        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape2, chr) => escape2 ? unescape2(escape2) : chr));
      } else {
        throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
      }
    }
    return results;
  }
  function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while ((matches = STYLE_REGEX.exec(style)) !== null) {
      const name = matches[1];
      if (matches[2]) {
        const args = parseArguments(name, matches[2]);
        results.push([name].concat(args));
      } else {
        results.push([name]);
      }
    }
    return results;
  }
  function buildStyle(chalk, styles) {
    const enabled = {};
    for (const layer of styles) {
      for (const style of layer.styles) {
        enabled[style[0]] = layer.inverse ? null : style.slice(1);
      }
    }
    let current = chalk;
    for (const styleName of Object.keys(enabled)) {
      if (Array.isArray(enabled[styleName])) {
        if (!(styleName in current)) {
          throw new Error(`Unknown Chalk style: ${styleName}`);
        }
        if (enabled[styleName].length > 0) {
          current = current[styleName].apply(current, enabled[styleName]);
        } else {
          current = current[styleName];
        }
      }
    }
    return current;
  }
  module2.exports = (chalk, tmp2) => {
    const styles = [];
    const chunks = [];
    let chunk = [];
    tmp2.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
      if (escapeChar) {
        chunk.push(unescape2(escapeChar));
      } else if (style) {
        const str = chunk.join("");
        chunk = [];
        chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
        styles.push({inverse, styles: parseStyle(style)});
      } else if (close) {
        if (styles.length === 0) {
          throw new Error("Found extraneous } in Chalk template literal");
        }
        chunks.push(buildStyle(chalk, styles)(chunk.join("")));
        chunk = [];
        styles.pop();
      } else {
        chunk.push(chr);
      }
    });
    chunks.push(chunk.join(""));
    if (styles.length > 0) {
      const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(errMsg);
    }
    return chunks.join("");
  };
});

// node_modules/.pnpm/chalk@2.4.2/node_modules/chalk/index.js
var require_chalk = __commonJS((exports2, module2) => {
  "use strict";
  var escapeStringRegexp = require_escape_string_regexp();
  var ansiStyles = require_ansi_styles();
  var stdoutColor = require_supports_color().stdout;
  var template = require_templates();
  var isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
  var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
  var skipModels = new Set(["gray"]);
  var styles = Object.create(null);
  function applyOptions(obj, options) {
    options = options || {};
    const scLevel = stdoutColor ? stdoutColor.level : 0;
    obj.level = options.level === void 0 ? scLevel : options.level;
    obj.enabled = "enabled" in options ? options.enabled : obj.level > 0;
  }
  function Chalk(options) {
    if (!this || !(this instanceof Chalk) || this.template) {
      const chalk = {};
      applyOptions(chalk, options);
      chalk.template = function() {
        const args = [].slice.call(arguments);
        return chalkTag.apply(null, [chalk.template].concat(args));
      };
      Object.setPrototypeOf(chalk, Chalk.prototype);
      Object.setPrototypeOf(chalk.template, chalk);
      chalk.template.constructor = Chalk;
      return chalk.template;
    }
    applyOptions(this, options);
  }
  if (isSimpleWindowsTerm) {
    ansiStyles.blue.open = "[94m";
  }
  for (const key of Object.keys(ansiStyles)) {
    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
    styles[key] = {
      get() {
        const codes = ansiStyles[key];
        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
      }
    };
  }
  styles.visible = {
    get() {
      return build.call(this, this._styles || [], true, "visible");
    }
  };
  ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");
  for (const model of Object.keys(ansiStyles.color.ansi)) {
    if (skipModels.has(model)) {
      continue;
    }
    styles[model] = {
      get() {
        const level = this.level;
        return function() {
          const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
          const codes = {
            open,
            close: ansiStyles.color.close,
            closeRe: ansiStyles.color.closeRe
          };
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
        };
      }
    };
  }
  ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");
  for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
    if (skipModels.has(model)) {
      continue;
    }
    const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
    styles[bgModel] = {
      get() {
        const level = this.level;
        return function() {
          const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
          const codes = {
            open,
            close: ansiStyles.bgColor.close,
            closeRe: ansiStyles.bgColor.closeRe
          };
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
        };
      }
    };
  }
  var proto = Object.defineProperties(() => {
  }, styles);
  function build(_styles, _empty, key) {
    const builder = function() {
      return applyStyle.apply(builder, arguments);
    };
    builder._styles = _styles;
    builder._empty = _empty;
    const self2 = this;
    Object.defineProperty(builder, "level", {
      enumerable: true,
      get() {
        return self2.level;
      },
      set(level) {
        self2.level = level;
      }
    });
    Object.defineProperty(builder, "enabled", {
      enumerable: true,
      get() {
        return self2.enabled;
      },
      set(enabled) {
        self2.enabled = enabled;
      }
    });
    builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
    builder.__proto__ = proto;
    return builder;
  }
  function applyStyle() {
    const args = arguments;
    const argsLen = args.length;
    let str = String(arguments[0]);
    if (argsLen === 0) {
      return "";
    }
    if (argsLen > 1) {
      for (let a = 1; a < argsLen; a++) {
        str += " " + args[a];
      }
    }
    if (!this.enabled || this.level <= 0 || !str) {
      return this._empty ? "" : str;
    }
    const originalDim = ansiStyles.dim.open;
    if (isSimpleWindowsTerm && this.hasGrey) {
      ansiStyles.dim.open = "";
    }
    for (const code of this._styles.slice().reverse()) {
      str = code.open + str.replace(code.closeRe, code.open) + code.close;
      str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
    }
    ansiStyles.dim.open = originalDim;
    return str;
  }
  function chalkTag(chalk, strings) {
    if (!Array.isArray(strings)) {
      return [].slice.call(arguments, 1).join(" ");
    }
    const args = [].slice.call(arguments, 2);
    const parts = [strings.raw[0]];
    for (let i = 1; i < strings.length; i++) {
      parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
      parts.push(String(strings.raw[i]));
    }
    return template(chalk, parts.join(""));
  }
  Object.defineProperties(Chalk.prototype, styles);
  module2.exports = Chalk();
  module2.exports.supportsColor = stdoutColor;
  module2.exports.default = module2.exports;
});

// node_modules/.pnpm/@babel/highlight@7.12.13/node_modules/@babel/highlight/lib/index.js
var require_lib8 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.shouldHighlight = shouldHighlight;
  exports2.getChalk = getChalk;
  exports2.default = highlight;
  var jsTokensNs = _interopRequireWildcard(require_js_tokens());
  var _helperValidatorIdentifier = require_lib7();
  var _chalk = _interopRequireDefault(require_chalk());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function")
      return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function() {
      return cache;
    };
    return cache;
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var sometimesKeywords = new Set(["as", "async", "from", "get", "of", "set"]);
  function getDefs(chalk) {
    return {
      keyword: chalk.cyan,
      capitalized: chalk.yellow,
      jsxIdentifier: chalk.yellow,
      punctuator: chalk.yellow,
      number: chalk.magenta,
      string: chalk.green,
      regex: chalk.magenta,
      comment: chalk.grey,
      invalid: chalk.white.bgRed.bold
    };
  }
  var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
  var BRACKET = /^[()[\]{}]$/;
  var tokenize;
  {
    const {
      matchToToken
    } = jsTokensNs;
    const JSX_TAG = /^[a-z][\w-]*$/i;
    const getTokenType = function(token, offset, text) {
      if (token.type === "name") {
        if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {
          return "keyword";
        }
        if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.substr(offset - 2, 2) == "</")) {
          return "jsxIdentifier";
        }
        if (token.value[0] !== token.value[0].toLowerCase()) {
          return "capitalized";
        }
      }
      if (token.type === "punctuator" && BRACKET.test(token.value)) {
        return "bracket";
      }
      if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
        return "punctuator";
      }
      return token.type;
    };
    tokenize = function* (text) {
      let match;
      while (match = jsTokensNs.default.exec(text)) {
        const token = matchToToken(match);
        yield {
          type: getTokenType(token, match.index, text),
          value: token.value
        };
      }
    };
  }
  function highlightTokens(defs, text) {
    let highlighted = "";
    for (const {
      type,
      value
    } of tokenize(text)) {
      const colorize = defs[type];
      if (colorize) {
        highlighted += value.split(NEWLINE).map((str) => colorize(str)).join("\n");
      } else {
        highlighted += value;
      }
    }
    return highlighted;
  }
  function shouldHighlight(options) {
    return _chalk.default.supportsColor || options.forceColor;
  }
  function getChalk(options) {
    let chalk = _chalk.default;
    if (options.forceColor) {
      chalk = new _chalk.default.constructor({
        enabled: true,
        level: 1
      });
    }
    return chalk;
  }
  function highlight(code, options = {}) {
    if (shouldHighlight(options)) {
      const chalk = getChalk(options);
      const defs = getDefs(chalk);
      return highlightTokens(defs, code);
    } else {
      return code;
    }
  }
});

// node_modules/.pnpm/@babel/code-frame@7.12.13/node_modules/@babel/code-frame/lib/index.js
var require_lib9 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.codeFrameColumns = codeFrameColumns;
  exports2.default = _default;
  var _highlight = _interopRequireWildcard(require_lib8());
  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function")
      return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function() {
      return cache;
    };
    return cache;
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var deprecationWarningShown = false;
  function getDefs(chalk) {
    return {
      gutter: chalk.grey,
      marker: chalk.red.bold,
      message: chalk.red.bold
    };
  }
  var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
  function getMarkerLines(loc, source, opts) {
    const startLoc = Object.assign({
      column: 0,
      line: -1
    }, loc.start);
    const endLoc = Object.assign({}, startLoc, loc.end);
    const {
      linesAbove = 2,
      linesBelow = 3
    } = opts || {};
    const startLine = startLoc.line;
    const startColumn = startLoc.column;
    const endLine = endLoc.line;
    const endColumn = endLoc.column;
    let start = Math.max(startLine - (linesAbove + 1), 0);
    let end = Math.min(source.length, endLine + linesBelow);
    if (startLine === -1) {
      start = 0;
    }
    if (endLine === -1) {
      end = source.length;
    }
    const lineDiff = endLine - startLine;
    const markerLines = {};
    if (lineDiff) {
      for (let i = 0; i <= lineDiff; i++) {
        const lineNumber = i + startLine;
        if (!startColumn) {
          markerLines[lineNumber] = true;
        } else if (i === 0) {
          const sourceLength = source[lineNumber - 1].length;
          markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
        } else if (i === lineDiff) {
          markerLines[lineNumber] = [0, endColumn];
        } else {
          const sourceLength = source[lineNumber - i].length;
          markerLines[lineNumber] = [0, sourceLength];
        }
      }
    } else {
      if (startColumn === endColumn) {
        if (startColumn) {
          markerLines[startLine] = [startColumn, 0];
        } else {
          markerLines[startLine] = true;
        }
      } else {
        markerLines[startLine] = [startColumn, endColumn - startColumn];
      }
    }
    return {
      start,
      end,
      markerLines
    };
  }
  function codeFrameColumns(rawLines, loc, opts = {}) {
    const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
    const chalk = (0, _highlight.getChalk)(opts);
    const defs = getDefs(chalk);
    const maybeHighlight = (chalkFn, string) => {
      return highlighted ? chalkFn(string) : string;
    };
    const lines = rawLines.split(NEWLINE);
    const {
      start,
      end,
      markerLines
    } = getMarkerLines(loc, lines, opts);
    const hasColumns = loc.start && typeof loc.start.column === "number";
    const numberMaxWidth = String(end).length;
    const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
    let frame = highlightedLines.split(NEWLINE).slice(start, end).map((line, index) => {
      const number = start + 1 + index;
      const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
      const gutter = ` ${paddedNumber} |`;
      const hasMarker = markerLines[number];
      const lastMarkerLine = !markerLines[number + 1];
      if (hasMarker) {
        let markerLine = "";
        if (Array.isArray(hasMarker)) {
          const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
          const numberOfMarkers = hasMarker[1] || 1;
          markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");
          if (lastMarkerLine && opts.message) {
            markerLine += " " + maybeHighlight(defs.message, opts.message);
          }
        }
        return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");
      } else {
        return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`;
      }
    }).join("\n");
    if (opts.message && !hasColumns) {
      frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}
${frame}`;
    }
    if (highlighted) {
      return chalk.reset(frame);
    } else {
      return frame;
    }
  }
  function _default(rawLines, lineNumber, colNumber, opts = {}) {
    if (!deprecationWarningShown) {
      deprecationWarningShown = true;
      const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
      if (process.emitWarning) {
        process.emitWarning(message, "DeprecationWarning");
      } else {
        const deprecationError = new Error(message);
        deprecationError.name = "DeprecationWarning";
        console.warn(new Error(message));
      }
    }
    colNumber = Math.max(colNumber, 0);
    const location = {
      start: {
        column: colNumber,
        line: lineNumber
      }
    };
    return codeFrameColumns(rawLines, location, opts);
  }
});

// node_modules/.pnpm/parse-json@5.2.0/node_modules/parse-json/index.js
var require_parse_json = __commonJS((exports2, module2) => {
  "use strict";
  var errorEx = require_error_ex();
  var fallback = require_json_parse_even_better_errors();
  var {default: LinesAndColumns} = require_dist();
  var {codeFrameColumns} = require_lib9();
  var JSONError = errorEx("JSONError", {
    fileName: errorEx.append("in %s"),
    codeFrame: errorEx.append("\n\n%s\n")
  });
  var parseJson = (string, reviver, filename) => {
    if (typeof reviver === "string") {
      filename = reviver;
      reviver = null;
    }
    try {
      try {
        return JSON.parse(string, reviver);
      } catch (error) {
        fallback(string, reviver);
        throw error;
      }
    } catch (error) {
      error.message = error.message.replace(/\n/g, "");
      const indexMatch = error.message.match(/in JSON at position (\d+) while parsing/);
      const jsonError = new JSONError(error);
      if (filename) {
        jsonError.fileName = filename;
      }
      if (indexMatch && indexMatch.length > 0) {
        const lines = new LinesAndColumns(string);
        const index = Number(indexMatch[1]);
        const location = lines.locationForIndex(index);
        const codeFrame = codeFrameColumns(string, {start: {line: location.line + 1, column: location.column + 1}}, {highlightCode: true});
        jsonError.codeFrame = codeFrame;
      }
      throw jsonError;
    }
  };
  parseJson.JSONError = JSONError;
  module2.exports = parseJson;
});

// node_modules/.pnpm/semver@5.7.1/node_modules/semver/semver.js
var require_semver = __commonJS((exports2, module2) => {
  exports2 = module2.exports = SemVer;
  var debug;
  if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
    debug = function() {
      var args = Array.prototype.slice.call(arguments, 0);
      args.unshift("SEMVER");
      console.log.apply(console, args);
    };
  } else {
    debug = function() {
    };
  }
  exports2.SEMVER_SPEC_VERSION = "2.0.0";
  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var MAX_SAFE_COMPONENT_LENGTH = 16;
  var re = exports2.re = [];
  var src = exports2.src = [];
  var R = 0;
  var NUMERICIDENTIFIER = R++;
  src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
  var NUMERICIDENTIFIERLOOSE = R++;
  src[NUMERICIDENTIFIERLOOSE] = "[0-9]+";
  var NONNUMERICIDENTIFIER = R++;
  src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
  var MAINVERSION = R++;
  src[MAINVERSION] = "(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")";
  var MAINVERSIONLOOSE = R++;
  src[MAINVERSIONLOOSE] = "(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")";
  var PRERELEASEIDENTIFIER = R++;
  src[PRERELEASEIDENTIFIER] = "(?:" + src[NUMERICIDENTIFIER] + "|" + src[NONNUMERICIDENTIFIER] + ")";
  var PRERELEASEIDENTIFIERLOOSE = R++;
  src[PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[NUMERICIDENTIFIERLOOSE] + "|" + src[NONNUMERICIDENTIFIER] + ")";
  var PRERELEASE = R++;
  src[PRERELEASE] = "(?:-(" + src[PRERELEASEIDENTIFIER] + "(?:\\." + src[PRERELEASEIDENTIFIER] + ")*))";
  var PRERELEASELOOSE = R++;
  src[PRERELEASELOOSE] = "(?:-?(" + src[PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[PRERELEASEIDENTIFIERLOOSE] + ")*))";
  var BUILDIDENTIFIER = R++;
  src[BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
  var BUILD = R++;
  src[BUILD] = "(?:\\+(" + src[BUILDIDENTIFIER] + "(?:\\." + src[BUILDIDENTIFIER] + ")*))";
  var FULL = R++;
  var FULLPLAIN = "v?" + src[MAINVERSION] + src[PRERELEASE] + "?" + src[BUILD] + "?";
  src[FULL] = "^" + FULLPLAIN + "$";
  var LOOSEPLAIN = "[v=\\s]*" + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + "?" + src[BUILD] + "?";
  var LOOSE = R++;
  src[LOOSE] = "^" + LOOSEPLAIN + "$";
  var GTLT = R++;
  src[GTLT] = "((?:<|>)?=?)";
  var XRANGEIDENTIFIERLOOSE = R++;
  src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
  var XRANGEIDENTIFIER = R++;
  src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
  var XRANGEPLAIN = R++;
  src[XRANGEPLAIN] = "[v=\\s]*(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:" + src[PRERELEASE] + ")?" + src[BUILD] + "?)?)?";
  var XRANGEPLAINLOOSE = R++;
  src[XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:" + src[PRERELEASELOOSE] + ")?" + src[BUILD] + "?)?)?";
  var XRANGE = R++;
  src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
  var XRANGELOOSE = R++;
  src[XRANGELOOSE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";
  var COERCE = R++;
  src[COERCE] = "(?:^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
  var LONETILDE = R++;
  src[LONETILDE] = "(?:~>?)";
  var TILDETRIM = R++;
  src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
  re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
  var tildeTrimReplace = "$1~";
  var TILDE = R++;
  src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
  var TILDELOOSE = R++;
  src[TILDELOOSE] = "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";
  var LONECARET = R++;
  src[LONECARET] = "(?:\\^)";
  var CARETTRIM = R++;
  src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
  re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
  var caretTrimReplace = "$1^";
  var CARET = R++;
  src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
  var CARETLOOSE = R++;
  src[CARETLOOSE] = "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";
  var COMPARATORLOOSE = R++;
  src[COMPARATORLOOSE] = "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
  var COMPARATOR = R++;
  src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";
  var COMPARATORTRIM = R++;
  src[COMPARATORTRIM] = "(\\s*)" + src[GTLT] + "\\s*(" + LOOSEPLAIN + "|" + src[XRANGEPLAIN] + ")";
  re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
  var comparatorTrimReplace = "$1$2$3";
  var HYPHENRANGE = R++;
  src[HYPHENRANGE] = "^\\s*(" + src[XRANGEPLAIN] + ")\\s+-\\s+(" + src[XRANGEPLAIN] + ")\\s*$";
  var HYPHENRANGELOOSE = R++;
  src[HYPHENRANGELOOSE] = "^\\s*(" + src[XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[XRANGEPLAINLOOSE] + ")\\s*$";
  var STAR = R++;
  src[STAR] = "(<|>)?=?\\s*\\*";
  for (var i = 0; i < R; i++) {
    debug(i, src[i]);
    if (!re[i]) {
      re[i] = new RegExp(src[i]);
    }
  }
  exports2.parse = parse2;
  function parse2(version, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version !== "string") {
      return null;
    }
    if (version.length > MAX_LENGTH) {
      return null;
    }
    var r = options.loose ? re[LOOSE] : re[FULL];
    if (!r.test(version)) {
      return null;
    }
    try {
      return new SemVer(version, options);
    } catch (er) {
      return null;
    }
  }
  exports2.valid = valid;
  function valid(version, options) {
    var v = parse2(version, options);
    return v ? v.version : null;
  }
  exports2.clean = clean;
  function clean(version, options) {
    var s = parse2(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
  }
  exports2.SemVer = SemVer;
  function SemVer(version, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (version instanceof SemVer) {
      if (version.loose === options.loose) {
        return version;
      } else {
        version = version.version;
      }
    } else if (typeof version !== "string") {
      throw new TypeError("Invalid Version: " + version);
    }
    if (version.length > MAX_LENGTH) {
      throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
    }
    if (!(this instanceof SemVer)) {
      return new SemVer(version, options);
    }
    debug("SemVer", version, options);
    this.options = options;
    this.loose = !!options.loose;
    var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);
    if (!m) {
      throw new TypeError("Invalid Version: " + version);
    }
    this.raw = version;
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];
    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError("Invalid major version");
    }
    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError("Invalid minor version");
    }
    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError("Invalid patch version");
    }
    if (!m[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m[4].split(".").map(function(id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num;
          }
        }
        return id;
      });
    }
    this.build = m[5] ? m[5].split(".") : [];
    this.format();
  }
  SemVer.prototype.format = function() {
    this.version = this.major + "." + this.minor + "." + this.patch;
    if (this.prerelease.length) {
      this.version += "-" + this.prerelease.join(".");
    }
    return this.version;
  };
  SemVer.prototype.toString = function() {
    return this.version;
  };
  SemVer.prototype.compare = function(other) {
    debug("SemVer.compare", this.version, this.options, other);
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    return this.compareMain(other) || this.comparePre(other);
  };
  SemVer.prototype.compareMain = function(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
  };
  SemVer.prototype.comparePre = function(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    if (this.prerelease.length && !other.prerelease.length) {
      return -1;
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1;
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0;
    }
    var i2 = 0;
    do {
      var a = this.prerelease[i2];
      var b = other.prerelease[i2];
      debug("prerelease compare", i2, a, b);
      if (a === void 0 && b === void 0) {
        return 0;
      } else if (b === void 0) {
        return 1;
      } else if (a === void 0) {
        return -1;
      } else if (a === b) {
        continue;
      } else {
        return compareIdentifiers(a, b);
      }
    } while (++i2);
  };
  SemVer.prototype.inc = function(release, identifier) {
    switch (release) {
      case "premajor":
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc("pre", identifier);
        break;
      case "preminor":
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc("pre", identifier);
        break;
      case "prepatch":
        this.prerelease.length = 0;
        this.inc("patch", identifier);
        this.inc("pre", identifier);
        break;
      case "prerelease":
        if (this.prerelease.length === 0) {
          this.inc("patch", identifier);
        }
        this.inc("pre", identifier);
        break;
      case "major":
        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
          this.major++;
        }
        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break;
      case "minor":
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++;
        }
        this.patch = 0;
        this.prerelease = [];
        break;
      case "patch":
        if (this.prerelease.length === 0) {
          this.patch++;
        }
        this.prerelease = [];
        break;
      case "pre":
        if (this.prerelease.length === 0) {
          this.prerelease = [0];
        } else {
          var i2 = this.prerelease.length;
          while (--i2 >= 0) {
            if (typeof this.prerelease[i2] === "number") {
              this.prerelease[i2]++;
              i2 = -2;
            }
          }
          if (i2 === -1) {
            this.prerelease.push(0);
          }
        }
        if (identifier) {
          if (this.prerelease[0] === identifier) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = [identifier, 0];
            }
          } else {
            this.prerelease = [identifier, 0];
          }
        }
        break;
      default:
        throw new Error("invalid increment argument: " + release);
    }
    this.format();
    this.raw = this.version;
    return this;
  };
  exports2.inc = inc;
  function inc(version, release, loose, identifier) {
    if (typeof loose === "string") {
      identifier = loose;
      loose = void 0;
    }
    try {
      return new SemVer(version, loose).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  }
  exports2.diff = diff;
  function diff(version1, version2) {
    if (eq(version1, version2)) {
      return null;
    } else {
      var v1 = parse2(version1);
      var v2 = parse2(version2);
      var prefix = "";
      if (v1.prerelease.length || v2.prerelease.length) {
        prefix = "pre";
        var defaultResult = "prerelease";
      }
      for (var key in v1) {
        if (key === "major" || key === "minor" || key === "patch") {
          if (v1[key] !== v2[key]) {
            return prefix + key;
          }
        }
      }
      return defaultResult;
    }
  }
  exports2.compareIdentifiers = compareIdentifiers;
  var numeric = /^[0-9]+$/;
  function compareIdentifiers(a, b) {
    var anum = numeric.test(a);
    var bnum = numeric.test(b);
    if (anum && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  }
  exports2.rcompareIdentifiers = rcompareIdentifiers;
  function rcompareIdentifiers(a, b) {
    return compareIdentifiers(b, a);
  }
  exports2.major = major;
  function major(a, loose) {
    return new SemVer(a, loose).major;
  }
  exports2.minor = minor;
  function minor(a, loose) {
    return new SemVer(a, loose).minor;
  }
  exports2.patch = patch;
  function patch(a, loose) {
    return new SemVer(a, loose).patch;
  }
  exports2.compare = compare;
  function compare(a, b, loose) {
    return new SemVer(a, loose).compare(new SemVer(b, loose));
  }
  exports2.compareLoose = compareLoose;
  function compareLoose(a, b) {
    return compare(a, b, true);
  }
  exports2.rcompare = rcompare;
  function rcompare(a, b, loose) {
    return compare(b, a, loose);
  }
  exports2.sort = sort;
  function sort(list, loose) {
    return list.sort(function(a, b) {
      return exports2.compare(a, b, loose);
    });
  }
  exports2.rsort = rsort;
  function rsort(list, loose) {
    return list.sort(function(a, b) {
      return exports2.rcompare(a, b, loose);
    });
  }
  exports2.gt = gt;
  function gt(a, b, loose) {
    return compare(a, b, loose) > 0;
  }
  exports2.lt = lt;
  function lt(a, b, loose) {
    return compare(a, b, loose) < 0;
  }
  exports2.eq = eq;
  function eq(a, b, loose) {
    return compare(a, b, loose) === 0;
  }
  exports2.neq = neq;
  function neq(a, b, loose) {
    return compare(a, b, loose) !== 0;
  }
  exports2.gte = gte;
  function gte(a, b, loose) {
    return compare(a, b, loose) >= 0;
  }
  exports2.lte = lte;
  function lte(a, b, loose) {
    return compare(a, b, loose) <= 0;
  }
  exports2.cmp = cmp;
  function cmp(a, op, b, loose) {
    switch (op) {
      case "===":
        if (typeof a === "object")
          a = a.version;
        if (typeof b === "object")
          b = b.version;
        return a === b;
      case "!==":
        if (typeof a === "object")
          a = a.version;
        if (typeof b === "object")
          b = b.version;
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq(a, b, loose);
      case "!=":
        return neq(a, b, loose);
      case ">":
        return gt(a, b, loose);
      case ">=":
        return gte(a, b, loose);
      case "<":
        return lt(a, b, loose);
      case "<=":
        return lte(a, b, loose);
      default:
        throw new TypeError("Invalid operator: " + op);
    }
  }
  exports2.Comparator = Comparator;
  function Comparator(comp, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp;
      } else {
        comp = comp.value;
      }
    }
    if (!(this instanceof Comparator)) {
      return new Comparator(comp, options);
    }
    debug("comparator", comp, options);
    this.options = options;
    this.loose = !!options.loose;
    this.parse(comp);
    if (this.semver === ANY) {
      this.value = "";
    } else {
      this.value = this.operator + this.semver.version;
    }
    debug("comp", this);
  }
  var ANY = {};
  Comparator.prototype.parse = function(comp) {
    var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var m = comp.match(r);
    if (!m) {
      throw new TypeError("Invalid comparator: " + comp);
    }
    this.operator = m[1];
    if (this.operator === "=") {
      this.operator = "";
    }
    if (!m[2]) {
      this.semver = ANY;
    } else {
      this.semver = new SemVer(m[2], this.options.loose);
    }
  };
  Comparator.prototype.toString = function() {
    return this.value;
  };
  Comparator.prototype.test = function(version) {
    debug("Comparator.test", version, this.options.loose);
    if (this.semver === ANY) {
      return true;
    }
    if (typeof version === "string") {
      version = new SemVer(version, this.options);
    }
    return cmp(version, this.operator, this.semver, this.options);
  };
  Comparator.prototype.intersects = function(comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError("a Comparator is required");
    }
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    var rangeTmp;
    if (this.operator === "") {
      rangeTmp = new Range(comp.value, options);
      return satisfies(this.value, rangeTmp, options);
    } else if (comp.operator === "") {
      rangeTmp = new Range(this.value, options);
      return satisfies(comp.semver, rangeTmp, options);
    }
    var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
    var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
    var sameSemVer = this.semver.version === comp.semver.version;
    var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
    var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
    var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
    return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
  };
  exports2.Range = Range;
  function Range(range, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (range instanceof Range) {
      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
        return range;
      } else {
        return new Range(range.raw, options);
      }
    }
    if (range instanceof Comparator) {
      return new Range(range.value, options);
    }
    if (!(this instanceof Range)) {
      return new Range(range, options);
    }
    this.options = options;
    this.loose = !!options.loose;
    this.includePrerelease = !!options.includePrerelease;
    this.raw = range;
    this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
      return this.parseRange(range2.trim());
    }, this).filter(function(c) {
      return c.length;
    });
    if (!this.set.length) {
      throw new TypeError("Invalid SemVer Range: " + range);
    }
    this.format();
  }
  Range.prototype.format = function() {
    this.range = this.set.map(function(comps) {
      return comps.join(" ").trim();
    }).join("||").trim();
    return this.range;
  };
  Range.prototype.toString = function() {
    return this.range;
  };
  Range.prototype.parseRange = function(range) {
    var loose = this.options.loose;
    range = range.trim();
    var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
    range = range.replace(hr, hyphenReplace);
    debug("hyphen replace", range);
    range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
    debug("comparator trim", range, re[COMPARATORTRIM]);
    range = range.replace(re[TILDETRIM], tildeTrimReplace);
    range = range.replace(re[CARETTRIM], caretTrimReplace);
    range = range.split(/\s+/).join(" ");
    var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var set = range.split(" ").map(function(comp) {
      return parseComparator(comp, this.options);
    }, this).join(" ").split(/\s+/);
    if (this.options.loose) {
      set = set.filter(function(comp) {
        return !!comp.match(compRe);
      });
    }
    set = set.map(function(comp) {
      return new Comparator(comp, this.options);
    }, this);
    return set;
  };
  Range.prototype.intersects = function(range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError("a Range is required");
    }
    return this.set.some(function(thisComparators) {
      return thisComparators.every(function(thisComparator) {
        return range.set.some(function(rangeComparators) {
          return rangeComparators.every(function(rangeComparator) {
            return thisComparator.intersects(rangeComparator, options);
          });
        });
      });
    });
  };
  exports2.toComparators = toComparators;
  function toComparators(range, options) {
    return new Range(range, options).set.map(function(comp) {
      return comp.map(function(c) {
        return c.value;
      }).join(" ").trim().split(" ");
    });
  }
  function parseComparator(comp, options) {
    debug("comp", comp, options);
    comp = replaceCarets(comp, options);
    debug("caret", comp);
    comp = replaceTildes(comp, options);
    debug("tildes", comp);
    comp = replaceXRanges(comp, options);
    debug("xrange", comp);
    comp = replaceStars(comp, options);
    debug("stars", comp);
    return comp;
  }
  function isX(id) {
    return !id || id.toLowerCase() === "x" || id === "*";
  }
  function replaceTildes(comp, options) {
    return comp.trim().split(/\s+/).map(function(comp2) {
      return replaceTilde(comp2, options);
    }).join(" ");
  }
  function replaceTilde(comp, options) {
    var r = options.loose ? re[TILDELOOSE] : re[TILDE];
    return comp.replace(r, function(_, M, m, p, pr) {
      debug("tilde", comp, _, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (isX(p)) {
        ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
      } else if (pr) {
        debug("replaceTilde pr", pr);
        ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
      } else {
        ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
      }
      debug("tilde return", ret);
      return ret;
    });
  }
  function replaceCarets(comp, options) {
    return comp.trim().split(/\s+/).map(function(comp2) {
      return replaceCaret(comp2, options);
    }).join(" ");
  }
  function replaceCaret(comp, options) {
    debug("caret", comp, options);
    var r = options.loose ? re[CARETLOOSE] : re[CARET];
    return comp.replace(r, function(_, M, m, p, pr) {
      debug("caret", comp, _, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (isX(p)) {
        if (M === "0") {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
        }
      } else if (pr) {
        debug("replaceCaret pr", pr);
        if (M === "0") {
          if (m === "0") {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
          }
        } else {
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
        }
      } else {
        debug("no pr");
        if (M === "0") {
          if (m === "0") {
            ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
          }
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
        }
      }
      debug("caret return", ret);
      return ret;
    });
  }
  function replaceXRanges(comp, options) {
    debug("replaceXRanges", comp, options);
    return comp.split(/\s+/).map(function(comp2) {
      return replaceXRange(comp2, options);
    }).join(" ");
  }
  function replaceXRange(comp, options) {
    comp = comp.trim();
    var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
    return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
      debug("xRange", comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M);
      var xm = xM || isX(m);
      var xp = xm || isX(p);
      var anyX = xp;
      if (gtlt === "=" && anyX) {
        gtlt = "";
      }
      if (xM) {
        if (gtlt === ">" || gtlt === "<") {
          ret = "<0.0.0";
        } else {
          ret = "*";
        }
      } else if (gtlt && anyX) {
        if (xm) {
          m = 0;
        }
        p = 0;
        if (gtlt === ">") {
          gtlt = ">=";
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === "<=") {
          gtlt = "<";
          if (xm) {
            M = +M + 1;
          } else {
            m = +m + 1;
          }
        }
        ret = gtlt + M + "." + m + "." + p;
      } else if (xm) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (xp) {
        ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
      }
      debug("xRange return", ret);
      return ret;
    });
  }
  function replaceStars(comp, options) {
    debug("replaceStars", comp, options);
    return comp.trim().replace(re[STAR], "");
  }
  function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
    if (isX(fM)) {
      from = "";
    } else if (isX(fm)) {
      from = ">=" + fM + ".0.0";
    } else if (isX(fp)) {
      from = ">=" + fM + "." + fm + ".0";
    } else {
      from = ">=" + from;
    }
    if (isX(tM)) {
      to = "";
    } else if (isX(tm)) {
      to = "<" + (+tM + 1) + ".0.0";
    } else if (isX(tp)) {
      to = "<" + tM + "." + (+tm + 1) + ".0";
    } else if (tpr) {
      to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
    } else {
      to = "<=" + to;
    }
    return (from + " " + to).trim();
  }
  Range.prototype.test = function(version) {
    if (!version) {
      return false;
    }
    if (typeof version === "string") {
      version = new SemVer(version, this.options);
    }
    for (var i2 = 0; i2 < this.set.length; i2++) {
      if (testSet(this.set[i2], version, this.options)) {
        return true;
      }
    }
    return false;
  };
  function testSet(set, version, options) {
    for (var i2 = 0; i2 < set.length; i2++) {
      if (!set[i2].test(version)) {
        return false;
      }
    }
    if (version.prerelease.length && !options.includePrerelease) {
      for (i2 = 0; i2 < set.length; i2++) {
        debug(set[i2].semver);
        if (set[i2].semver === ANY) {
          continue;
        }
        if (set[i2].semver.prerelease.length > 0) {
          var allowed = set[i2].semver;
          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
            return true;
          }
        }
      }
      return false;
    }
    return true;
  }
  exports2.satisfies = satisfies;
  function satisfies(version, range, options) {
    try {
      range = new Range(range, options);
    } catch (er) {
      return false;
    }
    return range.test(version);
  }
  exports2.maxSatisfying = maxSatisfying;
  function maxSatisfying(versions, range, options) {
    var max = null;
    var maxSV = null;
    try {
      var rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach(function(v) {
      if (rangeObj.test(v)) {
        if (!max || maxSV.compare(v) === -1) {
          max = v;
          maxSV = new SemVer(max, options);
        }
      }
    });
    return max;
  }
  exports2.minSatisfying = minSatisfying;
  function minSatisfying(versions, range, options) {
    var min = null;
    var minSV = null;
    try {
      var rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach(function(v) {
      if (rangeObj.test(v)) {
        if (!min || minSV.compare(v) === 1) {
          min = v;
          minSV = new SemVer(min, options);
        }
      }
    });
    return min;
  }
  exports2.minVersion = minVersion;
  function minVersion(range, loose) {
    range = new Range(range, loose);
    var minver = new SemVer("0.0.0");
    if (range.test(minver)) {
      return minver;
    }
    minver = new SemVer("0.0.0-0");
    if (range.test(minver)) {
      return minver;
    }
    minver = null;
    for (var i2 = 0; i2 < range.set.length; ++i2) {
      var comparators = range.set[i2];
      comparators.forEach(function(comparator) {
        var compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          case "":
          case ">=":
            if (!minver || gt(minver, compver)) {
              minver = compver;
            }
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error("Unexpected operation: " + comparator.operator);
        }
      });
    }
    if (minver && range.test(minver)) {
      return minver;
    }
    return null;
  }
  exports2.validRange = validRange;
  function validRange(range, options) {
    try {
      return new Range(range, options).range || "*";
    } catch (er) {
      return null;
    }
  }
  exports2.ltr = ltr;
  function ltr(version, range, options) {
    return outside(version, range, "<", options);
  }
  exports2.gtr = gtr;
  function gtr(version, range, options) {
    return outside(version, range, ">", options);
  }
  exports2.outside = outside;
  function outside(version, range, hilo, options) {
    version = new SemVer(version, options);
    range = new Range(range, options);
    var gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version, range, options)) {
      return false;
    }
    for (var i2 = 0; i2 < range.set.length; ++i2) {
      var comparators = range.set[i2];
      var high = null;
      var low = null;
      comparators.forEach(function(comparator) {
        if (comparator.semver === ANY) {
          comparator = new Comparator(">=0.0.0");
        }
        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, options)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, options)) {
          low = comparator;
        }
      });
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }
      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false;
      }
    }
    return true;
  }
  exports2.prerelease = prerelease;
  function prerelease(version, options) {
    var parsed = parse2(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  }
  exports2.intersects = intersects;
  function intersects(r1, r2, options) {
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2);
  }
  exports2.coerce = coerce;
  function coerce(version) {
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version !== "string") {
      return null;
    }
    var match = version.match(re[COERCE]);
    if (match == null) {
      return null;
    }
    return parse2(match[1] + "." + (match[2] || "0") + "." + (match[3] || "0"));
  }
});

// node_modules/.pnpm/spdx-license-ids@3.0.7/node_modules/spdx-license-ids/index.json
var require_spdx_license_ids = __commonJS((exports2, module2) => {
  module2.exports = [
    "0BSD",
    "AAL",
    "ADSL",
    "AFL-1.1",
    "AFL-1.2",
    "AFL-2.0",
    "AFL-2.1",
    "AFL-3.0",
    "AGPL-1.0-only",
    "AGPL-1.0-or-later",
    "AGPL-3.0-only",
    "AGPL-3.0-or-later",
    "AMDPLPA",
    "AML",
    "AMPAS",
    "ANTLR-PD",
    "ANTLR-PD-fallback",
    "APAFML",
    "APL-1.0",
    "APSL-1.0",
    "APSL-1.1",
    "APSL-1.2",
    "APSL-2.0",
    "Abstyles",
    "Adobe-2006",
    "Adobe-Glyph",
    "Afmparse",
    "Aladdin",
    "Apache-1.0",
    "Apache-1.1",
    "Apache-2.0",
    "Artistic-1.0",
    "Artistic-1.0-Perl",
    "Artistic-1.0-cl8",
    "Artistic-2.0",
    "BSD-1-Clause",
    "BSD-2-Clause",
    "BSD-2-Clause-Patent",
    "BSD-2-Clause-Views",
    "BSD-3-Clause",
    "BSD-3-Clause-Attribution",
    "BSD-3-Clause-Clear",
    "BSD-3-Clause-LBNL",
    "BSD-3-Clause-No-Nuclear-License",
    "BSD-3-Clause-No-Nuclear-License-2014",
    "BSD-3-Clause-No-Nuclear-Warranty",
    "BSD-3-Clause-Open-MPI",
    "BSD-4-Clause",
    "BSD-4-Clause-UC",
    "BSD-Protection",
    "BSD-Source-Code",
    "BSL-1.0",
    "BUSL-1.1",
    "Bahyph",
    "Barr",
    "Beerware",
    "BitTorrent-1.0",
    "BitTorrent-1.1",
    "BlueOak-1.0.0",
    "Borceux",
    "CAL-1.0",
    "CAL-1.0-Combined-Work-Exception",
    "CATOSL-1.1",
    "CC-BY-1.0",
    "CC-BY-2.0",
    "CC-BY-2.5",
    "CC-BY-3.0",
    "CC-BY-3.0-AT",
    "CC-BY-3.0-US",
    "CC-BY-4.0",
    "CC-BY-NC-1.0",
    "CC-BY-NC-2.0",
    "CC-BY-NC-2.5",
    "CC-BY-NC-3.0",
    "CC-BY-NC-4.0",
    "CC-BY-NC-ND-1.0",
    "CC-BY-NC-ND-2.0",
    "CC-BY-NC-ND-2.5",
    "CC-BY-NC-ND-3.0",
    "CC-BY-NC-ND-3.0-IGO",
    "CC-BY-NC-ND-4.0",
    "CC-BY-NC-SA-1.0",
    "CC-BY-NC-SA-2.0",
    "CC-BY-NC-SA-2.5",
    "CC-BY-NC-SA-3.0",
    "CC-BY-NC-SA-4.0",
    "CC-BY-ND-1.0",
    "CC-BY-ND-2.0",
    "CC-BY-ND-2.5",
    "CC-BY-ND-3.0",
    "CC-BY-ND-4.0",
    "CC-BY-SA-1.0",
    "CC-BY-SA-2.0",
    "CC-BY-SA-2.0-UK",
    "CC-BY-SA-2.5",
    "CC-BY-SA-3.0",
    "CC-BY-SA-3.0-AT",
    "CC-BY-SA-4.0",
    "CC-PDDC",
    "CC0-1.0",
    "CDDL-1.0",
    "CDDL-1.1",
    "CDLA-Permissive-1.0",
    "CDLA-Sharing-1.0",
    "CECILL-1.0",
    "CECILL-1.1",
    "CECILL-2.0",
    "CECILL-2.1",
    "CECILL-B",
    "CECILL-C",
    "CERN-OHL-1.1",
    "CERN-OHL-1.2",
    "CERN-OHL-P-2.0",
    "CERN-OHL-S-2.0",
    "CERN-OHL-W-2.0",
    "CNRI-Jython",
    "CNRI-Python",
    "CNRI-Python-GPL-Compatible",
    "CPAL-1.0",
    "CPL-1.0",
    "CPOL-1.02",
    "CUA-OPL-1.0",
    "Caldera",
    "ClArtistic",
    "Condor-1.1",
    "Crossword",
    "CrystalStacker",
    "Cube",
    "D-FSL-1.0",
    "DOC",
    "DSDP",
    "Dotseqn",
    "ECL-1.0",
    "ECL-2.0",
    "EFL-1.0",
    "EFL-2.0",
    "EPICS",
    "EPL-1.0",
    "EPL-2.0",
    "EUDatagrid",
    "EUPL-1.0",
    "EUPL-1.1",
    "EUPL-1.2",
    "Entessa",
    "ErlPL-1.1",
    "Eurosym",
    "FSFAP",
    "FSFUL",
    "FSFULLR",
    "FTL",
    "Fair",
    "Frameworx-1.0",
    "FreeImage",
    "GFDL-1.1-invariants-only",
    "GFDL-1.1-invariants-or-later",
    "GFDL-1.1-no-invariants-only",
    "GFDL-1.1-no-invariants-or-later",
    "GFDL-1.1-only",
    "GFDL-1.1-or-later",
    "GFDL-1.2-invariants-only",
    "GFDL-1.2-invariants-or-later",
    "GFDL-1.2-no-invariants-only",
    "GFDL-1.2-no-invariants-or-later",
    "GFDL-1.2-only",
    "GFDL-1.2-or-later",
    "GFDL-1.3-invariants-only",
    "GFDL-1.3-invariants-or-later",
    "GFDL-1.3-no-invariants-only",
    "GFDL-1.3-no-invariants-or-later",
    "GFDL-1.3-only",
    "GFDL-1.3-or-later",
    "GL2PS",
    "GLWTPL",
    "GPL-1.0-only",
    "GPL-1.0-or-later",
    "GPL-2.0-only",
    "GPL-2.0-or-later",
    "GPL-3.0-only",
    "GPL-3.0-or-later",
    "Giftware",
    "Glide",
    "Glulxe",
    "HPND",
    "HPND-sell-variant",
    "HTMLTIDY",
    "HaskellReport",
    "Hippocratic-2.1",
    "IBM-pibs",
    "ICU",
    "IJG",
    "IPA",
    "IPL-1.0",
    "ISC",
    "ImageMagick",
    "Imlib2",
    "Info-ZIP",
    "Intel",
    "Intel-ACPI",
    "Interbase-1.0",
    "JPNIC",
    "JSON",
    "JasPer-2.0",
    "LAL-1.2",
    "LAL-1.3",
    "LGPL-2.0-only",
    "LGPL-2.0-or-later",
    "LGPL-2.1-only",
    "LGPL-2.1-or-later",
    "LGPL-3.0-only",
    "LGPL-3.0-or-later",
    "LGPLLR",
    "LPL-1.0",
    "LPL-1.02",
    "LPPL-1.0",
    "LPPL-1.1",
    "LPPL-1.2",
    "LPPL-1.3a",
    "LPPL-1.3c",
    "Latex2e",
    "Leptonica",
    "LiLiQ-P-1.1",
    "LiLiQ-R-1.1",
    "LiLiQ-Rplus-1.1",
    "Libpng",
    "Linux-OpenIB",
    "MIT",
    "MIT-0",
    "MIT-CMU",
    "MIT-advertising",
    "MIT-enna",
    "MIT-feh",
    "MIT-open-group",
    "MITNFA",
    "MPL-1.0",
    "MPL-1.1",
    "MPL-2.0",
    "MPL-2.0-no-copyleft-exception",
    "MS-PL",
    "MS-RL",
    "MTLL",
    "MakeIndex",
    "MirOS",
    "Motosoto",
    "MulanPSL-1.0",
    "MulanPSL-2.0",
    "Multics",
    "Mup",
    "NASA-1.3",
    "NBPL-1.0",
    "NCGL-UK-2.0",
    "NCSA",
    "NGPL",
    "NIST-PD",
    "NIST-PD-fallback",
    "NLOD-1.0",
    "NLPL",
    "NOSL",
    "NPL-1.0",
    "NPL-1.1",
    "NPOSL-3.0",
    "NRL",
    "NTP",
    "NTP-0",
    "Naumen",
    "Net-SNMP",
    "NetCDF",
    "Newsletr",
    "Nokia",
    "Noweb",
    "O-UDA-1.0",
    "OCCT-PL",
    "OCLC-2.0",
    "ODC-By-1.0",
    "ODbL-1.0",
    "OFL-1.0",
    "OFL-1.0-RFN",
    "OFL-1.0-no-RFN",
    "OFL-1.1",
    "OFL-1.1-RFN",
    "OFL-1.1-no-RFN",
    "OGC-1.0",
    "OGL-Canada-2.0",
    "OGL-UK-1.0",
    "OGL-UK-2.0",
    "OGL-UK-3.0",
    "OGTSL",
    "OLDAP-1.1",
    "OLDAP-1.2",
    "OLDAP-1.3",
    "OLDAP-1.4",
    "OLDAP-2.0",
    "OLDAP-2.0.1",
    "OLDAP-2.1",
    "OLDAP-2.2",
    "OLDAP-2.2.1",
    "OLDAP-2.2.2",
    "OLDAP-2.3",
    "OLDAP-2.4",
    "OLDAP-2.5",
    "OLDAP-2.6",
    "OLDAP-2.7",
    "OLDAP-2.8",
    "OML",
    "OPL-1.0",
    "OSET-PL-2.1",
    "OSL-1.0",
    "OSL-1.1",
    "OSL-2.0",
    "OSL-2.1",
    "OSL-3.0",
    "OpenSSL",
    "PDDL-1.0",
    "PHP-3.0",
    "PHP-3.01",
    "PSF-2.0",
    "Parity-6.0.0",
    "Parity-7.0.0",
    "Plexus",
    "PolyForm-Noncommercial-1.0.0",
    "PolyForm-Small-Business-1.0.0",
    "PostgreSQL",
    "Python-2.0",
    "QPL-1.0",
    "Qhull",
    "RHeCos-1.1",
    "RPL-1.1",
    "RPL-1.5",
    "RPSL-1.0",
    "RSA-MD",
    "RSCPL",
    "Rdisc",
    "Ruby",
    "SAX-PD",
    "SCEA",
    "SGI-B-1.0",
    "SGI-B-1.1",
    "SGI-B-2.0",
    "SHL-0.5",
    "SHL-0.51",
    "SISSL",
    "SISSL-1.2",
    "SMLNJ",
    "SMPPL",
    "SNIA",
    "SPL-1.0",
    "SSH-OpenSSH",
    "SSH-short",
    "SSPL-1.0",
    "SWL",
    "Saxpath",
    "Sendmail",
    "Sendmail-8.23",
    "SimPL-2.0",
    "Sleepycat",
    "Spencer-86",
    "Spencer-94",
    "Spencer-99",
    "SugarCRM-1.1.3",
    "TAPR-OHL-1.0",
    "TCL",
    "TCP-wrappers",
    "TMate",
    "TORQUE-1.1",
    "TOSL",
    "TU-Berlin-1.0",
    "TU-Berlin-2.0",
    "UCL-1.0",
    "UPL-1.0",
    "Unicode-DFS-2015",
    "Unicode-DFS-2016",
    "Unicode-TOU",
    "Unlicense",
    "VOSTROM",
    "VSL-1.0",
    "Vim",
    "W3C",
    "W3C-19980720",
    "W3C-20150513",
    "WTFPL",
    "Watcom-1.0",
    "Wsuipa",
    "X11",
    "XFree86-1.1",
    "XSkat",
    "Xerox",
    "Xnet",
    "YPL-1.0",
    "YPL-1.1",
    "ZPL-1.1",
    "ZPL-2.0",
    "ZPL-2.1",
    "Zed",
    "Zend-2.0",
    "Zimbra-1.3",
    "Zimbra-1.4",
    "Zlib",
    "blessing",
    "bzip2-1.0.5",
    "bzip2-1.0.6",
    "copyleft-next-0.3.0",
    "copyleft-next-0.3.1",
    "curl",
    "diffmark",
    "dvipdfm",
    "eGenix",
    "etalab-2.0",
    "gSOAP-1.3b",
    "gnuplot",
    "iMatix",
    "libpng-2.0",
    "libselinux-1.0",
    "libtiff",
    "mpich2",
    "psfrag",
    "psutils",
    "xinetd",
    "xpp",
    "zlib-acknowledgement"
  ];
});

// node_modules/.pnpm/spdx-license-ids@3.0.7/node_modules/spdx-license-ids/deprecated.json
var require_deprecated = __commonJS((exports2, module2) => {
  module2.exports = [
    "AGPL-1.0",
    "AGPL-3.0",
    "BSD-2-Clause-FreeBSD",
    "BSD-2-Clause-NetBSD",
    "GFDL-1.1",
    "GFDL-1.2",
    "GFDL-1.3",
    "GPL-1.0",
    "GPL-2.0",
    "GPL-2.0-with-GCC-exception",
    "GPL-2.0-with-autoconf-exception",
    "GPL-2.0-with-bison-exception",
    "GPL-2.0-with-classpath-exception",
    "GPL-2.0-with-font-exception",
    "GPL-3.0",
    "GPL-3.0-with-GCC-exception",
    "GPL-3.0-with-autoconf-exception",
    "LGPL-2.0",
    "LGPL-2.1",
    "LGPL-3.0",
    "Nunit",
    "StandardML-NJ",
    "eCos-2.0",
    "wxWindows"
  ];
});

// node_modules/.pnpm/spdx-exceptions@2.3.0/node_modules/spdx-exceptions/index.json
var require_spdx_exceptions = __commonJS((exports2, module2) => {
  module2.exports = [
    "389-exception",
    "Autoconf-exception-2.0",
    "Autoconf-exception-3.0",
    "Bison-exception-2.2",
    "Bootloader-exception",
    "Classpath-exception-2.0",
    "CLISP-exception-2.0",
    "DigiRule-FOSS-exception",
    "eCos-exception-2.0",
    "Fawkes-Runtime-exception",
    "FLTK-exception",
    "Font-exception-2.0",
    "freertos-exception-2.0",
    "GCC-exception-2.0",
    "GCC-exception-3.1",
    "gnu-javamail-exception",
    "GPL-3.0-linking-exception",
    "GPL-3.0-linking-source-exception",
    "GPL-CC-1.0",
    "i2p-gpl-java-exception",
    "Libtool-exception",
    "Linux-syscall-note",
    "LLVM-exception",
    "LZMA-exception",
    "mif-exception",
    "Nokia-Qt-exception-1.1",
    "OCaml-LGPL-linking-exception",
    "OCCT-exception-1.0",
    "OpenJDK-assembly-exception-1.0",
    "openvpn-openssl-exception",
    "PS-or-PDF-font-exception-20170817",
    "Qt-GPL-exception-1.0",
    "Qt-LGPL-exception-1.1",
    "Qwt-exception-1.0",
    "Swift-exception",
    "u-boot-exception-2.0",
    "Universal-FOSS-exception-1.0",
    "WxWindows-exception-3.1"
  ];
});

// node_modules/.pnpm/spdx-expression-parse@3.0.1/node_modules/spdx-expression-parse/scan.js
var require_scan = __commonJS((exports2, module2) => {
  "use strict";
  var licenses = [].concat(require_spdx_license_ids()).concat(require_deprecated());
  var exceptions = require_spdx_exceptions();
  module2.exports = function(source) {
    var index = 0;
    function hasMore() {
      return index < source.length;
    }
    function read2(value) {
      if (value instanceof RegExp) {
        var chars = source.slice(index);
        var match = chars.match(value);
        if (match) {
          index += match[0].length;
          return match[0];
        }
      } else {
        if (source.indexOf(value, index) === index) {
          index += value.length;
          return value;
        }
      }
    }
    function skipWhitespace() {
      read2(/[ ]*/);
    }
    function operator() {
      var string;
      var possibilities = ["WITH", "AND", "OR", "(", ")", ":", "+"];
      for (var i = 0; i < possibilities.length; i++) {
        string = read2(possibilities[i]);
        if (string) {
          break;
        }
      }
      if (string === "+" && index > 1 && source[index - 2] === " ") {
        throw new Error("Space before `+`");
      }
      return string && {
        type: "OPERATOR",
        string
      };
    }
    function idstring() {
      return read2(/[A-Za-z0-9-.]+/);
    }
    function expectIdstring() {
      var string = idstring();
      if (!string) {
        throw new Error("Expected idstring at offset " + index);
      }
      return string;
    }
    function documentRef() {
      if (read2("DocumentRef-")) {
        var string = expectIdstring();
        return {type: "DOCUMENTREF", string};
      }
    }
    function licenseRef() {
      if (read2("LicenseRef-")) {
        var string = expectIdstring();
        return {type: "LICENSEREF", string};
      }
    }
    function identifier() {
      var begin = index;
      var string = idstring();
      if (licenses.indexOf(string) !== -1) {
        return {
          type: "LICENSE",
          string
        };
      } else if (exceptions.indexOf(string) !== -1) {
        return {
          type: "EXCEPTION",
          string
        };
      }
      index = begin;
    }
    function parseToken() {
      return operator() || documentRef() || licenseRef() || identifier();
    }
    var tokens = [];
    while (hasMore()) {
      skipWhitespace();
      if (!hasMore()) {
        break;
      }
      var token = parseToken();
      if (!token) {
        throw new Error("Unexpected `" + source[index] + "` at offset " + index);
      }
      tokens.push(token);
    }
    return tokens;
  };
});

// node_modules/.pnpm/spdx-expression-parse@3.0.1/node_modules/spdx-expression-parse/parse.js
var require_parse = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function(tokens) {
    var index = 0;
    function hasMore() {
      return index < tokens.length;
    }
    function token() {
      return hasMore() ? tokens[index] : null;
    }
    function next() {
      if (!hasMore()) {
        throw new Error();
      }
      index++;
    }
    function parseOperator(operator) {
      var t = token();
      if (t && t.type === "OPERATOR" && operator === t.string) {
        next();
        return t.string;
      }
    }
    function parseWith() {
      if (parseOperator("WITH")) {
        var t = token();
        if (t && t.type === "EXCEPTION") {
          next();
          return t.string;
        }
        throw new Error("Expected exception after `WITH`");
      }
    }
    function parseLicenseRef() {
      var begin = index;
      var string = "";
      var t = token();
      if (t.type === "DOCUMENTREF") {
        next();
        string += "DocumentRef-" + t.string + ":";
        if (!parseOperator(":")) {
          throw new Error("Expected `:` after `DocumentRef-...`");
        }
      }
      t = token();
      if (t.type === "LICENSEREF") {
        next();
        string += "LicenseRef-" + t.string;
        return {license: string};
      }
      index = begin;
    }
    function parseLicense() {
      var t = token();
      if (t && t.type === "LICENSE") {
        next();
        var node2 = {license: t.string};
        if (parseOperator("+")) {
          node2.plus = true;
        }
        var exception = parseWith();
        if (exception) {
          node2.exception = exception;
        }
        return node2;
      }
    }
    function parseParenthesizedExpression() {
      var left = parseOperator("(");
      if (!left) {
        return;
      }
      var expr = parseExpression();
      if (!parseOperator(")")) {
        throw new Error("Expected `)`");
      }
      return expr;
    }
    function parseAtom() {
      return parseParenthesizedExpression() || parseLicenseRef() || parseLicense();
    }
    function makeBinaryOpParser(operator, nextParser) {
      return function parseBinaryOp() {
        var left = nextParser();
        if (!left) {
          return;
        }
        if (!parseOperator(operator)) {
          return left;
        }
        var right = parseBinaryOp();
        if (!right) {
          throw new Error("Expected expression");
        }
        return {
          left,
          conjunction: operator.toLowerCase(),
          right
        };
      };
    }
    var parseAnd = makeBinaryOpParser("AND", parseAtom);
    var parseExpression = makeBinaryOpParser("OR", parseAnd);
    var node = parseExpression();
    if (!node || hasMore()) {
      throw new Error("Syntax error");
    }
    return node;
  };
});

// node_modules/.pnpm/spdx-expression-parse@3.0.1/node_modules/spdx-expression-parse/index.js
var require_spdx_expression_parse = __commonJS((exports2, module2) => {
  "use strict";
  var scan = require_scan();
  var parse2 = require_parse();
  module2.exports = function(source) {
    return parse2(scan(source));
  };
});

// node_modules/.pnpm/spdx-correct@3.1.1/node_modules/spdx-correct/index.js
var require_spdx_correct = __commonJS((exports2, module2) => {
  var parse2 = require_spdx_expression_parse();
  var spdxLicenseIds = require_spdx_license_ids();
  function valid(string) {
    try {
      parse2(string);
      return true;
    } catch (error) {
      return false;
    }
  }
  var transpositions = [
    ["APGL", "AGPL"],
    ["Gpl", "GPL"],
    ["GLP", "GPL"],
    ["APL", "Apache"],
    ["ISD", "ISC"],
    ["GLP", "GPL"],
    ["IST", "ISC"],
    ["Claude", "Clause"],
    [" or later", "+"],
    [" International", ""],
    ["GNU", "GPL"],
    ["GUN", "GPL"],
    ["+", ""],
    ["GNU GPL", "GPL"],
    ["GNU/GPL", "GPL"],
    ["GNU GLP", "GPL"],
    ["GNU General Public License", "GPL"],
    ["Gnu public license", "GPL"],
    ["GNU Public License", "GPL"],
    ["GNU GENERAL PUBLIC LICENSE", "GPL"],
    ["MTI", "MIT"],
    ["Mozilla Public License", "MPL"],
    ["Universal Permissive License", "UPL"],
    ["WTH", "WTF"],
    ["-License", ""]
  ];
  var TRANSPOSED = 0;
  var CORRECT = 1;
  var transforms = [
    function(argument) {
      return argument.toUpperCase();
    },
    function(argument) {
      return argument.trim();
    },
    function(argument) {
      return argument.replace(/\./g, "");
    },
    function(argument) {
      return argument.replace(/\s+/g, "");
    },
    function(argument) {
      return argument.replace(/\s+/g, "-");
    },
    function(argument) {
      return argument.replace("v", "-");
    },
    function(argument) {
      return argument.replace(/,?\s*(\d)/, "-$1");
    },
    function(argument) {
      return argument.replace(/,?\s*(\d)/, "-$1.0");
    },
    function(argument) {
      return argument.replace(/,?\s*(V\.|v\.|V|v|Version|version)\s*(\d)/, "-$2");
    },
    function(argument) {
      return argument.replace(/,?\s*(V\.|v\.|V|v|Version|version)\s*(\d)/, "-$2.0");
    },
    function(argument) {
      return argument[0].toUpperCase() + argument.slice(1);
    },
    function(argument) {
      return argument.replace("/", "-");
    },
    function(argument) {
      return argument.replace(/\s*V\s*(\d)/, "-$1").replace(/(\d)$/, "$1.0");
    },
    function(argument) {
      if (argument.indexOf("3.0") !== -1) {
        return argument + "-or-later";
      } else {
        return argument + "-only";
      }
    },
    function(argument) {
      return argument + "only";
    },
    function(argument) {
      return argument.replace(/(\d)$/, "-$1.0");
    },
    function(argument) {
      return argument.replace(/(-| )?(\d)$/, "-$2-Clause");
    },
    function(argument) {
      return argument.replace(/(-| )clause(-| )(\d)/, "-$3-Clause");
    },
    function(argument) {
      return argument.replace(/\b(Modified|New|Revised)(-| )?BSD((-| )License)?/i, "BSD-3-Clause");
    },
    function(argument) {
      return argument.replace(/\bSimplified(-| )?BSD((-| )License)?/i, "BSD-2-Clause");
    },
    function(argument) {
      return argument.replace(/\b(Free|Net)(-| )?BSD((-| )License)?/i, "BSD-2-Clause-$1BSD");
    },
    function(argument) {
      return argument.replace(/\bClear(-| )?BSD((-| )License)?/i, "BSD-3-Clause-Clear");
    },
    function(argument) {
      return argument.replace(/\b(Old|Original)(-| )?BSD((-| )License)?/i, "BSD-4-Clause");
    },
    function(argument) {
      return "CC-" + argument;
    },
    function(argument) {
      return "CC-" + argument + "-4.0";
    },
    function(argument) {
      return argument.replace("Attribution", "BY").replace("NonCommercial", "NC").replace("NoDerivatives", "ND").replace(/ (\d)/, "-$1").replace(/ ?International/, "");
    },
    function(argument) {
      return "CC-" + argument.replace("Attribution", "BY").replace("NonCommercial", "NC").replace("NoDerivatives", "ND").replace(/ (\d)/, "-$1").replace(/ ?International/, "") + "-4.0";
    }
  ];
  var licensesWithVersions = spdxLicenseIds.map(function(id) {
    var match = /^(.*)-\d+\.\d+$/.exec(id);
    return match ? [match[0], match[1]] : [id, null];
  }).reduce(function(objectMap, item) {
    var key = item[1];
    objectMap[key] = objectMap[key] || [];
    objectMap[key].push(item[0]);
    return objectMap;
  }, {});
  var licensesWithOneVersion = Object.keys(licensesWithVersions).map(function makeEntries(key) {
    return [key, licensesWithVersions[key]];
  }).filter(function identifySoleVersions(item) {
    return item[1].length === 1 && item[0] !== null && item[0] !== "APL";
  }).map(function createLastResorts(item) {
    return [item[0], item[1][0]];
  });
  licensesWithVersions = void 0;
  var lastResorts = [
    ["UNLI", "Unlicense"],
    ["WTF", "WTFPL"],
    ["2 CLAUSE", "BSD-2-Clause"],
    ["2-CLAUSE", "BSD-2-Clause"],
    ["3 CLAUSE", "BSD-3-Clause"],
    ["3-CLAUSE", "BSD-3-Clause"],
    ["AFFERO", "AGPL-3.0-or-later"],
    ["AGPL", "AGPL-3.0-or-later"],
    ["APACHE", "Apache-2.0"],
    ["ARTISTIC", "Artistic-2.0"],
    ["Affero", "AGPL-3.0-or-later"],
    ["BEER", "Beerware"],
    ["BOOST", "BSL-1.0"],
    ["BSD", "BSD-2-Clause"],
    ["CDDL", "CDDL-1.1"],
    ["ECLIPSE", "EPL-1.0"],
    ["FUCK", "WTFPL"],
    ["GNU", "GPL-3.0-or-later"],
    ["LGPL", "LGPL-3.0-or-later"],
    ["GPLV1", "GPL-1.0-only"],
    ["GPL-1", "GPL-1.0-only"],
    ["GPLV2", "GPL-2.0-only"],
    ["GPL-2", "GPL-2.0-only"],
    ["GPL", "GPL-3.0-or-later"],
    ["MIT +NO-FALSE-ATTRIBS", "MITNFA"],
    ["MIT", "MIT"],
    ["MPL", "MPL-2.0"],
    ["X11", "X11"],
    ["ZLIB", "Zlib"]
  ].concat(licensesWithOneVersion);
  var SUBSTRING = 0;
  var IDENTIFIER = 1;
  var validTransformation = function(identifier) {
    for (var i = 0; i < transforms.length; i++) {
      var transformed = transforms[i](identifier).trim();
      if (transformed !== identifier && valid(transformed)) {
        return transformed;
      }
    }
    return null;
  };
  var validLastResort = function(identifier) {
    var upperCased = identifier.toUpperCase();
    for (var i = 0; i < lastResorts.length; i++) {
      var lastResort = lastResorts[i];
      if (upperCased.indexOf(lastResort[SUBSTRING]) > -1) {
        return lastResort[IDENTIFIER];
      }
    }
    return null;
  };
  var anyCorrection = function(identifier, check) {
    for (var i = 0; i < transpositions.length; i++) {
      var transposition = transpositions[i];
      var transposed = transposition[TRANSPOSED];
      if (identifier.indexOf(transposed) > -1) {
        var corrected = identifier.replace(transposed, transposition[CORRECT]);
        var checked = check(corrected);
        if (checked !== null) {
          return checked;
        }
      }
    }
    return null;
  };
  module2.exports = function(identifier, options) {
    options = options || {};
    var upgrade = options.upgrade === void 0 ? true : !!options.upgrade;
    function postprocess(value) {
      return upgrade ? upgradeGPLs(value) : value;
    }
    var validArugment = typeof identifier === "string" && identifier.trim().length !== 0;
    if (!validArugment) {
      throw Error("Invalid argument. Expected non-empty string.");
    }
    identifier = identifier.trim();
    if (valid(identifier)) {
      return postprocess(identifier);
    }
    var noPlus = identifier.replace(/\+$/, "").trim();
    if (valid(noPlus)) {
      return postprocess(noPlus);
    }
    var transformed = validTransformation(identifier);
    if (transformed !== null) {
      return postprocess(transformed);
    }
    transformed = anyCorrection(identifier, function(argument) {
      if (valid(argument)) {
        return argument;
      }
      return validTransformation(argument);
    });
    if (transformed !== null) {
      return postprocess(transformed);
    }
    transformed = validLastResort(identifier);
    if (transformed !== null) {
      return postprocess(transformed);
    }
    transformed = anyCorrection(identifier, validLastResort);
    if (transformed !== null) {
      return postprocess(transformed);
    }
    return null;
  };
  function upgradeGPLs(value) {
    if ([
      "GPL-1.0",
      "LGPL-1.0",
      "AGPL-1.0",
      "GPL-2.0",
      "LGPL-2.0",
      "AGPL-2.0",
      "LGPL-2.1"
    ].indexOf(value) !== -1) {
      return value + "-only";
    } else if ([
      "GPL-1.0+",
      "GPL-2.0+",
      "GPL-3.0+",
      "LGPL-2.0+",
      "LGPL-2.1+",
      "LGPL-3.0+",
      "AGPL-1.0+",
      "AGPL-3.0+"
    ].indexOf(value) !== -1) {
      return value.replace(/\+$/, "-or-later");
    } else if (["GPL-3.0", "LGPL-3.0", "AGPL-3.0"].indexOf(value) !== -1) {
      return value + "-or-later";
    } else {
      return value;
    }
  }
});

// node_modules/.pnpm/validate-npm-package-license@3.0.4/node_modules/validate-npm-package-license/index.js
var require_validate_npm_package_license = __commonJS((exports2, module2) => {
  var parse2 = require_spdx_expression_parse();
  var correct = require_spdx_correct();
  var genericWarning = 'license should be a valid SPDX license expression (without "LicenseRef"), "UNLICENSED", or "SEE LICENSE IN <filename>"';
  var fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;
  function startsWith(prefix, string) {
    return string.slice(0, prefix.length) === prefix;
  }
  function usesLicenseRef(ast) {
    if (ast.hasOwnProperty("license")) {
      var license = ast.license;
      return startsWith("LicenseRef", license) || startsWith("DocumentRef", license);
    } else {
      return usesLicenseRef(ast.left) || usesLicenseRef(ast.right);
    }
  }
  module2.exports = function(argument) {
    var ast;
    try {
      ast = parse2(argument);
    } catch (e) {
      var match;
      if (argument === "UNLICENSED" || argument === "UNLICENCED") {
        return {
          validForOldPackages: true,
          validForNewPackages: true,
          unlicensed: true
        };
      } else if (match = fileReferenceRE.exec(argument)) {
        return {
          validForOldPackages: true,
          validForNewPackages: true,
          inFile: match[1]
        };
      } else {
        var result = {
          validForOldPackages: false,
          validForNewPackages: false,
          warnings: [genericWarning]
        };
        if (argument.trim().length !== 0) {
          var corrected = correct(argument);
          if (corrected) {
            result.warnings.push('license is similar to the valid expression "' + corrected + '"');
          }
        }
        return result;
      }
    }
    if (usesLicenseRef(ast)) {
      return {
        validForNewPackages: false,
        validForOldPackages: false,
        spdx: true,
        warnings: [genericWarning]
      };
    } else {
      return {
        validForNewPackages: true,
        validForOldPackages: true,
        spdx: true
      };
    }
  };
});

// node_modules/.pnpm/hosted-git-info@2.8.8/node_modules/hosted-git-info/git-host-info.js
var require_git_host_info = __commonJS((exports2, module2) => {
  "use strict";
  var gitHosts = module2.exports = {
    github: {
      protocols: ["git", "http", "git+ssh", "git+https", "ssh", "https"],
      domain: "github.com",
      treepath: "tree",
      filetemplate: "https://{auth@}raw.githubusercontent.com/{user}/{project}/{committish}/{path}",
      bugstemplate: "https://{domain}/{user}/{project}/issues",
      gittemplate: "git://{auth@}{domain}/{user}/{project}.git{#committish}",
      tarballtemplate: "https://codeload.{domain}/{user}/{project}/tar.gz/{committish}"
    },
    bitbucket: {
      protocols: ["git+ssh", "git+https", "ssh", "https"],
      domain: "bitbucket.org",
      treepath: "src",
      tarballtemplate: "https://{domain}/{user}/{project}/get/{committish}.tar.gz"
    },
    gitlab: {
      protocols: ["git+ssh", "git+https", "ssh", "https"],
      domain: "gitlab.com",
      treepath: "tree",
      bugstemplate: "https://{domain}/{user}/{project}/issues",
      httpstemplate: "git+https://{auth@}{domain}/{user}/{projectPath}.git{#committish}",
      tarballtemplate: "https://{domain}/{user}/{project}/repository/archive.tar.gz?ref={committish}",
      pathmatch: /^[/]([^/]+)[/]((?!.*(\/-\/|\/repository\/archive\.tar\.gz\?=.*|\/repository\/[^/]+\/archive.tar.gz$)).*?)(?:[.]git|[/])?$/
    },
    gist: {
      protocols: ["git", "git+ssh", "git+https", "ssh", "https"],
      domain: "gist.github.com",
      pathmatch: /^[/](?:([^/]+)[/])?([a-z0-9]{32,})(?:[.]git)?$/,
      filetemplate: "https://gist.githubusercontent.com/{user}/{project}/raw{/committish}/{path}",
      bugstemplate: "https://{domain}/{project}",
      gittemplate: "git://{domain}/{project}.git{#committish}",
      sshtemplate: "git@{domain}:/{project}.git{#committish}",
      sshurltemplate: "git+ssh://git@{domain}/{project}.git{#committish}",
      browsetemplate: "https://{domain}/{project}{/committish}",
      browsefiletemplate: "https://{domain}/{project}{/committish}{#path}",
      docstemplate: "https://{domain}/{project}{/committish}",
      httpstemplate: "git+https://{domain}/{project}.git{#committish}",
      shortcuttemplate: "{type}:{project}{#committish}",
      pathtemplate: "{project}{#committish}",
      tarballtemplate: "https://codeload.github.com/gist/{project}/tar.gz/{committish}",
      hashformat: function(fragment) {
        return "file-" + formatHashFragment(fragment);
      }
    }
  };
  var gitHostDefaults = {
    sshtemplate: "git@{domain}:{user}/{project}.git{#committish}",
    sshurltemplate: "git+ssh://git@{domain}/{user}/{project}.git{#committish}",
    browsetemplate: "https://{domain}/{user}/{project}{/tree/committish}",
    browsefiletemplate: "https://{domain}/{user}/{project}/{treepath}/{committish}/{path}{#fragment}",
    docstemplate: "https://{domain}/{user}/{project}{/tree/committish}#readme",
    httpstemplate: "git+https://{auth@}{domain}/{user}/{project}.git{#committish}",
    filetemplate: "https://{domain}/{user}/{project}/raw/{committish}/{path}",
    shortcuttemplate: "{type}:{user}/{project}{#committish}",
    pathtemplate: "{user}/{project}{#committish}",
    pathmatch: /^[/]([^/]+)[/]([^/]+?)(?:[.]git|[/])?$/,
    hashformat: formatHashFragment
  };
  Object.keys(gitHosts).forEach(function(name) {
    Object.keys(gitHostDefaults).forEach(function(key) {
      if (gitHosts[name][key])
        return;
      gitHosts[name][key] = gitHostDefaults[key];
    });
    gitHosts[name].protocols_re = RegExp("^(" + gitHosts[name].protocols.map(function(protocol) {
      return protocol.replace(/([\\+*{}()[\]$^|])/g, "\\$1");
    }).join("|") + "):$");
  });
  function formatHashFragment(fragment) {
    return fragment.toLowerCase().replace(/^\W+|\/|\W+$/g, "").replace(/\W+/g, "-");
  }
});

// node_modules/.pnpm/hosted-git-info@2.8.8/node_modules/hosted-git-info/git-host.js
var require_git_host = __commonJS((exports2, module2) => {
  "use strict";
  var gitHosts = require_git_host_info();
  var extend = Object.assign || function _extend(target, source) {
    if (source === null || typeof source !== "object")
      return target;
    var keys = Object.keys(source);
    var i = keys.length;
    while (i--) {
      target[keys[i]] = source[keys[i]];
    }
    return target;
  };
  module2.exports = GitHost;
  function GitHost(type, user, auth, project, committish, defaultRepresentation, opts) {
    var gitHostInfo = this;
    gitHostInfo.type = type;
    Object.keys(gitHosts[type]).forEach(function(key) {
      gitHostInfo[key] = gitHosts[type][key];
    });
    gitHostInfo.user = user;
    gitHostInfo.auth = auth;
    gitHostInfo.project = project;
    gitHostInfo.committish = committish;
    gitHostInfo.default = defaultRepresentation;
    gitHostInfo.opts = opts || {};
  }
  GitHost.prototype.hash = function() {
    return this.committish ? "#" + this.committish : "";
  };
  GitHost.prototype._fill = function(template, opts) {
    if (!template)
      return;
    var vars = extend({}, opts);
    vars.path = vars.path ? vars.path.replace(/^[/]+/g, "") : "";
    opts = extend(extend({}, this.opts), opts);
    var self2 = this;
    Object.keys(this).forEach(function(key) {
      if (self2[key] != null && vars[key] == null)
        vars[key] = self2[key];
    });
    var rawAuth = vars.auth;
    var rawcommittish = vars.committish;
    var rawFragment = vars.fragment;
    var rawPath = vars.path;
    var rawProject = vars.project;
    Object.keys(vars).forEach(function(key) {
      var value = vars[key];
      if ((key === "path" || key === "project") && typeof value === "string") {
        vars[key] = value.split("/").map(function(pathComponent) {
          return encodeURIComponent(pathComponent);
        }).join("/");
      } else {
        vars[key] = encodeURIComponent(value);
      }
    });
    vars["auth@"] = rawAuth ? rawAuth + "@" : "";
    vars["#fragment"] = rawFragment ? "#" + this.hashformat(rawFragment) : "";
    vars.fragment = vars.fragment ? vars.fragment : "";
    vars["#path"] = rawPath ? "#" + this.hashformat(rawPath) : "";
    vars["/path"] = vars.path ? "/" + vars.path : "";
    vars.projectPath = rawProject.split("/").map(encodeURIComponent).join("/");
    if (opts.noCommittish) {
      vars["#committish"] = "";
      vars["/tree/committish"] = "";
      vars["/committish"] = "";
      vars.committish = "";
    } else {
      vars["#committish"] = rawcommittish ? "#" + rawcommittish : "";
      vars["/tree/committish"] = vars.committish ? "/" + vars.treepath + "/" + vars.committish : "";
      vars["/committish"] = vars.committish ? "/" + vars.committish : "";
      vars.committish = vars.committish || "master";
    }
    var res = template;
    Object.keys(vars).forEach(function(key) {
      res = res.replace(new RegExp("[{]" + key + "[}]", "g"), vars[key]);
    });
    if (opts.noGitPlus) {
      return res.replace(/^git[+]/, "");
    } else {
      return res;
    }
  };
  GitHost.prototype.ssh = function(opts) {
    return this._fill(this.sshtemplate, opts);
  };
  GitHost.prototype.sshurl = function(opts) {
    return this._fill(this.sshurltemplate, opts);
  };
  GitHost.prototype.browse = function(P, F, opts) {
    if (typeof P === "string") {
      if (typeof F !== "string") {
        opts = F;
        F = null;
      }
      return this._fill(this.browsefiletemplate, extend({
        fragment: F,
        path: P
      }, opts));
    } else {
      return this._fill(this.browsetemplate, P);
    }
  };
  GitHost.prototype.docs = function(opts) {
    return this._fill(this.docstemplate, opts);
  };
  GitHost.prototype.bugs = function(opts) {
    return this._fill(this.bugstemplate, opts);
  };
  GitHost.prototype.https = function(opts) {
    return this._fill(this.httpstemplate, opts);
  };
  GitHost.prototype.git = function(opts) {
    return this._fill(this.gittemplate, opts);
  };
  GitHost.prototype.shortcut = function(opts) {
    return this._fill(this.shortcuttemplate, opts);
  };
  GitHost.prototype.path = function(opts) {
    return this._fill(this.pathtemplate, opts);
  };
  GitHost.prototype.tarball = function(opts_) {
    var opts = extend({}, opts_, {noCommittish: false});
    return this._fill(this.tarballtemplate, opts);
  };
  GitHost.prototype.file = function(P, opts) {
    return this._fill(this.filetemplate, extend({path: P}, opts));
  };
  GitHost.prototype.getDefaultRepresentation = function() {
    return this.default;
  };
  GitHost.prototype.toString = function(opts) {
    if (this.default && typeof this[this.default] === "function")
      return this[this.default](opts);
    return this.sshurl(opts);
  };
});

// node_modules/.pnpm/hosted-git-info@2.8.8/node_modules/hosted-git-info/index.js
var require_hosted_git_info = __commonJS((exports2, module2) => {
  "use strict";
  var url = require("url");
  var gitHosts = require_git_host_info();
  var GitHost = module2.exports = require_git_host();
  var protocolToRepresentationMap = {
    "git+ssh:": "sshurl",
    "git+https:": "https",
    "ssh:": "sshurl",
    "git:": "git"
  };
  function protocolToRepresentation(protocol) {
    return protocolToRepresentationMap[protocol] || protocol.slice(0, -1);
  }
  var authProtocols = {
    "git:": true,
    "https:": true,
    "git+https:": true,
    "http:": true,
    "git+http:": true
  };
  var cache = {};
  module2.exports.fromUrl = function(giturl, opts) {
    if (typeof giturl !== "string")
      return;
    var key = giturl + JSON.stringify(opts || {});
    if (!(key in cache)) {
      cache[key] = fromUrl(giturl, opts);
    }
    return cache[key];
  };
  function fromUrl(giturl, opts) {
    if (giturl == null || giturl === "")
      return;
    var url2 = fixupUnqualifiedGist(isGitHubShorthand(giturl) ? "github:" + giturl : giturl);
    var parsed = parseGitUrl(url2);
    var shortcutMatch = url2.match(new RegExp("^([^:]+):(?:(?:[^@:]+(?:[^@]+)?@)?([^/]*))[/](.+?)(?:[.]git)?($|#)"));
    var matches = Object.keys(gitHosts).map(function(gitHostName) {
      try {
        var gitHostInfo = gitHosts[gitHostName];
        var auth = null;
        if (parsed.auth && authProtocols[parsed.protocol]) {
          auth = parsed.auth;
        }
        var committish = parsed.hash ? decodeURIComponent(parsed.hash.substr(1)) : null;
        var user = null;
        var project = null;
        var defaultRepresentation = null;
        if (shortcutMatch && shortcutMatch[1] === gitHostName) {
          user = shortcutMatch[2] && decodeURIComponent(shortcutMatch[2]);
          project = decodeURIComponent(shortcutMatch[3]);
          defaultRepresentation = "shortcut";
        } else {
          if (parsed.host && parsed.host !== gitHostInfo.domain && parsed.host.replace(/^www[.]/, "") !== gitHostInfo.domain)
            return;
          if (!gitHostInfo.protocols_re.test(parsed.protocol))
            return;
          if (!parsed.path)
            return;
          var pathmatch = gitHostInfo.pathmatch;
          var matched = parsed.path.match(pathmatch);
          if (!matched)
            return;
          if (matched[1] !== null && matched[1] !== void 0) {
            user = decodeURIComponent(matched[1].replace(/^:/, ""));
          }
          project = decodeURIComponent(matched[2]);
          defaultRepresentation = protocolToRepresentation(parsed.protocol);
        }
        return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation, opts);
      } catch (ex) {
        if (ex instanceof URIError) {
        } else
          throw ex;
      }
    }).filter(function(gitHostInfo) {
      return gitHostInfo;
    });
    if (matches.length !== 1)
      return;
    return matches[0];
  }
  function isGitHubShorthand(arg) {
    return /^[^:@%/\s.-][^:@%/\s]*[/][^:@\s/%]+(?:#.*)?$/.test(arg);
  }
  function fixupUnqualifiedGist(giturl) {
    var parsed = url.parse(giturl);
    if (parsed.protocol === "gist:" && parsed.host && !parsed.path) {
      return parsed.protocol + "/" + parsed.host;
    } else {
      return giturl;
    }
  }
  function parseGitUrl(giturl) {
    var matched = giturl.match(/^([^@]+)@([^:/]+):[/]?((?:[^/]+[/])?[^/]+?)(?:[.]git)?(#.*)?$/);
    if (!matched) {
      var legacy = url.parse(giturl);
      if (legacy.auth && typeof url.URL === "function") {
        var authmatch = giturl.match(/[^@]+@[^:/]+/);
        if (authmatch) {
          var whatwg = new url.URL(authmatch[0]);
          legacy.auth = whatwg.username || "";
          if (whatwg.password)
            legacy.auth += ":" + whatwg.password;
        }
      }
      return legacy;
    }
    return {
      protocol: "git+ssh:",
      slashes: true,
      auth: matched[1],
      host: matched[2],
      port: null,
      hostname: matched[2],
      hash: matched[4],
      search: null,
      query: null,
      pathname: "/" + matched[3],
      path: "/" + matched[3],
      href: "git+ssh://" + matched[1] + "@" + matched[2] + "/" + matched[3] + (matched[4] || "")
    };
  }
});

// node_modules/.pnpm/resolve@1.19.0/node_modules/resolve/lib/caller.js
var require_caller = __commonJS((exports2, module2) => {
  module2.exports = function() {
    var origPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = function(_, stack2) {
      return stack2;
    };
    var stack = new Error().stack;
    Error.prepareStackTrace = origPrepareStackTrace;
    return stack[2].getFileName();
  };
});

// node_modules/.pnpm/path-parse@1.0.6/node_modules/path-parse/index.js
var require_path_parse = __commonJS((exports2, module2) => {
  "use strict";
  var isWindows = process.platform === "win32";
  var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
  var splitTailRe = /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;
  var win32 = {};
  function win32SplitPath(filename) {
    var result = splitDeviceRe.exec(filename), device = (result[1] || "") + (result[2] || ""), tail = result[3] || "";
    var result2 = splitTailRe.exec(tail), dir = result2[1], basename = result2[2], ext = result2[3];
    return [device, dir, basename, ext];
  }
  win32.parse = function(pathString) {
    if (typeof pathString !== "string") {
      throw new TypeError("Parameter 'pathString' must be a string, not " + typeof pathString);
    }
    var allParts = win32SplitPath(pathString);
    if (!allParts || allParts.length !== 4) {
      throw new TypeError("Invalid path '" + pathString + "'");
    }
    return {
      root: allParts[0],
      dir: allParts[0] + allParts[1].slice(0, -1),
      base: allParts[2],
      ext: allParts[3],
      name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
    };
  };
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  var posix = {};
  function posixSplitPath(filename) {
    return splitPathRe.exec(filename).slice(1);
  }
  posix.parse = function(pathString) {
    if (typeof pathString !== "string") {
      throw new TypeError("Parameter 'pathString' must be a string, not " + typeof pathString);
    }
    var allParts = posixSplitPath(pathString);
    if (!allParts || allParts.length !== 4) {
      throw new TypeError("Invalid path '" + pathString + "'");
    }
    allParts[1] = allParts[1] || "";
    allParts[2] = allParts[2] || "";
    allParts[3] = allParts[3] || "";
    return {
      root: allParts[0],
      dir: allParts[0] + allParts[1].slice(0, -1),
      base: allParts[2],
      ext: allParts[3],
      name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
    };
  };
  if (isWindows)
    module2.exports = win32.parse;
  else
    module2.exports = posix.parse;
  module2.exports.posix = posix.parse;
  module2.exports.win32 = win32.parse;
});

// node_modules/.pnpm/resolve@1.19.0/node_modules/resolve/lib/node-modules-paths.js
var require_node_modules_paths = __commonJS((exports2, module2) => {
  var path2 = require("path");
  var parse2 = path2.parse || require_path_parse();
  var getNodeModulesDirs = function getNodeModulesDirs2(absoluteStart, modules) {
    var prefix = "/";
    if (/^([A-Za-z]:)/.test(absoluteStart)) {
      prefix = "";
    } else if (/^\\\\/.test(absoluteStart)) {
      prefix = "\\\\";
    }
    var paths = [absoluteStart];
    var parsed = parse2(absoluteStart);
    while (parsed.dir !== paths[paths.length - 1]) {
      paths.push(parsed.dir);
      parsed = parse2(parsed.dir);
    }
    return paths.reduce(function(dirs, aPath) {
      return dirs.concat(modules.map(function(moduleDir) {
        return path2.resolve(prefix, aPath, moduleDir);
      }));
    }, []);
  };
  module2.exports = function nodeModulesPaths(start, opts, request) {
    var modules = opts && opts.moduleDirectory ? [].concat(opts.moduleDirectory) : ["node_modules"];
    if (opts && typeof opts.paths === "function") {
      return opts.paths(request, start, function() {
        return getNodeModulesDirs(start, modules);
      }, opts);
    }
    var dirs = getNodeModulesDirs(start, modules);
    return opts && opts.paths ? dirs.concat(opts.paths) : dirs;
  };
});

// node_modules/.pnpm/resolve@1.19.0/node_modules/resolve/lib/normalize-options.js
var require_normalize_options = __commonJS((exports2, module2) => {
  module2.exports = function(x, opts) {
    return opts || {};
  };
});

// node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/implementation.js
var require_implementation = __commonJS((exports2, module2) => {
  "use strict";
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var slice = Array.prototype.slice;
  var toStr = Object.prototype.toString;
  var funcType = "[object Function]";
  module2.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, args.concat(slice.call(arguments)));
        if (Object(result) === result) {
          return result;
        }
        return this;
      } else {
        return target.apply(that, args.concat(slice.call(arguments)));
      }
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
      boundArgs.push("$" + i);
    }
    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty2() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound;
  };
});

// node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/index.js
var require_function_bind = __commonJS((exports2, module2) => {
  "use strict";
  var implementation = require_implementation();
  module2.exports = Function.prototype.bind || implementation;
});

// node_modules/.pnpm/has@1.0.3/node_modules/has/src/index.js
var require_src = __commonJS((exports2, module2) => {
  "use strict";
  var bind = require_function_bind();
  module2.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
});

// node_modules/.pnpm/is-core-module@2.2.0/node_modules/is-core-module/core.json
var require_core = __commonJS((exports2, module2) => {
  module2.exports = {
    assert: true,
    "assert/strict": ">= 15",
    async_hooks: ">= 8",
    buffer_ieee754: "< 0.9.7",
    buffer: true,
    child_process: true,
    cluster: true,
    console: true,
    constants: true,
    crypto: true,
    _debug_agent: ">= 1 && < 8",
    _debugger: "< 8",
    dgram: true,
    diagnostics_channel: ">= 15.1",
    dns: true,
    "dns/promises": ">= 15",
    domain: ">= 0.7.12",
    events: true,
    freelist: "< 6",
    fs: true,
    "fs/promises": [">= 10 && < 10.1", ">= 14"],
    _http_agent: ">= 0.11.1",
    _http_client: ">= 0.11.1",
    _http_common: ">= 0.11.1",
    _http_incoming: ">= 0.11.1",
    _http_outgoing: ">= 0.11.1",
    _http_server: ">= 0.11.1",
    http: true,
    http2: ">= 8.8",
    https: true,
    inspector: ">= 8.0.0",
    _linklist: "< 8",
    module: true,
    net: true,
    "node-inspect/lib/_inspect": ">= 7.6.0 && < 12",
    "node-inspect/lib/internal/inspect_client": ">= 7.6.0 && < 12",
    "node-inspect/lib/internal/inspect_repl": ">= 7.6.0 && < 12",
    os: true,
    path: true,
    "path/posix": ">= 15.3",
    "path/win32": ">= 15.3",
    perf_hooks: ">= 8.5",
    process: ">= 1",
    punycode: true,
    querystring: true,
    readline: true,
    repl: true,
    smalloc: ">= 0.11.5 && < 3",
    _stream_duplex: ">= 0.9.4",
    _stream_transform: ">= 0.9.4",
    _stream_wrap: ">= 1.4.1",
    _stream_passthrough: ">= 0.9.4",
    _stream_readable: ">= 0.9.4",
    _stream_writable: ">= 0.9.4",
    stream: true,
    "stream/promises": ">= 15",
    string_decoder: true,
    sys: [">= 0.6 && < 0.7", ">= 0.8"],
    timers: true,
    "timers/promises": ">= 15",
    _tls_common: ">= 0.11.13",
    _tls_legacy: ">= 0.11.3 && < 10",
    _tls_wrap: ">= 0.11.3",
    tls: true,
    trace_events: ">= 10",
    tty: true,
    url: true,
    util: true,
    "util/types": ">= 15.3",
    "v8/tools/arguments": ">= 10 && < 12",
    "v8/tools/codemap": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/consarray": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/csvparser": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/logreader": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/profile_view": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/splaytree": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    v8: ">= 1",
    vm: true,
    wasi: ">= 13.4 && < 13.5",
    worker_threads: ">= 11.7",
    zlib: true
  };
});

// node_modules/.pnpm/is-core-module@2.2.0/node_modules/is-core-module/index.js
var require_is_core_module = __commonJS((exports2, module2) => {
  "use strict";
  var has = require_src();
  function specifierIncluded(current, specifier) {
    var nodeParts = current.split(".");
    var parts = specifier.split(" ");
    var op = parts.length > 1 ? parts[0] : "=";
    var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split(".");
    for (var i = 0; i < 3; ++i) {
      var cur = parseInt(nodeParts[i] || 0, 10);
      var ver = parseInt(versionParts[i] || 0, 10);
      if (cur === ver) {
        continue;
      }
      if (op === "<") {
        return cur < ver;
      }
      if (op === ">=") {
        return cur >= ver;
      }
      return false;
    }
    return op === ">=";
  }
  function matchesRange(current, range) {
    var specifiers = range.split(/ ?&& ?/);
    if (specifiers.length === 0) {
      return false;
    }
    for (var i = 0; i < specifiers.length; ++i) {
      if (!specifierIncluded(current, specifiers[i])) {
        return false;
      }
    }
    return true;
  }
  function versionIncluded(nodeVersion, specifierValue) {
    if (typeof specifierValue === "boolean") {
      return specifierValue;
    }
    var current = typeof nodeVersion === "undefined" ? process.versions && process.versions.node && process.versions.node : nodeVersion;
    if (typeof current !== "string") {
      throw new TypeError(typeof nodeVersion === "undefined" ? "Unable to determine current node version" : "If provided, a valid node version is required");
    }
    if (specifierValue && typeof specifierValue === "object") {
      for (var i = 0; i < specifierValue.length; ++i) {
        if (matchesRange(current, specifierValue[i])) {
          return true;
        }
      }
      return false;
    }
    return matchesRange(current, specifierValue);
  }
  var data = require_core();
  module2.exports = function isCore(x, nodeVersion) {
    return has(data, x) && versionIncluded(nodeVersion, data[x]);
  };
});

// node_modules/.pnpm/resolve@1.19.0/node_modules/resolve/lib/async.js
var require_async = __commonJS((exports2, module2) => {
  var fs2 = require("fs");
  var path2 = require("path");
  var caller = require_caller();
  var nodeModulesPaths = require_node_modules_paths();
  var normalizeOptions = require_normalize_options();
  var isCore = require_is_core_module();
  var realpathFS = fs2.realpath && typeof fs2.realpath.native === "function" ? fs2.realpath.native : fs2.realpath;
  var defaultIsFile = function isFile(file, cb) {
    fs2.stat(file, function(err, stat) {
      if (!err) {
        return cb(null, stat.isFile() || stat.isFIFO());
      }
      if (err.code === "ENOENT" || err.code === "ENOTDIR")
        return cb(null, false);
      return cb(err);
    });
  };
  var defaultIsDir = function isDirectory(dir, cb) {
    fs2.stat(dir, function(err, stat) {
      if (!err) {
        return cb(null, stat.isDirectory());
      }
      if (err.code === "ENOENT" || err.code === "ENOTDIR")
        return cb(null, false);
      return cb(err);
    });
  };
  var defaultRealpath = function realpath(x, cb) {
    realpathFS(x, function(realpathErr, realPath) {
      if (realpathErr && realpathErr.code !== "ENOENT")
        cb(realpathErr);
      else
        cb(null, realpathErr ? x : realPath);
    });
  };
  var maybeRealpath = function maybeRealpath2(realpath, x, opts, cb) {
    if (opts && opts.preserveSymlinks === false) {
      realpath(x, cb);
    } else {
      cb(null, x);
    }
  };
  var getPackageCandidates = function getPackageCandidates2(x, start, opts) {
    var dirs = nodeModulesPaths(start, opts, x);
    for (var i = 0; i < dirs.length; i++) {
      dirs[i] = path2.join(dirs[i], x);
    }
    return dirs;
  };
  module2.exports = function resolve(x, options, callback) {
    var cb = callback;
    var opts = options;
    if (typeof options === "function") {
      cb = opts;
      opts = {};
    }
    if (typeof x !== "string") {
      var err = new TypeError("Path must be a string.");
      return process.nextTick(function() {
        cb(err);
      });
    }
    opts = normalizeOptions(x, opts);
    var isFile = opts.isFile || defaultIsFile;
    var isDirectory = opts.isDirectory || defaultIsDir;
    var readFile = opts.readFile || fs2.readFile;
    var realpath = opts.realpath || defaultRealpath;
    var packageIterator = opts.packageIterator;
    var extensions = opts.extensions || [".js"];
    var includeCoreModules = opts.includeCoreModules !== false;
    var basedir = opts.basedir || path2.dirname(caller());
    var parent = opts.filename || basedir;
    opts.paths = opts.paths || [];
    var absoluteStart = path2.resolve(basedir);
    maybeRealpath(realpath, absoluteStart, opts, function(err2, realStart) {
      if (err2)
        cb(err2);
      else
        init(realStart);
    });
    var res;
    function init(basedir2) {
      if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(x)) {
        res = path2.resolve(basedir2, x);
        if (x === "." || x === ".." || x.slice(-1) === "/")
          res += "/";
        if (/\/$/.test(x) && res === basedir2) {
          loadAsDirectory(res, opts.package, onfile);
        } else
          loadAsFile(res, opts.package, onfile);
      } else if (includeCoreModules && isCore(x)) {
        return cb(null, x);
      } else
        loadNodeModules(x, basedir2, function(err2, n, pkg) {
          if (err2)
            cb(err2);
          else if (n) {
            return maybeRealpath(realpath, n, opts, function(err3, realN) {
              if (err3) {
                cb(err3);
              } else {
                cb(null, realN, pkg);
              }
            });
          } else {
            var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
            moduleError.code = "MODULE_NOT_FOUND";
            cb(moduleError);
          }
        });
    }
    function onfile(err2, m, pkg) {
      if (err2)
        cb(err2);
      else if (m)
        cb(null, m, pkg);
      else
        loadAsDirectory(res, function(err3, d, pkg2) {
          if (err3)
            cb(err3);
          else if (d) {
            maybeRealpath(realpath, d, opts, function(err4, realD) {
              if (err4) {
                cb(err4);
              } else {
                cb(null, realD, pkg2);
              }
            });
          } else {
            var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
            moduleError.code = "MODULE_NOT_FOUND";
            cb(moduleError);
          }
        });
    }
    function loadAsFile(x2, thePackage, callback2) {
      var loadAsFilePackage = thePackage;
      var cb2 = callback2;
      if (typeof loadAsFilePackage === "function") {
        cb2 = loadAsFilePackage;
        loadAsFilePackage = void 0;
      }
      var exts = [""].concat(extensions);
      load(exts, x2, loadAsFilePackage);
      function load(exts2, x3, loadPackage) {
        if (exts2.length === 0)
          return cb2(null, void 0, loadPackage);
        var file = x3 + exts2[0];
        var pkg = loadPackage;
        if (pkg)
          onpkg(null, pkg);
        else
          loadpkg(path2.dirname(file), onpkg);
        function onpkg(err2, pkg_, dir) {
          pkg = pkg_;
          if (err2)
            return cb2(err2);
          if (dir && pkg && opts.pathFilter) {
            var rfile = path2.relative(dir, file);
            var rel = rfile.slice(0, rfile.length - exts2[0].length);
            var r = opts.pathFilter(pkg, x3, rel);
            if (r)
              return load([""].concat(extensions.slice()), path2.resolve(dir, r), pkg);
          }
          isFile(file, onex);
        }
        function onex(err2, ex) {
          if (err2)
            return cb2(err2);
          if (ex)
            return cb2(null, file, pkg);
          load(exts2.slice(1), x3, pkg);
        }
      }
    }
    function loadpkg(dir, cb2) {
      if (dir === "" || dir === "/")
        return cb2(null);
      if (process.platform === "win32" && /^\w:[/\\]*$/.test(dir)) {
        return cb2(null);
      }
      if (/[/\\]node_modules[/\\]*$/.test(dir))
        return cb2(null);
      maybeRealpath(realpath, dir, opts, function(unwrapErr, pkgdir) {
        if (unwrapErr)
          return loadpkg(path2.dirname(dir), cb2);
        var pkgfile = path2.join(pkgdir, "package.json");
        isFile(pkgfile, function(err2, ex) {
          if (!ex)
            return loadpkg(path2.dirname(dir), cb2);
          readFile(pkgfile, function(err3, body) {
            if (err3)
              cb2(err3);
            try {
              var pkg = JSON.parse(body);
            } catch (jsonErr) {
            }
            if (pkg && opts.packageFilter) {
              pkg = opts.packageFilter(pkg, pkgfile);
            }
            cb2(null, pkg, dir);
          });
        });
      });
    }
    function loadAsDirectory(x2, loadAsDirectoryPackage, callback2) {
      var cb2 = callback2;
      var fpkg = loadAsDirectoryPackage;
      if (typeof fpkg === "function") {
        cb2 = fpkg;
        fpkg = opts.package;
      }
      maybeRealpath(realpath, x2, opts, function(unwrapErr, pkgdir) {
        if (unwrapErr)
          return cb2(unwrapErr);
        var pkgfile = path2.join(pkgdir, "package.json");
        isFile(pkgfile, function(err2, ex) {
          if (err2)
            return cb2(err2);
          if (!ex)
            return loadAsFile(path2.join(x2, "index"), fpkg, cb2);
          readFile(pkgfile, function(err3, body) {
            if (err3)
              return cb2(err3);
            try {
              var pkg = JSON.parse(body);
            } catch (jsonErr) {
            }
            if (pkg && opts.packageFilter) {
              pkg = opts.packageFilter(pkg, pkgfile);
            }
            if (pkg && pkg.main) {
              if (typeof pkg.main !== "string") {
                var mainError = new TypeError("package \u201C" + pkg.name + "\u201D `main` must be a string");
                mainError.code = "INVALID_PACKAGE_MAIN";
                return cb2(mainError);
              }
              if (pkg.main === "." || pkg.main === "./") {
                pkg.main = "index";
              }
              loadAsFile(path2.resolve(x2, pkg.main), pkg, function(err4, m, pkg2) {
                if (err4)
                  return cb2(err4);
                if (m)
                  return cb2(null, m, pkg2);
                if (!pkg2)
                  return loadAsFile(path2.join(x2, "index"), pkg2, cb2);
                var dir = path2.resolve(x2, pkg2.main);
                loadAsDirectory(dir, pkg2, function(err5, n, pkg3) {
                  if (err5)
                    return cb2(err5);
                  if (n)
                    return cb2(null, n, pkg3);
                  loadAsFile(path2.join(x2, "index"), pkg3, cb2);
                });
              });
              return;
            }
            loadAsFile(path2.join(x2, "/index"), pkg, cb2);
          });
        });
      });
    }
    function processDirs(cb2, dirs) {
      if (dirs.length === 0)
        return cb2(null, void 0);
      var dir = dirs[0];
      isDirectory(path2.dirname(dir), isdir);
      function isdir(err2, isdir2) {
        if (err2)
          return cb2(err2);
        if (!isdir2)
          return processDirs(cb2, dirs.slice(1));
        loadAsFile(dir, opts.package, onfile2);
      }
      function onfile2(err2, m, pkg) {
        if (err2)
          return cb2(err2);
        if (m)
          return cb2(null, m, pkg);
        loadAsDirectory(dir, opts.package, ondir);
      }
      function ondir(err2, n, pkg) {
        if (err2)
          return cb2(err2);
        if (n)
          return cb2(null, n, pkg);
        processDirs(cb2, dirs.slice(1));
      }
    }
    function loadNodeModules(x2, start, cb2) {
      var thunk = function() {
        return getPackageCandidates(x2, start, opts);
      };
      processDirs(cb2, packageIterator ? packageIterator(x2, start, thunk, opts) : thunk());
    }
  };
});

// node_modules/.pnpm/resolve@1.19.0/node_modules/resolve/lib/core.json
var require_core2 = __commonJS((exports2, module2) => {
  module2.exports = {
    assert: true,
    "assert/strict": ">= 15",
    async_hooks: ">= 8",
    buffer_ieee754: "< 0.9.7",
    buffer: true,
    child_process: true,
    cluster: true,
    console: true,
    constants: true,
    crypto: true,
    _debug_agent: ">= 1 && < 8",
    _debugger: "< 8",
    dgram: true,
    diagnostics_channel: ">= 15.1",
    dns: true,
    "dns/promises": ">= 15",
    domain: ">= 0.7.12",
    events: true,
    freelist: "< 6",
    fs: true,
    "fs/promises": [">= 10 && < 10.1", ">= 14"],
    _http_agent: ">= 0.11.1",
    _http_client: ">= 0.11.1",
    _http_common: ">= 0.11.1",
    _http_incoming: ">= 0.11.1",
    _http_outgoing: ">= 0.11.1",
    _http_server: ">= 0.11.1",
    http: true,
    http2: ">= 8.8",
    https: true,
    inspector: ">= 8.0.0",
    _linklist: "< 8",
    module: true,
    net: true,
    "node-inspect/lib/_inspect": ">= 7.6.0 && < 12",
    "node-inspect/lib/internal/inspect_client": ">= 7.6.0 && < 12",
    "node-inspect/lib/internal/inspect_repl": ">= 7.6.0 && < 12",
    os: true,
    path: true,
    perf_hooks: ">= 8.5",
    process: ">= 1",
    punycode: true,
    querystring: true,
    readline: true,
    repl: true,
    smalloc: ">= 0.11.5 && < 3",
    _stream_duplex: ">= 0.9.4",
    _stream_transform: ">= 0.9.4",
    _stream_wrap: ">= 1.4.1",
    _stream_passthrough: ">= 0.9.4",
    _stream_readable: ">= 0.9.4",
    _stream_writable: ">= 0.9.4",
    stream: true,
    "stream/promises": ">= 15",
    string_decoder: true,
    sys: [">= 0.6 && < 0.7", ">= 0.8"],
    timers: true,
    "timers/promises": ">= 15",
    _tls_common: ">= 0.11.13",
    _tls_legacy: ">= 0.11.3 && < 10",
    _tls_wrap: ">= 0.11.3",
    tls: true,
    trace_events: ">= 10",
    tty: true,
    url: true,
    util: true,
    "v8/tools/arguments": ">= 10 && < 12",
    "v8/tools/codemap": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/consarray": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/csvparser": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/logreader": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/profile_view": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/splaytree": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    v8: ">= 1",
    vm: true,
    wasi: ">= 13.4 && < 13.5",
    worker_threads: ">= 11.7",
    zlib: true
  };
});

// node_modules/.pnpm/resolve@1.19.0/node_modules/resolve/lib/core.js
var require_core3 = __commonJS((exports2, module2) => {
  var current = process.versions && process.versions.node && process.versions.node.split(".") || [];
  function specifierIncluded(specifier) {
    var parts = specifier.split(" ");
    var op = parts.length > 1 ? parts[0] : "=";
    var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split(".");
    for (var i = 0; i < 3; ++i) {
      var cur = parseInt(current[i] || 0, 10);
      var ver = parseInt(versionParts[i] || 0, 10);
      if (cur === ver) {
        continue;
      }
      if (op === "<") {
        return cur < ver;
      } else if (op === ">=") {
        return cur >= ver;
      } else {
        return false;
      }
    }
    return op === ">=";
  }
  function matchesRange(range) {
    var specifiers = range.split(/ ?&& ?/);
    if (specifiers.length === 0) {
      return false;
    }
    for (var i = 0; i < specifiers.length; ++i) {
      if (!specifierIncluded(specifiers[i])) {
        return false;
      }
    }
    return true;
  }
  function versionIncluded(specifierValue) {
    if (typeof specifierValue === "boolean") {
      return specifierValue;
    }
    if (specifierValue && typeof specifierValue === "object") {
      for (var i = 0; i < specifierValue.length; ++i) {
        if (matchesRange(specifierValue[i])) {
          return true;
        }
      }
      return false;
    }
    return matchesRange(specifierValue);
  }
  var data = require_core2();
  var core = {};
  for (var mod in data) {
    if (Object.prototype.hasOwnProperty.call(data, mod)) {
      core[mod] = versionIncluded(data[mod]);
    }
  }
  module2.exports = core;
});

// node_modules/.pnpm/resolve@1.19.0/node_modules/resolve/lib/is-core.js
var require_is_core = __commonJS((exports2, module2) => {
  var isCoreModule = require_is_core_module();
  module2.exports = function isCore(x) {
    return isCoreModule(x);
  };
});

// node_modules/.pnpm/resolve@1.19.0/node_modules/resolve/lib/sync.js
var require_sync = __commonJS((exports2, module2) => {
  var isCore = require_is_core_module();
  var fs2 = require("fs");
  var path2 = require("path");
  var caller = require_caller();
  var nodeModulesPaths = require_node_modules_paths();
  var normalizeOptions = require_normalize_options();
  var realpathFS = fs2.realpathSync && typeof fs2.realpathSync.native === "function" ? fs2.realpathSync.native : fs2.realpathSync;
  var defaultIsFile = function isFile(file) {
    try {
      var stat = fs2.statSync(file);
    } catch (e) {
      if (e && (e.code === "ENOENT" || e.code === "ENOTDIR"))
        return false;
      throw e;
    }
    return stat.isFile() || stat.isFIFO();
  };
  var defaultIsDir = function isDirectory(dir) {
    try {
      var stat = fs2.statSync(dir);
    } catch (e) {
      if (e && (e.code === "ENOENT" || e.code === "ENOTDIR"))
        return false;
      throw e;
    }
    return stat.isDirectory();
  };
  var defaultRealpathSync = function realpathSync(x) {
    try {
      return realpathFS(x);
    } catch (realpathErr) {
      if (realpathErr.code !== "ENOENT") {
        throw realpathErr;
      }
    }
    return x;
  };
  var maybeRealpathSync = function maybeRealpathSync2(realpathSync, x, opts) {
    if (opts && opts.preserveSymlinks === false) {
      return realpathSync(x);
    }
    return x;
  };
  var getPackageCandidates = function getPackageCandidates2(x, start, opts) {
    var dirs = nodeModulesPaths(start, opts, x);
    for (var i = 0; i < dirs.length; i++) {
      dirs[i] = path2.join(dirs[i], x);
    }
    return dirs;
  };
  module2.exports = function resolveSync(x, options) {
    if (typeof x !== "string") {
      throw new TypeError("Path must be a string.");
    }
    var opts = normalizeOptions(x, options);
    var isFile = opts.isFile || defaultIsFile;
    var readFileSync = opts.readFileSync || fs2.readFileSync;
    var isDirectory = opts.isDirectory || defaultIsDir;
    var realpathSync = opts.realpathSync || defaultRealpathSync;
    var packageIterator = opts.packageIterator;
    var extensions = opts.extensions || [".js"];
    var includeCoreModules = opts.includeCoreModules !== false;
    var basedir = opts.basedir || path2.dirname(caller());
    var parent = opts.filename || basedir;
    opts.paths = opts.paths || [];
    var absoluteStart = maybeRealpathSync(realpathSync, path2.resolve(basedir), opts);
    if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(x)) {
      var res = path2.resolve(absoluteStart, x);
      if (x === "." || x === ".." || x.slice(-1) === "/")
        res += "/";
      var m = loadAsFileSync(res) || loadAsDirectorySync(res);
      if (m)
        return maybeRealpathSync(realpathSync, m, opts);
    } else if (includeCoreModules && isCore(x)) {
      return x;
    } else {
      var n = loadNodeModulesSync(x, absoluteStart);
      if (n)
        return maybeRealpathSync(realpathSync, n, opts);
    }
    var err = new Error("Cannot find module '" + x + "' from '" + parent + "'");
    err.code = "MODULE_NOT_FOUND";
    throw err;
    function loadAsFileSync(x2) {
      var pkg = loadpkg(path2.dirname(x2));
      if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {
        var rfile = path2.relative(pkg.dir, x2);
        var r = opts.pathFilter(pkg.pkg, x2, rfile);
        if (r) {
          x2 = path2.resolve(pkg.dir, r);
        }
      }
      if (isFile(x2)) {
        return x2;
      }
      for (var i = 0; i < extensions.length; i++) {
        var file = x2 + extensions[i];
        if (isFile(file)) {
          return file;
        }
      }
    }
    function loadpkg(dir) {
      if (dir === "" || dir === "/")
        return;
      if (process.platform === "win32" && /^\w:[/\\]*$/.test(dir)) {
        return;
      }
      if (/[/\\]node_modules[/\\]*$/.test(dir))
        return;
      var pkgfile = path2.join(maybeRealpathSync(realpathSync, dir, opts), "package.json");
      if (!isFile(pkgfile)) {
        return loadpkg(path2.dirname(dir));
      }
      var body = readFileSync(pkgfile);
      try {
        var pkg = JSON.parse(body);
      } catch (jsonErr) {
      }
      if (pkg && opts.packageFilter) {
        pkg = opts.packageFilter(pkg, dir);
      }
      return {pkg, dir};
    }
    function loadAsDirectorySync(x2) {
      var pkgfile = path2.join(maybeRealpathSync(realpathSync, x2, opts), "/package.json");
      if (isFile(pkgfile)) {
        try {
          var body = readFileSync(pkgfile, "UTF8");
          var pkg = JSON.parse(body);
        } catch (e) {
        }
        if (pkg && opts.packageFilter) {
          pkg = opts.packageFilter(pkg, x2);
        }
        if (pkg && pkg.main) {
          if (typeof pkg.main !== "string") {
            var mainError = new TypeError("package \u201C" + pkg.name + "\u201D `main` must be a string");
            mainError.code = "INVALID_PACKAGE_MAIN";
            throw mainError;
          }
          if (pkg.main === "." || pkg.main === "./") {
            pkg.main = "index";
          }
          try {
            var m2 = loadAsFileSync(path2.resolve(x2, pkg.main));
            if (m2)
              return m2;
            var n2 = loadAsDirectorySync(path2.resolve(x2, pkg.main));
            if (n2)
              return n2;
          } catch (e) {
          }
        }
      }
      return loadAsFileSync(path2.join(x2, "/index"));
    }
    function loadNodeModulesSync(x2, start) {
      var thunk = function() {
        return getPackageCandidates(x2, start, opts);
      };
      var dirs = packageIterator ? packageIterator(x2, start, thunk, opts) : thunk();
      for (var i = 0; i < dirs.length; i++) {
        var dir = dirs[i];
        if (isDirectory(path2.dirname(dir))) {
          var m2 = loadAsFileSync(dir);
          if (m2)
            return m2;
          var n2 = loadAsDirectorySync(dir);
          if (n2)
            return n2;
        }
      }
    }
  };
});

// node_modules/.pnpm/resolve@1.19.0/node_modules/resolve/index.js
var require_resolve = __commonJS((exports2, module2) => {
  var async = require_async();
  async.core = require_core3();
  async.isCore = require_is_core();
  async.sync = require_sync();
  module2.exports = async;
});

// node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/extract_description.js
var require_extract_description = __commonJS((exports2, module2) => {
  module2.exports = extractDescription;
  function extractDescription(d) {
    if (!d)
      return;
    if (d === "ERROR: No README data found!")
      return;
    d = d.trim().split("\n");
    for (var s = 0; d[s] && d[s].trim().match(/^(#|$)/); s++)
      ;
    var l = d.length;
    for (var e = s + 1; e < l && d[e].trim(); e++)
      ;
    return d.slice(s, e).join(" ").trim();
  }
});

// node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/typos.json
var require_typos = __commonJS((exports2, module2) => {
  module2.exports = {
    topLevel: {
      dependancies: "dependencies",
      dependecies: "dependencies",
      depdenencies: "dependencies",
      devEependencies: "devDependencies",
      depends: "dependencies",
      "dev-dependencies": "devDependencies",
      devDependences: "devDependencies",
      devDepenencies: "devDependencies",
      devdependencies: "devDependencies",
      repostitory: "repository",
      repo: "repository",
      prefereGlobal: "preferGlobal",
      hompage: "homepage",
      hampage: "homepage",
      autohr: "author",
      autor: "author",
      contributers: "contributors",
      publicationConfig: "publishConfig",
      script: "scripts"
    },
    bugs: {web: "url", name: "url"},
    script: {server: "start", tests: "test"}
  };
});

// node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/fixer.js
var require_fixer = __commonJS((exports2, module2) => {
  var semver = require_semver();
  var validateLicense = require_validate_npm_package_license();
  var hostedGitInfo = require_hosted_git_info();
  var isBuiltinModule = require_resolve().isCore;
  var depTypes = ["dependencies", "devDependencies", "optionalDependencies"];
  var extractDescription = require_extract_description();
  var url = require("url");
  var typos = require_typos();
  var fixer = module2.exports = {
    warn: function() {
    },
    fixRepositoryField: function(data) {
      if (data.repositories) {
        this.warn("repositories");
        data.repository = data.repositories[0];
      }
      if (!data.repository)
        return this.warn("missingRepository");
      if (typeof data.repository === "string") {
        data.repository = {
          type: "git",
          url: data.repository
        };
      }
      var r = data.repository.url || "";
      if (r) {
        var hosted = hostedGitInfo.fromUrl(r);
        if (hosted) {
          r = data.repository.url = hosted.getDefaultRepresentation() == "shortcut" ? hosted.https() : hosted.toString();
        }
      }
      if (r.match(/github.com\/[^\/]+\/[^\/]+\.git\.git$/)) {
        this.warn("brokenGitUrl", r);
      }
    },
    fixTypos: function(data) {
      Object.keys(typos.topLevel).forEach(function(d) {
        if (data.hasOwnProperty(d)) {
          this.warn("typo", d, typos.topLevel[d]);
        }
      }, this);
    },
    fixScriptsField: function(data) {
      if (!data.scripts)
        return;
      if (typeof data.scripts !== "object") {
        this.warn("nonObjectScripts");
        delete data.scripts;
        return;
      }
      Object.keys(data.scripts).forEach(function(k) {
        if (typeof data.scripts[k] !== "string") {
          this.warn("nonStringScript");
          delete data.scripts[k];
        } else if (typos.script[k] && !data.scripts[typos.script[k]]) {
          this.warn("typo", k, typos.script[k], "scripts");
        }
      }, this);
    },
    fixFilesField: function(data) {
      var files = data.files;
      if (files && !Array.isArray(files)) {
        this.warn("nonArrayFiles");
        delete data.files;
      } else if (data.files) {
        data.files = data.files.filter(function(file) {
          if (!file || typeof file !== "string") {
            this.warn("invalidFilename", file);
            return false;
          } else {
            return true;
          }
        }, this);
      }
    },
    fixBinField: function(data) {
      if (!data.bin)
        return;
      if (typeof data.bin === "string") {
        var b = {};
        var match;
        if (match = data.name.match(/^@[^/]+[/](.*)$/)) {
          b[match[1]] = data.bin;
        } else {
          b[data.name] = data.bin;
        }
        data.bin = b;
      }
    },
    fixManField: function(data) {
      if (!data.man)
        return;
      if (typeof data.man === "string") {
        data.man = [data.man];
      }
    },
    fixBundleDependenciesField: function(data) {
      var bdd = "bundledDependencies";
      var bd = "bundleDependencies";
      if (data[bdd] && !data[bd]) {
        data[bd] = data[bdd];
        delete data[bdd];
      }
      if (data[bd] && !Array.isArray(data[bd])) {
        this.warn("nonArrayBundleDependencies");
        delete data[bd];
      } else if (data[bd]) {
        data[bd] = data[bd].filter(function(bd2) {
          if (!bd2 || typeof bd2 !== "string") {
            this.warn("nonStringBundleDependency", bd2);
            return false;
          } else {
            if (!data.dependencies) {
              data.dependencies = {};
            }
            if (!data.dependencies.hasOwnProperty(bd2)) {
              this.warn("nonDependencyBundleDependency", bd2);
              data.dependencies[bd2] = "*";
            }
            return true;
          }
        }, this);
      }
    },
    fixDependencies: function(data, strict) {
      var loose = !strict;
      objectifyDeps(data, this.warn);
      addOptionalDepsToDeps(data, this.warn);
      this.fixBundleDependenciesField(data);
      ["dependencies", "devDependencies"].forEach(function(deps) {
        if (!(deps in data))
          return;
        if (!data[deps] || typeof data[deps] !== "object") {
          this.warn("nonObjectDependencies", deps);
          delete data[deps];
          return;
        }
        Object.keys(data[deps]).forEach(function(d) {
          var r = data[deps][d];
          if (typeof r !== "string") {
            this.warn("nonStringDependency", d, JSON.stringify(r));
            delete data[deps][d];
          }
          var hosted = hostedGitInfo.fromUrl(data[deps][d]);
          if (hosted)
            data[deps][d] = hosted.toString();
        }, this);
      }, this);
    },
    fixModulesField: function(data) {
      if (data.modules) {
        this.warn("deprecatedModules");
        delete data.modules;
      }
    },
    fixKeywordsField: function(data) {
      if (typeof data.keywords === "string") {
        data.keywords = data.keywords.split(/,\s+/);
      }
      if (data.keywords && !Array.isArray(data.keywords)) {
        delete data.keywords;
        this.warn("nonArrayKeywords");
      } else if (data.keywords) {
        data.keywords = data.keywords.filter(function(kw) {
          if (typeof kw !== "string" || !kw) {
            this.warn("nonStringKeyword");
            return false;
          } else {
            return true;
          }
        }, this);
      }
    },
    fixVersionField: function(data, strict) {
      var loose = !strict;
      if (!data.version) {
        data.version = "";
        return true;
      }
      if (!semver.valid(data.version, loose)) {
        throw new Error('Invalid version: "' + data.version + '"');
      }
      data.version = semver.clean(data.version, loose);
      return true;
    },
    fixPeople: function(data) {
      modifyPeople(data, unParsePerson);
      modifyPeople(data, parsePerson);
    },
    fixNameField: function(data, options) {
      if (typeof options === "boolean")
        options = {strict: options};
      else if (typeof options === "undefined")
        options = {};
      var strict = options.strict;
      if (!data.name && !strict) {
        data.name = "";
        return;
      }
      if (typeof data.name !== "string") {
        throw new Error("name field must be a string.");
      }
      if (!strict)
        data.name = data.name.trim();
      ensureValidName(data.name, strict, options.allowLegacyCase);
      if (isBuiltinModule(data.name))
        this.warn("conflictingName", data.name);
    },
    fixDescriptionField: function(data) {
      if (data.description && typeof data.description !== "string") {
        this.warn("nonStringDescription");
        delete data.description;
      }
      if (data.readme && !data.description)
        data.description = extractDescription(data.readme);
      if (data.description === void 0)
        delete data.description;
      if (!data.description)
        this.warn("missingDescription");
    },
    fixReadmeField: function(data) {
      if (!data.readme) {
        this.warn("missingReadme");
        data.readme = "ERROR: No README data found!";
      }
    },
    fixBugsField: function(data) {
      if (!data.bugs && data.repository && data.repository.url) {
        var hosted = hostedGitInfo.fromUrl(data.repository.url);
        if (hosted && hosted.bugs()) {
          data.bugs = {url: hosted.bugs()};
        }
      } else if (data.bugs) {
        var emailRe = /^.+@.*\..+$/;
        if (typeof data.bugs == "string") {
          if (emailRe.test(data.bugs))
            data.bugs = {email: data.bugs};
          else if (url.parse(data.bugs).protocol)
            data.bugs = {url: data.bugs};
          else
            this.warn("nonEmailUrlBugsString");
        } else {
          bugsTypos(data.bugs, this.warn);
          var oldBugs = data.bugs;
          data.bugs = {};
          if (oldBugs.url) {
            if (typeof oldBugs.url == "string" && url.parse(oldBugs.url).protocol)
              data.bugs.url = oldBugs.url;
            else
              this.warn("nonUrlBugsUrlField");
          }
          if (oldBugs.email) {
            if (typeof oldBugs.email == "string" && emailRe.test(oldBugs.email))
              data.bugs.email = oldBugs.email;
            else
              this.warn("nonEmailBugsEmailField");
          }
        }
        if (!data.bugs.email && !data.bugs.url) {
          delete data.bugs;
          this.warn("emptyNormalizedBugs");
        }
      }
    },
    fixHomepageField: function(data) {
      if (!data.homepage && data.repository && data.repository.url) {
        var hosted = hostedGitInfo.fromUrl(data.repository.url);
        if (hosted && hosted.docs())
          data.homepage = hosted.docs();
      }
      if (!data.homepage)
        return;
      if (typeof data.homepage !== "string") {
        this.warn("nonUrlHomepage");
        return delete data.homepage;
      }
      if (!url.parse(data.homepage).protocol) {
        data.homepage = "http://" + data.homepage;
      }
    },
    fixLicenseField: function(data) {
      if (!data.license) {
        return this.warn("missingLicense");
      } else {
        if (typeof data.license !== "string" || data.license.length < 1 || data.license.trim() === "") {
          this.warn("invalidLicense");
        } else {
          if (!validateLicense(data.license).validForNewPackages)
            this.warn("invalidLicense");
        }
      }
    }
  };
  function isValidScopedPackageName(spec) {
    if (spec.charAt(0) !== "@")
      return false;
    var rest = spec.slice(1).split("/");
    if (rest.length !== 2)
      return false;
    return rest[0] && rest[1] && rest[0] === encodeURIComponent(rest[0]) && rest[1] === encodeURIComponent(rest[1]);
  }
  function isCorrectlyEncodedName(spec) {
    return !spec.match(/[\/@\s\+%:]/) && spec === encodeURIComponent(spec);
  }
  function ensureValidName(name, strict, allowLegacyCase) {
    if (name.charAt(0) === "." || !(isValidScopedPackageName(name) || isCorrectlyEncodedName(name)) || strict && !allowLegacyCase && name !== name.toLowerCase() || name.toLowerCase() === "node_modules" || name.toLowerCase() === "favicon.ico") {
      throw new Error("Invalid name: " + JSON.stringify(name));
    }
  }
  function modifyPeople(data, fn) {
    if (data.author)
      data.author = fn(data.author);
    ["maintainers", "contributors"].forEach(function(set) {
      if (!Array.isArray(data[set]))
        return;
      data[set] = data[set].map(fn);
    });
    return data;
  }
  function unParsePerson(person) {
    if (typeof person === "string")
      return person;
    var name = person.name || "";
    var u = person.url || person.web;
    var url2 = u ? " (" + u + ")" : "";
    var e = person.email || person.mail;
    var email = e ? " <" + e + ">" : "";
    return name + email + url2;
  }
  function parsePerson(person) {
    if (typeof person !== "string")
      return person;
    var name = person.match(/^([^\(<]+)/);
    var url2 = person.match(/\(([^\)]+)\)/);
    var email = person.match(/<([^>]+)>/);
    var obj = {};
    if (name && name[0].trim())
      obj.name = name[0].trim();
    if (email)
      obj.email = email[1];
    if (url2)
      obj.url = url2[1];
    return obj;
  }
  function addOptionalDepsToDeps(data, warn) {
    var o = data.optionalDependencies;
    if (!o)
      return;
    var d = data.dependencies || {};
    Object.keys(o).forEach(function(k) {
      d[k] = o[k];
    });
    data.dependencies = d;
  }
  function depObjectify(deps, type, warn) {
    if (!deps)
      return {};
    if (typeof deps === "string") {
      deps = deps.trim().split(/[\n\r\s\t ,]+/);
    }
    if (!Array.isArray(deps))
      return deps;
    warn("deprecatedArrayDependencies", type);
    var o = {};
    deps.filter(function(d) {
      return typeof d === "string";
    }).forEach(function(d) {
      d = d.trim().split(/(:?[@\s><=])/);
      var dn = d.shift();
      var dv = d.join("");
      dv = dv.trim();
      dv = dv.replace(/^@/, "");
      o[dn] = dv;
    });
    return o;
  }
  function objectifyDeps(data, warn) {
    depTypes.forEach(function(type) {
      if (!data[type])
        return;
      data[type] = depObjectify(data[type], type, warn);
    });
  }
  function bugsTypos(bugs, warn) {
    if (!bugs)
      return;
    Object.keys(bugs).forEach(function(k) {
      if (typos.bugs[k]) {
        warn("typo", k, typos.bugs[k], "bugs");
        bugs[typos.bugs[k]] = bugs[k];
        delete bugs[k];
      }
    });
  }
});

// node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/warning_messages.json
var require_warning_messages = __commonJS((exports2, module2) => {
  module2.exports = {
    repositories: "'repositories' (plural) Not supported. Please pick one as the 'repository' field",
    missingRepository: "No repository field.",
    brokenGitUrl: "Probably broken git url: %s",
    nonObjectScripts: "scripts must be an object",
    nonStringScript: "script values must be string commands",
    nonArrayFiles: "Invalid 'files' member",
    invalidFilename: "Invalid filename in 'files' list: %s",
    nonArrayBundleDependencies: "Invalid 'bundleDependencies' list. Must be array of package names",
    nonStringBundleDependency: "Invalid bundleDependencies member: %s",
    nonDependencyBundleDependency: "Non-dependency in bundleDependencies: %s",
    nonObjectDependencies: "%s field must be an object",
    nonStringDependency: "Invalid dependency: %s %s",
    deprecatedArrayDependencies: "specifying %s as array is deprecated",
    deprecatedModules: "modules field is deprecated",
    nonArrayKeywords: "keywords should be an array of strings",
    nonStringKeyword: "keywords should be an array of strings",
    conflictingName: "%s is also the name of a node core module.",
    nonStringDescription: "'description' field should be a string",
    missingDescription: "No description",
    missingReadme: "No README data",
    missingLicense: "No license field.",
    nonEmailUrlBugsString: "Bug string field must be url, email, or {email,url}",
    nonUrlBugsUrlField: "bugs.url field must be a string url. Deleted.",
    nonEmailBugsEmailField: "bugs.email field must be a string email. Deleted.",
    emptyNormalizedBugs: "Normalized value of bugs field is an empty object. Deleted.",
    nonUrlHomepage: "homepage field must be a string url. Deleted.",
    invalidLicense: "license should be a valid SPDX license expression",
    typo: "%s should probably be %s."
  };
});

// node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/make_warning.js
var require_make_warning = __commonJS((exports2, module2) => {
  var util = require("util");
  var messages = require_warning_messages();
  module2.exports = function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var warningName = args.shift();
    if (warningName == "typo") {
      return makeTypoWarning.apply(null, args);
    } else {
      var msgTemplate = messages[warningName] ? messages[warningName] : warningName + ": '%s'";
      args.unshift(msgTemplate);
      return util.format.apply(null, args);
    }
  };
  function makeTypoWarning(providedName, probableName, field) {
    if (field) {
      providedName = field + "['" + providedName + "']";
      probableName = field + "['" + probableName + "']";
    }
    return util.format(messages.typo, providedName, probableName);
  }
});

// node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/normalize.js
var require_normalize = __commonJS((exports2, module2) => {
  module2.exports = normalize;
  var fixer = require_fixer();
  normalize.fixer = fixer;
  var makeWarning = require_make_warning();
  var fieldsToFix = [
    "name",
    "version",
    "description",
    "repository",
    "modules",
    "scripts",
    "files",
    "bin",
    "man",
    "bugs",
    "keywords",
    "readme",
    "homepage",
    "license"
  ];
  var otherThingsToFix = ["dependencies", "people", "typos"];
  var thingsToFix = fieldsToFix.map(function(fieldName) {
    return ucFirst(fieldName) + "Field";
  });
  thingsToFix = thingsToFix.concat(otherThingsToFix);
  function normalize(data, warn, strict) {
    if (warn === true)
      warn = null, strict = true;
    if (!strict)
      strict = false;
    if (!warn || data.private)
      warn = function(msg) {
      };
    if (data.scripts && data.scripts.install === "node-gyp rebuild" && !data.scripts.preinstall) {
      data.gypfile = true;
    }
    fixer.warn = function() {
      warn(makeWarning.apply(null, arguments));
    };
    thingsToFix.forEach(function(thingName) {
      fixer["fix" + ucFirst(thingName)](data, strict);
    });
    data._id = data.name + "@" + data.version;
  }
  function ucFirst(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
});

// node_modules/.pnpm/read-pkg@5.2.0/node_modules/read-pkg/index.js
var require_read_pkg = __commonJS((exports2, module2) => {
  "use strict";
  var {promisify} = require("util");
  var fs2 = require("fs");
  var path2 = require("path");
  var parseJson = require_parse_json();
  var readFileAsync = promisify(fs2.readFile);
  module2.exports = async (options) => {
    options = {
      cwd: process.cwd(),
      normalize: true,
      ...options
    };
    const filePath = path2.resolve(options.cwd, "package.json");
    const json = parseJson(await readFileAsync(filePath, "utf8"));
    if (options.normalize) {
      require_normalize()(json);
    }
    return json;
  };
  module2.exports.sync = (options) => {
    options = {
      cwd: process.cwd(),
      normalize: true,
      ...options
    };
    const filePath = path2.resolve(options.cwd, "package.json");
    const json = parseJson(fs2.readFileSync(filePath, "utf8"));
    if (options.normalize) {
      require_normalize()(json);
    }
    return json;
  };
});

// node_modules/.pnpm/read-pkg-up@7.0.1/node_modules/read-pkg-up/index.js
var require_read_pkg_up = __commonJS((exports2, module2) => {
  "use strict";
  var path2 = require("path");
  var findUp = require_find_up();
  var readPkg = require_read_pkg();
  module2.exports = async (options) => {
    const filePath = await findUp("package.json", options);
    if (!filePath) {
      return;
    }
    return {
      packageJson: await readPkg({...options, cwd: path2.dirname(filePath)}),
      path: filePath
    };
  };
  module2.exports.sync = (options) => {
    const filePath = findUp.sync("package.json", options);
    if (!filePath) {
      return;
    }
    return {
      packageJson: readPkg.sync({...options, cwd: path2.dirname(filePath)}),
      path: filePath
    };
  };
});

// node_modules/.pnpm/hard-rejection@2.1.0/node_modules/hard-rejection/index.js
var require_hard_rejection = __commonJS((exports2, module2) => {
  "use strict";
  var util = require("util");
  var installed = false;
  var hardRejection = (log = console.error) => {
    if (installed) {
      return;
    }
    installed = true;
    process.on("unhandledRejection", (error) => {
      if (!(error instanceof Error)) {
        error = new Error(`Promise rejected with value: ${util.inspect(error)}`);
      }
      log(error.stack);
      process.exit(1);
    });
  };
  module2.exports = hardRejection;
  module2.exports.default = hardRejection;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/constants.js
var require_constants = __commonJS((exports2, module2) => {
  var SEMVER_SPEC_VERSION = "2.0.0";
  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var MAX_SAFE_COMPONENT_LENGTH = 16;
  module2.exports = {
    SEMVER_SPEC_VERSION,
    MAX_LENGTH,
    MAX_SAFE_INTEGER,
    MAX_SAFE_COMPONENT_LENGTH
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/debug.js
var require_debug = __commonJS((exports2, module2) => {
  var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
  };
  module2.exports = debug;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/re.js
var require_re = __commonJS((exports2, module2) => {
  var {MAX_SAFE_COMPONENT_LENGTH} = require_constants();
  var debug = require_debug();
  exports2 = module2.exports = {};
  var re = exports2.re = [];
  var src = exports2.src = [];
  var t = exports2.t = {};
  var R = 0;
  var createToken = (name, value, isGlobal) => {
    const index = R++;
    debug(index, value);
    t[name] = index;
    src[index] = value;
    re[index] = new RegExp(value, isGlobal ? "g" : void 0);
  };
  createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
  createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
  createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
  createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
  createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
  createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
  createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
  createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
  createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
  createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
  createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
  createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
  createToken("FULL", `^${src[t.FULLPLAIN]}$`);
  createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
  createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
  createToken("GTLT", "((?:<|>)?=?)");
  createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
  createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
  createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
  createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
  createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
  createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
  createToken("COERCERTL", src[t.COERCE], true);
  createToken("LONETILDE", "(?:~>?)");
  createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
  exports2.tildeTrimReplace = "$1~";
  createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
  createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("LONECARET", "(?:\\^)");
  createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
  exports2.caretTrimReplace = "$1^";
  createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
  createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
  createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
  createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
  exports2.comparatorTrimReplace = "$1$2$3";
  createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
  createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
  createToken("STAR", "(<|>)?=?\\s*\\*");
  createToken("GTE0", "^\\s*>=\\s*0.0.0\\s*$");
  createToken("GTE0PRE", "^\\s*>=\\s*0.0.0-0\\s*$");
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS((exports2, module2) => {
  var opts = ["includePrerelease", "loose", "rtl"];
  var parseOptions = (options) => !options ? {} : typeof options !== "object" ? {loose: true} : opts.filter((k) => options[k]).reduce((options2, k) => {
    options2[k] = true;
    return options2;
  }, {});
  module2.exports = parseOptions;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS((exports2, module2) => {
  var numeric = /^[0-9]+$/;
  var compareIdentifiers = (a, b) => {
    const anum = numeric.test(a);
    const bnum = numeric.test(b);
    if (anum && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  };
  var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
  module2.exports = {
    compareIdentifiers,
    rcompareIdentifiers
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/semver.js
var require_semver2 = __commonJS((exports2, module2) => {
  var debug = require_debug();
  var {MAX_LENGTH, MAX_SAFE_INTEGER} = require_constants();
  var {re, t} = require_re();
  var parseOptions = require_parse_options();
  var {compareIdentifiers} = require_identifiers();
  var SemVer = class {
    constructor(version, options) {
      options = parseOptions(options);
      if (version instanceof SemVer) {
        if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== "string") {
        throw new TypeError(`Invalid Version: ${version}`);
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
      }
      debug("SemVer", version, options);
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
      if (!m) {
        throw new TypeError(`Invalid Version: ${version}`);
      }
      this.raw = version;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map((id) => {
          if (/^[0-9]+$/.test(id)) {
            const num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    format() {
      this.version = `${this.major}.${this.minor}.${this.patch}`;
      if (this.prerelease.length) {
        this.version += `-${this.prerelease.join(".")}`;
      }
      return this.version;
    }
    toString() {
      return this.version;
    }
    compare(other) {
      debug("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        if (typeof other === "string" && other === this.version) {
          return 0;
        }
        other = new SemVer(other, this.options);
      }
      if (other.version === this.version) {
        return 0;
      }
      return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      let i = 0;
      do {
        const a = this.prerelease[i];
        const b = other.prerelease[i];
        debug("prerelease compare", i, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    }
    compareBuild(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      let i = 0;
      do {
        const a = this.build[i];
        const b = other.build[i];
        debug("prerelease compare", i, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    }
    inc(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier);
          this.inc("pre", identifier);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier);
          }
          this.inc("pre", identifier);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            let i = this.prerelease.length;
            while (--i >= 0) {
              if (typeof this.prerelease[i] === "number") {
                this.prerelease[i]++;
                i = -2;
              }
            }
            if (i === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break;
        default:
          throw new Error(`invalid increment argument: ${release}`);
      }
      this.format();
      this.raw = this.version;
      return this;
    }
  };
  module2.exports = SemVer;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/parse.js
var require_parse2 = __commonJS((exports2, module2) => {
  var {MAX_LENGTH} = require_constants();
  var {re, t} = require_re();
  var SemVer = require_semver2();
  var parseOptions = require_parse_options();
  var parse2 = (version, options) => {
    options = parseOptions(options);
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version !== "string") {
      return null;
    }
    if (version.length > MAX_LENGTH) {
      return null;
    }
    const r = options.loose ? re[t.LOOSE] : re[t.FULL];
    if (!r.test(version)) {
      return null;
    }
    try {
      return new SemVer(version, options);
    } catch (er) {
      return null;
    }
  };
  module2.exports = parse2;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/valid.js
var require_valid = __commonJS((exports2, module2) => {
  var parse2 = require_parse2();
  var valid = (version, options) => {
    const v = parse2(version, options);
    return v ? v.version : null;
  };
  module2.exports = valid;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/clean.js
var require_clean = __commonJS((exports2, module2) => {
  var parse2 = require_parse2();
  var clean = (version, options) => {
    const s = parse2(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
  };
  module2.exports = clean;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/inc.js
var require_inc = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var inc = (version, release, options, identifier) => {
    if (typeof options === "string") {
      identifier = options;
      options = void 0;
    }
    try {
      return new SemVer(version, options).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  };
  module2.exports = inc;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare.js
var require_compare = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
  module2.exports = compare;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/eq.js
var require_eq = __commonJS((exports2, module2) => {
  var compare = require_compare();
  var eq = (a, b, loose) => compare(a, b, loose) === 0;
  module2.exports = eq;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/diff.js
var require_diff = __commonJS((exports2, module2) => {
  var parse2 = require_parse2();
  var eq = require_eq();
  var diff = (version1, version2) => {
    if (eq(version1, version2)) {
      return null;
    } else {
      const v1 = parse2(version1);
      const v2 = parse2(version2);
      const hasPre = v1.prerelease.length || v2.prerelease.length;
      const prefix = hasPre ? "pre" : "";
      const defaultResult = hasPre ? "prerelease" : "";
      for (const key in v1) {
        if (key === "major" || key === "minor" || key === "patch") {
          if (v1[key] !== v2[key]) {
            return prefix + key;
          }
        }
      }
      return defaultResult;
    }
  };
  module2.exports = diff;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/major.js
var require_major = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var major = (a, loose) => new SemVer(a, loose).major;
  module2.exports = major;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/minor.js
var require_minor = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var minor = (a, loose) => new SemVer(a, loose).minor;
  module2.exports = minor;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/patch.js
var require_patch = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var patch = (a, loose) => new SemVer(a, loose).patch;
  module2.exports = patch;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS((exports2, module2) => {
  var parse2 = require_parse2();
  var prerelease = (version, options) => {
    const parsed = parse2(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  };
  module2.exports = prerelease;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS((exports2, module2) => {
  var compare = require_compare();
  var rcompare = (a, b, loose) => compare(b, a, loose);
  module2.exports = rcompare;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS((exports2, module2) => {
  var compare = require_compare();
  var compareLoose = (a, b) => compare(a, b, true);
  module2.exports = compareLoose;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var compareBuild = (a, b, loose) => {
    const versionA = new SemVer(a, loose);
    const versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  };
  module2.exports = compareBuild;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/sort.js
var require_sort = __commonJS((exports2, module2) => {
  var compareBuild = require_compare_build();
  var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
  module2.exports = sort;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS((exports2, module2) => {
  var compareBuild = require_compare_build();
  var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
  module2.exports = rsort;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/gt.js
var require_gt = __commonJS((exports2, module2) => {
  var compare = require_compare();
  var gt = (a, b, loose) => compare(a, b, loose) > 0;
  module2.exports = gt;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/lt.js
var require_lt = __commonJS((exports2, module2) => {
  var compare = require_compare();
  var lt = (a, b, loose) => compare(a, b, loose) < 0;
  module2.exports = lt;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/neq.js
var require_neq = __commonJS((exports2, module2) => {
  var compare = require_compare();
  var neq = (a, b, loose) => compare(a, b, loose) !== 0;
  module2.exports = neq;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/gte.js
var require_gte = __commonJS((exports2, module2) => {
  var compare = require_compare();
  var gte = (a, b, loose) => compare(a, b, loose) >= 0;
  module2.exports = gte;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/lte.js
var require_lte = __commonJS((exports2, module2) => {
  var compare = require_compare();
  var lte = (a, b, loose) => compare(a, b, loose) <= 0;
  module2.exports = lte;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS((exports2, module2) => {
  var eq = require_eq();
  var neq = require_neq();
  var gt = require_gt();
  var gte = require_gte();
  var lt = require_lt();
  var lte = require_lte();
  var cmp = (a, op, b, loose) => {
    switch (op) {
      case "===":
        if (typeof a === "object")
          a = a.version;
        if (typeof b === "object")
          b = b.version;
        return a === b;
      case "!==":
        if (typeof a === "object")
          a = a.version;
        if (typeof b === "object")
          b = b.version;
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq(a, b, loose);
      case "!=":
        return neq(a, b, loose);
      case ">":
        return gt(a, b, loose);
      case ">=":
        return gte(a, b, loose);
      case "<":
        return lt(a, b, loose);
      case "<=":
        return lte(a, b, loose);
      default:
        throw new TypeError(`Invalid operator: ${op}`);
    }
  };
  module2.exports = cmp;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var parse2 = require_parse2();
  var {re, t} = require_re();
  var coerce = (version, options) => {
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version === "number") {
      version = String(version);
    }
    if (typeof version !== "string") {
      return null;
    }
    options = options || {};
    let match = null;
    if (!options.rtl) {
      match = version.match(re[t.COERCE]);
    } else {
      let next;
      while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
        if (!match || next.index + next[0].length !== match.index + match[0].length) {
          match = next;
        }
        re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
      }
      re[t.COERCERTL].lastIndex = -1;
    }
    if (match === null)
      return null;
    return parse2(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
  };
  module2.exports = coerce;
});

// node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js
var require_iterator = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function* () {
      for (let walker = this.head; walker; walker = walker.next) {
        yield walker.value;
      }
    };
  };
});

// node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js
var require_yallist = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = Yallist;
  Yallist.Node = Node2;
  Yallist.create = Yallist;
  function Yallist(list) {
    var self2 = this;
    if (!(self2 instanceof Yallist)) {
      self2 = new Yallist();
    }
    self2.tail = null;
    self2.head = null;
    self2.length = 0;
    if (list && typeof list.forEach === "function") {
      list.forEach(function(item) {
        self2.push(item);
      });
    } else if (arguments.length > 0) {
      for (var i = 0, l = arguments.length; i < l; i++) {
        self2.push(arguments[i]);
      }
    }
    return self2;
  }
  Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) {
      throw new Error("removing node which does not belong to this list");
    }
    var next = node.next;
    var prev = node.prev;
    if (next) {
      next.prev = prev;
    }
    if (prev) {
      prev.next = next;
    }
    if (node === this.head) {
      this.head = next;
    }
    if (node === this.tail) {
      this.tail = prev;
    }
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
  };
  Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) {
      head.prev = node;
    }
    this.head = node;
    if (!this.tail) {
      this.tail = node;
    }
    this.length++;
  };
  Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) {
      tail.next = node;
    }
    this.tail = node;
    if (!this.head) {
      this.head = node;
    }
    this.length++;
  };
  Yallist.prototype.push = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      push(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.unshift = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      unshift(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.pop = function() {
    if (!this.tail) {
      return void 0;
    }
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) {
      this.tail.next = null;
    } else {
      this.head = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.shift = function() {
    if (!this.head) {
      return void 0;
    }
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) {
      this.head.prev = null;
    } else {
      this.tail = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.head, i = 0; walker !== null; i++) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.next;
    }
  };
  Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.prev;
    }
  };
  Yallist.prototype.get = function(n) {
    for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
      walker = walker.next;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.getReverse = function(n) {
    for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
      walker = walker.prev;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.head; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.next;
    }
    return res;
  };
  Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.tail; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.prev;
    }
    return res;
  };
  Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.head) {
      walker = this.head.next;
      acc = this.head.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = 0; walker !== null; i++) {
      acc = fn(acc, walker.value, i);
      walker = walker.next;
    }
    return acc;
  };
  Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.tail) {
      walker = this.tail.prev;
      acc = this.tail.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = this.length - 1; walker !== null; i--) {
      acc = fn(acc, walker.value, i);
      walker = walker.prev;
    }
    return acc;
  };
  Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.head; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.next;
    }
    return arr;
  };
  Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.tail; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.prev;
    }
    return arr;
  };
  Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
      walker = walker.next;
    }
    for (; walker !== null && i < to; i++, walker = walker.next) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
      walker = walker.prev;
    }
    for (; walker !== null && i > from; i--, walker = walker.prev) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
    if (start > this.length) {
      start = this.length - 1;
    }
    if (start < 0) {
      start = this.length + start;
    }
    for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
      walker = walker.next;
    }
    var ret = [];
    for (var i = 0; walker && i < deleteCount; i++) {
      ret.push(walker.value);
      walker = this.removeNode(walker);
    }
    if (walker === null) {
      walker = this.tail;
    }
    if (walker !== this.head && walker !== this.tail) {
      walker = walker.prev;
    }
    for (var i = 0; i < nodes.length; i++) {
      walker = insert(this, walker, nodes[i]);
    }
    return ret;
  };
  Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for (var walker = head; walker !== null; walker = walker.prev) {
      var p = walker.prev;
      walker.prev = walker.next;
      walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
  };
  function insert(self2, node, value) {
    var inserted = node === self2.head ? new Node2(value, null, node, self2) : new Node2(value, node, node.next, self2);
    if (inserted.next === null) {
      self2.tail = inserted;
    }
    if (inserted.prev === null) {
      self2.head = inserted;
    }
    self2.length++;
    return inserted;
  }
  function push(self2, item) {
    self2.tail = new Node2(item, self2.tail, null, self2);
    if (!self2.head) {
      self2.head = self2.tail;
    }
    self2.length++;
  }
  function unshift(self2, item) {
    self2.head = new Node2(item, null, self2.head, self2);
    if (!self2.tail) {
      self2.tail = self2.head;
    }
    self2.length++;
  }
  function Node2(value, prev, next, list) {
    if (!(this instanceof Node2)) {
      return new Node2(value, prev, next, list);
    }
    this.list = list;
    this.value = value;
    if (prev) {
      prev.next = this;
      this.prev = prev;
    } else {
      this.prev = null;
    }
    if (next) {
      next.prev = this;
      this.next = next;
    } else {
      this.next = null;
    }
  }
  try {
    require_iterator()(Yallist);
  } catch (er) {
  }
});

// node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js
var require_lru_cache = __commonJS((exports2, module2) => {
  "use strict";
  var Yallist = require_yallist();
  var MAX = Symbol("max");
  var LENGTH = Symbol("length");
  var LENGTH_CALCULATOR = Symbol("lengthCalculator");
  var ALLOW_STALE = Symbol("allowStale");
  var MAX_AGE = Symbol("maxAge");
  var DISPOSE = Symbol("dispose");
  var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
  var LRU_LIST = Symbol("lruList");
  var CACHE = Symbol("cache");
  var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
  var naiveLength = () => 1;
  var LRUCache = class {
    constructor(options) {
      if (typeof options === "number")
        options = {max: options};
      if (!options)
        options = {};
      if (options.max && (typeof options.max !== "number" || options.max < 0))
        throw new TypeError("max must be a non-negative number");
      const max = this[MAX] = options.max || Infinity;
      const lc = options.length || naiveLength;
      this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
      this[ALLOW_STALE] = options.stale || false;
      if (options.maxAge && typeof options.maxAge !== "number")
        throw new TypeError("maxAge must be a number");
      this[MAX_AGE] = options.maxAge || 0;
      this[DISPOSE] = options.dispose;
      this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
      this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
      this.reset();
    }
    set max(mL) {
      if (typeof mL !== "number" || mL < 0)
        throw new TypeError("max must be a non-negative number");
      this[MAX] = mL || Infinity;
      trim(this);
    }
    get max() {
      return this[MAX];
    }
    set allowStale(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
      return this[ALLOW_STALE];
    }
    set maxAge(mA) {
      if (typeof mA !== "number")
        throw new TypeError("maxAge must be a non-negative number");
      this[MAX_AGE] = mA;
      trim(this);
    }
    get maxAge() {
      return this[MAX_AGE];
    }
    set lengthCalculator(lC) {
      if (typeof lC !== "function")
        lC = naiveLength;
      if (lC !== this[LENGTH_CALCULATOR]) {
        this[LENGTH_CALCULATOR] = lC;
        this[LENGTH] = 0;
        this[LRU_LIST].forEach((hit) => {
          hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
          this[LENGTH] += hit.length;
        });
      }
      trim(this);
    }
    get lengthCalculator() {
      return this[LENGTH_CALCULATOR];
    }
    get length() {
      return this[LENGTH];
    }
    get itemCount() {
      return this[LRU_LIST].length;
    }
    rforEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].tail; walker !== null; ) {
        const prev = walker.prev;
        forEachStep(this, fn, walker, thisp);
        walker = prev;
      }
    }
    forEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].head; walker !== null; ) {
        const next = walker.next;
        forEachStep(this, fn, walker, thisp);
        walker = next;
      }
    }
    keys() {
      return this[LRU_LIST].toArray().map((k) => k.key);
    }
    values() {
      return this[LRU_LIST].toArray().map((k) => k.value);
    }
    reset() {
      if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
        this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
      }
      this[CACHE] = new Map();
      this[LRU_LIST] = new Yallist();
      this[LENGTH] = 0;
    }
    dump() {
      return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter((h) => h);
    }
    dumpLru() {
      return this[LRU_LIST];
    }
    set(key, value, maxAge) {
      maxAge = maxAge || this[MAX_AGE];
      if (maxAge && typeof maxAge !== "number")
        throw new TypeError("maxAge must be a number");
      const now = maxAge ? Date.now() : 0;
      const len = this[LENGTH_CALCULATOR](value, key);
      if (this[CACHE].has(key)) {
        if (len > this[MAX]) {
          del(this, this[CACHE].get(key));
          return false;
        }
        const node = this[CACHE].get(key);
        const item = node.value;
        if (this[DISPOSE]) {
          if (!this[NO_DISPOSE_ON_SET])
            this[DISPOSE](key, item.value);
        }
        item.now = now;
        item.maxAge = maxAge;
        item.value = value;
        this[LENGTH] += len - item.length;
        item.length = len;
        this.get(key);
        trim(this);
        return true;
      }
      const hit = new Entry(key, value, len, now, maxAge);
      if (hit.length > this[MAX]) {
        if (this[DISPOSE])
          this[DISPOSE](key, value);
        return false;
      }
      this[LENGTH] += hit.length;
      this[LRU_LIST].unshift(hit);
      this[CACHE].set(key, this[LRU_LIST].head);
      trim(this);
      return true;
    }
    has(key) {
      if (!this[CACHE].has(key))
        return false;
      const hit = this[CACHE].get(key).value;
      return !isStale(this, hit);
    }
    get(key) {
      return get(this, key, true);
    }
    peek(key) {
      return get(this, key, false);
    }
    pop() {
      const node = this[LRU_LIST].tail;
      if (!node)
        return null;
      del(this, node);
      return node.value;
    }
    del(key) {
      del(this, this[CACHE].get(key));
    }
    load(arr) {
      this.reset();
      const now = Date.now();
      for (let l = arr.length - 1; l >= 0; l--) {
        const hit = arr[l];
        const expiresAt = hit.e || 0;
        if (expiresAt === 0)
          this.set(hit.k, hit.v);
        else {
          const maxAge = expiresAt - now;
          if (maxAge > 0) {
            this.set(hit.k, hit.v, maxAge);
          }
        }
      }
    }
    prune() {
      this[CACHE].forEach((value, key) => get(this, key, false));
    }
  };
  var get = (self2, key, doUse) => {
    const node = self2[CACHE].get(key);
    if (node) {
      const hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          return void 0;
      } else {
        if (doUse) {
          if (self2[UPDATE_AGE_ON_GET])
            node.value.now = Date.now();
          self2[LRU_LIST].unshiftNode(node);
        }
      }
      return hit.value;
    }
  };
  var isStale = (self2, hit) => {
    if (!hit || !hit.maxAge && !self2[MAX_AGE])
      return false;
    const diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
  };
  var trim = (self2) => {
    if (self2[LENGTH] > self2[MAX]) {
      for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
        const prev = walker.prev;
        del(self2, walker);
        walker = prev;
      }
    }
  };
  var del = (self2, node) => {
    if (node) {
      const hit = node.value;
      if (self2[DISPOSE])
        self2[DISPOSE](hit.key, hit.value);
      self2[LENGTH] -= hit.length;
      self2[CACHE].delete(hit.key);
      self2[LRU_LIST].removeNode(node);
    }
  };
  var Entry = class {
    constructor(key, value, length, now, maxAge) {
      this.key = key;
      this.value = value;
      this.length = length;
      this.now = now;
      this.maxAge = maxAge || 0;
    }
  };
  var forEachStep = (self2, fn, node, thisp) => {
    let hit = node.value;
    if (isStale(self2, hit)) {
      del(self2, node);
      if (!self2[ALLOW_STALE])
        hit = void 0;
    }
    if (hit)
      fn.call(thisp, hit.value, hit.key, self2);
  };
  module2.exports = LRUCache;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/range.js
var require_range = __commonJS((exports2, module2) => {
  var Range = class {
    constructor(range, options) {
      options = parseOptions(options);
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        this.raw = range.value;
        this.set = [[range]];
        this.format();
        return this;
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range;
      this.set = range.split(/\s*\|\|\s*/).map((range2) => this.parseRange(range2.trim())).filter((c) => c.length);
      if (!this.set.length) {
        throw new TypeError(`Invalid SemVer Range: ${range}`);
      }
      if (this.set.length > 1) {
        const first = this.set[0];
        this.set = this.set.filter((c) => !isNullSet(c[0]));
        if (this.set.length === 0)
          this.set = [first];
        else if (this.set.length > 1) {
          for (const c of this.set) {
            if (c.length === 1 && isAny(c[0])) {
              this.set = [c];
              break;
            }
          }
        }
      }
      this.format();
    }
    format() {
      this.range = this.set.map((comps) => {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    }
    toString() {
      return this.range;
    }
    parseRange(range) {
      range = range.trim();
      const memoOpts = Object.keys(this.options).join(",");
      const memoKey = `parseRange:${memoOpts}:${range}`;
      const cached = cache.get(memoKey);
      if (cached)
        return cached;
      const loose = this.options.loose;
      const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
      debug("hyphen replace", range);
      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
      debug("comparator trim", range, re[t.COMPARATORTRIM]);
      range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
      range = range.replace(re[t.CARETTRIM], caretTrimReplace);
      range = range.split(/\s+/).join(" ");
      const compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      const rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options)).filter(this.options.loose ? (comp) => !!comp.match(compRe) : () => true).map((comp) => new Comparator(comp, this.options));
      const l = rangeList.length;
      const rangeMap = new Map();
      for (const comp of rangeList) {
        if (isNullSet(comp))
          return [comp];
        rangeMap.set(comp.value, comp);
      }
      if (rangeMap.size > 1 && rangeMap.has(""))
        rangeMap.delete("");
      const result = [...rangeMap.values()];
      cache.set(memoKey, result);
      return result;
    }
    intersects(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some((thisComparators) => {
        return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
          return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
            return rangeComparators.every((rangeComparator) => {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    }
    test(version) {
      if (!version) {
        return false;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      for (let i = 0; i < this.set.length; i++) {
        if (testSet(this.set[i], version, this.options)) {
          return true;
        }
      }
      return false;
    }
  };
  module2.exports = Range;
  var LRU = require_lru_cache();
  var cache = new LRU({max: 1e3});
  var parseOptions = require_parse_options();
  var Comparator = require_comparator();
  var debug = require_debug();
  var SemVer = require_semver2();
  var {
    re,
    t,
    comparatorTrimReplace,
    tildeTrimReplace,
    caretTrimReplace
  } = require_re();
  var isNullSet = (c) => c.value === "<0.0.0-0";
  var isAny = (c) => c.value === "";
  var isSatisfiable = (comparators, options) => {
    let result = true;
    const remainingComparators = comparators.slice();
    let testComparator = remainingComparators.pop();
    while (result && remainingComparators.length) {
      result = remainingComparators.every((otherComparator) => {
        return testComparator.intersects(otherComparator, options);
      });
      testComparator = remainingComparators.pop();
    }
    return result;
  };
  var parseComparator = (comp, options) => {
    debug("comp", comp, options);
    comp = replaceCarets(comp, options);
    debug("caret", comp);
    comp = replaceTildes(comp, options);
    debug("tildes", comp);
    comp = replaceXRanges(comp, options);
    debug("xrange", comp);
    comp = replaceStars(comp, options);
    debug("stars", comp);
    return comp;
  };
  var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
  var replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((comp2) => {
    return replaceTilde(comp2, options);
  }).join(" ");
  var replaceTilde = (comp, options) => {
    const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, (_, M, m, p, pr) => {
      debug("tilde", comp, _, M, m, p, pr);
      let ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
      } else if (isX(p)) {
        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
      } else if (pr) {
        debug("replaceTilde pr", pr);
        ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
      } else {
        ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
      }
      debug("tilde return", ret);
      return ret;
    });
  };
  var replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((comp2) => {
    return replaceCaret(comp2, options);
  }).join(" ");
  var replaceCaret = (comp, options) => {
    debug("caret", comp, options);
    const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
    const z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M, m, p, pr) => {
      debug("caret", comp, _, M, m, p, pr);
      let ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
      } else if (isX(p)) {
        if (M === "0") {
          ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
        }
      } else if (pr) {
        debug("replaceCaret pr", pr);
        if (M === "0") {
          if (m === "0") {
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
          }
        } else {
          ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
        }
      } else {
        debug("no pr");
        if (M === "0") {
          if (m === "0") {
            ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
          } else {
            ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
          }
        } else {
          ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
        }
      }
      debug("caret return", ret);
      return ret;
    });
  };
  var replaceXRanges = (comp, options) => {
    debug("replaceXRanges", comp, options);
    return comp.split(/\s+/).map((comp2) => {
      return replaceXRange(comp2, options);
    }).join(" ");
  };
  var replaceXRange = (comp, options) => {
    comp = comp.trim();
    const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
      debug("xRange", comp, ret, gtlt, M, m, p, pr);
      const xM = isX(M);
      const xm = xM || isX(m);
      const xp = xm || isX(p);
      const anyX = xp;
      if (gtlt === "=" && anyX) {
        gtlt = "";
      }
      pr = options.includePrerelease ? "-0" : "";
      if (xM) {
        if (gtlt === ">" || gtlt === "<") {
          ret = "<0.0.0-0";
        } else {
          ret = "*";
        }
      } else if (gtlt && anyX) {
        if (xm) {
          m = 0;
        }
        p = 0;
        if (gtlt === ">") {
          gtlt = ">=";
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === "<=") {
          gtlt = "<";
          if (xm) {
            M = +M + 1;
          } else {
            m = +m + 1;
          }
        }
        if (gtlt === "<")
          pr = "-0";
        ret = `${gtlt + M}.${m}.${p}${pr}`;
      } else if (xm) {
        ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
      } else if (xp) {
        ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
      }
      debug("xRange return", ret);
      return ret;
    });
  };
  var replaceStars = (comp, options) => {
    debug("replaceStars", comp, options);
    return comp.trim().replace(re[t.STAR], "");
  };
  var replaceGTE0 = (comp, options) => {
    debug("replaceGTE0", comp, options);
    return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
  };
  var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
    if (isX(fM)) {
      from = "";
    } else if (isX(fm)) {
      from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
    } else if (isX(fp)) {
      from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
    } else if (fpr) {
      from = `>=${from}`;
    } else {
      from = `>=${from}${incPr ? "-0" : ""}`;
    }
    if (isX(tM)) {
      to = "";
    } else if (isX(tm)) {
      to = `<${+tM + 1}.0.0-0`;
    } else if (isX(tp)) {
      to = `<${tM}.${+tm + 1}.0-0`;
    } else if (tpr) {
      to = `<=${tM}.${tm}.${tp}-${tpr}`;
    } else if (incPr) {
      to = `<${tM}.${tm}.${+tp + 1}-0`;
    } else {
      to = `<=${to}`;
    }
    return `${from} ${to}`.trim();
  };
  var testSet = (set, version, options) => {
    for (let i = 0; i < set.length; i++) {
      if (!set[i].test(version)) {
        return false;
      }
    }
    if (version.prerelease.length && !options.includePrerelease) {
      for (let i = 0; i < set.length; i++) {
        debug(set[i].semver);
        if (set[i].semver === Comparator.ANY) {
          continue;
        }
        if (set[i].semver.prerelease.length > 0) {
          const allowed = set[i].semver;
          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
            return true;
          }
        }
      }
      return false;
    }
    return true;
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS((exports2, module2) => {
  var ANY = Symbol("SemVer ANY");
  var Comparator = class {
    static get ANY() {
      return ANY;
    }
    constructor(comp, options) {
      options = parseOptions(options);
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      debug("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug("comp", this);
    }
    parse(comp) {
      const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      const m = comp.match(r);
      if (!m) {
        throw new TypeError(`Invalid comparator: ${comp}`);
      }
      this.operator = m[1] !== void 0 ? m[1] : "";
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    }
    toString() {
      return this.value;
    }
    test(version) {
      debug("Comparator.test", version, this.options.loose);
      if (this.semver === ANY || version === ANY) {
        return true;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      return cmp(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (this.operator === "") {
        if (this.value === "") {
          return true;
        }
        return new Range(comp.value, options).test(this.value);
      } else if (comp.operator === "") {
        if (comp.value === "") {
          return true;
        }
        return new Range(this.value, options).test(comp.semver);
      }
      const sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      const sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      const sameSemVer = this.semver.version === comp.semver.version;
      const differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      const oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<");
      const oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    }
  };
  module2.exports = Comparator;
  var parseOptions = require_parse_options();
  var {re, t} = require_re();
  var cmp = require_cmp();
  var debug = require_debug();
  var SemVer = require_semver2();
  var Range = require_range();
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS((exports2, module2) => {
  var Range = require_range();
  var satisfies = (version, range, options) => {
    try {
      range = new Range(range, options);
    } catch (er) {
      return false;
    }
    return range.test(version);
  };
  module2.exports = satisfies;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS((exports2, module2) => {
  var Range = require_range();
  var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
  module2.exports = toComparators;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var Range = require_range();
  var maxSatisfying = (versions, range, options) => {
    let max = null;
    let maxSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!max || maxSV.compare(v) === -1) {
          max = v;
          maxSV = new SemVer(max, options);
        }
      }
    });
    return max;
  };
  module2.exports = maxSatisfying;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var Range = require_range();
  var minSatisfying = (versions, range, options) => {
    let min = null;
    let minSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!min || minSV.compare(v) === 1) {
          min = v;
          minSV = new SemVer(min, options);
        }
      }
    });
    return min;
  };
  module2.exports = minSatisfying;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var Range = require_range();
  var gt = require_gt();
  var minVersion = (range, loose) => {
    range = new Range(range, loose);
    let minver = new SemVer("0.0.0");
    if (range.test(minver)) {
      return minver;
    }
    minver = new SemVer("0.0.0-0");
    if (range.test(minver)) {
      return minver;
    }
    minver = null;
    for (let i = 0; i < range.set.length; ++i) {
      const comparators = range.set[i];
      let setMin = null;
      comparators.forEach((comparator) => {
        const compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          case "":
          case ">=":
            if (!setMin || gt(compver, setMin)) {
              setMin = compver;
            }
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error(`Unexpected operation: ${comparator.operator}`);
        }
      });
      if (setMin && (!minver || gt(minver, setMin)))
        minver = setMin;
    }
    if (minver && range.test(minver)) {
      return minver;
    }
    return null;
  };
  module2.exports = minVersion;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS((exports2, module2) => {
  var Range = require_range();
  var validRange = (range, options) => {
    try {
      return new Range(range, options).range || "*";
    } catch (er) {
      return null;
    }
  };
  module2.exports = validRange;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/outside.js
var require_outside = __commonJS((exports2, module2) => {
  var SemVer = require_semver2();
  var Comparator = require_comparator();
  var {ANY} = Comparator;
  var Range = require_range();
  var satisfies = require_satisfies();
  var gt = require_gt();
  var lt = require_lt();
  var lte = require_lte();
  var gte = require_gte();
  var outside = (version, range, hilo, options) => {
    version = new SemVer(version, options);
    range = new Range(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version, range, options)) {
      return false;
    }
    for (let i = 0; i < range.set.length; ++i) {
      const comparators = range.set[i];
      let high = null;
      let low = null;
      comparators.forEach((comparator) => {
        if (comparator.semver === ANY) {
          comparator = new Comparator(">=0.0.0");
        }
        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, options)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, options)) {
          low = comparator;
        }
      });
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }
      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false;
      }
    }
    return true;
  };
  module2.exports = outside;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS((exports2, module2) => {
  var outside = require_outside();
  var gtr = (version, range, options) => outside(version, range, ">", options);
  module2.exports = gtr;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS((exports2, module2) => {
  var outside = require_outside();
  var ltr = (version, range, options) => outside(version, range, "<", options);
  module2.exports = ltr;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS((exports2, module2) => {
  var Range = require_range();
  var intersects = (r1, r2, options) => {
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2);
  };
  module2.exports = intersects;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS((exports2, module2) => {
  var satisfies = require_satisfies();
  var compare = require_compare();
  module2.exports = (versions, range, options) => {
    const set = [];
    let min = null;
    let prev = null;
    const v = versions.sort((a, b) => compare(a, b, options));
    for (const version of v) {
      const included = satisfies(version, range, options);
      if (included) {
        prev = version;
        if (!min)
          min = version;
      } else {
        if (prev) {
          set.push([min, prev]);
        }
        prev = null;
        min = null;
      }
    }
    if (min)
      set.push([min, null]);
    const ranges = [];
    for (const [min2, max] of set) {
      if (min2 === max)
        ranges.push(min2);
      else if (!max && min2 === v[0])
        ranges.push("*");
      else if (!max)
        ranges.push(`>=${min2}`);
      else if (min2 === v[0])
        ranges.push(`<=${max}`);
      else
        ranges.push(`${min2} - ${max}`);
    }
    const simplified = ranges.join(" || ");
    const original = typeof range.raw === "string" ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/subset.js
var require_subset = __commonJS((exports2, module2) => {
  var Range = require_range();
  var {ANY} = require_comparator();
  var satisfies = require_satisfies();
  var compare = require_compare();
  var subset = (sub, dom, options) => {
    if (sub === dom)
      return true;
    sub = new Range(sub, options);
    dom = new Range(dom, options);
    let sawNonNull = false;
    OUTER:
      for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub)
            continue OUTER;
        }
        if (sawNonNull)
          return false;
      }
    return true;
  };
  var simpleSubset = (sub, dom, options) => {
    if (sub === dom)
      return true;
    if (sub.length === 1 && sub[0].semver === ANY)
      return dom.length === 1 && dom[0].semver === ANY;
    const eqSet = new Set();
    let gt, lt;
    for (const c of sub) {
      if (c.operator === ">" || c.operator === ">=")
        gt = higherGT(gt, c, options);
      else if (c.operator === "<" || c.operator === "<=")
        lt = lowerLT(lt, c, options);
      else
        eqSet.add(c.semver);
    }
    if (eqSet.size > 1)
      return null;
    let gtltComp;
    if (gt && lt) {
      gtltComp = compare(gt.semver, lt.semver, options);
      if (gtltComp > 0)
        return null;
      else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<="))
        return null;
    }
    for (const eq of eqSet) {
      if (gt && !satisfies(eq, String(gt), options))
        return null;
      if (lt && !satisfies(eq, String(lt), options))
        return null;
      for (const c of dom) {
        if (!satisfies(eq, String(c), options))
          return false;
      }
      return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    for (const c of dom) {
      hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
      hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
      if (gt) {
        if (c.operator === ">" || c.operator === ">=") {
          higher = higherGT(gt, c, options);
          if (higher === c && higher !== gt)
            return false;
        } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options))
          return false;
      }
      if (lt) {
        if (c.operator === "<" || c.operator === "<=") {
          lower = lowerLT(lt, c, options);
          if (lower === c && lower !== lt)
            return false;
        } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options))
          return false;
      }
      if (!c.operator && (lt || gt) && gtltComp !== 0)
        return false;
    }
    if (gt && hasDomLT && !lt && gtltComp !== 0)
      return false;
    if (lt && hasDomGT && !gt && gtltComp !== 0)
      return false;
    return true;
  };
  var higherGT = (a, b, options) => {
    if (!a)
      return b;
    const comp = compare(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
  };
  var lowerLT = (a, b, options) => {
    if (!a)
      return b;
    const comp = compare(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
  };
  module2.exports = subset;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/index.js
var require_semver3 = __commonJS((exports2, module2) => {
  var internalRe = require_re();
  module2.exports = {
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: require_constants().SEMVER_SPEC_VERSION,
    SemVer: require_semver2(),
    compareIdentifiers: require_identifiers().compareIdentifiers,
    rcompareIdentifiers: require_identifiers().rcompareIdentifiers,
    parse: require_parse2(),
    valid: require_valid(),
    clean: require_clean(),
    inc: require_inc(),
    diff: require_diff(),
    major: require_major(),
    minor: require_minor(),
    patch: require_patch(),
    prerelease: require_prerelease(),
    compare: require_compare(),
    rcompare: require_rcompare(),
    compareLoose: require_compare_loose(),
    compareBuild: require_compare_build(),
    sort: require_sort(),
    rsort: require_rsort(),
    gt: require_gt(),
    lt: require_lt(),
    eq: require_eq(),
    neq: require_neq(),
    gte: require_gte(),
    lte: require_lte(),
    cmp: require_cmp(),
    coerce: require_coerce(),
    Comparator: require_comparator(),
    Range: require_range(),
    satisfies: require_satisfies(),
    toComparators: require_to_comparators(),
    maxSatisfying: require_max_satisfying(),
    minSatisfying: require_min_satisfying(),
    minVersion: require_min_version(),
    validRange: require_valid2(),
    outside: require_outside(),
    gtr: require_gtr(),
    ltr: require_ltr(),
    intersects: require_intersects(),
    simplifyRange: require_simplify(),
    subset: require_subset()
  };
});

// node_modules/.pnpm/hosted-git-info@3.0.8/node_modules/hosted-git-info/git-host-info.js
var require_git_host_info2 = __commonJS((exports2, module2) => {
  "use strict";
  var gitHosts = module2.exports = {
    github: {
      protocols: ["git", "http", "git+ssh", "git+https", "ssh", "https"],
      domain: "github.com",
      treepath: "tree",
      filetemplate: "https://{auth@}raw.githubusercontent.com/{user}/{project}/{committish}/{path}",
      bugstemplate: "https://{domain}/{user}/{project}/issues",
      gittemplate: "git://{auth@}{domain}/{user}/{project}.git{#committish}",
      tarballtemplate: "https://codeload.{domain}/{user}/{project}/tar.gz/{committish}"
    },
    bitbucket: {
      protocols: ["git+ssh", "git+https", "ssh", "https"],
      domain: "bitbucket.org",
      treepath: "src",
      tarballtemplate: "https://{domain}/{user}/{project}/get/{committish}.tar.gz"
    },
    gitlab: {
      protocols: ["git+ssh", "git+https", "ssh", "https"],
      domain: "gitlab.com",
      treepath: "tree",
      bugstemplate: "https://{domain}/{user}/{project}/issues",
      httpstemplate: "git+https://{auth@}{domain}/{user}/{projectPath}.git{#committish}",
      tarballtemplate: "https://{domain}/{user}/{project}/repository/archive.tar.gz?ref={committish}",
      pathmatch: /^\/([^/]+)\/((?!.*(\/-\/|\/repository(\/[^/]+)?\/archive\.tar\.gz)).*?)(?:\.git|\/)?$/
    },
    gist: {
      protocols: ["git", "git+ssh", "git+https", "ssh", "https"],
      domain: "gist.github.com",
      pathmatch: /^[/](?:([^/]+)[/])?([a-z0-9]{7,})(?:[.]git)?$/,
      filetemplate: "https://gist.githubusercontent.com/{user}/{project}/raw{/committish}/{path}",
      bugstemplate: "https://{domain}/{project}",
      gittemplate: "git://{domain}/{project}.git{#committish}",
      sshtemplate: "git@{domain}:/{project}.git{#committish}",
      sshurltemplate: "git+ssh://git@{domain}/{project}.git{#committish}",
      browsetemplate: "https://{domain}/{project}{/committish}",
      browsefiletemplate: "https://{domain}/{project}{/committish}{#path}",
      docstemplate: "https://{domain}/{project}{/committish}",
      httpstemplate: "git+https://{domain}/{project}.git{#committish}",
      shortcuttemplate: "{type}:{project}{#committish}",
      pathtemplate: "{project}{#committish}",
      tarballtemplate: "https://codeload.github.com/gist/{project}/tar.gz/{committish}",
      hashformat: function(fragment) {
        return "file-" + formatHashFragment(fragment);
      }
    }
  };
  var gitHostDefaults = {
    sshtemplate: "git@{domain}:{user}/{project}.git{#committish}",
    sshurltemplate: "git+ssh://git@{domain}/{user}/{project}.git{#committish}",
    browsetemplate: "https://{domain}/{user}/{project}{/tree/committish}",
    browsefiletemplate: "https://{domain}/{user}/{project}/{treepath}/{committish}/{path}{#fragment}",
    docstemplate: "https://{domain}/{user}/{project}{/tree/committish}#readme",
    httpstemplate: "git+https://{auth@}{domain}/{user}/{project}.git{#committish}",
    filetemplate: "https://{domain}/{user}/{project}/raw/{committish}/{path}",
    shortcuttemplate: "{type}:{user}/{project}{#committish}",
    pathtemplate: "{user}/{project}{#committish}",
    pathmatch: /^[/]([^/]+)[/]([^/]+?)(?:[.]git|[/])?$/,
    hashformat: formatHashFragment
  };
  Object.keys(gitHosts).forEach(function(name) {
    Object.keys(gitHostDefaults).forEach(function(key) {
      if (gitHosts[name][key])
        return;
      gitHosts[name][key] = gitHostDefaults[key];
    });
    gitHosts[name].protocols_re = RegExp("^(" + gitHosts[name].protocols.map(function(protocol) {
      return protocol.replace(/([\\+*{}()[\]$^|])/g, "\\$1");
    }).join("|") + "):$");
  });
  function formatHashFragment(fragment) {
    return fragment.toLowerCase().replace(/^\W+|\/|\W+$/g, "").replace(/\W+/g, "-");
  }
});

// node_modules/.pnpm/hosted-git-info@3.0.8/node_modules/hosted-git-info/git-host.js
var require_git_host2 = __commonJS((exports2, module2) => {
  "use strict";
  var gitHosts = require_git_host_info2();
  var extend = Object.assign || function _extend(target, source) {
    if (source === null || typeof source !== "object")
      return target;
    const keys = Object.keys(source);
    let i = keys.length;
    while (i--) {
      target[keys[i]] = source[keys[i]];
    }
    return target;
  };
  module2.exports = GitHost;
  function GitHost(type, user, auth, project, committish, defaultRepresentation, opts) {
    var gitHostInfo = this;
    gitHostInfo.type = type;
    Object.keys(gitHosts[type]).forEach(function(key) {
      gitHostInfo[key] = gitHosts[type][key];
    });
    gitHostInfo.user = user;
    gitHostInfo.auth = auth;
    gitHostInfo.project = project;
    gitHostInfo.committish = committish;
    gitHostInfo.default = defaultRepresentation;
    gitHostInfo.opts = opts || {};
  }
  GitHost.prototype.hash = function() {
    return this.committish ? "#" + this.committish : "";
  };
  GitHost.prototype._fill = function(template, opts) {
    if (!template)
      return;
    var vars = extend({}, opts);
    vars.path = vars.path ? vars.path.replace(/^[/]+/g, "") : "";
    opts = extend(extend({}, this.opts), opts);
    var self2 = this;
    Object.keys(this).forEach(function(key) {
      if (self2[key] != null && vars[key] == null)
        vars[key] = self2[key];
    });
    var rawAuth = vars.auth;
    var rawcommittish = vars.committish;
    var rawFragment = vars.fragment;
    var rawPath = vars.path;
    var rawProject = vars.project;
    Object.keys(vars).forEach(function(key) {
      var value = vars[key];
      if ((key === "path" || key === "project") && typeof value === "string") {
        vars[key] = value.split("/").map(function(pathComponent) {
          return encodeURIComponent(pathComponent);
        }).join("/");
      } else if (key !== "domain") {
        vars[key] = encodeURIComponent(value);
      }
    });
    vars["auth@"] = rawAuth ? rawAuth + "@" : "";
    vars["#fragment"] = rawFragment ? "#" + this.hashformat(rawFragment) : "";
    vars.fragment = vars.fragment ? vars.fragment : "";
    vars["#path"] = rawPath ? "#" + this.hashformat(rawPath) : "";
    vars["/path"] = vars.path ? "/" + vars.path : "";
    vars.projectPath = rawProject.split("/").map(encodeURIComponent).join("/");
    if (opts.noCommittish) {
      vars["#committish"] = "";
      vars["/tree/committish"] = "";
      vars["/committish"] = "";
      vars.committish = "";
    } else {
      vars["#committish"] = rawcommittish ? "#" + rawcommittish : "";
      vars["/tree/committish"] = vars.committish ? "/" + vars.treepath + "/" + vars.committish : "";
      vars["/committish"] = vars.committish ? "/" + vars.committish : "";
      vars.committish = vars.committish || "master";
    }
    var res = template;
    Object.keys(vars).forEach(function(key) {
      res = res.replace(new RegExp("[{]" + key + "[}]", "g"), vars[key]);
    });
    if (opts.noGitPlus) {
      return res.replace(/^git[+]/, "");
    } else {
      return res;
    }
  };
  GitHost.prototype.ssh = function(opts) {
    return this._fill(this.sshtemplate, opts);
  };
  GitHost.prototype.sshurl = function(opts) {
    return this._fill(this.sshurltemplate, opts);
  };
  GitHost.prototype.browse = function(P, F, opts) {
    if (typeof P === "string") {
      if (typeof F !== "string") {
        opts = F;
        F = null;
      }
      return this._fill(this.browsefiletemplate, extend({
        fragment: F,
        path: P
      }, opts));
    } else {
      return this._fill(this.browsetemplate, P);
    }
  };
  GitHost.prototype.docs = function(opts) {
    return this._fill(this.docstemplate, opts);
  };
  GitHost.prototype.bugs = function(opts) {
    return this._fill(this.bugstemplate, opts);
  };
  GitHost.prototype.https = function(opts) {
    return this._fill(this.httpstemplate, opts);
  };
  GitHost.prototype.git = function(opts) {
    return this._fill(this.gittemplate, opts);
  };
  GitHost.prototype.shortcut = function(opts) {
    return this._fill(this.shortcuttemplate, opts);
  };
  GitHost.prototype.path = function(opts) {
    return this._fill(this.pathtemplate, opts);
  };
  GitHost.prototype.tarball = function(opts_) {
    var opts = extend({}, opts_, {noCommittish: false});
    return this._fill(this.tarballtemplate, opts);
  };
  GitHost.prototype.file = function(P, opts) {
    return this._fill(this.filetemplate, extend({path: P}, opts));
  };
  GitHost.prototype.getDefaultRepresentation = function() {
    return this.default;
  };
  GitHost.prototype.toString = function(opts) {
    if (this.default && typeof this[this.default] === "function")
      return this[this.default](opts);
    return this.sshurl(opts);
  };
});

// node_modules/.pnpm/hosted-git-info@3.0.8/node_modules/hosted-git-info/index.js
var require_hosted_git_info2 = __commonJS((exports2, module2) => {
  "use strict";
  var url = require("url");
  var gitHosts = require_git_host_info2();
  var GitHost = module2.exports = require_git_host2();
  var LRU = require_lru_cache();
  var cache = new LRU({max: 1e3});
  var protocolToRepresentationMap = {
    "git+ssh:": "sshurl",
    "git+https:": "https",
    "ssh:": "sshurl",
    "git:": "git"
  };
  function protocolToRepresentation(protocol) {
    return protocolToRepresentationMap[protocol] || protocol.slice(0, -1);
  }
  var authProtocols = {
    "git:": true,
    "https:": true,
    "git+https:": true,
    "http:": true,
    "git+http:": true
  };
  module2.exports.fromUrl = function(giturl, opts) {
    if (typeof giturl !== "string")
      return;
    var key = giturl + JSON.stringify(opts || {});
    if (!cache.has(key)) {
      cache.set(key, fromUrl(giturl, opts));
    }
    return cache.get(key);
  };
  function fromUrl(giturl, opts) {
    if (giturl == null || giturl === "")
      return;
    var url2 = fixupUnqualifiedGist(isGitHubShorthand(giturl) ? "github:" + giturl : giturl);
    var parsed = parseGitUrl(url2);
    var shortcutMatch = url2.match(/^([^:]+):(?:[^@]+@)?(?:([^/]*)\/)?([^#]+)/);
    var matches = Object.keys(gitHosts).map(function(gitHostName) {
      try {
        var gitHostInfo = gitHosts[gitHostName];
        var auth = null;
        if (parsed.auth && authProtocols[parsed.protocol]) {
          auth = parsed.auth;
        }
        var committish = parsed.hash ? decodeURIComponent(parsed.hash.substr(1)) : null;
        var user = null;
        var project = null;
        var defaultRepresentation = null;
        if (shortcutMatch && shortcutMatch[1] === gitHostName) {
          user = shortcutMatch[2] && decodeURIComponent(shortcutMatch[2]);
          project = decodeURIComponent(shortcutMatch[3].replace(/\.git$/, ""));
          defaultRepresentation = "shortcut";
        } else {
          if (parsed.host && parsed.host !== gitHostInfo.domain && parsed.host.replace(/^www[.]/, "") !== gitHostInfo.domain)
            return;
          if (!gitHostInfo.protocols_re.test(parsed.protocol))
            return;
          if (!parsed.path)
            return;
          var pathmatch = gitHostInfo.pathmatch;
          var matched = parsed.path.match(pathmatch);
          if (!matched)
            return;
          if (matched[1] !== null && matched[1] !== void 0) {
            user = decodeURIComponent(matched[1].replace(/^:/, ""));
          }
          project = decodeURIComponent(matched[2]);
          defaultRepresentation = protocolToRepresentation(parsed.protocol);
        }
        return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation, opts);
      } catch (ex) {
        if (ex instanceof URIError) {
        } else
          throw ex;
      }
    }).filter(function(gitHostInfo) {
      return gitHostInfo;
    });
    if (matches.length !== 1)
      return;
    return matches[0];
  }
  function isGitHubShorthand(arg) {
    return /^[^:@%/\s.-][^:@%/\s]*[/][^:@\s/%]+(?:#.*)?$/.test(arg);
  }
  function fixupUnqualifiedGist(giturl) {
    var parsed = url.parse(giturl);
    if (parsed.protocol === "gist:" && parsed.host && !parsed.path) {
      return parsed.protocol + "/" + parsed.host;
    } else {
      return giturl;
    }
  }
  function parseGitUrl(giturl) {
    var matched = giturl.match(/^([^@]+)@([^:/]+):[/]?((?:[^/]+[/])?[^/]+?)(?:[.]git)?(#.*)?$/);
    if (!matched) {
      var legacy = url.parse(giturl);
      if (legacy.auth) {
        const authmatch = giturl.match(/[^@]+@[^:/]+/);
        if (authmatch) {
          var whatwg = new url.URL(authmatch[0]);
          legacy.auth = whatwg.username || "";
          if (whatwg.password)
            legacy.auth += ":" + whatwg.password;
        }
      }
      return legacy;
    }
    return {
      protocol: "git+ssh:",
      slashes: true,
      auth: matched[1],
      host: matched[2],
      port: null,
      hostname: matched[2],
      hash: matched[4],
      search: null,
      query: null,
      pathname: "/" + matched[3],
      path: "/" + matched[3],
      href: "git+ssh://" + matched[1] + "@" + matched[2] + "/" + matched[3] + (matched[4] || "")
    };
  }
});

// node_modules/.pnpm/normalize-package-data@3.0.0/node_modules/normalize-package-data/lib/extract_description.js
var require_extract_description2 = __commonJS((exports2, module2) => {
  module2.exports = extractDescription;
  function extractDescription(d) {
    if (!d)
      return;
    if (d === "ERROR: No README data found!")
      return;
    d = d.trim().split("\n");
    for (var s = 0; d[s] && d[s].trim().match(/^(#|$)/); s++)
      ;
    var l = d.length;
    for (var e = s + 1; e < l && d[e].trim(); e++)
      ;
    return d.slice(s, e).join(" ").trim();
  }
});

// node_modules/.pnpm/normalize-package-data@3.0.0/node_modules/normalize-package-data/lib/typos.json
var require_typos2 = __commonJS((exports2, module2) => {
  module2.exports = {
    topLevel: {
      dependancies: "dependencies",
      dependecies: "dependencies",
      depdenencies: "dependencies",
      devEependencies: "devDependencies",
      depends: "dependencies",
      "dev-dependencies": "devDependencies",
      devDependences: "devDependencies",
      devDepenencies: "devDependencies",
      devdependencies: "devDependencies",
      repostitory: "repository",
      repo: "repository",
      prefereGlobal: "preferGlobal",
      hompage: "homepage",
      hampage: "homepage",
      autohr: "author",
      autor: "author",
      contributers: "contributors",
      publicationConfig: "publishConfig",
      script: "scripts"
    },
    bugs: {web: "url", name: "url"},
    script: {server: "start", tests: "test"}
  };
});

// node_modules/.pnpm/normalize-package-data@3.0.0/node_modules/normalize-package-data/lib/fixer.js
var require_fixer2 = __commonJS((exports2, module2) => {
  var semver = require_semver3();
  var validateLicense = require_validate_npm_package_license();
  var hostedGitInfo = require_hosted_git_info2();
  var isBuiltinModule = require_resolve().isCore;
  var depTypes = ["dependencies", "devDependencies", "optionalDependencies"];
  var extractDescription = require_extract_description2();
  var url = require("url");
  var typos = require_typos2();
  var fixer = module2.exports = {
    warn: function() {
    },
    fixRepositoryField: function(data) {
      if (data.repositories) {
        this.warn("repositories");
        data.repository = data.repositories[0];
      }
      if (!data.repository)
        return this.warn("missingRepository");
      if (typeof data.repository === "string") {
        data.repository = {
          type: "git",
          url: data.repository
        };
      }
      var r = data.repository.url || "";
      if (r) {
        var hosted = hostedGitInfo.fromUrl(r);
        if (hosted) {
          r = data.repository.url = hosted.getDefaultRepresentation() == "shortcut" ? hosted.https() : hosted.toString();
        }
      }
      if (r.match(/github.com\/[^\/]+\/[^\/]+\.git\.git$/)) {
        this.warn("brokenGitUrl", r);
      }
    },
    fixTypos: function(data) {
      Object.keys(typos.topLevel).forEach(function(d) {
        if (data.hasOwnProperty(d)) {
          this.warn("typo", d, typos.topLevel[d]);
        }
      }, this);
    },
    fixScriptsField: function(data) {
      if (!data.scripts)
        return;
      if (typeof data.scripts !== "object") {
        this.warn("nonObjectScripts");
        delete data.scripts;
        return;
      }
      Object.keys(data.scripts).forEach(function(k) {
        if (typeof data.scripts[k] !== "string") {
          this.warn("nonStringScript");
          delete data.scripts[k];
        } else if (typos.script[k] && !data.scripts[typos.script[k]]) {
          this.warn("typo", k, typos.script[k], "scripts");
        }
      }, this);
    },
    fixFilesField: function(data) {
      var files = data.files;
      if (files && !Array.isArray(files)) {
        this.warn("nonArrayFiles");
        delete data.files;
      } else if (data.files) {
        data.files = data.files.filter(function(file) {
          if (!file || typeof file !== "string") {
            this.warn("invalidFilename", file);
            return false;
          } else {
            return true;
          }
        }, this);
      }
    },
    fixBinField: function(data) {
      if (!data.bin)
        return;
      if (typeof data.bin === "string") {
        var b = {};
        var match;
        if (match = data.name.match(/^@[^/]+[/](.*)$/)) {
          b[match[1]] = data.bin;
        } else {
          b[data.name] = data.bin;
        }
        data.bin = b;
      }
    },
    fixManField: function(data) {
      if (!data.man)
        return;
      if (typeof data.man === "string") {
        data.man = [data.man];
      }
    },
    fixBundleDependenciesField: function(data) {
      var bdd = "bundledDependencies";
      var bd = "bundleDependencies";
      if (data[bdd] && !data[bd]) {
        data[bd] = data[bdd];
        delete data[bdd];
      }
      if (data[bd] && !Array.isArray(data[bd])) {
        this.warn("nonArrayBundleDependencies");
        delete data[bd];
      } else if (data[bd]) {
        data[bd] = data[bd].filter(function(bd2) {
          if (!bd2 || typeof bd2 !== "string") {
            this.warn("nonStringBundleDependency", bd2);
            return false;
          } else {
            if (!data.dependencies) {
              data.dependencies = {};
            }
            if (!data.dependencies.hasOwnProperty(bd2)) {
              this.warn("nonDependencyBundleDependency", bd2);
              data.dependencies[bd2] = "*";
            }
            return true;
          }
        }, this);
      }
    },
    fixDependencies: function(data, strict) {
      var loose = !strict;
      objectifyDeps(data, this.warn);
      addOptionalDepsToDeps(data, this.warn);
      this.fixBundleDependenciesField(data);
      ["dependencies", "devDependencies"].forEach(function(deps) {
        if (!(deps in data))
          return;
        if (!data[deps] || typeof data[deps] !== "object") {
          this.warn("nonObjectDependencies", deps);
          delete data[deps];
          return;
        }
        Object.keys(data[deps]).forEach(function(d) {
          var r = data[deps][d];
          if (typeof r !== "string") {
            this.warn("nonStringDependency", d, JSON.stringify(r));
            delete data[deps][d];
          }
          var hosted = hostedGitInfo.fromUrl(data[deps][d]);
          if (hosted)
            data[deps][d] = hosted.toString();
        }, this);
      }, this);
    },
    fixModulesField: function(data) {
      if (data.modules) {
        this.warn("deprecatedModules");
        delete data.modules;
      }
    },
    fixKeywordsField: function(data) {
      if (typeof data.keywords === "string") {
        data.keywords = data.keywords.split(/,\s+/);
      }
      if (data.keywords && !Array.isArray(data.keywords)) {
        delete data.keywords;
        this.warn("nonArrayKeywords");
      } else if (data.keywords) {
        data.keywords = data.keywords.filter(function(kw) {
          if (typeof kw !== "string" || !kw) {
            this.warn("nonStringKeyword");
            return false;
          } else {
            return true;
          }
        }, this);
      }
    },
    fixVersionField: function(data, strict) {
      var loose = !strict;
      if (!data.version) {
        data.version = "";
        return true;
      }
      if (!semver.valid(data.version, loose)) {
        throw new Error('Invalid version: "' + data.version + '"');
      }
      data.version = semver.clean(data.version, loose);
      return true;
    },
    fixPeople: function(data) {
      modifyPeople(data, unParsePerson);
      modifyPeople(data, parsePerson);
    },
    fixNameField: function(data, options) {
      if (typeof options === "boolean")
        options = {strict: options};
      else if (typeof options === "undefined")
        options = {};
      var strict = options.strict;
      if (!data.name && !strict) {
        data.name = "";
        return;
      }
      if (typeof data.name !== "string") {
        throw new Error("name field must be a string.");
      }
      if (!strict)
        data.name = data.name.trim();
      ensureValidName(data.name, strict, options.allowLegacyCase);
      if (isBuiltinModule(data.name))
        this.warn("conflictingName", data.name);
    },
    fixDescriptionField: function(data) {
      if (data.description && typeof data.description !== "string") {
        this.warn("nonStringDescription");
        delete data.description;
      }
      if (data.readme && !data.description)
        data.description = extractDescription(data.readme);
      if (data.description === void 0)
        delete data.description;
      if (!data.description)
        this.warn("missingDescription");
    },
    fixReadmeField: function(data) {
      if (!data.readme) {
        this.warn("missingReadme");
        data.readme = "ERROR: No README data found!";
      }
    },
    fixBugsField: function(data) {
      if (!data.bugs && data.repository && data.repository.url) {
        var hosted = hostedGitInfo.fromUrl(data.repository.url);
        if (hosted && hosted.bugs()) {
          data.bugs = {url: hosted.bugs()};
        }
      } else if (data.bugs) {
        var emailRe = /^.+@.*\..+$/;
        if (typeof data.bugs == "string") {
          if (emailRe.test(data.bugs))
            data.bugs = {email: data.bugs};
          else if (url.parse(data.bugs).protocol)
            data.bugs = {url: data.bugs};
          else
            this.warn("nonEmailUrlBugsString");
        } else {
          bugsTypos(data.bugs, this.warn);
          var oldBugs = data.bugs;
          data.bugs = {};
          if (oldBugs.url) {
            if (typeof oldBugs.url == "string" && url.parse(oldBugs.url).protocol)
              data.bugs.url = oldBugs.url;
            else
              this.warn("nonUrlBugsUrlField");
          }
          if (oldBugs.email) {
            if (typeof oldBugs.email == "string" && emailRe.test(oldBugs.email))
              data.bugs.email = oldBugs.email;
            else
              this.warn("nonEmailBugsEmailField");
          }
        }
        if (!data.bugs.email && !data.bugs.url) {
          delete data.bugs;
          this.warn("emptyNormalizedBugs");
        }
      }
    },
    fixHomepageField: function(data) {
      if (!data.homepage && data.repository && data.repository.url) {
        var hosted = hostedGitInfo.fromUrl(data.repository.url);
        if (hosted && hosted.docs())
          data.homepage = hosted.docs();
      }
      if (!data.homepage)
        return;
      if (typeof data.homepage !== "string") {
        this.warn("nonUrlHomepage");
        return delete data.homepage;
      }
      if (!url.parse(data.homepage).protocol) {
        data.homepage = "http://" + data.homepage;
      }
    },
    fixLicenseField: function(data) {
      if (!data.license) {
        return this.warn("missingLicense");
      } else {
        if (typeof data.license !== "string" || data.license.length < 1 || data.license.trim() === "") {
          this.warn("invalidLicense");
        } else {
          if (!validateLicense(data.license).validForNewPackages)
            this.warn("invalidLicense");
        }
      }
    }
  };
  function isValidScopedPackageName(spec) {
    if (spec.charAt(0) !== "@")
      return false;
    var rest = spec.slice(1).split("/");
    if (rest.length !== 2)
      return false;
    return rest[0] && rest[1] && rest[0] === encodeURIComponent(rest[0]) && rest[1] === encodeURIComponent(rest[1]);
  }
  function isCorrectlyEncodedName(spec) {
    return !spec.match(/[\/@\s\+%:]/) && spec === encodeURIComponent(spec);
  }
  function ensureValidName(name, strict, allowLegacyCase) {
    if (name.charAt(0) === "." || !(isValidScopedPackageName(name) || isCorrectlyEncodedName(name)) || strict && !allowLegacyCase && name !== name.toLowerCase() || name.toLowerCase() === "node_modules" || name.toLowerCase() === "favicon.ico") {
      throw new Error("Invalid name: " + JSON.stringify(name));
    }
  }
  function modifyPeople(data, fn) {
    if (data.author)
      data.author = fn(data.author);
    ["maintainers", "contributors"].forEach(function(set) {
      if (!Array.isArray(data[set]))
        return;
      data[set] = data[set].map(fn);
    });
    return data;
  }
  function unParsePerson(person) {
    if (typeof person === "string")
      return person;
    var name = person.name || "";
    var u = person.url || person.web;
    var url2 = u ? " (" + u + ")" : "";
    var e = person.email || person.mail;
    var email = e ? " <" + e + ">" : "";
    return name + email + url2;
  }
  function parsePerson(person) {
    if (typeof person !== "string")
      return person;
    var name = person.match(/^([^\(<]+)/);
    var url2 = person.match(/\(([^\)]+)\)/);
    var email = person.match(/<([^>]+)>/);
    var obj = {};
    if (name && name[0].trim())
      obj.name = name[0].trim();
    if (email)
      obj.email = email[1];
    if (url2)
      obj.url = url2[1];
    return obj;
  }
  function addOptionalDepsToDeps(data, warn) {
    var o = data.optionalDependencies;
    if (!o)
      return;
    var d = data.dependencies || {};
    Object.keys(o).forEach(function(k) {
      d[k] = o[k];
    });
    data.dependencies = d;
  }
  function depObjectify(deps, type, warn) {
    if (!deps)
      return {};
    if (typeof deps === "string") {
      deps = deps.trim().split(/[\n\r\s\t ,]+/);
    }
    if (!Array.isArray(deps))
      return deps;
    warn("deprecatedArrayDependencies", type);
    var o = {};
    deps.filter(function(d) {
      return typeof d === "string";
    }).forEach(function(d) {
      d = d.trim().split(/(:?[@\s><=])/);
      var dn = d.shift();
      var dv = d.join("");
      dv = dv.trim();
      dv = dv.replace(/^@/, "");
      o[dn] = dv;
    });
    return o;
  }
  function objectifyDeps(data, warn) {
    depTypes.forEach(function(type) {
      if (!data[type])
        return;
      data[type] = depObjectify(data[type], type, warn);
    });
  }
  function bugsTypos(bugs, warn) {
    if (!bugs)
      return;
    Object.keys(bugs).forEach(function(k) {
      if (typos.bugs[k]) {
        warn("typo", k, typos.bugs[k], "bugs");
        bugs[typos.bugs[k]] = bugs[k];
        delete bugs[k];
      }
    });
  }
});

// node_modules/.pnpm/normalize-package-data@3.0.0/node_modules/normalize-package-data/lib/warning_messages.json
var require_warning_messages2 = __commonJS((exports2, module2) => {
  module2.exports = {
    repositories: "'repositories' (plural) Not supported. Please pick one as the 'repository' field",
    missingRepository: "No repository field.",
    brokenGitUrl: "Probably broken git url: %s",
    nonObjectScripts: "scripts must be an object",
    nonStringScript: "script values must be string commands",
    nonArrayFiles: "Invalid 'files' member",
    invalidFilename: "Invalid filename in 'files' list: %s",
    nonArrayBundleDependencies: "Invalid 'bundleDependencies' list. Must be array of package names",
    nonStringBundleDependency: "Invalid bundleDependencies member: %s",
    nonDependencyBundleDependency: "Non-dependency in bundleDependencies: %s",
    nonObjectDependencies: "%s field must be an object",
    nonStringDependency: "Invalid dependency: %s %s",
    deprecatedArrayDependencies: "specifying %s as array is deprecated",
    deprecatedModules: "modules field is deprecated",
    nonArrayKeywords: "keywords should be an array of strings",
    nonStringKeyword: "keywords should be an array of strings",
    conflictingName: "%s is also the name of a node core module.",
    nonStringDescription: "'description' field should be a string",
    missingDescription: "No description",
    missingReadme: "No README data",
    missingLicense: "No license field.",
    nonEmailUrlBugsString: "Bug string field must be url, email, or {email,url}",
    nonUrlBugsUrlField: "bugs.url field must be a string url. Deleted.",
    nonEmailBugsEmailField: "bugs.email field must be a string email. Deleted.",
    emptyNormalizedBugs: "Normalized value of bugs field is an empty object. Deleted.",
    nonUrlHomepage: "homepage field must be a string url. Deleted.",
    invalidLicense: "license should be a valid SPDX license expression",
    typo: "%s should probably be %s."
  };
});

// node_modules/.pnpm/normalize-package-data@3.0.0/node_modules/normalize-package-data/lib/make_warning.js
var require_make_warning2 = __commonJS((exports2, module2) => {
  var util = require("util");
  var messages = require_warning_messages2();
  module2.exports = function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var warningName = args.shift();
    if (warningName == "typo") {
      return makeTypoWarning.apply(null, args);
    } else {
      var msgTemplate = messages[warningName] ? messages[warningName] : warningName + ": '%s'";
      args.unshift(msgTemplate);
      return util.format.apply(null, args);
    }
  };
  function makeTypoWarning(providedName, probableName, field) {
    if (field) {
      providedName = field + "['" + providedName + "']";
      probableName = field + "['" + probableName + "']";
    }
    return util.format(messages.typo, providedName, probableName);
  }
});

// node_modules/.pnpm/normalize-package-data@3.0.0/node_modules/normalize-package-data/lib/normalize.js
var require_normalize2 = __commonJS((exports2, module2) => {
  module2.exports = normalize;
  var fixer = require_fixer2();
  normalize.fixer = fixer;
  var makeWarning = require_make_warning2();
  var fieldsToFix = [
    "name",
    "version",
    "description",
    "repository",
    "modules",
    "scripts",
    "files",
    "bin",
    "man",
    "bugs",
    "keywords",
    "readme",
    "homepage",
    "license"
  ];
  var otherThingsToFix = ["dependencies", "people", "typos"];
  var thingsToFix = fieldsToFix.map(function(fieldName) {
    return ucFirst(fieldName) + "Field";
  });
  thingsToFix = thingsToFix.concat(otherThingsToFix);
  function normalize(data, warn, strict) {
    if (warn === true)
      warn = null, strict = true;
    if (!strict)
      strict = false;
    if (!warn || data.private)
      warn = function(msg) {
      };
    if (data.scripts && data.scripts.install === "node-gyp rebuild" && !data.scripts.preinstall) {
      data.gypfile = true;
    }
    fixer.warn = function() {
      warn(makeWarning.apply(null, arguments));
    };
    thingsToFix.forEach(function(thingName) {
      fixer["fix" + ucFirst(thingName)](data, strict);
    });
    data._id = data.name + "@" + data.version;
  }
  function ucFirst(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
});

// node_modules/.pnpm/meow@9.0.0/node_modules/meow/index.js
var require_meow = __commonJS((exports2, module2) => {
  "use strict";
  var path2 = require("path");
  var buildParserOptions = require_minimist_options();
  var parseArguments = require_build();
  var camelCaseKeys = require_camelcase_keys();
  var decamelize = require_decamelize();
  var decamelizeKeys = require_decamelize_keys();
  var trimNewlines = require_trim_newlines();
  var redent = require_redent();
  var readPkgUp = require_read_pkg_up();
  var hardRejection = require_hard_rejection();
  var normalizePackageData = require_normalize2();
  delete require.cache[__filename];
  var parentDir = path2.dirname(module2.parent && module2.parent.filename ? module2.parent.filename : ".");
  var isFlagMissing = (flagName, definedFlags, receivedFlags, input) => {
    const flag = definedFlags[flagName];
    let isFlagRequired = true;
    if (typeof flag.isRequired === "function") {
      isFlagRequired = flag.isRequired(receivedFlags, input);
      if (typeof isFlagRequired !== "boolean") {
        throw new TypeError(`Return value for isRequired callback should be of type boolean, but ${typeof isFlagRequired} was returned.`);
      }
    }
    if (typeof receivedFlags[flagName] === "undefined") {
      return isFlagRequired;
    }
    return flag.isMultiple && receivedFlags[flagName].length === 0;
  };
  var getMissingRequiredFlags = (flags, receivedFlags, input) => {
    const missingRequiredFlags = [];
    if (typeof flags === "undefined") {
      return [];
    }
    for (const flagName of Object.keys(flags)) {
      if (flags[flagName].isRequired && isFlagMissing(flagName, flags, receivedFlags, input)) {
        missingRequiredFlags.push({key: flagName, ...flags[flagName]});
      }
    }
    return missingRequiredFlags;
  };
  var reportMissingRequiredFlags = (missingRequiredFlags) => {
    console.error(`Missing required flag${missingRequiredFlags.length > 1 ? "s" : ""}`);
    for (const flag of missingRequiredFlags) {
      console.error(`	--${decamelize(flag.key, "-")}${flag.alias ? `, -${flag.alias}` : ""}`);
    }
  };
  var validateOptions = ({flags}) => {
    const invalidFlags = Object.keys(flags).filter((flagKey) => flagKey.includes("-") && flagKey !== "--");
    if (invalidFlags.length > 0) {
      throw new Error(`Flag keys may not contain '-': ${invalidFlags.join(", ")}`);
    }
  };
  var reportUnknownFlags = (unknownFlags) => {
    console.error([
      `Unknown flag${unknownFlags.length > 1 ? "s" : ""}`,
      ...unknownFlags
    ].join("\n"));
  };
  var buildParserFlags = ({flags, booleanDefault}) => {
    const parserFlags = {};
    for (const [flagKey, flagValue] of Object.entries(flags)) {
      const flag = {...flagValue};
      if (typeof booleanDefault !== "undefined" && flag.type === "boolean" && !Object.prototype.hasOwnProperty.call(flag, "default")) {
        flag.default = flag.isMultiple ? [booleanDefault] : booleanDefault;
      }
      if (flag.isMultiple) {
        flag.type = flag.type ? `${flag.type}-array` : "array";
        flag.default = flag.default || [];
        delete flag.isMultiple;
      }
      parserFlags[flagKey] = flag;
    }
    return parserFlags;
  };
  var validateFlags = (flags, options) => {
    for (const [flagKey, flagValue] of Object.entries(options.flags)) {
      if (flagKey !== "--" && !flagValue.isMultiple && Array.isArray(flags[flagKey])) {
        throw new Error(`The flag --${flagKey} can only be set once.`);
      }
    }
  };
  var meow2 = (helpText, options) => {
    if (typeof helpText !== "string") {
      options = helpText;
      helpText = "";
    }
    const foundPkg = readPkgUp.sync({
      cwd: parentDir,
      normalize: false
    });
    options = {
      pkg: foundPkg ? foundPkg.packageJson : {},
      argv: process.argv.slice(2),
      flags: {},
      inferType: false,
      input: "string",
      help: helpText,
      autoHelp: true,
      autoVersion: true,
      booleanDefault: false,
      hardRejection: true,
      allowUnknownFlags: true,
      ...options
    };
    if (options.hardRejection) {
      hardRejection();
    }
    validateOptions(options);
    let parserOptions = {
      arguments: options.input,
      ...buildParserFlags(options)
    };
    parserOptions = decamelizeKeys(parserOptions, "-", {exclude: ["stopEarly", "--"]});
    if (options.inferType) {
      delete parserOptions.arguments;
    }
    parserOptions = buildParserOptions(parserOptions);
    parserOptions.configuration = {
      ...parserOptions.configuration,
      "greedy-arrays": false
    };
    if (parserOptions["--"]) {
      parserOptions.configuration["populate--"] = true;
    }
    if (!options.allowUnknownFlags) {
      parserOptions.configuration["unknown-options-as-args"] = true;
    }
    const {pkg} = options;
    const argv = parseArguments(options.argv, parserOptions);
    let help = redent(trimNewlines((options.help || "").replace(/\t+\n*$/, "")), 2);
    normalizePackageData(pkg);
    process.title = pkg.bin ? Object.keys(pkg.bin)[0] : pkg.name;
    let {description} = options;
    if (!description && description !== false) {
      ({description} = pkg);
    }
    help = (description ? `
  ${description}
` : "") + (help ? `
${help}
` : "\n");
    const showHelp = (code) => {
      console.log(help);
      process.exit(typeof code === "number" ? code : 2);
    };
    const showVersion = () => {
      console.log(typeof options.version === "string" ? options.version : pkg.version);
      process.exit(0);
    };
    if (argv._.length === 0 && options.argv.length === 1) {
      if (argv.version === true && options.autoVersion) {
        showVersion();
      }
      if (argv.help === true && options.autoHelp) {
        showHelp(0);
      }
    }
    const input = argv._;
    delete argv._;
    if (!options.allowUnknownFlags) {
      const unknownFlags = input.filter((item) => typeof item === "string" && item.startsWith("-"));
      if (unknownFlags.length > 0) {
        reportUnknownFlags(unknownFlags);
        process.exit(2);
      }
    }
    const flags = camelCaseKeys(argv, {exclude: ["--", /^\w$/]});
    const unnormalizedFlags = {...flags};
    validateFlags(flags, options);
    for (const flagValue of Object.values(options.flags)) {
      delete flags[flagValue.alias];
    }
    const missingRequiredFlags = getMissingRequiredFlags(options.flags, flags, input);
    if (missingRequiredFlags.length > 0) {
      reportMissingRequiredFlags(missingRequiredFlags);
      process.exit(2);
    }
    return {
      input,
      flags,
      unnormalizedFlags,
      pkg,
      help,
      showHelp,
      showVersion
    };
  };
  module2.exports = meow2;
});

// node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js
var require_object_assign = __commonJS((exports2, module2) => {
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  "use strict";
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val === null || val === void 0) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    return Object(val);
  }
  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }
      var test1 = new String("abc");
      test1[5] = "de";
      if (Object.getOwnPropertyNames(test1)[0] === "5") {
        return false;
      }
      var test2 = {};
      for (var i = 0; i < 10; i++) {
        test2["_" + String.fromCharCode(i)] = i;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
        return test2[n];
      });
      if (order2.join("") !== "0123456789") {
        return false;
      }
      var test3 = {};
      "abcdefghijklmnopqrst".split("").forEach(function(letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);
      for (var key in from) {
        if (hasOwnProperty2.call(from, key)) {
          to[key] = from[key];
        }
      }
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }
    return to;
  };
});

// node_modules/.pnpm/react@17.0.1/node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS((exports2) => {
  /** @license React v17.0.1
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  var l = require_object_assign();
  var n = 60103;
  var p = 60106;
  exports2.Fragment = 60107;
  exports2.StrictMode = 60108;
  exports2.Profiler = 60114;
  var q = 60109;
  var r = 60110;
  var t = 60112;
  exports2.Suspense = 60113;
  var u = 60115;
  var v = 60116;
  if (typeof Symbol === "function" && Symbol.for) {
    w = Symbol.for;
    n = w("react.element");
    p = w("react.portal");
    exports2.Fragment = w("react.fragment");
    exports2.StrictMode = w("react.strict_mode");
    exports2.Profiler = w("react.profiler");
    q = w("react.provider");
    r = w("react.context");
    t = w("react.forward_ref");
    exports2.Suspense = w("react.suspense");
    u = w("react.memo");
    v = w("react.lazy");
  }
  var w;
  var x = typeof Symbol === "function" && Symbol.iterator;
  function y(a) {
    if (a === null || typeof a !== "object")
      return null;
    a = x && a[x] || a["@@iterator"];
    return typeof a === "function" ? a : null;
  }
  function z(a) {
    for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
      b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var A = {isMounted: function() {
    return false;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  }};
  var B = {};
  function C(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = B;
    this.updater = c || A;
  }
  C.prototype.isReactComponent = {};
  C.prototype.setState = function(a, b) {
    if (typeof a !== "object" && typeof a !== "function" && a != null)
      throw Error(z(85));
    this.updater.enqueueSetState(this, a, b, "setState");
  };
  C.prototype.forceUpdate = function(a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };
  function D() {
  }
  D.prototype = C.prototype;
  function E(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = B;
    this.updater = c || A;
  }
  var F = E.prototype = new D();
  F.constructor = E;
  l(F, C.prototype);
  F.isPureReactComponent = true;
  var G = {current: null};
  var H = Object.prototype.hasOwnProperty;
  var I = {key: true, ref: true, __self: true, __source: true};
  function J(a, b, c) {
    var e, d = {}, k = null, h = null;
    if (b != null)
      for (e in b.ref !== void 0 && (h = b.ref), b.key !== void 0 && (k = "" + b.key), b)
        H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);
    var g = arguments.length - 2;
    if (g === 1)
      d.children = c;
    else if (1 < g) {
      for (var f = Array(g), m = 0; m < g; m++)
        f[m] = arguments[m + 2];
      d.children = f;
    }
    if (a && a.defaultProps)
      for (e in g = a.defaultProps, g)
        d[e] === void 0 && (d[e] = g[e]);
    return {$$typeof: n, type: a, key: k, ref: h, props: d, _owner: G.current};
  }
  function K(a, b) {
    return {$$typeof: n, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner};
  }
  function L(a) {
    return typeof a === "object" && a !== null && a.$$typeof === n;
  }
  function escape2(a) {
    var b = {"=": "=0", ":": "=2"};
    return "$" + a.replace(/[=:]/g, function(a2) {
      return b[a2];
    });
  }
  var M = /\/+/g;
  function N(a, b) {
    return typeof a === "object" && a !== null && a.key != null ? escape2("" + a.key) : b.toString(36);
  }
  function O(a, b, c, e, d) {
    var k = typeof a;
    if (k === "undefined" || k === "boolean")
      a = null;
    var h = false;
    if (a === null)
      h = true;
    else
      switch (k) {
        case "string":
        case "number":
          h = true;
          break;
        case "object":
          switch (a.$$typeof) {
            case n:
            case p:
              h = true;
          }
      }
    if (h)
      return h = a, d = d(h), a = e === "" ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", a != null && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function(a2) {
        return a2;
      })) : d != null && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;
    h = 0;
    e = e === "" ? "." : e + ":";
    if (Array.isArray(a))
      for (var g = 0; g < a.length; g++) {
        k = a[g];
        var f = e + N(k, g);
        h += O(k, b, c, f, d);
      }
    else if (f = y(a), typeof f === "function")
      for (a = f.call(a), g = 0; !(k = a.next()).done; )
        k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);
    else if (k === "object")
      throw b = "" + a, Error(z(31, b === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
    return h;
  }
  function P(a, b, c) {
    if (a == null)
      return a;
    var e = [], d = 0;
    O(a, e, "", "", function(a2) {
      return b.call(c, a2, d++);
    });
    return e;
  }
  function Q(a) {
    if (a._status === -1) {
      var b = a._result;
      b = b();
      a._status = 0;
      a._result = b;
      b.then(function(b2) {
        a._status === 0 && (b2 = b2.default, a._status = 1, a._result = b2);
      }, function(b2) {
        a._status === 0 && (a._status = 2, a._result = b2);
      });
    }
    if (a._status === 1)
      return a._result;
    throw a._result;
  }
  var R = {current: null};
  function S() {
    var a = R.current;
    if (a === null)
      throw Error(z(321));
    return a;
  }
  var T = {ReactCurrentDispatcher: R, ReactCurrentBatchConfig: {transition: 0}, ReactCurrentOwner: G, IsSomeRendererActing: {current: false}, assign: l};
  exports2.Children = {map: P, forEach: function(a, b, c) {
    P(a, function() {
      b.apply(this, arguments);
    }, c);
  }, count: function(a) {
    var b = 0;
    P(a, function() {
      b++;
    });
    return b;
  }, toArray: function(a) {
    return P(a, function(a2) {
      return a2;
    }) || [];
  }, only: function(a) {
    if (!L(a))
      throw Error(z(143));
    return a;
  }};
  exports2.Component = C;
  exports2.PureComponent = E;
  exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;
  exports2.cloneElement = function(a, b, c) {
    if (a === null || a === void 0)
      throw Error(z(267, a));
    var e = l({}, a.props), d = a.key, k = a.ref, h = a._owner;
    if (b != null) {
      b.ref !== void 0 && (k = b.ref, h = G.current);
      b.key !== void 0 && (d = "" + b.key);
      if (a.type && a.type.defaultProps)
        var g = a.type.defaultProps;
      for (f in b)
        H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = b[f] === void 0 && g !== void 0 ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (f === 1)
      e.children = c;
    else if (1 < f) {
      g = Array(f);
      for (var m = 0; m < f; m++)
        g[m] = arguments[m + 2];
      e.children = g;
    }
    return {
      $$typeof: n,
      type: a.type,
      key: d,
      ref: k,
      props: e,
      _owner: h
    };
  };
  exports2.createContext = function(a, b) {
    b === void 0 && (b = null);
    a = {$$typeof: r, _calculateChangedBits: b, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null};
    a.Provider = {$$typeof: q, _context: a};
    return a.Consumer = a;
  };
  exports2.createElement = J;
  exports2.createFactory = function(a) {
    var b = J.bind(null, a);
    b.type = a;
    return b;
  };
  exports2.createRef = function() {
    return {current: null};
  };
  exports2.forwardRef = function(a) {
    return {$$typeof: t, render: a};
  };
  exports2.isValidElement = L;
  exports2.lazy = function(a) {
    return {$$typeof: v, _payload: {_status: -1, _result: a}, _init: Q};
  };
  exports2.memo = function(a, b) {
    return {$$typeof: u, type: a, compare: b === void 0 ? null : b};
  };
  exports2.useCallback = function(a, b) {
    return S().useCallback(a, b);
  };
  exports2.useContext = function(a, b) {
    return S().useContext(a, b);
  };
  exports2.useDebugValue = function() {
  };
  exports2.useEffect = function(a, b) {
    return S().useEffect(a, b);
  };
  exports2.useImperativeHandle = function(a, b, c) {
    return S().useImperativeHandle(a, b, c);
  };
  exports2.useLayoutEffect = function(a, b) {
    return S().useLayoutEffect(a, b);
  };
  exports2.useMemo = function(a, b) {
    return S().useMemo(a, b);
  };
  exports2.useReducer = function(a, b, c) {
    return S().useReducer(a, b, c);
  };
  exports2.useRef = function(a) {
    return S().useRef(a);
  };
  exports2.useState = function(a) {
    return S().useState(a);
  };
  exports2.version = "17.0.1";
});

// node_modules/.pnpm/react@17.0.1/node_modules/react/cjs/react.development.js
var require_react_development = __commonJS((exports2) => {
  /** @license React v17.0.1
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (process.env.NODE_ENV !== "production") {
    (function() {
      "use strict";
      var _assign = require_object_assign();
      var ReactVersion = "17.0.1";
      var REACT_ELEMENT_TYPE = 60103;
      var REACT_PORTAL_TYPE = 60106;
      exports2.Fragment = 60107;
      exports2.StrictMode = 60108;
      exports2.Profiler = 60114;
      var REACT_PROVIDER_TYPE = 60109;
      var REACT_CONTEXT_TYPE = 60110;
      var REACT_FORWARD_REF_TYPE = 60112;
      exports2.Suspense = 60113;
      var REACT_SUSPENSE_LIST_TYPE = 60120;
      var REACT_MEMO_TYPE = 60115;
      var REACT_LAZY_TYPE = 60116;
      var REACT_BLOCK_TYPE = 60121;
      var REACT_SERVER_BLOCK_TYPE = 60122;
      var REACT_FUNDAMENTAL_TYPE = 60117;
      var REACT_SCOPE_TYPE = 60119;
      var REACT_OPAQUE_ID_TYPE = 60128;
      var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
      var REACT_OFFSCREEN_TYPE = 60130;
      var REACT_LEGACY_HIDDEN_TYPE = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        exports2.Fragment = symbolFor("react.fragment");
        exports2.StrictMode = symbolFor("react.strict_mode");
        exports2.Profiler = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        exports2.Suspense = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: 0
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var IsSomeRendererActing = {
        current: false
      };
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner,
        IsSomeRendererActing,
        assign: _assign
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
      }
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
          {
            throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return void 0;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;
      _assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case exports2.Fragment:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case exports2.Profiler:
            return "Profiler";
          case exports2.StrictMode:
            return "StrictMode";
          case exports2.Suspense:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty2.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty2.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self2 = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            key = "" + config.key;
          }
          self2 = config.__self === void 0 ? null : config.__self;
          source = config.__source === void 0 ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        if (!!(element === null || element === void 0)) {
          {
            throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
        }
        var propName;
        var props = _assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            key = "" + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === void 0 && defaultProps !== void 0) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape2(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        if (typeof element === "object" && element !== null && element.key != null) {
          return escape2("" + element.key);
        }
        return index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (Array.isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = "" + children;
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children)) {
          {
            throw Error("React.Children.only expected to receive a single React element child.");
          }
        }
        return children;
      }
      function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === void 0) {
          calculateChangedBits = null;
        } else {
          {
            if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
              error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
            }
          }
        }
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _calculateChangedBits: calculateChangedBits,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          var pending = payload;
          pending._status = Pending;
          pending._result = thenable;
          thenable.then(function(moduleObject) {
            if (payload._status === Pending) {
              var defaultExport = moduleObject.default;
              {
                if (defaultExport === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = defaultExport;
            }
          }, function(error2) {
            if (payload._status === Pending) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error2;
            }
          });
        }
        if (payload._status === Resolved) {
          return payload._result;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: -1,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef(render2) {
        {
          if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
            error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render2 !== "function") {
            error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
          } else {
            if (render2.length !== 0 && render2.length !== 2) {
              error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render2 != null) {
            if (render2.defaultProps != null || render2.propTypes != null) {
              error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render2
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (render2.displayName == null) {
                render2.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var enableScopeAPI = false;
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === exports2.Fragment || type === exports2.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports2.StrictMode || type === exports2.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
            return true;
          }
        }
        return false;
      }
      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (type.displayName == null) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) {
          {
            throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        {
          if (unstable_observedBits !== void 0) {
            error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
          }
          if (Context._context !== void 0) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context) {
              error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context, unstable_observedBits);
      }
      function useState2(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: _assign({}, props, {
                value: prevLog
              }),
              info: _assign({}, props, {
                value: prevInfo
              }),
              warn: _assign({}, props, {
                value: prevWarn
              }),
              error: _assign({}, props, {
                value: prevError
              }),
              group: _assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: _assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: _assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case exports2.Suspense:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(Object.prototype.hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== void 0) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
          return;
        }
        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentName(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (Array.isArray(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
        if (type === exports2.Fragment) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      {
        try {
          var frozenObject = Object.freeze({});
          new Map([[frozenObject, null]]);
          new Set([frozenObject]);
        } catch (e) {
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports2.Children = Children;
      exports2.Component = Component;
      exports2.PureComponent = PureComponent;
      exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports2.cloneElement = cloneElement$1;
      exports2.createContext = createContext;
      exports2.createElement = createElement$1;
      exports2.createFactory = createFactory;
      exports2.createRef = createRef;
      exports2.forwardRef = forwardRef;
      exports2.isValidElement = isValidElement;
      exports2.lazy = lazy;
      exports2.memo = memo;
      exports2.useCallback = useCallback;
      exports2.useContext = useContext;
      exports2.useDebugValue = useDebugValue;
      exports2.useEffect = useEffect;
      exports2.useImperativeHandle = useImperativeHandle;
      exports2.useLayoutEffect = useLayoutEffect;
      exports2.useMemo = useMemo;
      exports2.useReducer = useReducer;
      exports2.useRef = useRef;
      exports2.useState = useState2;
      exports2.version = ReactVersion;
    })();
  }
});

// node_modules/.pnpm/react@17.0.1/node_modules/react/index.js
var require_react = __commonJS((exports2, module2) => {
  "use strict";
  if (process.env.NODE_ENV === "production") {
    module2.exports = require_react_production_min();
  } else {
    module2.exports = require_react_development();
  }
});

// node_modules/.pnpm/lodash@4.17.20/node_modules/lodash/lodash.js
var require_lodash = __commonJS((exports2, module2) => {
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  (function() {
    var undefined2;
    var VERSION = "4.17.20";
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = "__lodash_placeholder__";
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [
      ["ary", WRAP_ARY_FLAG],
      ["bind", WRAP_BIND_FLAG],
      ["bindKey", WRAP_BIND_KEY_FLAG],
      ["curry", WRAP_CURRY_FLAG],
      ["curryRight", WRAP_CURRY_RIGHT_FLAG],
      ["flip", WRAP_FLIP_FLAG],
      ["partial", WRAP_PARTIAL_FLAG],
      ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
      ["rearg", WRAP_REARG_FLAG]
    ];
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g, reTrimStart = /^\s+/, reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reApos = RegExp(rsApos, "g");
    var reComboMark = RegExp(rsCombo, "g");
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      \u00C0: "A",
      \u00C1: "A",
      \u00C2: "A",
      \u00C3: "A",
      \u00C4: "A",
      \u00C5: "A",
      \u00E0: "a",
      \u00E1: "a",
      \u00E2: "a",
      \u00E3: "a",
      \u00E4: "a",
      \u00E5: "a",
      \u00C7: "C",
      \u00E7: "c",
      \u00D0: "D",
      \u00F0: "d",
      \u00C8: "E",
      \u00C9: "E",
      \u00CA: "E",
      \u00CB: "E",
      \u00E8: "e",
      \u00E9: "e",
      \u00EA: "e",
      \u00EB: "e",
      \u00CC: "I",
      \u00CD: "I",
      \u00CE: "I",
      \u00CF: "I",
      \u00EC: "i",
      \u00ED: "i",
      \u00EE: "i",
      \u00EF: "i",
      \u00D1: "N",
      \u00F1: "n",
      \u00D2: "O",
      \u00D3: "O",
      \u00D4: "O",
      \u00D5: "O",
      \u00D6: "O",
      \u00D8: "O",
      \u00F2: "o",
      \u00F3: "o",
      \u00F4: "o",
      \u00F5: "o",
      \u00F6: "o",
      \u00F8: "o",
      \u00D9: "U",
      \u00DA: "U",
      \u00DB: "U",
      \u00DC: "U",
      \u00F9: "u",
      \u00FA: "u",
      \u00FB: "u",
      \u00FC: "u",
      \u00DD: "Y",
      \u00FD: "y",
      \u00FF: "y",
      \u00C6: "Ae",
      \u00E6: "ae",
      \u00DE: "Th",
      \u00FE: "th",
      \u00DF: "ss",
      \u0100: "A",
      \u0102: "A",
      \u0104: "A",
      \u0101: "a",
      \u0103: "a",
      \u0105: "a",
      \u0106: "C",
      \u0108: "C",
      \u010A: "C",
      \u010C: "C",
      \u0107: "c",
      \u0109: "c",
      \u010B: "c",
      \u010D: "c",
      \u010E: "D",
      \u0110: "D",
      \u010F: "d",
      \u0111: "d",
      \u0112: "E",
      \u0114: "E",
      \u0116: "E",
      \u0118: "E",
      \u011A: "E",
      \u0113: "e",
      \u0115: "e",
      \u0117: "e",
      \u0119: "e",
      \u011B: "e",
      \u011C: "G",
      \u011E: "G",
      \u0120: "G",
      \u0122: "G",
      \u011D: "g",
      \u011F: "g",
      \u0121: "g",
      \u0123: "g",
      \u0124: "H",
      \u0126: "H",
      \u0125: "h",
      \u0127: "h",
      \u0128: "I",
      \u012A: "I",
      \u012C: "I",
      \u012E: "I",
      \u0130: "I",
      \u0129: "i",
      \u012B: "i",
      \u012D: "i",
      \u012F: "i",
      \u0131: "i",
      \u0134: "J",
      \u0135: "j",
      \u0136: "K",
      \u0137: "k",
      \u0138: "k",
      \u0139: "L",
      \u013B: "L",
      \u013D: "L",
      \u013F: "L",
      \u0141: "L",
      \u013A: "l",
      \u013C: "l",
      \u013E: "l",
      \u0140: "l",
      \u0142: "l",
      \u0143: "N",
      \u0145: "N",
      \u0147: "N",
      \u014A: "N",
      \u0144: "n",
      \u0146: "n",
      \u0148: "n",
      \u014B: "n",
      \u014C: "O",
      \u014E: "O",
      \u0150: "O",
      \u014D: "o",
      \u014F: "o",
      \u0151: "o",
      \u0154: "R",
      \u0156: "R",
      \u0158: "R",
      \u0155: "r",
      \u0157: "r",
      \u0159: "r",
      \u015A: "S",
      \u015C: "S",
      \u015E: "S",
      \u0160: "S",
      \u015B: "s",
      \u015D: "s",
      \u015F: "s",
      \u0161: "s",
      \u0162: "T",
      \u0164: "T",
      \u0166: "T",
      \u0163: "t",
      \u0165: "t",
      \u0167: "t",
      \u0168: "U",
      \u016A: "U",
      \u016C: "U",
      \u016E: "U",
      \u0170: "U",
      \u0172: "U",
      \u0169: "u",
      \u016B: "u",
      \u016D: "u",
      \u016F: "u",
      \u0171: "u",
      \u0173: "u",
      \u0174: "W",
      \u0175: "w",
      \u0176: "Y",
      \u0177: "y",
      \u0178: "Y",
      \u0179: "Z",
      \u017B: "Z",
      \u017D: "Z",
      \u017A: "z",
      \u017C: "z",
      \u017E: "z",
      \u0132: "IJ",
      \u0133: "ij",
      \u0152: "Oe",
      \u0153: "oe",
      \u0149: "'n",
      \u017F: "s"
    };
    var htmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    var htmlUnescapes = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    };
    var stringEscapes = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    var freeParseFloat = parseFloat, freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;
      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayEvery(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    var asciiSize = baseProperty("length");
    function asciiToArray(string) {
      return string.split("");
    }
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection2) {
        if (predicate(value, key, collection2)) {
          result = key;
          return false;
        }
      });
      return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined2 : object[key];
      };
    }
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined2 : object[key];
      };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection2) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
      });
      return accumulator;
    }
    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }
    function baseSum(array, iteratee) {
      var result, index = -1, length = array.length;
      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined2) {
          result = result === undefined2 ? current : result + current;
        }
      }
      return result;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1, length = strSymbols.length;
      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
      }
      return index;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;
      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
      }
      return index;
    }
    function countHolders(array, placeholder) {
      var length = array.length, result = 0;
      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    function escapeStringChar(chr) {
      return "\\" + stringEscapes[chr];
    }
    function getValue(object, key) {
      return object == null ? undefined2 : object[key];
    }
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    function iteratorToArray(iterator) {
      var data, result = [];
      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function replaceHolders(array, placeholder) {
      var index = -1, length = array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    function setToPairs(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }
    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    var runInContext = function runInContext2(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
      var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
      var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
      var coreJsData = context["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var idCounter = 0;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object2);
      var oldDash = root._;
      var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
      var defineProperty = function() {
        try {
          var func = getNative(Object2, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
      var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
      var metaMap = WeakMap2 && new WeakMap2();
      var realNames = {};
      var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
      var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty2.call(value, "__wrapped__")) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }
      var baseCreate = function() {
        function object() {
        }
        return function(proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result2 = new object();
          object.prototype = undefined2;
          return result2;
        };
      }();
      function baseLodash() {
      }
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined2;
      }
      lodash.templateSettings = {
        escape: reEscape,
        evaluate: reEvaluate,
        interpolate: reInterpolate,
        variable: "",
        imports: {
          _: lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }
      function lazyClone() {
        var result2 = new LazyWrapper(this.__wrapped__);
        result2.__actions__ = copyArray(this.__actions__);
        result2.__dir__ = this.__dir__;
        result2.__filtered__ = this.__filtered__;
        result2.__iteratees__ = copyArray(this.__iteratees__);
        result2.__takeCount__ = this.__takeCount__;
        result2.__views__ = copyArray(this.__views__);
        return result2;
      }
      function lazyReverse() {
        if (this.__filtered__) {
          var result2 = new LazyWrapper(this);
          result2.__dir__ = -1;
          result2.__filtered__ = true;
        } else {
          result2 = this.clone();
          result2.__dir__ *= -1;
        }
        return result2;
      }
      function lazyValue() {
        var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result2 = [];
        outer:
          while (length-- && resIndex < takeCount) {
            index += dir;
            var iterIndex = -1, value = array[index];
            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result2[resIndex++] = value;
          }
        return result2;
      }
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result2 = this.has(key) && delete this.__data__[key];
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result2 = data[key];
          return result2 === HASH_UNDEFINED ? undefined2 : result2;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : undefined2;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined2 : hasOwnProperty2.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? undefined2 : data[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          hash: new Hash(),
          map: new (Map2 || ListCache)(),
          string: new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result2 = getMapData(this, key)["delete"](key);
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size2 = data.size;
        data.set(key, value);
        this.size += data.size == size2 ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values2) {
        var index = -1, length = values2 == null ? 0 : values2.length;
        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values2[index]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data = this.__data__, result2 = data["delete"](key);
        this.size = data.size;
        return result2;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined2;
      }
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }
      function assignMergeValue(object, key, value) {
        if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseAggregator(collection, setter, iteratee2, accumulator) {
        baseEach(collection, function(value, key, collection2) {
          setter(accumulator, value, iteratee2(value), collection2);
        });
        return accumulator;
      }
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        } else {
          object[key] = value;
        }
      }
      function baseAt(object, paths) {
        var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
        while (++index < length) {
          result2[index] = skip ? undefined2 : get(object, paths[index]);
        }
        return result2;
      }
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined2) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined2) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
        if (customizer) {
          result2 = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result2 !== undefined2) {
          return result2;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result2 = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result2);
          }
        } else {
          var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result2 = isFlat || isFunc ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result2 = initCloneByTag(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result2);
        if (isSet(value)) {
          value.forEach(function(subValue) {
            result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key2) {
            result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined2 : keysFunc(value);
        arrayEach(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
        return result2;
      }
      function baseConforms(source) {
        var props = keys(source);
        return function(object) {
          return baseConformsTo(object, source, props);
        };
      }
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object2(object);
        while (length--) {
          var key = props[length], predicate = source[key], value = object[key];
          if (value === undefined2 && !(key in object) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }
      function baseDelay(func, wait, args) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        return setTimeout2(function() {
          func.apply(undefined2, args);
        }, wait);
      }
      function baseDifference(array, values2, iteratee2, comparator) {
        var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
        if (!length) {
          return result2;
        }
        if (iteratee2) {
          values2 = arrayMap(values2, baseUnary(iteratee2));
        }
        if (comparator) {
          includes2 = arrayIncludesWith;
          isCommon = false;
        } else if (values2.length >= LARGE_ARRAY_SIZE) {
          includes2 = cacheHas;
          isCommon = false;
          values2 = new SetCache(values2);
        }
        outer:
          while (++index < length) {
            var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values2[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result2.push(value);
            } else if (!includes2(values2, computed, comparator)) {
              result2.push(value);
            }
          }
        return result2;
      }
      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);
      function baseEvery(collection, predicate) {
        var result2 = true;
        baseEach(collection, function(value, index, collection2) {
          result2 = !!predicate(value, index, collection2);
          return result2;
        });
        return result2;
      }
      function baseExtremum(array, iteratee2, comparator) {
        var index = -1, length = array.length;
        while (++index < length) {
          var value = array[index], current = iteratee2(value);
          if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current, result2 = value;
          }
        }
        return result2;
      }
      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end === undefined2 || end > length ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }
      function baseFilter(collection, predicate) {
        var result2 = [];
        baseEach(collection, function(value, index, collection2) {
          if (predicate(value, index, collection2)) {
            result2.push(value);
          }
        });
        return result2;
      }
      function baseFlatten(array, depth, predicate, isStrict, result2) {
        var index = -1, length = array.length;
        predicate || (predicate = isFlattenable);
        result2 || (result2 = []);
        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result2);
            } else {
              arrayPush(result2, value);
            }
          } else if (!isStrict) {
            result2[result2.length] = value;
          }
        }
        return result2;
      }
      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);
      function baseForOwn(object, iteratee2) {
        return object && baseFor(object, iteratee2, keys);
      }
      function baseForOwnRight(object, iteratee2) {
        return object && baseForRight(object, iteratee2, keys);
      }
      function baseFunctions(object, props) {
        return arrayFilter(props, function(key) {
          return isFunction(object[key]);
        });
      }
      function baseGet(object, path2) {
        path2 = castPath(path2, object);
        var index = 0, length = path2.length;
        while (object != null && index < length) {
          object = object[toKey(path2[index++])];
        }
        return index && index == length ? object : undefined2;
      }
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result2 = keysFunc(object);
        return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
      }
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined2 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
      }
      function baseGt(value, other) {
        return value > other;
      }
      function baseHas(object, key) {
        return object != null && hasOwnProperty2.call(object, key);
      }
      function baseHasIn(object, key) {
        return object != null && key in Object2(object);
      }
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }
      function baseIntersection(arrays, iteratee2, comparator) {
        var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee2) {
            array = arrayMap(array, baseUnary(iteratee2));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
        }
        array = arrays[0];
        var index = -1, seen = caches[0];
        outer:
          while (++index < length && result2.length < maxLength) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseInverter(object, setter, iteratee2, accumulator) {
        baseForOwn(object, function(value, key, object2) {
          setter(accumulator, iteratee2(value), key, object2);
        });
        return accumulator;
      }
      function baseInvoke(object, path2, args) {
        path2 = castPath(path2, object);
        object = parent(object, path2);
        var func = object == null ? object : object[toKey(last(path2))];
        return func == null ? undefined2 : apply(func, object, args);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length, length = index, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object2(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === undefined2 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result2 = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
              return false;
            }
          }
        }
        return true;
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result2 = [];
        for (var key in Object2(object)) {
          if (hasOwnProperty2.call(object, key) && key != "constructor") {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result2 = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseLt(value, other) {
        return value < other;
      }
      function baseMap(collection, iteratee2) {
        var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value, key, collection2) {
          result2[++index] = iteratee2(value, key, collection2);
        });
        return result2;
      }
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      function baseMatchesProperty(path2, srcValue) {
        if (isKey(path2) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path2), srcValue);
        }
        return function(object) {
          var objValue = get(object, path2);
          return objValue === undefined2 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack());
          if (isObject(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
            if (newValue === undefined2) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
        var isCommon = newValue === undefined2;
        if (isCommon) {
          var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined2;
      }
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap(iteratees, function(iteratee2) {
            if (isArray(iteratee2)) {
              return function(value) {
                return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
              };
            }
            return iteratee2;
          });
        } else {
          iteratees = [identity];
        }
        var index = -1;
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        var result2 = baseMap(collection, function(value, key, collection2) {
          var criteria = arrayMap(iteratees, function(iteratee2) {
            return iteratee2(value);
          });
          return {criteria, index: ++index, value};
        });
        return baseSortBy(result2, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path2) {
          return hasIn(object, path2);
        });
      }
      function basePickBy(object, paths, predicate) {
        var index = -1, length = paths.length, result2 = {};
        while (++index < length) {
          var path2 = paths[index], value = baseGet(object, path2);
          if (predicate(value, path2)) {
            baseSet(result2, castPath(path2, object), value);
          }
        }
        return result2;
      }
      function basePropertyDeep(path2) {
        return function(object) {
          return baseGet(object, path2);
        };
      }
      function basePullAll(array, values2, iteratee2, comparator) {
        var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
        if (array === values2) {
          values2 = copyArray(values2);
        }
        if (iteratee2) {
          seen = arrayMap(array, baseUnary(iteratee2));
        }
        while (++index < length) {
          var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
          while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0, lastIndex = length - 1;
        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }
        return array;
      }
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }
      function baseRange(start, end, step, fromRight) {
        var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
        while (length--) {
          result2[fromRight ? length : ++index] = start;
          start += step;
        }
        return result2;
      }
      function baseRepeat(string, n) {
        var result2 = "";
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result2;
        }
        do {
          if (n % 2) {
            result2 += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);
        return result2;
      }
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + "");
      }
      function baseSample(collection) {
        return arraySample(values(collection));
      }
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }
      function baseSet(object, path2, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path2 = castPath(path2, object);
        var index = -1, length = path2.length, lastIndex = length - 1, nested = object;
        while (nested != null && ++index < length) {
          var key = toKey(path2[index]), newValue = value;
          if (key === "__proto__" || key === "constructor" || key === "prototype") {
            return object;
          }
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined2;
            if (newValue === undefined2) {
              newValue = isObject(objValue) ? objValue : isIndex(path2[index + 1]) ? [] : {};
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }
      var baseSetData = !metaMap ? identity : function(func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, "toString", {
          configurable: true,
          enumerable: false,
          value: constant(string),
          writable: true
        });
      };
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }
      function baseSlice(array, start, end) {
        var index = -1, length = array.length;
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result2 = Array2(length);
        while (++index < length) {
          result2[index] = array[index + start];
        }
        return result2;
      }
      function baseSome(collection, predicate) {
        var result2;
        baseEach(collection, function(value, index, collection2) {
          result2 = predicate(value, index, collection2);
          return !result2;
        });
        return !!result2;
      }
      function baseSortedIndex(array, value, retHighest) {
        var low = 0, high = array == null ? low : array.length;
        if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1, computed = array[mid];
            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }
      function baseSortedIndexBy(array, value, iteratee2, retHighest) {
        var low = 0, high = array == null ? 0 : array.length;
        if (high === 0) {
          return 0;
        }
        value = iteratee2(value);
        var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
        while (low < high) {
          var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }
      function baseSortedUniq(array, iteratee2) {
        var index = -1, length = array.length, resIndex = 0, result2 = [];
        while (++index < length) {
          var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result2[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result2;
      }
      function baseToNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      function baseUniq(array, iteratee2, comparator) {
        var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
        if (comparator) {
          isCommon = false;
          includes2 = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set2 = iteratee2 ? null : createSet(array);
          if (set2) {
            return setToArray(set2);
          }
          isCommon = false;
          includes2 = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee2 ? [] : result2;
        }
        outer:
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee2) {
                seen.push(computed);
              }
              result2.push(value);
            } else if (!includes2(seen, computed, comparator)) {
              if (seen !== result2) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseUnset(object, path2) {
        path2 = castPath(path2, object);
        object = parent(object, path2);
        return object == null || delete object[toKey(last(path2))];
      }
      function baseUpdate(object, path2, updater, customizer) {
        return baseSet(object, path2, updater(baseGet(object, path2)), customizer);
      }
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length, index = fromRight ? length : -1;
        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
        }
        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }
      function baseWrapperValue(value, actions) {
        var result2 = value;
        if (result2 instanceof LazyWrapper) {
          result2 = result2.value();
        }
        return arrayReduce(actions, function(result3, action) {
          return action.func.apply(action.thisArg, arrayPush([result3], action.args));
        }, result2);
      }
      function baseXor(arrays, iteratee2, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index = -1, result2 = Array2(length);
        while (++index < length) {
          var array = arrays[index], othIndex = -1;
          while (++othIndex < length) {
            if (othIndex != index) {
              result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
      }
      function baseZipObject(props, values2, assignFunc) {
        var index = -1, length = props.length, valsLength = values2.length, result2 = {};
        while (++index < length) {
          var value = index < valsLength ? values2[index] : undefined2;
          assignFunc(result2, props[index], value);
        }
        return result2;
      }
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }
      function castFunction(value) {
        return typeof value == "function" ? value : identity;
      }
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }
      var castRest = baseRest;
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined2 ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }
      var clearTimeout2 = ctxClearTimeout || function(id) {
        return root.clearTimeout(id);
      };
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result2);
        return result2;
      }
      function cloneArrayBuffer(arrayBuffer) {
        var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
        return result2;
      }
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      function cloneRegExp(regexp) {
        var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result2.lastIndex = regexp.lastIndex;
        return result2;
      }
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      function compareMultiple(object, other, orders) {
        var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
        while (++index < length) {
          var result2 = compareAscending(objCriteria[index], othCriteria[index]);
          if (result2) {
            if (index >= ordersLength) {
              return result2;
            }
            var order = orders[index];
            return result2 * (order == "desc" ? -1 : 1);
          }
        }
        return object.index - other.index;
      }
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
        while (++leftIndex < leftLength) {
          result2[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result2[leftIndex++] = args[argsIndex++];
        }
        return result2;
      }
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
        while (++argsIndex < rangeLength) {
          result2[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result2[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result2;
      }
      function copyArray(source, array) {
        var index = -1, length = source.length;
        array || (array = Array2(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
          if (newValue === undefined2) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }
      function createAggregator(setter, initializer) {
        return function(collection, iteratee2) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
        };
      }
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined2 : customizer;
            length = 1;
          }
          object = Object2(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee2) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee2);
          }
          var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
          while (fromRight ? index-- : ++index < length) {
            if (iteratee2(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      function createBaseFor(fromRight) {
        return function(object, iteratee2, keysFunc) {
          var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee2(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
        };
      }
      function createCtor(Ctor) {
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return new Ctor();
            case 1:
              return new Ctor(args[0]);
            case 2:
              return new Ctor(args[0], args[1]);
            case 3:
              return new Ctor(args[0], args[1], args[2]);
            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
          return isObject(result2) ? result2 : thisBinding;
        };
      }
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);
        function wrapper() {
          var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
          while (index--) {
            args[index] = arguments[index];
          }
          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;
          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
          }
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object2(collection);
          if (!isArrayLike(collection)) {
            var iteratee2 = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) {
              return iteratee2(iterable[key], key, iterable);
            };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
        };
      }
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == "wrapper") {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
            if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments, value = args[0];
            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }
            var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
            while (++index2 < length) {
              result2 = funcs[index2].call(this, result2);
            }
            return result2;
          };
        });
      }
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
        function wrapper() {
          var length = arguments.length, args = Array2(length), index = length;
          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
          }
          var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary2 < length) {
            args.length = ary2;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }
      function createInverter(setter, toIteratee) {
        return function(object, iteratee2) {
          return baseInverter(object, setter, toIteratee(iteratee2), {});
        };
      }
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result2;
          if (value === undefined2 && other === undefined2) {
            return defaultValue;
          }
          if (value !== undefined2) {
            result2 = value;
          }
          if (other !== undefined2) {
            if (result2 === undefined2) {
              return other;
            }
            if (typeof value == "string" || typeof other == "string") {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result2 = operator(value, other);
          }
          return result2;
        };
      }
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee2) {
              return apply(iteratee2, thisArg, args);
            });
          });
        });
      }
      function createPadding(length, chars) {
        chars = chars === undefined2 ? " " : baseToString(chars);
        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
      }
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
            end = step = undefined2;
          }
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == "string" && typeof other == "string")) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func,
          bitmask,
          thisArg,
          newPartials,
          newHolders,
          newPartialsRight,
          newHoldersRight,
          argPos,
          ary2,
          arity
        ];
        var result2 = wrapFunc.apply(undefined2, newData);
        if (isLaziable(func)) {
          setData(result2, newData);
        }
        result2.placeholder = placeholder;
        return setWrapToString(result2, func, bitmask);
      }
      function createRound(methodName) {
        var func = Math2[methodName];
        return function(number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision && nativeIsFinite(number)) {
            var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (toString(value) + "e").split("e");
            return +(pair[0] + "e" + (+pair[1] - precision));
          }
          return func(number);
        };
      }
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
        return new Set2(values2);
      };
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined2;
        }
        ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
        arity = arity === undefined2 ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;
        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials, holdersRight = holders;
          partials = holders = undefined2;
        }
        var data = isBindKey ? undefined2 : getData(func);
        var newData = [
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary2,
          arity
        ];
        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result2 = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result2 = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result2 = createPartial(func, bitmask, thisArg, partials);
        } else {
          result2 = createHybrid.apply(undefined2, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result2, newData), func, bitmask);
      }
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
          return srcValue;
        }
        return objValue;
      }
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
          stack["delete"](srcValue);
        }
        return objValue;
      }
      function customOmitClone(value) {
        return isPlainObject(value) ? undefined2 : value;
      }
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined2) {
            if (compared) {
              continue;
            }
            result2 = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result2 = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result2 = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result2;
      }
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result2;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result2 = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result2 = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result2 && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result2 = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result2;
      }
      function flatRest(func) {
        return setToString(overRest(func, undefined2, flatten), func + "");
      }
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }
      var getData = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };
      function getFuncName(func) {
        var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array.length : 0;
        while (length--) {
          var data = array[length], otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result2;
      }
      function getHolder(func) {
        var object = hasOwnProperty2.call(lodash, "placeholder") ? lodash : func;
        return object.placeholder;
      }
      function getIteratee() {
        var result2 = lodash.iteratee || iteratee;
        result2 = result2 === iteratee ? baseIteratee : result2;
        return arguments.length ? result2(arguments[0], arguments[1]) : result2;
      }
      function getMapData(map2, key) {
        var data = map2.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getMatchData(object) {
        var result2 = keys(object), length = result2.length;
        while (length--) {
          var key = result2[length], value = object[key];
          result2[length] = [key, value, isStrictComparable(value)];
        }
        return result2;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined2;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = undefined2;
          var unmasked = true;
        } catch (e) {
        }
        var result2 = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result2;
      }
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object2(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result2 = [];
        while (object) {
          arrayPush(result2, getSymbols(object));
          object = getPrototype(object);
        }
        return result2;
      };
      var getTag = baseGetTag;
      if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value) {
          var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result2;
        };
      }
      function getView(start, end, transforms) {
        var index = -1, length = transforms.length;
        while (++index < length) {
          var data = transforms[index], size2 = data.size;
          switch (data.type) {
            case "drop":
              start += size2;
              break;
            case "dropRight":
              end -= size2;
              break;
            case "take":
              end = nativeMin(end, start + size2);
              break;
            case "takeRight":
              start = nativeMax(start, end - size2);
              break;
          }
        }
        return {start, end};
      }
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }
      function hasPath(object, path2, hasFunc) {
        path2 = castPath(path2, object);
        var index = -1, length = path2.length, result2 = false;
        while (++index < length) {
          var key = toKey(path2[index]);
          if (!(result2 = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result2 || ++index != length) {
          return result2;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }
      function initCloneArray(array) {
        var length = array.length, result2 = new array.constructor(length);
        if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
          result2.index = array.index;
          result2.input = array.input;
        }
        return result2;
      }
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);
          case boolTag:
          case dateTag:
            return new Ctor(+object);
          case dataViewTag:
            return cloneDataView(object, isDeep);
          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);
          case mapTag:
            return new Ctor();
          case numberTag:
          case stringTag:
            return new Ctor(object);
          case regexpTag:
            return cloneRegExp(object);
          case setTag:
            return new Ctor();
          case symbolTag:
            return cloneSymbol(object);
        }
      }
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
        details = details.join(length > 2 ? ", " : " ");
        return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
      }
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
          return eq(object[index], value);
        }
        return false;
      }
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isLaziable(func) {
        var funcName = getFuncName(func), other = lodash[funcName];
        if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var isMaskable = coreJsData ? isFunction : stubFalse;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
        };
      }
      function memoizeCapped(func) {
        var result2 = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result2.cache;
        return result2;
      }
      function mergeData(data, source) {
        var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
        if (!(isCommon || isCombo)) {
          return data;
        }
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        value = source[7];
        if (value) {
          data[7] = value;
        }
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        if (data[9] == null) {
          data[9] = source[9];
        }
        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }
      function nativeKeysIn(object) {
        var result2 = [];
        if (object != null) {
          for (var key in Object2(object)) {
            result2.push(key);
          }
        }
        return result2;
      }
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      function overRest(func, start, transform2) {
        start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array2(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform2(array);
          return apply(func, this, otherArgs);
        };
      }
      function parent(object, path2) {
        return path2.length < 2 ? object : baseGet(object, baseSlice(path2, 0, -1));
      }
      function reorder(array, indexes) {
        var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
        }
        return array;
      }
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var setData = shortOut(baseSetData);
      var setTimeout2 = ctxSetTimeout || function(func, wait) {
        return root.setTimeout(func, wait);
      };
      var setToString = shortOut(baseSetToString);
      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + "";
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined2, arguments);
        };
      }
      function shuffleSelf(array, size2) {
        var index = -1, length = array.length, lastIndex = length - 1;
        size2 = size2 === undefined2 ? length : size2;
        while (++index < size2) {
          var rand = baseRandom(index, lastIndex), value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size2;
        return array;
      }
      var stringToPath = memoizeCapped(function(string) {
        var result2 = [];
        if (string.charCodeAt(0) === 46) {
          result2.push("");
        }
        string.replace(rePropName, function(match, number, quote, subString) {
          result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
        });
        return result2;
      });
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function(pair) {
          var value = "_." + pair[0];
          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result2.__actions__ = copyArray(wrapper.__actions__);
        result2.__index__ = wrapper.__index__;
        result2.__values__ = wrapper.__values__;
        return result2;
      }
      function chunk(array, size2, guard) {
        if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
          size2 = 1;
        } else {
          size2 = nativeMax(toInteger(size2), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size2 < 1) {
          return [];
        }
        var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
        while (index < length) {
          result2[resIndex++] = baseSlice(array, index, index += size2);
        }
        return result2;
      }
      function compact(array) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
        while (++index < length) {
          var value = array[index];
          if (value) {
            result2[resIndex++] = value;
          }
        }
        return result2;
      }
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array2(length - 1), array = arguments[0], index = length;
        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }
      var difference = baseRest(function(array, values2) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function(array, values2) {
        var iteratee2 = last(values2);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined2;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
      });
      var differenceWith = baseRest(function(array, values2) {
        var comparator = last(values2);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined2;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
      });
      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }
      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined2) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined2 ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }
      function fromPairs(pairs) {
        var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
        while (++index < length) {
          var pair = pairs[index];
          result2[pair[0]] = pair[1];
        }
        return result2;
      }
      function head(array) {
        return array && array.length ? array[0] : undefined2;
      }
      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
        if (iteratee2 === last(mapped)) {
          iteratee2 = undefined2;
        } else {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
      });
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == "function" ? comparator : undefined2;
        if (comparator) {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
      });
      function join(array, separator) {
        return array == null ? "" : nativeJoin.call(array, separator);
      }
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined2;
      }
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined2) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }
      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
      }
      var pull = baseRest(pullAll);
      function pullAll(array, values2) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
      }
      function pullAllBy(array, values2, iteratee2) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
      }
      function pullAllWith(array, values2, comparator) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
      }
      var pullAt = flatRest(function(array, indexes) {
        var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function(index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result2;
      });
      function remove(array, predicate) {
        var result2 = [];
        if (!(array && array.length)) {
          return result2;
        }
        var index = -1, indexes = [], length = array.length;
        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result2.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result2;
      }
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined2 ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }
      function sortedIndexBy(array, value, iteratee2) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
      }
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }
      function sortedLastIndexBy(array, value, iteratee2) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
      }
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }
      function sortedUniqBy(array, iteratee2) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
      }
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }
      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined2;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
      });
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined2;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
      });
      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }
      function uniqBy(array, iteratee2) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
      }
      function uniqWith(array, comparator) {
        comparator = typeof comparator == "function" ? comparator : undefined2;
        return array && array.length ? baseUniq(array, undefined2, comparator) : [];
      }
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function(index) {
          return arrayMap(array, baseProperty(index));
        });
      }
      function unzipWith(array, iteratee2) {
        if (!(array && array.length)) {
          return [];
        }
        var result2 = unzip(array);
        if (iteratee2 == null) {
          return result2;
        }
        return arrayMap(result2, function(group) {
          return apply(iteratee2, undefined2, group);
        });
      }
      var without = baseRest(function(array, values2) {
        return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
      });
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined2;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
      });
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined2;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
      });
      var zip = baseRest(unzip);
      function zipObject(props, values2) {
        return baseZipObject(props || [], values2 || [], assignValue);
      }
      function zipObjectDeep(props, values2) {
        return baseZipObject(props || [], values2 || [], baseSet);
      }
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
        iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
        return unzipWith(arrays, iteratee2);
      });
      function chain(value) {
        var result2 = lodash(value);
        result2.__chain__ = true;
        return result2;
      }
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }
      function thru(value, interceptor) {
        return interceptor(value);
      }
      var wrapperAt = flatRest(function(paths) {
        var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
          return baseAt(object, paths);
        };
        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          func: thru,
          args: [interceptor],
          thisArg: undefined2
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array) {
          if (length && !array.length) {
            array.push(undefined2);
          }
          return array;
        });
      });
      function wrapperChain() {
        return chain(this);
      }
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }
      function wrapperNext() {
        if (this.__values__ === undefined2) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
        return {done, value};
      }
      function wrapperToIterator() {
        return this;
      }
      function wrapperPlant(value) {
        var result2, parent2 = this;
        while (parent2 instanceof baseLodash) {
          var clone2 = wrapperClone(parent2);
          clone2.__index__ = 0;
          clone2.__values__ = undefined2;
          if (result2) {
            previous.__wrapped__ = clone2;
          } else {
            result2 = clone2;
          }
          var previous = clone2;
          parent2 = parent2.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result2;
      }
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            func: thru,
            args: [reverse],
            thisArg: undefined2
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }
      var countBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty2.call(result2, key)) {
          ++result2[key];
        } else {
          baseAssignValue(result2, key, 1);
        }
      });
      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined2;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }
      var find = createFind(findIndex);
      var findLast = createFind(findLastIndex);
      function flatMap(collection, iteratee2) {
        return baseFlatten(map(collection, iteratee2), 1);
      }
      function flatMapDeep(collection, iteratee2) {
        return baseFlatten(map(collection, iteratee2), INFINITY);
      }
      function flatMapDepth(collection, iteratee2, depth) {
        depth = depth === undefined2 ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee2), depth);
      }
      function forEach(collection, iteratee2) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function forEachRight(collection, iteratee2) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee2, 3));
      }
      var groupBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty2.call(result2, key)) {
          result2[key].push(value);
        } else {
          baseAssignValue(result2, key, [value]);
        }
      });
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }
      var invokeMap = baseRest(function(collection, path2, args) {
        var index = -1, isFunc = typeof path2 == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value) {
          result2[++index] = isFunc ? apply(path2, value, args) : baseInvoke(value, path2, args);
        });
        return result2;
      });
      var keyBy = createAggregator(function(result2, value, key) {
        baseAssignValue(result2, key, value);
      });
      function map(collection, iteratee2) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined2 : orders;
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }
      var partition = createAggregator(function(result2, value, key) {
        result2[key ? 0 : 1].push(value);
      }, function() {
        return [[], []];
      });
      function reduce(collection, iteratee2, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
      }
      function reduceRight(collection, iteratee2, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
      }
      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }
      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }
      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }
      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }
      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined2;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });
      var now = ctxNow || function() {
        return root.Date.now();
      };
      function after(n, func) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }
      function ary(func, n, guard) {
        n = guard ? undefined2 : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
      }
      function before(n, func) {
        var result2;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result2 = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined2;
          }
          return result2;
        };
      }
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });
      function curry(func, arity, guard) {
        arity = guard ? undefined2 : arity;
        var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
        result2.placeholder = curry.placeholder;
        return result2;
      }
      function curryRight(func, arity, guard) {
        arity = guard ? undefined2 : arity;
        var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
        result2.placeholder = curryRight.placeholder;
        return result2;
      }
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = undefined2;
          lastInvokeTime = time;
          result2 = func.apply(thisArg, args);
          return result2;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout2(timerExpired, wait);
          return leading ? invokeFunc(time) : result2;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout2(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = undefined2;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined2;
          return result2;
        }
        function cancel() {
          if (timerId !== undefined2) {
            clearTimeout2(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined2;
        }
        function flush() {
          return timerId === undefined2 ? result2 : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === undefined2) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout2(timerId);
              timerId = setTimeout2(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined2) {
            timerId = setTimeout2(timerExpired, wait);
          }
          return result2;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result2 = func.apply(this, args);
          memoized.cache = cache.set(key, result2) || cache;
          return result2;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function negate(predicate) {
        if (typeof predicate != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return !predicate.call(this);
            case 1:
              return !predicate.call(this, args[0]);
            case 2:
              return !predicate.call(this, args[0], args[1]);
            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }
      function once(func) {
        return before(2, func);
      }
      var overArgs = castRest(function(func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index = -1, length = nativeMin(args.length, funcsLength);
          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
      });
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
      });
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
      });
      function rest(func, start) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        start = start === undefined2 ? start : toInteger(start);
        return baseRest(func, start);
      }
      function spread(func, start) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array = args[start], otherArgs = castSlice(args, 0, start);
          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          leading,
          maxWait: wait,
          trailing
        });
      }
      function unary(func) {
        return ary(func, 1);
      }
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray(value) ? value : [value];
      }
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }
      function cloneWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArray = Array2.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }
      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty2.call(value, key)) {
            return false;
          }
        }
        return true;
      }
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        var result2 = customizer ? customizer(value, other) : undefined2;
        return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
      }
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
      }
      function isFinite2(value) {
        return typeof value == "number" && nativeIsFinite(value);
      }
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      function isInteger(value) {
        return typeof value == "number" && value == toInteger(value);
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }
      function isNaN2(value) {
        return isNumber(value) && value != +value;
      }
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error2(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }
      function isNull(value) {
        return value === null;
      }
      function isNil(value) {
        return value == null;
      }
      function isNumber(value) {
        return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
      }
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
      function isString(value) {
        return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function isUndefined(value) {
        return value === undefined2;
      }
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }
      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      function toInteger(value) {
        var result2 = toFinite(value), remainder = result2 % 1;
        return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
      }
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, "");
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      var assign = createAssigner(function(object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty2.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function(object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);
      function create(prototype, properties) {
        var result2 = baseCreate(prototype);
        return properties == null ? result2 : baseAssign(result2, properties);
      }
      var defaults = baseRest(function(object, sources) {
        object = Object2(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined2;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;
          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];
            if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
              object[key] = source[key];
            }
          }
        }
        return object;
      });
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined2, customDefaultsMerge);
        return apply(mergeWith, undefined2, args);
      });
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }
      function forIn(object, iteratee2) {
        return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
      }
      function forInRight(object, iteratee2) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
      }
      function forOwn(object, iteratee2) {
        return object && baseForOwn(object, getIteratee(iteratee2, 3));
      }
      function forOwnRight(object, iteratee2) {
        return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
      }
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }
      function get(object, path2, defaultValue) {
        var result2 = object == null ? undefined2 : baseGet(object, path2);
        return result2 === undefined2 ? defaultValue : result2;
      }
      function has(object, path2) {
        return object != null && hasPath(object, path2, baseHas);
      }
      function hasIn(object, path2) {
        return object != null && hasPath(object, path2, baseHasIn);
      }
      var invert = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString.call(value);
        }
        result2[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString.call(value);
        }
        if (hasOwnProperty2.call(result2, value)) {
          result2[value].push(key);
        } else {
          result2[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      function mapKeys(object, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn(object, function(value, key, object2) {
          baseAssignValue(result2, iteratee2(value, key, object2), value);
        });
        return result2;
      }
      function mapValues(object, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn(object, function(value, key, object2) {
          baseAssignValue(result2, key, iteratee2(value, key, object2));
        });
        return result2;
      }
      var merge = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function(object, paths) {
        var result2 = {};
        if (object == null) {
          return result2;
        }
        var isDeep = false;
        paths = arrayMap(paths, function(path2) {
          path2 = castPath(path2, object);
          isDeep || (isDeep = path2.length > 1);
          return path2;
        });
        copyObject(object, getAllKeysIn(object), result2);
        if (isDeep) {
          result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result2, paths[length]);
        }
        return result2;
      });
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function(value, path2) {
          return predicate(value, path2[0]);
        });
      }
      function result(object, path2, defaultValue) {
        path2 = castPath(path2, object);
        var index = -1, length = path2.length;
        if (!length) {
          length = 1;
          object = undefined2;
        }
        while (++index < length) {
          var value = object == null ? undefined2 : object[toKey(path2[index])];
          if (value === undefined2) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }
      function set(object, path2, value) {
        return object == null ? object : baseSet(object, path2, value);
      }
      function setWith(object, path2, value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return object == null ? object : baseSet(object, path2, value, customizer);
      }
      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);
      function transform(object, iteratee2, accumulator) {
        var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee2 = getIteratee(iteratee2, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
          return iteratee2(accumulator, value, index, object2);
        });
        return accumulator;
      }
      function unset(object, path2) {
        return object == null ? true : baseUnset(object, path2);
      }
      function update(object, path2, updater) {
        return object == null ? object : baseUpdate(object, path2, castFunction(updater));
      }
      function updateWith(object, path2, updater, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return object == null ? object : baseUpdate(object, path2, castFunction(updater), customizer);
      }
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }
      function clamp(number, lower, upper) {
        if (upper === undefined2) {
          upper = lower;
          lower = undefined2;
        }
        if (upper !== undefined2) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined2) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined2) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }
      function random(lower, upper, floating) {
        if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined2;
        }
        if (floating === undefined2) {
          if (typeof upper == "boolean") {
            floating = upper;
            upper = undefined2;
          } else if (typeof lower == "boolean") {
            floating = lower;
            lower = undefined2;
          }
        }
        if (lower === undefined2 && upper === undefined2) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);
          if (upper === undefined2) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
        }
        return baseRandom(lower, upper);
      }
      var camelCase = createCompounder(function(result2, word, index) {
        word = word.toLowerCase();
        return result2 + (index ? capitalize(word) : word);
      });
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
      }
      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }
      function escape2(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }
      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
      }
      var kebabCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? "-" : "") + word.toLowerCase();
      });
      var lowerCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? " " : "") + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst("toLowerCase");
      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }
      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }
      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }
      function parseInt2(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
      }
      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string), n);
      }
      function replace() {
        var args = arguments, string = toString(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }
      var snakeCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? "_" : "") + word.toLowerCase();
      });
      function split(string, separator, limit) {
        if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined2;
        }
        limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString(string);
        if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }
      var startCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? " " : "") + upperFirst(word);
      });
      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }
      function template(string, options, guard) {
        var settings = lodash.templateSettings;
        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined2;
        }
        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
        var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
        var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
        var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = hasOwnProperty2.call(options, "variable") && options.variable;
        if (!variable) {
          source = "with (obj) {\n" + source + "\n}\n";
        }
        source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
        source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
        var result2 = attempt(function() {
          return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
        });
        result2.source = source;
        if (isError(result2)) {
          throw result2;
        }
        return result2;
      }
      function toLower(value) {
        return toString(value).toLowerCase();
      }
      function toUpper(value) {
        return toString(value).toUpperCase();
      }
      function trim(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined2)) {
          return string.replace(reTrim, "");
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join("");
      }
      function trimEnd(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined2)) {
          return string.replace(reTrimEnd, "");
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join("");
      }
      function trimStart(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined2)) {
          return string.replace(reTrimStart, "");
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join("");
      }
      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
        if (isObject(options)) {
          var separator = "separator" in options ? options.separator : separator;
          length = "length" in options ? toInteger(options.length) : length;
          omission = "omission" in options ? baseToString(options.omission) : omission;
        }
        string = toString(string);
        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
        if (separator === undefined2) {
          return result2 + omission;
        }
        if (strSymbols) {
          end += result2.length - end;
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match, substring = result2;
            if (!separator.global) {
              separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
            }
            separator.lastIndex = 0;
            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }
            result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result2.lastIndexOf(separator);
          if (index > -1) {
            result2 = result2.slice(0, index);
          }
        }
        return result2 + omission;
      }
      function unescape2(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }
      var upperCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? " " : "") + word.toUpperCase();
      });
      var upperFirst = createCaseFirst("toUpperCase");
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined2 : pattern;
        if (pattern === undefined2) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined2, args);
        } catch (e) {
          return isError(e) ? e : new Error2(e);
        }
      });
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function(pair) {
          if (typeof pair[1] != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function(args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }
      function constant(value) {
        return function() {
          return value;
        };
      }
      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }
      var flow = createFlow();
      var flowRight = createFlow(true);
      function identity(value) {
        return value;
      }
      function iteratee(func) {
        return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
      }
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }
      function matchesProperty(path2, srcValue) {
        return baseMatchesProperty(path2, baseClone(srcValue, CLONE_DEEP_FLAG));
      }
      var method = baseRest(function(path2, args) {
        return function(object) {
          return baseInvoke(object, path2, args);
        };
      });
      var methodOf = baseRest(function(object, args) {
        return function(path2) {
          return baseInvoke(object, path2, args);
        };
      });
      function mixin(object, source, options) {
        var props = keys(source), methodNames = baseFunctions(source, props);
        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
        arrayEach(methodNames, function(methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain2 || chainAll) {
                var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                actions.push({func, args: arguments, thisArg: object});
                result2.__chain__ = chainAll;
                return result2;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }
      function noop() {
      }
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }
      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);
      function property(path2) {
        return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
      }
      function propertyOf(object) {
        return function(path2) {
          return object == null ? undefined2 : baseGet(object, path2);
        };
      }
      var range = createRange();
      var rangeRight = createRange(true);
      function stubArray() {
        return [];
      }
      function stubFalse() {
        return false;
      }
      function stubObject() {
        return {};
      }
      function stubString() {
        return "";
      }
      function stubTrue() {
        return true;
      }
      function times(n, iteratee2) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee2 = getIteratee(iteratee2);
        n -= MAX_ARRAY_LENGTH;
        var result2 = baseTimes(length, iteratee2);
        while (++index < n) {
          iteratee2(index);
        }
        return result2;
      }
      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound("ceil");
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound("floor");
      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
      }
      function maxBy(array, iteratee2) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
      }
      function mean(array) {
        return baseMean(array, identity);
      }
      function meanBy(array, iteratee2) {
        return baseMean(array, getIteratee(iteratee2, 2));
      }
      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
      }
      function minBy(array, iteratee2) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
      }
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound("round");
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);
      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }
      function sumBy(array, iteratee2) {
        return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
      }
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape2;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite2;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN2;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt2;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext2;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape2;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!hasOwnProperty2.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {chain: false});
      lodash.VERSION = VERSION;
      arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(["drop", "take"], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
          var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
          if (result2.__filtered__) {
            result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
          } else {
            result2.__views__.push({
              size: nativeMin(n, MAX_ARRAY_LENGTH),
              type: methodName + (result2.__dir__ < 0 ? "Right" : "")
            });
          }
          return result2;
        };
        LazyWrapper.prototype[methodName + "Right"] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
        var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
        LazyWrapper.prototype[methodName] = function(iteratee2) {
          var result2 = this.clone();
          result2.__iteratees__.push({
            iteratee: getIteratee(iteratee2, 3),
            type
          });
          result2.__filtered__ = result2.__filtered__ || isFilter;
          return result2;
        };
      });
      arrayEach(["head", "last"], function(methodName, index) {
        var takeName = "take" + (index ? "Right" : "");
        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(["initial", "tail"], function(methodName, index) {
        var dropName = "drop" + (index ? "" : "Right");
        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });
      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };
      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };
      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };
      LazyWrapper.prototype.invokeMap = baseRest(function(path2, args) {
        if (typeof path2 == "function") {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path2, args);
        });
      });
      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };
      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);
        var result2 = this;
        if (result2.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result2);
        }
        if (start < 0) {
          result2 = result2.takeRight(-start);
        } else if (start) {
          result2 = result2.drop(start);
        }
        if (end !== undefined2) {
          end = toInteger(end);
          result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
        }
        return result2;
      };
      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };
      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function() {
          var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
          var interceptor = function(value2) {
            var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
            return isTaker && chainAll ? result3[0] : result3;
          };
          if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result2 = func.apply(value, args);
            result2.__actions__.push({func: thru, args: [interceptor], thisArg: undefined2});
            return new LodashWrapper(result2, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result2 = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
        };
      });
      arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
        var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
        lodash.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }
          return this[chainName](function(value2) {
            return func.apply(isArray(value2) ? value2 : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + "";
          if (!hasOwnProperty2.call(realNames, key)) {
            realNames[key] = [];
          }
          realNames[key].push({name: methodName, func: lodashFunc});
        }
      });
      realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
        name: "wrapper",
        func: undefined2
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;
      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }
      return lodash;
    };
    var _ = runInContext();
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
      root._ = _;
      define(function() {
        return _;
      });
    } else if (freeModule) {
      (freeModule.exports = _)._ = _;
      freeExports._ = _;
    } else {
      root._ = _;
    }
  }).call(exports2);
});

// node_modules/.pnpm/ansi-escapes@4.3.1/node_modules/ansi-escapes/index.js
var require_ansi_escapes = __commonJS((exports2, module2) => {
  "use strict";
  var ansiEscapes = module2.exports;
  module2.exports.default = ansiEscapes;
  var ESC = "[";
  var OSC = "]";
  var BEL = "\x07";
  var SEP = ";";
  var isTerminalApp = process.env.TERM_PROGRAM === "Apple_Terminal";
  ansiEscapes.cursorTo = (x, y) => {
    if (typeof x !== "number") {
      throw new TypeError("The `x` argument is required");
    }
    if (typeof y !== "number") {
      return ESC + (x + 1) + "G";
    }
    return ESC + (y + 1) + ";" + (x + 1) + "H";
  };
  ansiEscapes.cursorMove = (x, y) => {
    if (typeof x !== "number") {
      throw new TypeError("The `x` argument is required");
    }
    let ret = "";
    if (x < 0) {
      ret += ESC + -x + "D";
    } else if (x > 0) {
      ret += ESC + x + "C";
    }
    if (y < 0) {
      ret += ESC + -y + "A";
    } else if (y > 0) {
      ret += ESC + y + "B";
    }
    return ret;
  };
  ansiEscapes.cursorUp = (count = 1) => ESC + count + "A";
  ansiEscapes.cursorDown = (count = 1) => ESC + count + "B";
  ansiEscapes.cursorForward = (count = 1) => ESC + count + "C";
  ansiEscapes.cursorBackward = (count = 1) => ESC + count + "D";
  ansiEscapes.cursorLeft = ESC + "G";
  ansiEscapes.cursorSavePosition = isTerminalApp ? "7" : ESC + "s";
  ansiEscapes.cursorRestorePosition = isTerminalApp ? "8" : ESC + "u";
  ansiEscapes.cursorGetPosition = ESC + "6n";
  ansiEscapes.cursorNextLine = ESC + "E";
  ansiEscapes.cursorPrevLine = ESC + "F";
  ansiEscapes.cursorHide = ESC + "?25l";
  ansiEscapes.cursorShow = ESC + "?25h";
  ansiEscapes.eraseLines = (count) => {
    let clear = "";
    for (let i = 0; i < count; i++) {
      clear += ansiEscapes.eraseLine + (i < count - 1 ? ansiEscapes.cursorUp() : "");
    }
    if (count) {
      clear += ansiEscapes.cursorLeft;
    }
    return clear;
  };
  ansiEscapes.eraseEndLine = ESC + "K";
  ansiEscapes.eraseStartLine = ESC + "1K";
  ansiEscapes.eraseLine = ESC + "2K";
  ansiEscapes.eraseDown = ESC + "J";
  ansiEscapes.eraseUp = ESC + "1J";
  ansiEscapes.eraseScreen = ESC + "2J";
  ansiEscapes.scrollUp = ESC + "S";
  ansiEscapes.scrollDown = ESC + "T";
  ansiEscapes.clearScreen = "c";
  ansiEscapes.clearTerminal = process.platform === "win32" ? `${ansiEscapes.eraseScreen}${ESC}0f` : `${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;
  ansiEscapes.beep = BEL;
  ansiEscapes.link = (text, url) => {
    return [
      OSC,
      "8",
      SEP,
      SEP,
      url,
      BEL,
      text,
      OSC,
      "8",
      SEP,
      SEP,
      BEL
    ].join("");
  };
  ansiEscapes.image = (buffer, options = {}) => {
    let ret = `${OSC}1337;File=inline=1`;
    if (options.width) {
      ret += `;width=${options.width}`;
    }
    if (options.height) {
      ret += `;height=${options.height}`;
    }
    if (options.preserveAspectRatio === false) {
      ret += ";preserveAspectRatio=0";
    }
    return ret + ":" + buffer.toString("base64") + BEL;
  };
  ansiEscapes.iTerm = {
    setCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`,
    annotation: (message, options = {}) => {
      let ret = `${OSC}1337;`;
      const hasX = typeof options.x !== "undefined";
      const hasY = typeof options.y !== "undefined";
      if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== "undefined")) {
        throw new Error("`x`, `y` and `length` must be defined when `x` or `y` is defined");
      }
      message = message.replace(/\|/g, "");
      ret += options.isHidden ? "AddHiddenAnnotation=" : "AddAnnotation=";
      if (options.length > 0) {
        ret += (hasX ? [message, options.length, options.x, options.y] : [options.length, message]).join("|");
      } else {
        ret += message;
      }
      return ret + BEL;
    }
  };
});

// node_modules/.pnpm/mimic-fn@2.1.0/node_modules/mimic-fn/index.js
var require_mimic_fn = __commonJS((exports2, module2) => {
  "use strict";
  var mimicFn = (to, from) => {
    for (const prop of Reflect.ownKeys(from)) {
      Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
    }
    return to;
  };
  module2.exports = mimicFn;
  module2.exports.default = mimicFn;
});

// node_modules/.pnpm/onetime@5.1.2/node_modules/onetime/index.js
var require_onetime = __commonJS((exports2, module2) => {
  "use strict";
  var mimicFn = require_mimic_fn();
  var calledFunctions = new WeakMap();
  var onetime = (function_, options = {}) => {
    if (typeof function_ !== "function") {
      throw new TypeError("Expected a function");
    }
    let returnValue;
    let callCount = 0;
    const functionName = function_.displayName || function_.name || "<anonymous>";
    const onetime2 = function(...arguments_) {
      calledFunctions.set(onetime2, ++callCount);
      if (callCount === 1) {
        returnValue = function_.apply(this, arguments_);
        function_ = null;
      } else if (options.throw === true) {
        throw new Error(`Function \`${functionName}\` can only be called once`);
      }
      return returnValue;
    };
    mimicFn(onetime2, function_);
    calledFunctions.set(onetime2, callCount);
    return onetime2;
  };
  module2.exports = onetime;
  module2.exports.default = onetime;
  module2.exports.callCount = (function_) => {
    if (!calledFunctions.has(function_)) {
      throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
    }
    return calledFunctions.get(function_);
  };
});

// node_modules/.pnpm/signal-exit@3.0.3/node_modules/signal-exit/signals.js
var require_signals = __commonJS((exports2, module2) => {
  module2.exports = [
    "SIGABRT",
    "SIGALRM",
    "SIGHUP",
    "SIGINT",
    "SIGTERM"
  ];
  if (process.platform !== "win32") {
    module2.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
  }
  if (process.platform === "linux") {
    module2.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
  }
});

// node_modules/.pnpm/signal-exit@3.0.3/node_modules/signal-exit/index.js
var require_signal_exit = __commonJS((exports2, module2) => {
  var assert = require("assert");
  var signals = require_signals();
  var isWin = /^win/i.test(process.platform);
  var EE = require("events");
  if (typeof EE !== "function") {
    EE = EE.EventEmitter;
  }
  var emitter;
  if (process.__signal_exit_emitter__) {
    emitter = process.__signal_exit_emitter__;
  } else {
    emitter = process.__signal_exit_emitter__ = new EE();
    emitter.count = 0;
    emitter.emitted = {};
  }
  if (!emitter.infinite) {
    emitter.setMaxListeners(Infinity);
    emitter.infinite = true;
  }
  module2.exports = function(cb, opts) {
    assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
    if (loaded === false) {
      load();
    }
    var ev = "exit";
    if (opts && opts.alwaysLast) {
      ev = "afterexit";
    }
    var remove = function() {
      emitter.removeListener(ev, cb);
      if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
        unload();
      }
    };
    emitter.on(ev, cb);
    return remove;
  };
  module2.exports.unload = unload;
  function unload() {
    if (!loaded) {
      return;
    }
    loaded = false;
    signals.forEach(function(sig) {
      try {
        process.removeListener(sig, sigListeners[sig]);
      } catch (er) {
      }
    });
    process.emit = originalProcessEmit;
    process.reallyExit = originalProcessReallyExit;
    emitter.count -= 1;
  }
  function emit(event, code, signal) {
    if (emitter.emitted[event]) {
      return;
    }
    emitter.emitted[event] = true;
    emitter.emit(event, code, signal);
  }
  var sigListeners = {};
  signals.forEach(function(sig) {
    sigListeners[sig] = function listener() {
      var listeners = process.listeners(sig);
      if (listeners.length === emitter.count) {
        unload();
        emit("exit", null, sig);
        emit("afterexit", null, sig);
        if (isWin && sig === "SIGHUP") {
          sig = "SIGINT";
        }
        process.kill(process.pid, sig);
      }
    };
  });
  module2.exports.signals = function() {
    return signals;
  };
  module2.exports.load = load;
  var loaded = false;
  function load() {
    if (loaded) {
      return;
    }
    loaded = true;
    emitter.count += 1;
    signals = signals.filter(function(sig) {
      try {
        process.on(sig, sigListeners[sig]);
        return true;
      } catch (er) {
        return false;
      }
    });
    process.emit = processEmit;
    process.reallyExit = processReallyExit;
  }
  var originalProcessReallyExit = process.reallyExit;
  function processReallyExit(code) {
    process.exitCode = code || 0;
    emit("exit", process.exitCode, null);
    emit("afterexit", process.exitCode, null);
    originalProcessReallyExit.call(process, process.exitCode);
  }
  var originalProcessEmit = process.emit;
  function processEmit(ev, arg) {
    if (ev === "exit") {
      if (arg !== void 0) {
        process.exitCode = arg;
      }
      var ret = originalProcessEmit.apply(this, arguments);
      emit("exit", process.exitCode, null);
      emit("afterexit", process.exitCode, null);
      return ret;
    } else {
      return originalProcessEmit.apply(this, arguments);
    }
  }
});

// node_modules/.pnpm/restore-cursor@3.1.0/node_modules/restore-cursor/index.js
var require_restore_cursor = __commonJS((exports2, module2) => {
  "use strict";
  var onetime = require_onetime();
  var signalExit = require_signal_exit();
  module2.exports = onetime(() => {
    signalExit(() => {
      process.stderr.write("[?25h");
    }, {alwaysLast: true});
  });
});

// node_modules/.pnpm/cli-cursor@3.1.0/node_modules/cli-cursor/index.js
var require_cli_cursor = __commonJS((exports2) => {
  "use strict";
  var restoreCursor = require_restore_cursor();
  var isHidden = false;
  exports2.show = (writableStream = process.stderr) => {
    if (!writableStream.isTTY) {
      return;
    }
    isHidden = false;
    writableStream.write("[?25h");
  };
  exports2.hide = (writableStream = process.stderr) => {
    if (!writableStream.isTTY) {
      return;
    }
    restoreCursor();
    isHidden = true;
    writableStream.write("[?25l");
  };
  exports2.toggle = (force, writableStream) => {
    if (force !== void 0) {
      isHidden = force;
    }
    if (isHidden) {
      exports2.show(writableStream);
    } else {
      exports2.hide(writableStream);
    }
  };
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/log-update.js
var require_log_update = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var ansi_escapes_1 = __importDefault(require_ansi_escapes());
  var cli_cursor_1 = __importDefault(require_cli_cursor());
  var create = (stream, {showCursor = false} = {}) => {
    let previousLineCount = 0;
    let previousOutput = "";
    let hasHiddenCursor = false;
    const render2 = (str) => {
      if (!showCursor && !hasHiddenCursor) {
        cli_cursor_1.default.hide();
        hasHiddenCursor = true;
      }
      const output = str + "\n";
      if (output === previousOutput) {
        return;
      }
      previousOutput = output;
      stream.write(ansi_escapes_1.default.eraseLines(previousLineCount) + output);
      previousLineCount = output.split("\n").length;
    };
    render2.clear = () => {
      stream.write(ansi_escapes_1.default.eraseLines(previousLineCount));
      previousOutput = "";
      previousLineCount = 0;
    };
    render2.done = () => {
      previousOutput = "";
      previousLineCount = 0;
      if (!showCursor) {
        cli_cursor_1.default.show();
        hasHiddenCursor = false;
      }
    };
    return render2;
  };
  exports2.default = {create};
});

// node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/vendors.json
var require_vendors = __commonJS((exports2, module2) => {
  module2.exports = [
    {
      name: "AppVeyor",
      constant: "APPVEYOR",
      env: "APPVEYOR",
      pr: "APPVEYOR_PULL_REQUEST_NUMBER"
    },
    {
      name: "Azure Pipelines",
      constant: "AZURE_PIPELINES",
      env: "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI",
      pr: "SYSTEM_PULLREQUEST_PULLREQUESTID"
    },
    {
      name: "Bamboo",
      constant: "BAMBOO",
      env: "bamboo_planKey"
    },
    {
      name: "Bitbucket Pipelines",
      constant: "BITBUCKET",
      env: "BITBUCKET_COMMIT",
      pr: "BITBUCKET_PR_ID"
    },
    {
      name: "Bitrise",
      constant: "BITRISE",
      env: "BITRISE_IO",
      pr: "BITRISE_PULL_REQUEST"
    },
    {
      name: "Buddy",
      constant: "BUDDY",
      env: "BUDDY_WORKSPACE_ID",
      pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
    },
    {
      name: "Buildkite",
      constant: "BUILDKITE",
      env: "BUILDKITE",
      pr: {env: "BUILDKITE_PULL_REQUEST", ne: "false"}
    },
    {
      name: "CircleCI",
      constant: "CIRCLE",
      env: "CIRCLECI",
      pr: "CIRCLE_PULL_REQUEST"
    },
    {
      name: "Cirrus CI",
      constant: "CIRRUS",
      env: "CIRRUS_CI",
      pr: "CIRRUS_PR"
    },
    {
      name: "AWS CodeBuild",
      constant: "CODEBUILD",
      env: "CODEBUILD_BUILD_ARN"
    },
    {
      name: "Codeship",
      constant: "CODESHIP",
      env: {CI_NAME: "codeship"}
    },
    {
      name: "Drone",
      constant: "DRONE",
      env: "DRONE",
      pr: {DRONE_BUILD_EVENT: "pull_request"}
    },
    {
      name: "dsari",
      constant: "DSARI",
      env: "DSARI"
    },
    {
      name: "GitLab CI",
      constant: "GITLAB",
      env: "GITLAB_CI"
    },
    {
      name: "GoCD",
      constant: "GOCD",
      env: "GO_PIPELINE_LABEL"
    },
    {
      name: "Hudson",
      constant: "HUDSON",
      env: "HUDSON_URL"
    },
    {
      name: "Jenkins",
      constant: "JENKINS",
      env: ["JENKINS_URL", "BUILD_ID"],
      pr: {any: ["ghprbPullId", "CHANGE_ID"]}
    },
    {
      name: "Magnum CI",
      constant: "MAGNUM",
      env: "MAGNUM"
    },
    {
      name: "Netlify CI",
      constant: "NETLIFY",
      env: "NETLIFY_BUILD_BASE",
      pr: {env: "PULL_REQUEST", ne: "false"}
    },
    {
      name: "Sail CI",
      constant: "SAIL",
      env: "SAILCI",
      pr: "SAIL_PULL_REQUEST_NUMBER"
    },
    {
      name: "Semaphore",
      constant: "SEMAPHORE",
      env: "SEMAPHORE",
      pr: "PULL_REQUEST_NUMBER"
    },
    {
      name: "Shippable",
      constant: "SHIPPABLE",
      env: "SHIPPABLE",
      pr: {IS_PULL_REQUEST: "true"}
    },
    {
      name: "Solano CI",
      constant: "SOLANO",
      env: "TDDIUM",
      pr: "TDDIUM_PR_ID"
    },
    {
      name: "Strider CD",
      constant: "STRIDER",
      env: "STRIDER"
    },
    {
      name: "TaskCluster",
      constant: "TASKCLUSTER",
      env: ["TASK_ID", "RUN_ID"]
    },
    {
      name: "TeamCity",
      constant: "TEAMCITY",
      env: "TEAMCITY_VERSION"
    },
    {
      name: "Travis CI",
      constant: "TRAVIS",
      env: "TRAVIS",
      pr: {env: "TRAVIS_PULL_REQUEST", ne: "false"}
    }
  ];
});

// node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/index.js
var require_ci_info = __commonJS((exports2) => {
  "use strict";
  var vendors = require_vendors();
  var env = process.env;
  Object.defineProperty(exports2, "_vendors", {
    value: vendors.map(function(v) {
      return v.constant;
    })
  });
  exports2.name = null;
  exports2.isPR = null;
  vendors.forEach(function(vendor) {
    var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
    var isCI = envs.every(function(obj) {
      return checkEnv(obj);
    });
    exports2[vendor.constant] = isCI;
    if (isCI) {
      exports2.name = vendor.name;
      switch (typeof vendor.pr) {
        case "string":
          exports2.isPR = !!env[vendor.pr];
          break;
        case "object":
          if ("env" in vendor.pr) {
            exports2.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
          } else if ("any" in vendor.pr) {
            exports2.isPR = vendor.pr.any.some(function(key) {
              return !!env[key];
            });
          } else {
            exports2.isPR = checkEnv(vendor.pr);
          }
          break;
        default:
          exports2.isPR = null;
      }
    }
  });
  exports2.isCI = !!(env.CI || env.CONTINUOUS_INTEGRATION || env.BUILD_NUMBER || env.RUN_ID || exports2.name || false);
  function checkEnv(obj) {
    if (typeof obj === "string")
      return !!env[obj];
    return Object.keys(obj).every(function(k) {
      return env[k] === obj[k];
    });
  }
});

// node_modules/.pnpm/is-ci@2.0.0/node_modules/is-ci/index.js
var require_is_ci = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = require_ci_info().isCI;
});

// node_modules/.pnpm/auto-bind@4.0.0/node_modules/auto-bind/index.js
var require_auto_bind = __commonJS((exports2, module2) => {
  "use strict";
  var getAllProperties = (object) => {
    const properties = new Set();
    do {
      for (const key of Reflect.ownKeys(object)) {
        properties.add([object, key]);
      }
    } while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);
    return properties;
  };
  module2.exports = (self2, {include, exclude} = {}) => {
    const filter = (key) => {
      const match = (pattern) => typeof pattern === "string" ? key === pattern : pattern.test(key);
      if (include) {
        return include.some(match);
      }
      if (exclude) {
        return !exclude.some(match);
      }
      return true;
    };
    for (const [object, key] of getAllProperties(self2.constructor.prototype)) {
      if (key === "constructor" || !filter(key)) {
        continue;
      }
      const descriptor = Reflect.getOwnPropertyDescriptor(object, key);
      if (descriptor && typeof descriptor.value === "function") {
        self2[key] = self2[key].bind(self2);
      }
    }
    return self2;
  };
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS((exports2) => {
  /** @license React v0.18.0
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var f;
  var g;
  var h;
  var k;
  var l;
  if (typeof window === "undefined" || typeof MessageChannel !== "function") {
    p = null, q = null, t = function() {
      if (p !== null)
        try {
          var a = exports2.unstable_now();
          p(true, a);
          p = null;
        } catch (b) {
          throw setTimeout(t, 0), b;
        }
    }, u = Date.now();
    exports2.unstable_now = function() {
      return Date.now() - u;
    };
    f = function(a) {
      p !== null ? setTimeout(f, 0, a) : (p = a, setTimeout(t, 0));
    };
    g = function(a, b) {
      q = setTimeout(a, b);
    };
    h = function() {
      clearTimeout(q);
    };
    k = function() {
      return false;
    };
    l = exports2.unstable_forceFrameRate = function() {
    };
  } else {
    w = window.performance, x = window.Date, y = window.setTimeout, z = window.clearTimeout;
    if (typeof console !== "undefined") {
      A = window.cancelAnimationFrame;
      typeof window.requestAnimationFrame !== "function" && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
      typeof A !== "function" && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
    }
    if (typeof w === "object" && typeof w.now === "function")
      exports2.unstable_now = function() {
        return w.now();
      };
    else {
      B = x.now();
      exports2.unstable_now = function() {
        return x.now() - B;
      };
    }
    C = false, D = null, E = -1, F = 5, G = 0;
    k = function() {
      return exports2.unstable_now() >= G;
    };
    l = function() {
    };
    exports2.unstable_forceFrameRate = function(a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : F = 0 < a ? Math.floor(1e3 / a) : 5;
    };
    H = new MessageChannel(), I = H.port2;
    H.port1.onmessage = function() {
      if (D !== null) {
        var a = exports2.unstable_now();
        G = a + F;
        try {
          D(true, a) ? I.postMessage(null) : (C = false, D = null);
        } catch (b) {
          throw I.postMessage(null), b;
        }
      } else
        C = false;
    };
    f = function(a) {
      D = a;
      C || (C = true, I.postMessage(null));
    };
    g = function(a, b) {
      E = y(function() {
        a(exports2.unstable_now());
      }, b);
    };
    h = function() {
      z(E);
      E = -1;
    };
  }
  var p;
  var q;
  var t;
  var u;
  var w;
  var x;
  var y;
  var z;
  var A;
  var B;
  var C;
  var D;
  var E;
  var F;
  var G;
  var H;
  var I;
  function J(a, b) {
    var c = a.length;
    a.push(b);
    a:
      for (; ; ) {
        var d = Math.floor((c - 1) / 2), e = a[d];
        if (e !== void 0 && 0 < K(e, b))
          a[d] = b, a[c] = e, c = d;
        else
          break a;
      }
  }
  function L(a) {
    a = a[0];
    return a === void 0 ? null : a;
  }
  function M(a) {
    var b = a[0];
    if (b !== void 0) {
      var c = a.pop();
      if (c !== b) {
        a[0] = c;
        a:
          for (var d = 0, e = a.length; d < e; ) {
            var m = 2 * (d + 1) - 1, n = a[m], v = m + 1, r = a[v];
            if (n !== void 0 && 0 > K(n, c))
              r !== void 0 && 0 > K(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);
            else if (r !== void 0 && 0 > K(r, c))
              a[d] = r, a[v] = c, d = v;
            else
              break a;
          }
      }
      return b;
    }
    return null;
  }
  function K(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return c !== 0 ? c : a.id - b.id;
  }
  var N = [];
  var O = [];
  var P = 1;
  var Q = null;
  var R = 3;
  var S = false;
  var T = false;
  var U = false;
  function V(a) {
    for (var b = L(O); b !== null; ) {
      if (b.callback === null)
        M(O);
      else if (b.startTime <= a)
        M(O), b.sortIndex = b.expirationTime, J(N, b);
      else
        break;
      b = L(O);
    }
  }
  function W(a) {
    U = false;
    V(a);
    if (!T)
      if (L(N) !== null)
        T = true, f(X);
      else {
        var b = L(O);
        b !== null && g(W, b.startTime - a);
      }
  }
  function X(a, b) {
    T = false;
    U && (U = false, h());
    S = true;
    var c = R;
    try {
      V(b);
      for (Q = L(N); Q !== null && (!(Q.expirationTime > b) || a && !k()); ) {
        var d = Q.callback;
        if (d !== null) {
          Q.callback = null;
          R = Q.priorityLevel;
          var e = d(Q.expirationTime <= b);
          b = exports2.unstable_now();
          typeof e === "function" ? Q.callback = e : Q === L(N) && M(N);
          V(b);
        } else
          M(N);
        Q = L(N);
      }
      if (Q !== null)
        var m = true;
      else {
        var n = L(O);
        n !== null && g(W, n.startTime - b);
        m = false;
      }
      return m;
    } finally {
      Q = null, R = c, S = false;
    }
  }
  function Y(a) {
    switch (a) {
      case 1:
        return -1;
      case 2:
        return 250;
      case 5:
        return 1073741823;
      case 4:
        return 1e4;
      default:
        return 5e3;
    }
  }
  var Z = l;
  exports2.unstable_ImmediatePriority = 1;
  exports2.unstable_UserBlockingPriority = 2;
  exports2.unstable_NormalPriority = 3;
  exports2.unstable_IdlePriority = 5;
  exports2.unstable_LowPriority = 4;
  exports2.unstable_runWithPriority = function(a, b) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a = 3;
    }
    var c = R;
    R = a;
    try {
      return b();
    } finally {
      R = c;
    }
  };
  exports2.unstable_next = function(a) {
    switch (R) {
      case 1:
      case 2:
      case 3:
        var b = 3;
        break;
      default:
        b = R;
    }
    var c = R;
    R = b;
    try {
      return a();
    } finally {
      R = c;
    }
  };
  exports2.unstable_scheduleCallback = function(a, b, c) {
    var d = exports2.unstable_now();
    if (typeof c === "object" && c !== null) {
      var e = c.delay;
      e = typeof e === "number" && 0 < e ? d + e : d;
      c = typeof c.timeout === "number" ? c.timeout : Y(a);
    } else
      c = Y(a), e = d;
    c = e + c;
    a = {id: P++, callback: b, priorityLevel: a, startTime: e, expirationTime: c, sortIndex: -1};
    e > d ? (a.sortIndex = e, J(O, a), L(N) === null && a === L(O) && (U ? h() : U = true, g(W, e - d))) : (a.sortIndex = c, J(N, a), T || S || (T = true, f(X)));
    return a;
  };
  exports2.unstable_cancelCallback = function(a) {
    a.callback = null;
  };
  exports2.unstable_wrapCallback = function(a) {
    var b = R;
    return function() {
      var c = R;
      R = b;
      try {
        return a.apply(this, arguments);
      } finally {
        R = c;
      }
    };
  };
  exports2.unstable_getCurrentPriorityLevel = function() {
    return R;
  };
  exports2.unstable_shouldYield = function() {
    var a = exports2.unstable_now();
    V(a);
    var b = L(N);
    return b !== Q && Q !== null && b !== null && b.callback !== null && b.startTime <= a && b.expirationTime < Q.expirationTime || k();
  };
  exports2.unstable_requestPaint = Z;
  exports2.unstable_continueExecution = function() {
    T || S || (T = true, f(X));
  };
  exports2.unstable_pauseExecution = function() {
  };
  exports2.unstable_getFirstCallbackNode = function() {
    return L(N);
  };
  exports2.unstable_Profiling = null;
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS((exports2) => {
  /** @license React v0.18.0
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (process.env.NODE_ENV !== "production") {
    (function() {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      var enableSchedulerDebugging = false;
      var enableIsInputPending = false;
      var enableProfiling = true;
      var requestHostCallback;
      var requestHostTimeout;
      var cancelHostTimeout;
      var shouldYieldToHost;
      var requestPaint;
      if (typeof window === "undefined" || typeof MessageChannel !== "function") {
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
          if (_callback !== null) {
            try {
              var currentTime = exports2.unstable_now();
              var hasRemainingTime = true;
              _callback(hasRemainingTime, currentTime);
              _callback = null;
            } catch (e) {
              setTimeout(_flushCallback, 0);
              throw e;
            }
          }
        };
        var initialTime = Date.now();
        exports2.unstable_now = function() {
          return Date.now() - initialTime;
        };
        requestHostCallback = function(cb) {
          if (_callback !== null) {
            setTimeout(requestHostCallback, 0, cb);
          } else {
            _callback = cb;
            setTimeout(_flushCallback, 0);
          }
        };
        requestHostTimeout = function(cb, ms) {
          _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
          clearTimeout(_timeoutID);
        };
        shouldYieldToHost = function() {
          return false;
        };
        requestPaint = exports2.unstable_forceFrameRate = function() {
        };
      } else {
        var performance2 = window.performance;
        var _Date = window.Date;
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== "undefined") {
          var requestAnimationFrame2 = window.requestAnimationFrame;
          var cancelAnimationFrame2 = window.cancelAnimationFrame;
          if (typeof requestAnimationFrame2 !== "function") {
            console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
          }
          if (typeof cancelAnimationFrame2 !== "function") {
            console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
          }
        }
        if (typeof performance2 === "object" && typeof performance2.now === "function") {
          exports2.unstable_now = function() {
            return performance2.now();
          };
        } else {
          var _initialTime = _Date.now();
          exports2.unstable_now = function() {
            return _Date.now() - _initialTime;
          };
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var yieldInterval = 5;
        var deadline = 0;
        var maxYieldInterval = 300;
        var needsPaint = false;
        if (enableIsInputPending && navigator !== void 0 && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0) {
          var scheduling = navigator.scheduling;
          shouldYieldToHost = function() {
            var currentTime = exports2.unstable_now();
            if (currentTime >= deadline) {
              if (needsPaint || scheduling.isInputPending()) {
                return true;
              }
              return currentTime >= maxYieldInterval;
            } else {
              return false;
            }
          };
          requestPaint = function() {
            needsPaint = true;
          };
        } else {
          shouldYieldToHost = function() {
            return exports2.unstable_now() >= deadline;
          };
          requestPaint = function() {
          };
        }
        exports2.unstable_forceFrameRate = function(fps) {
          if (fps < 0 || fps > 125) {
            console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported");
            return;
          }
          if (fps > 0) {
            yieldInterval = Math.floor(1e3 / fps);
          } else {
            yieldInterval = 5;
          }
        };
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports2.unstable_now();
            deadline = currentTime + yieldInterval;
            var hasTimeRemaining = true;
            try {
              var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              if (!hasMoreWork) {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              } else {
                port.postMessage(null);
              }
            } catch (error) {
              port.postMessage(null);
              throw error;
            }
          } else {
            isMessageLoopRunning = false;
          }
          needsPaint = false;
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            port.postMessage(null);
          }
        };
        requestHostTimeout = function(callback, ms) {
          taskTimeoutID = _setTimeout(function() {
            callback(exports2.unstable_now());
          }, ms);
        };
        cancelHostTimeout = function() {
          _clearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        };
      }
      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
      }
      function peek(heap) {
        var first = heap[0];
        return first === void 0 ? null : first;
      }
      function pop(heap) {
        var first = heap[0];
        if (first !== void 0) {
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        } else {
          return null;
        }
      }
      function siftUp(heap, node, i) {
        var index = i;
        while (true) {
          var parentIndex = Math.floor((index - 1) / 2);
          var parent = heap[parentIndex];
          if (parent !== void 0 && compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while (index < length) {
          var leftIndex = (index + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (left !== void 0 && compare(left, node) < 0) {
            if (right !== void 0 && compare(right, left) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              heap[index] = left;
              heap[leftIndex] = node;
              index = leftIndex;
            }
          } else if (right !== void 0 && compare(right, node) < 0) {
            heap[index] = right;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }
      var NoPriority = 0;
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      var runIdCounter = 0;
      var mainThreadIdCounter = 0;
      var profilingStateSize = 4;
      var sharedProfilingBuffer = enableProfiling ? typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null : null;
      var profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
      var PRIORITY = 0;
      var CURRENT_TASK_ID = 1;
      var CURRENT_RUN_ID = 2;
      var QUEUE_SIZE = 3;
      if (enableProfiling) {
        profilingState[PRIORITY] = NoPriority;
        profilingState[QUEUE_SIZE] = 0;
        profilingState[CURRENT_TASK_ID] = 0;
      }
      var INITIAL_EVENT_LOG_SIZE = 131072;
      var MAX_EVENT_LOG_SIZE = 524288;
      var eventLogSize = 0;
      var eventLogBuffer = null;
      var eventLog = null;
      var eventLogIndex = 0;
      var TaskStartEvent = 1;
      var TaskCompleteEvent = 2;
      var TaskErrorEvent = 3;
      var TaskCancelEvent = 4;
      var TaskRunEvent = 5;
      var TaskYieldEvent = 6;
      var SchedulerSuspendEvent = 7;
      var SchedulerResumeEvent = 8;
      function logEvent(entries) {
        if (eventLog !== null) {
          var offset = eventLogIndex;
          eventLogIndex += entries.length;
          if (eventLogIndex + 1 > eventLogSize) {
            eventLogSize *= 2;
            if (eventLogSize > MAX_EVENT_LOG_SIZE) {
              console.error("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
              stopLoggingProfilingEvents();
              return;
            }
            var newEventLog = new Int32Array(eventLogSize * 4);
            newEventLog.set(eventLog);
            eventLogBuffer = newEventLog.buffer;
            eventLog = newEventLog;
          }
          eventLog.set(entries, offset);
        }
      }
      function startLoggingProfilingEvents() {
        eventLogSize = INITIAL_EVENT_LOG_SIZE;
        eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
        eventLog = new Int32Array(eventLogBuffer);
        eventLogIndex = 0;
      }
      function stopLoggingProfilingEvents() {
        var buffer = eventLogBuffer;
        eventLogSize = 0;
        eventLogBuffer = null;
        eventLog = null;
        eventLogIndex = 0;
        return buffer;
      }
      function markTaskStart(task, ms) {
        if (enableProfiling) {
          profilingState[QUEUE_SIZE]++;
          if (eventLog !== null) {
            logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
          }
        }
      }
      function markTaskCompleted(task, ms) {
        if (enableProfiling) {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[QUEUE_SIZE]--;
          if (eventLog !== null) {
            logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
          }
        }
      }
      function markTaskCanceled(task, ms) {
        if (enableProfiling) {
          profilingState[QUEUE_SIZE]--;
          if (eventLog !== null) {
            logEvent([TaskCancelEvent, ms * 1e3, task.id]);
          }
        }
      }
      function markTaskErrored(task, ms) {
        if (enableProfiling) {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[QUEUE_SIZE]--;
          if (eventLog !== null) {
            logEvent([TaskErrorEvent, ms * 1e3, task.id]);
          }
        }
      }
      function markTaskRun(task, ms) {
        if (enableProfiling) {
          runIdCounter++;
          profilingState[PRIORITY] = task.priorityLevel;
          profilingState[CURRENT_TASK_ID] = task.id;
          profilingState[CURRENT_RUN_ID] = runIdCounter;
          if (eventLog !== null) {
            logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
          }
        }
      }
      function markTaskYield(task, ms) {
        if (enableProfiling) {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[CURRENT_RUN_ID] = 0;
          if (eventLog !== null) {
            logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
          }
        }
      }
      function markSchedulerSuspended(ms) {
        if (enableProfiling) {
          mainThreadIdCounter++;
          if (eventLog !== null) {
            logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
          }
        }
      }
      function markSchedulerUnsuspended(ms) {
        if (enableProfiling) {
          if (eventLog !== null) {
            logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
          }
        }
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5e3;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var isSchedulerPaused = false;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
            if (enableProfiling) {
              markTaskStart(timer, currentTime);
              timer.isQueued = true;
            }
          } else {
            return;
          }
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        if (enableProfiling) {
          markSchedulerUnsuspended(initialTime2);
        }
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling) {
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports2.unstable_now();
                markTaskErrored(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              throw error;
            }
          } else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
          if (enableProfiling) {
            var _currentTime = exports2.unstable_now();
            markSchedulerSuspended(_currentTime);
          }
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (callback !== null) {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            markTaskRun(currentTask, currentTime);
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports2.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
              markTaskYield(currentTask, currentTime);
            } else {
              if (enableProfiling) {
                markTaskCompleted(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function timeoutForPriorityLevel(priorityLevel) {
        switch (priorityLevel) {
          case ImmediatePriority:
            return IMMEDIATE_PRIORITY_TIMEOUT;
          case UserBlockingPriority:
            return USER_BLOCKING_PRIORITY;
          case IdlePriority:
            return IDLE_PRIORITY;
          case LowPriority:
            return LOW_PRIORITY_TIMEOUT;
          case NormalPriority:
          default:
            return NORMAL_PRIORITY_TIMEOUT;
        }
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports2.unstable_now();
        var startTime;
        var timeout;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime = currentTime + delay;
          } else {
            startTime = currentTime;
          }
          timeout = typeof options.timeout === "number" ? options.timeout : timeoutForPriorityLevel(priorityLevel);
        } else {
          timeout = timeoutForPriorityLevel(priorityLevel);
          startTime = currentTime;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime,
          expirationTime,
          sortIndex: -1
        };
        if (enableProfiling) {
          newTask.isQueued = false;
        }
        if (startTime > currentTime) {
          newTask.sortIndex = startTime;
          push(timerQueue, newTask);
          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          if (enableProfiling) {
            markTaskStart(newTask, currentTime);
            newTask.isQueued = true;
          }
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {
        isSchedulerPaused = true;
      }
      function unstable_continueExecution() {
        isSchedulerPaused = false;
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        if (enableProfiling) {
          if (task.isQueued) {
            var currentTime = exports2.unstable_now();
            markTaskCanceled(task, currentTime);
            task.isQueued = false;
          }
        }
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      function unstable_shouldYield() {
        var currentTime = exports2.unstable_now();
        advanceTimers(currentTime);
        var firstTask = peek(taskQueue);
        return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = enableProfiling ? {
        startLoggingProfilingEvents,
        stopLoggingProfilingEvents,
        sharedProfilingBuffer
      } : null;
      exports2.unstable_ImmediatePriority = ImmediatePriority;
      exports2.unstable_UserBlockingPriority = UserBlockingPriority;
      exports2.unstable_NormalPriority = NormalPriority;
      exports2.unstable_IdlePriority = IdlePriority;
      exports2.unstable_LowPriority = LowPriority;
      exports2.unstable_runWithPriority = unstable_runWithPriority;
      exports2.unstable_next = unstable_next;
      exports2.unstable_scheduleCallback = unstable_scheduleCallback;
      exports2.unstable_cancelCallback = unstable_cancelCallback;
      exports2.unstable_wrapCallback = unstable_wrapCallback;
      exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports2.unstable_shouldYield = unstable_shouldYield;
      exports2.unstable_requestPaint = unstable_requestPaint;
      exports2.unstable_continueExecution = unstable_continueExecution;
      exports2.unstable_pauseExecution = unstable_pauseExecution;
      exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports2.unstable_Profiling = unstable_Profiling;
    })();
  }
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/index.js
var require_scheduler = __commonJS((exports2, module2) => {
  "use strict";
  if (process.env.NODE_ENV === "production") {
    module2.exports = require_scheduler_production_min();
  } else {
    module2.exports = require_scheduler_development();
  }
});

// node_modules/.pnpm/react-reconciler@0.24.0_react@17.0.1/node_modules/react-reconciler/cjs/react-reconciler.production.min.js
var require_react_reconciler_production_min = __commonJS((exports2, module2) => {
  /** @license React v0.24.0
   * react-reconciler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  module2.exports = function $$$reconciler($$$hostConfig) {
    "use strict";
    var aa = require_object_assign(), ba = require_react(), m = require_scheduler();
    function n(a) {
      for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
        b += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var q = ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    q.hasOwnProperty("ReactCurrentDispatcher") || (q.ReactCurrentDispatcher = {current: null});
    q.hasOwnProperty("ReactCurrentBatchConfig") || (q.ReactCurrentBatchConfig = {suspense: null});
    var u = typeof Symbol === "function" && Symbol.for, ca = u ? Symbol.for("react.element") : 60103, da = u ? Symbol.for("react.portal") : 60106, ea = u ? Symbol.for("react.fragment") : 60107, fa = u ? Symbol.for("react.strict_mode") : 60108, ha = u ? Symbol.for("react.profiler") : 60114, ia = u ? Symbol.for("react.provider") : 60109, ja = u ? Symbol.for("react.context") : 60110, ka = u ? Symbol.for("react.concurrent_mode") : 60111, la = u ? Symbol.for("react.forward_ref") : 60112, ma = u ? Symbol.for("react.suspense") : 60113, na = u ? Symbol.for("react.suspense_list") : 60120, oa = u ? Symbol.for("react.memo") : 60115, pa = u ? Symbol.for("react.lazy") : 60116;
    u && Symbol.for("react.fundamental");
    u && Symbol.for("react.responder");
    u && Symbol.for("react.scope");
    var qa = typeof Symbol === "function" && Symbol.iterator;
    function ra(a) {
      if (a === null || typeof a !== "object")
        return null;
      a = qa && a[qa] || a["@@iterator"];
      return typeof a === "function" ? a : null;
    }
    function sa(a) {
      if (a._status === -1) {
        a._status = 0;
        var b = a._ctor;
        b = b();
        a._result = b;
        b.then(function(b2) {
          a._status === 0 && (b2 = b2.default, a._status = 1, a._result = b2);
        }, function(b2) {
          a._status === 0 && (a._status = 2, a._result = b2);
        });
      }
    }
    function ta(a) {
      if (a == null)
        return null;
      if (typeof a === "function")
        return a.displayName || a.name || null;
      if (typeof a === "string")
        return a;
      switch (a) {
        case ea:
          return "Fragment";
        case da:
          return "Portal";
        case ha:
          return "Profiler";
        case fa:
          return "StrictMode";
        case ma:
          return "Suspense";
        case na:
          return "SuspenseList";
      }
      if (typeof a === "object")
        switch (a.$$typeof) {
          case ja:
            return "Context.Consumer";
          case ia:
            return "Context.Provider";
          case la:
            var b = a.render;
            b = b.displayName || b.name || "";
            return a.displayName || (b !== "" ? "ForwardRef(" + b + ")" : "ForwardRef");
          case oa:
            return ta(a.type);
          case pa:
            if (a = a._status === 1 ? a._result : null)
              return ta(a);
        }
      return null;
    }
    function ua(a) {
      var b = a, c = a;
      if (a.alternate)
        for (; b.return; )
          b = b.return;
      else {
        a = b;
        do
          b = a, (b.effectTag & 1026) !== 0 && (c = b.return), a = b.return;
        while (a);
      }
      return b.tag === 3 ? c : null;
    }
    function va(a) {
      if (ua(a) !== a)
        throw Error(n(188));
    }
    function wa(a) {
      var b = a.alternate;
      if (!b) {
        b = ua(a);
        if (b === null)
          throw Error(n(188));
        return b !== a ? null : a;
      }
      for (var c = a, d = b; ; ) {
        var e = c.return;
        if (e === null)
          break;
        var f = e.alternate;
        if (f === null) {
          d = e.return;
          if (d !== null) {
            c = d;
            continue;
          }
          break;
        }
        if (e.child === f.child) {
          for (f = e.child; f; ) {
            if (f === c)
              return va(e), a;
            if (f === d)
              return va(e), b;
            f = f.sibling;
          }
          throw Error(n(188));
        }
        if (c.return !== d.return)
          c = e, d = f;
        else {
          for (var g = false, l = e.child; l; ) {
            if (l === c) {
              g = true;
              c = e;
              d = f;
              break;
            }
            if (l === d) {
              g = true;
              d = e;
              c = f;
              break;
            }
            l = l.sibling;
          }
          if (!g) {
            for (l = f.child; l; ) {
              if (l === c) {
                g = true;
                c = f;
                d = e;
                break;
              }
              if (l === d) {
                g = true;
                d = f;
                c = e;
                break;
              }
              l = l.sibling;
            }
            if (!g)
              throw Error(n(189));
          }
        }
        if (c.alternate !== d)
          throw Error(n(190));
      }
      if (c.tag !== 3)
        throw Error(n(188));
      return c.stateNode.current === c ? a : b;
    }
    function xa(a) {
      a = wa(a);
      if (!a)
        return null;
      for (var b = a; ; ) {
        if (b.tag === 5 || b.tag === 6)
          return b;
        if (b.child)
          b.child.return = b, b = b.child;
        else {
          if (b === a)
            break;
          for (; !b.sibling; ) {
            if (!b.return || b.return === a)
              return null;
            b = b.return;
          }
          b.sibling.return = b.return;
          b = b.sibling;
        }
      }
      return null;
    }
    function ya(a) {
      a = wa(a);
      if (!a)
        return null;
      for (var b = a; ; ) {
        if (b.tag === 5 || b.tag === 6)
          return b;
        if (b.child && b.tag !== 4)
          b.child.return = b, b = b.child;
        else {
          if (b === a)
            break;
          for (; !b.sibling; ) {
            if (!b.return || b.return === a)
              return null;
            b = b.return;
          }
          b.sibling.return = b.return;
          b = b.sibling;
        }
      }
      return null;
    }
    var za = $$$hostConfig.getPublicInstance, Aa = $$$hostConfig.getRootHostContext, Ba = $$$hostConfig.getChildHostContext, Ca = $$$hostConfig.prepareForCommit, Da = $$$hostConfig.resetAfterCommit, Ea = $$$hostConfig.createInstance, Fa = $$$hostConfig.appendInitialChild, Ga = $$$hostConfig.finalizeInitialChildren, Ia = $$$hostConfig.prepareUpdate, Ja = $$$hostConfig.shouldSetTextContent, Ka = $$$hostConfig.shouldDeprioritizeSubtree, La = $$$hostConfig.createTextInstance, Ma = $$$hostConfig.setTimeout, Na = $$$hostConfig.clearTimeout, Oa = $$$hostConfig.noTimeout, Pa = $$$hostConfig.isPrimaryRenderer, Qa = $$$hostConfig.supportsMutation, Ra = $$$hostConfig.supportsPersistence, Sa = $$$hostConfig.supportsHydration, Ta = $$$hostConfig.appendChild, Ua = $$$hostConfig.appendChildToContainer, Va = $$$hostConfig.commitTextUpdate, Wa = $$$hostConfig.commitMount, Xa = $$$hostConfig.commitUpdate, Ya = $$$hostConfig.insertBefore, Za = $$$hostConfig.insertInContainerBefore, $a = $$$hostConfig.removeChild, ab = $$$hostConfig.removeChildFromContainer, bb = $$$hostConfig.resetTextContent, cb = $$$hostConfig.hideInstance, db = $$$hostConfig.hideTextInstance, eb = $$$hostConfig.unhideInstance, fb = $$$hostConfig.unhideTextInstance, gb = $$$hostConfig.cloneInstance, hb = $$$hostConfig.createContainerChildSet, ib = $$$hostConfig.appendChildToContainerChildSet, kb = $$$hostConfig.finalizeContainerChildren, lb = $$$hostConfig.replaceContainerChildren, mb = $$$hostConfig.cloneHiddenInstance, nb = $$$hostConfig.cloneHiddenTextInstance, ob = $$$hostConfig.canHydrateInstance, pb = $$$hostConfig.canHydrateTextInstance, qb = $$$hostConfig.isSuspenseInstancePending, rb = $$$hostConfig.isSuspenseInstanceFallback, sb = $$$hostConfig.getNextHydratableSibling, tb = $$$hostConfig.getFirstHydratableChild, ub = $$$hostConfig.hydrateInstance, vb = $$$hostConfig.hydrateTextInstance, wb = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance, xb = $$$hostConfig.commitHydratedContainer, yb = $$$hostConfig.commitHydratedSuspenseInstance, zb = /^(.*)[\\\/]/;
    function Ab(a) {
      var b = "";
      do {
        a:
          switch (a.tag) {
            case 3:
            case 4:
            case 6:
            case 7:
            case 10:
            case 9:
              var c = "";
              break a;
            default:
              var d = a._debugOwner, e = a._debugSource, f = ta(a.type);
              c = null;
              d && (c = ta(d.type));
              d = f;
              f = "";
              e ? f = " (at " + e.fileName.replace(zb, "") + ":" + e.lineNumber + ")" : c && (f = " (created by " + c + ")");
              c = "\n    in " + (d || "Unknown") + f;
          }
        b += c;
        a = a.return;
      } while (a);
      return b;
    }
    new Set();
    var Bb = [], Cb = -1;
    function y(a) {
      0 > Cb || (a.current = Bb[Cb], Bb[Cb] = null, Cb--);
    }
    function z(a, b) {
      Cb++;
      Bb[Cb] = a.current;
      a.current = b;
    }
    var Db = {}, A = {current: Db}, B = {current: false}, Eb = Db;
    function Fb(a, b) {
      var c = a.type.contextTypes;
      if (!c)
        return Db;
      var d = a.stateNode;
      if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
        return d.__reactInternalMemoizedMaskedChildContext;
      var e = {}, f;
      for (f in c)
        e[f] = b[f];
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
      return e;
    }
    function C(a) {
      a = a.childContextTypes;
      return a !== null && a !== void 0;
    }
    function Gb(a) {
      y(B, a);
      y(A, a);
    }
    function Hb(a) {
      y(B, a);
      y(A, a);
    }
    function Ib(a, b, c) {
      if (A.current !== Db)
        throw Error(n(168));
      z(A, b, a);
      z(B, c, a);
    }
    function Jb(a, b, c) {
      var d = a.stateNode;
      a = b.childContextTypes;
      if (typeof d.getChildContext !== "function")
        return c;
      d = d.getChildContext();
      for (var e in d)
        if (!(e in a))
          throw Error(n(108, ta(b) || "Unknown", e));
      return aa({}, c, {}, d);
    }
    function Kb(a) {
      var b = a.stateNode;
      b = b && b.__reactInternalMemoizedMergedChildContext || Db;
      Eb = A.current;
      z(A, b, a);
      z(B, B.current, a);
      return true;
    }
    function Lb(a, b, c) {
      var d = a.stateNode;
      if (!d)
        throw Error(n(169));
      c ? (b = Jb(a, b, Eb), d.__reactInternalMemoizedMergedChildContext = b, y(B, a), y(A, a), z(A, b, a)) : y(B, a);
      z(B, c, a);
    }
    var Mb = m.unstable_runWithPriority, Nb = m.unstable_scheduleCallback, Ob = m.unstable_cancelCallback, Pb = m.unstable_shouldYield, Qb = m.unstable_requestPaint, Rb = m.unstable_now, Ub = m.unstable_getCurrentPriorityLevel, Vb = m.unstable_ImmediatePriority, Wb = m.unstable_UserBlockingPriority, Xb = m.unstable_NormalPriority, Yb = m.unstable_LowPriority, Zb = m.unstable_IdlePriority, $b = {}, ac = Qb !== void 0 ? Qb : function() {
    }, bc = null, cc = null, dc = false, ec = Rb(), E = 1e4 > ec ? Rb : function() {
      return Rb() - ec;
    };
    function fc() {
      switch (Ub()) {
        case Vb:
          return 99;
        case Wb:
          return 98;
        case Xb:
          return 97;
        case Yb:
          return 96;
        case Zb:
          return 95;
        default:
          throw Error(n(332));
      }
    }
    function gc(a) {
      switch (a) {
        case 99:
          return Vb;
        case 98:
          return Wb;
        case 97:
          return Xb;
        case 96:
          return Yb;
        case 95:
          return Zb;
        default:
          throw Error(n(332));
      }
    }
    function hc(a, b) {
      a = gc(a);
      return Mb(a, b);
    }
    function ic(a, b, c) {
      a = gc(a);
      return Nb(a, b, c);
    }
    function jc(a) {
      bc === null ? (bc = [a], cc = Nb(Vb, kc)) : bc.push(a);
      return $b;
    }
    function F() {
      if (cc !== null) {
        var a = cc;
        cc = null;
        Ob(a);
      }
      kc();
    }
    function kc() {
      if (!dc && bc !== null) {
        dc = true;
        var a = 0;
        try {
          var b = bc;
          hc(99, function() {
            for (; a < b.length; a++) {
              var c = b[a];
              do
                c = c(true);
              while (c !== null);
            }
          });
          bc = null;
        } catch (c) {
          throw bc !== null && (bc = bc.slice(a + 1)), Nb(Vb, F), c;
        } finally {
          dc = false;
        }
      }
    }
    var lc = 3;
    function mc(a, b, c) {
      c /= 10;
      return 1073741821 - (((1073741821 - a + b / 10) / c | 0) + 1) * c;
    }
    function nc(a, b) {
      return a === b && (a !== 0 || 1 / a === 1 / b) || a !== a && b !== b;
    }
    var oc = typeof Object.is === "function" ? Object.is : nc, pc = Object.prototype.hasOwnProperty;
    function qc(a, b) {
      if (oc(a, b))
        return true;
      if (typeof a !== "object" || a === null || typeof b !== "object" || b === null)
        return false;
      var c = Object.keys(a), d = Object.keys(b);
      if (c.length !== d.length)
        return false;
      for (d = 0; d < c.length; d++)
        if (!pc.call(b, c[d]) || !oc(a[c[d]], b[c[d]]))
          return false;
      return true;
    }
    function rc(a, b) {
      if (a && a.defaultProps) {
        b = aa({}, b);
        a = a.defaultProps;
        for (var c in a)
          b[c] === void 0 && (b[c] = a[c]);
      }
      return b;
    }
    var sc = {current: null}, tc = null, uc = null, vc = null;
    function wc() {
      vc = uc = tc = null;
    }
    function xc(a, b) {
      var c = a.type._context;
      Pa ? (z(sc, c._currentValue, a), c._currentValue = b) : (z(sc, c._currentValue2, a), c._currentValue2 = b);
    }
    function yc(a) {
      var b = sc.current;
      y(sc, a);
      a = a.type._context;
      Pa ? a._currentValue = b : a._currentValue2 = b;
    }
    function zc(a, b) {
      for (; a !== null; ) {
        var c = a.alternate;
        if (a.childExpirationTime < b)
          a.childExpirationTime = b, c !== null && c.childExpirationTime < b && (c.childExpirationTime = b);
        else if (c !== null && c.childExpirationTime < b)
          c.childExpirationTime = b;
        else
          break;
        a = a.return;
      }
    }
    function Ac(a, b) {
      tc = a;
      vc = uc = null;
      a = a.dependencies;
      a !== null && a.firstContext !== null && (a.expirationTime >= b && (Bc = true), a.firstContext = null);
    }
    function Cc(a, b) {
      if (vc !== a && b !== false && b !== 0) {
        if (typeof b !== "number" || b === 1073741823)
          vc = a, b = 1073741823;
        b = {context: a, observedBits: b, next: null};
        if (uc === null) {
          if (tc === null)
            throw Error(n(308));
          uc = b;
          tc.dependencies = {expirationTime: 0, firstContext: b, responders: null};
        } else
          uc = uc.next = b;
      }
      return Pa ? a._currentValue : a._currentValue2;
    }
    var Dc = false;
    function Ec(a) {
      return {baseState: a, firstUpdate: null, lastUpdate: null, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null};
    }
    function Fc(a) {
      return {baseState: a.baseState, firstUpdate: a.firstUpdate, lastUpdate: a.lastUpdate, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null};
    }
    function Gc(a, b) {
      return {expirationTime: a, suspenseConfig: b, tag: 0, payload: null, callback: null, next: null, nextEffect: null};
    }
    function Hc(a, b) {
      a.lastUpdate === null ? a.firstUpdate = a.lastUpdate = b : (a.lastUpdate.next = b, a.lastUpdate = b);
    }
    function Ic(a, b) {
      var c = a.alternate;
      if (c === null) {
        var d = a.updateQueue;
        var e = null;
        d === null && (d = a.updateQueue = Ec(a.memoizedState));
      } else
        d = a.updateQueue, e = c.updateQueue, d === null ? e === null ? (d = a.updateQueue = Ec(a.memoizedState), e = c.updateQueue = Ec(c.memoizedState)) : d = a.updateQueue = Fc(e) : e === null && (e = c.updateQueue = Fc(d));
      e === null || d === e ? Hc(d, b) : d.lastUpdate === null || e.lastUpdate === null ? (Hc(d, b), Hc(e, b)) : (Hc(d, b), e.lastUpdate = b);
    }
    function Jc(a, b) {
      var c = a.updateQueue;
      c = c === null ? a.updateQueue = Ec(a.memoizedState) : Kc(a, c);
      c.lastCapturedUpdate === null ? c.firstCapturedUpdate = c.lastCapturedUpdate = b : (c.lastCapturedUpdate.next = b, c.lastCapturedUpdate = b);
    }
    function Kc(a, b) {
      var c = a.alternate;
      c !== null && b === c.updateQueue && (b = a.updateQueue = Fc(b));
      return b;
    }
    function Lc(a, b, c, d, e, f) {
      switch (c.tag) {
        case 1:
          return a = c.payload, typeof a === "function" ? a.call(f, d, e) : a;
        case 3:
          a.effectTag = a.effectTag & -4097 | 64;
        case 0:
          a = c.payload;
          e = typeof a === "function" ? a.call(f, d, e) : a;
          if (e === null || e === void 0)
            break;
          return aa({}, d, e);
        case 2:
          Dc = true;
      }
      return d;
    }
    function Nc(a, b, c, d, e) {
      Dc = false;
      b = Kc(a, b);
      for (var f = b.baseState, g = null, l = 0, h = b.firstUpdate, k = f; h !== null; ) {
        var p = h.expirationTime;
        p < e ? (g === null && (g = h, f = k), l < p && (l = p)) : (Oc(p, h.suspenseConfig), k = Lc(a, b, h, k, c, d), h.callback !== null && (a.effectTag |= 32, h.nextEffect = null, b.lastEffect === null ? b.firstEffect = b.lastEffect = h : (b.lastEffect.nextEffect = h, b.lastEffect = h)));
        h = h.next;
      }
      p = null;
      for (h = b.firstCapturedUpdate; h !== null; ) {
        var D = h.expirationTime;
        D < e ? (p === null && (p = h, g === null && (f = k)), l < D && (l = D)) : (k = Lc(a, b, h, k, c, d), h.callback !== null && (a.effectTag |= 32, h.nextEffect = null, b.lastCapturedEffect === null ? b.firstCapturedEffect = b.lastCapturedEffect = h : (b.lastCapturedEffect.nextEffect = h, b.lastCapturedEffect = h)));
        h = h.next;
      }
      g === null && (b.lastUpdate = null);
      p === null ? b.lastCapturedUpdate = null : a.effectTag |= 32;
      g === null && p === null && (f = k);
      b.baseState = f;
      b.firstUpdate = g;
      b.firstCapturedUpdate = p;
      Pc(l);
      a.expirationTime = l;
      a.memoizedState = k;
    }
    function Qc(a, b, c) {
      b.firstCapturedUpdate !== null && (b.lastUpdate !== null && (b.lastUpdate.next = b.firstCapturedUpdate, b.lastUpdate = b.lastCapturedUpdate), b.firstCapturedUpdate = b.lastCapturedUpdate = null);
      Rc(b.firstEffect, c);
      b.firstEffect = b.lastEffect = null;
      Rc(b.firstCapturedEffect, c);
      b.firstCapturedEffect = b.lastCapturedEffect = null;
    }
    function Rc(a, b) {
      for (; a !== null; ) {
        var c = a.callback;
        if (c !== null) {
          a.callback = null;
          var d = b;
          if (typeof c !== "function")
            throw Error(n(191, c));
          c.call(d);
        }
        a = a.nextEffect;
      }
    }
    var Sc = q.ReactCurrentBatchConfig, Tc = new ba.Component().refs;
    function Uc(a, b, c, d) {
      b = a.memoizedState;
      c = c(d, b);
      c = c === null || c === void 0 ? b : aa({}, b, c);
      a.memoizedState = c;
      d = a.updateQueue;
      d !== null && a.expirationTime === 0 && (d.baseState = c);
    }
    var Xc = {isMounted: function(a) {
      return (a = a._reactInternalFiber) ? ua(a) === a : false;
    }, enqueueSetState: function(a, b, c) {
      a = a._reactInternalFiber;
      var d = G(), e = Sc.suspense;
      d = Vc(d, a, e);
      e = Gc(d, e);
      e.payload = b;
      c !== void 0 && c !== null && (e.callback = c);
      Ic(a, e);
      Wc(a, d);
    }, enqueueReplaceState: function(a, b, c) {
      a = a._reactInternalFiber;
      var d = G(), e = Sc.suspense;
      d = Vc(d, a, e);
      e = Gc(d, e);
      e.tag = 1;
      e.payload = b;
      c !== void 0 && c !== null && (e.callback = c);
      Ic(a, e);
      Wc(a, d);
    }, enqueueForceUpdate: function(a, b) {
      a = a._reactInternalFiber;
      var c = G(), d = Sc.suspense;
      c = Vc(c, a, d);
      d = Gc(c, d);
      d.tag = 2;
      b !== void 0 && b !== null && (d.callback = b);
      Ic(a, d);
      Wc(a, c);
    }};
    function Yc(a, b, c, d, e, f, g) {
      a = a.stateNode;
      return typeof a.shouldComponentUpdate === "function" ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !qc(c, d) || !qc(e, f) : true;
    }
    function Zc(a, b, c) {
      var d = false, e = Db;
      var f = b.contextType;
      typeof f === "object" && f !== null ? f = Cc(f) : (e = C(b) ? Eb : A.current, d = b.contextTypes, f = (d = d !== null && d !== void 0) ? Fb(a, e) : Db);
      b = new b(c, f);
      a.memoizedState = b.state !== null && b.state !== void 0 ? b.state : null;
      b.updater = Xc;
      a.stateNode = b;
      b._reactInternalFiber = a;
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
      return b;
    }
    function $c(a, b, c, d) {
      a = b.state;
      typeof b.componentWillReceiveProps === "function" && b.componentWillReceiveProps(c, d);
      typeof b.UNSAFE_componentWillReceiveProps === "function" && b.UNSAFE_componentWillReceiveProps(c, d);
      b.state !== a && Xc.enqueueReplaceState(b, b.state, null);
    }
    function ad(a, b, c, d) {
      var e = a.stateNode;
      e.props = c;
      e.state = a.memoizedState;
      e.refs = Tc;
      var f = b.contextType;
      typeof f === "object" && f !== null ? e.context = Cc(f) : (f = C(b) ? Eb : A.current, e.context = Fb(a, f));
      f = a.updateQueue;
      f !== null && (Nc(a, f, c, e, d), e.state = a.memoizedState);
      f = b.getDerivedStateFromProps;
      typeof f === "function" && (Uc(a, b, f, c), e.state = a.memoizedState);
      typeof b.getDerivedStateFromProps === "function" || typeof e.getSnapshotBeforeUpdate === "function" || typeof e.UNSAFE_componentWillMount !== "function" && typeof e.componentWillMount !== "function" || (b = e.state, typeof e.componentWillMount === "function" && e.componentWillMount(), typeof e.UNSAFE_componentWillMount === "function" && e.UNSAFE_componentWillMount(), b !== e.state && Xc.enqueueReplaceState(e, e.state, null), f = a.updateQueue, f !== null && (Nc(a, f, c, e, d), e.state = a.memoizedState));
      typeof e.componentDidMount === "function" && (a.effectTag |= 4);
    }
    var bd = Array.isArray;
    function cd(a, b, c) {
      a = c.ref;
      if (a !== null && typeof a !== "function" && typeof a !== "object") {
        if (c._owner) {
          c = c._owner;
          if (c) {
            if (c.tag !== 1)
              throw Error(n(309));
            var d = c.stateNode;
          }
          if (!d)
            throw Error(n(147, a));
          var e = "" + a;
          if (b !== null && b.ref !== null && typeof b.ref === "function" && b.ref._stringRef === e)
            return b.ref;
          b = function(b2) {
            var a2 = d.refs;
            a2 === Tc && (a2 = d.refs = {});
            b2 === null ? delete a2[e] : a2[e] = b2;
          };
          b._stringRef = e;
          return b;
        }
        if (typeof a !== "string")
          throw Error(n(284));
        if (!c._owner)
          throw Error(n(290, a));
      }
      return a;
    }
    function dd(a, b) {
      if (a.type !== "textarea")
        throw Error(n(31, Object.prototype.toString.call(b) === "[object Object]" ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, ""));
    }
    function ed(a) {
      function b(b2, c2) {
        if (a) {
          var d2 = b2.lastEffect;
          d2 !== null ? (d2.nextEffect = c2, b2.lastEffect = c2) : b2.firstEffect = b2.lastEffect = c2;
          c2.nextEffect = null;
          c2.effectTag = 8;
        }
      }
      function c(c2, d2) {
        if (!a)
          return null;
        for (; d2 !== null; )
          b(c2, d2), d2 = d2.sibling;
        return null;
      }
      function d(b2, a2) {
        for (b2 = new Map(); a2 !== null; )
          a2.key !== null ? b2.set(a2.key, a2) : b2.set(a2.index, a2), a2 = a2.sibling;
        return b2;
      }
      function e(b2, a2, c2) {
        b2 = fd(b2, a2, c2);
        b2.index = 0;
        b2.sibling = null;
        return b2;
      }
      function f(b2, c2, d2) {
        b2.index = d2;
        if (!a)
          return c2;
        d2 = b2.alternate;
        if (d2 !== null)
          return d2 = d2.index, d2 < c2 ? (b2.effectTag = 2, c2) : d2;
        b2.effectTag = 2;
        return c2;
      }
      function g(b2) {
        a && b2.alternate === null && (b2.effectTag = 2);
        return b2;
      }
      function l(b2, a2, c2, d2) {
        if (a2 === null || a2.tag !== 6)
          return a2 = gd(c2, b2.mode, d2), a2.return = b2, a2;
        a2 = e(a2, c2, d2);
        a2.return = b2;
        return a2;
      }
      function h(b2, a2, c2, d2) {
        if (a2 !== null && a2.elementType === c2.type)
          return d2 = e(a2, c2.props, d2), d2.ref = cd(b2, a2, c2), d2.return = b2, d2;
        d2 = hd(c2.type, c2.key, c2.props, null, b2.mode, d2);
        d2.ref = cd(b2, a2, c2);
        d2.return = b2;
        return d2;
      }
      function k(b2, a2, c2, d2) {
        if (a2 === null || a2.tag !== 4 || a2.stateNode.containerInfo !== c2.containerInfo || a2.stateNode.implementation !== c2.implementation)
          return a2 = id(c2, b2.mode, d2), a2.return = b2, a2;
        a2 = e(a2, c2.children || [], d2);
        a2.return = b2;
        return a2;
      }
      function p(b2, a2, c2, d2, f2) {
        if (a2 === null || a2.tag !== 7)
          return a2 = jd(c2, b2.mode, d2, f2), a2.return = b2, a2;
        a2 = e(a2, c2, d2);
        a2.return = b2;
        return a2;
      }
      function D(b2, a2, c2) {
        if (typeof a2 === "string" || typeof a2 === "number")
          return a2 = gd("" + a2, b2.mode, c2), a2.return = b2, a2;
        if (typeof a2 === "object" && a2 !== null) {
          switch (a2.$$typeof) {
            case ca:
              return c2 = hd(a2.type, a2.key, a2.props, null, b2.mode, c2), c2.ref = cd(b2, null, a2), c2.return = b2, c2;
            case da:
              return a2 = id(a2, b2.mode, c2), a2.return = b2, a2;
          }
          if (bd(a2) || ra(a2))
            return a2 = jd(a2, b2.mode, c2, null), a2.return = b2, a2;
          dd(b2, a2);
        }
        return null;
      }
      function x(b2, a2, c2, d2) {
        var e2 = a2 !== null ? a2.key : null;
        if (typeof c2 === "string" || typeof c2 === "number")
          return e2 !== null ? null : l(b2, a2, "" + c2, d2);
        if (typeof c2 === "object" && c2 !== null) {
          switch (c2.$$typeof) {
            case ca:
              return c2.key === e2 ? c2.type === ea ? p(b2, a2, c2.props.children, d2, e2) : h(b2, a2, c2, d2) : null;
            case da:
              return c2.key === e2 ? k(b2, a2, c2, d2) : null;
          }
          if (bd(c2) || ra(c2))
            return e2 !== null ? null : p(b2, a2, c2, d2, null);
          dd(b2, c2);
        }
        return null;
      }
      function K(b2, a2, c2, d2, e2) {
        if (typeof d2 === "string" || typeof d2 === "number")
          return b2 = b2.get(c2) || null, l(a2, b2, "" + d2, e2);
        if (typeof d2 === "object" && d2 !== null) {
          switch (d2.$$typeof) {
            case ca:
              return b2 = b2.get(d2.key === null ? c2 : d2.key) || null, d2.type === ea ? p(a2, b2, d2.props.children, e2, d2.key) : h(a2, b2, d2, e2);
            case da:
              return b2 = b2.get(d2.key === null ? c2 : d2.key) || null, k(a2, b2, d2, e2);
          }
          if (bd(d2) || ra(d2))
            return b2 = b2.get(c2) || null, p(a2, b2, d2, e2, null);
          dd(a2, d2);
        }
        return null;
      }
      function Ha(e2, g2, h2, l2) {
        for (var k2 = null, w = null, t = g2, r = g2 = 0, p2 = null; t !== null && r < h2.length; r++) {
          t.index > r ? (p2 = t, t = null) : p2 = t.sibling;
          var v = x(e2, t, h2[r], l2);
          if (v === null) {
            t === null && (t = p2);
            break;
          }
          a && t && v.alternate === null && b(e2, t);
          g2 = f(v, g2, r);
          w === null ? k2 = v : w.sibling = v;
          w = v;
          t = p2;
        }
        if (r === h2.length)
          return c(e2, t), k2;
        if (t === null) {
          for (; r < h2.length; r++)
            t = D(e2, h2[r], l2), t !== null && (g2 = f(t, g2, r), w === null ? k2 = t : w.sibling = t, w = t);
          return k2;
        }
        for (t = d(e2, t); r < h2.length; r++)
          p2 = K(t, e2, r, h2[r], l2), p2 !== null && (a && p2.alternate !== null && t.delete(p2.key === null ? r : p2.key), g2 = f(p2, g2, r), w === null ? k2 = p2 : w.sibling = p2, w = p2);
        a && t.forEach(function(a2) {
          return b(e2, a2);
        });
        return k2;
      }
      function O(e2, g2, h2, l2) {
        var k2 = ra(h2);
        if (typeof k2 !== "function")
          throw Error(n(150));
        h2 = k2.call(h2);
        if (h2 == null)
          throw Error(n(151));
        for (var t = k2 = null, r = g2, w = g2 = 0, p2 = null, v = h2.next(); r !== null && !v.done; w++, v = h2.next()) {
          r.index > w ? (p2 = r, r = null) : p2 = r.sibling;
          var N = x(e2, r, v.value, l2);
          if (N === null) {
            r === null && (r = p2);
            break;
          }
          a && r && N.alternate === null && b(e2, r);
          g2 = f(N, g2, w);
          t === null ? k2 = N : t.sibling = N;
          t = N;
          r = p2;
        }
        if (v.done)
          return c(e2, r), k2;
        if (r === null) {
          for (; !v.done; w++, v = h2.next())
            v = D(e2, v.value, l2), v !== null && (g2 = f(v, g2, w), t === null ? k2 = v : t.sibling = v, t = v);
          return k2;
        }
        for (r = d(e2, r); !v.done; w++, v = h2.next())
          v = K(r, e2, w, v.value, l2), v !== null && (a && v.alternate !== null && r.delete(v.key === null ? w : v.key), g2 = f(v, g2, w), t === null ? k2 = v : t.sibling = v, t = v);
        a && r.forEach(function(a2) {
          return b(e2, a2);
        });
        return k2;
      }
      return function(a2, d2, f2, h2) {
        var k2 = typeof f2 === "object" && f2 !== null && f2.type === ea && f2.key === null;
        k2 && (f2 = f2.props.children);
        var l2 = typeof f2 === "object" && f2 !== null;
        if (l2)
          switch (f2.$$typeof) {
            case ca:
              a: {
                l2 = f2.key;
                for (k2 = d2; k2 !== null; ) {
                  if (k2.key === l2)
                    if (k2.tag === 7 ? f2.type === ea : k2.elementType === f2.type) {
                      c(a2, k2.sibling);
                      d2 = e(k2, f2.type === ea ? f2.props.children : f2.props, h2);
                      d2.ref = cd(a2, k2, f2);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    } else {
                      c(a2, k2);
                      break;
                    }
                  else
                    b(a2, k2);
                  k2 = k2.sibling;
                }
                f2.type === ea ? (d2 = jd(f2.props.children, a2.mode, h2, f2.key), d2.return = a2, a2 = d2) : (h2 = hd(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = cd(a2, d2, f2), h2.return = a2, a2 = h2);
              }
              return g(a2);
            case da:
              a: {
                for (k2 = f2.key; d2 !== null; ) {
                  if (d2.key === k2)
                    if (d2.tag === 4 && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                      c(a2, d2.sibling);
                      d2 = e(d2, f2.children || [], h2);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    } else {
                      c(a2, d2);
                      break;
                    }
                  else
                    b(a2, d2);
                  d2 = d2.sibling;
                }
                d2 = id(f2, a2.mode, h2);
                d2.return = a2;
                a2 = d2;
              }
              return g(a2);
          }
        if (typeof f2 === "string" || typeof f2 === "number")
          return f2 = "" + f2, d2 !== null && d2.tag === 6 ? (c(a2, d2.sibling), d2 = e(d2, f2, h2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = gd(f2, a2.mode, h2), d2.return = a2, a2 = d2), g(a2);
        if (bd(f2))
          return Ha(a2, d2, f2, h2);
        if (ra(f2))
          return O(a2, d2, f2, h2);
        l2 && dd(a2, f2);
        if (typeof f2 === "undefined" && !k2)
          switch (a2.tag) {
            case 1:
            case 0:
              throw a2 = a2.type, Error(n(152, a2.displayName || a2.name || "Component"));
          }
        return c(a2, d2);
      };
    }
    var kd = ed(true), ld = ed(false), md = {}, H = {current: md}, nd = {current: md}, od = {current: md};
    function pd(a) {
      if (a === md)
        throw Error(n(174));
      return a;
    }
    function qd(a, b) {
      z(od, b, a);
      z(nd, a, a);
      z(H, md, a);
      b = Aa(b);
      y(H, a);
      z(H, b, a);
    }
    function rd(a) {
      y(H, a);
      y(nd, a);
      y(od, a);
    }
    function sd(a) {
      var b = pd(od.current), c = pd(H.current);
      b = Ba(c, a.type, b);
      c !== b && (z(nd, a, a), z(H, b, a));
    }
    function td(a) {
      nd.current === a && (y(H, a), y(nd, a));
    }
    var I = {current: 0};
    function ud(a) {
      for (var b = a; b !== null; ) {
        if (b.tag === 13) {
          var c = b.memoizedState;
          if (c !== null && (c = c.dehydrated, c === null || qb(c) || rb(c)))
            return b;
        } else if (b.tag === 19 && b.memoizedProps.revealOrder !== void 0) {
          if ((b.effectTag & 64) !== 0)
            return b;
        } else if (b.child !== null) {
          b.child.return = b;
          b = b.child;
          continue;
        }
        if (b === a)
          break;
        for (; b.sibling === null; ) {
          if (b.return === null || b.return === a)
            return null;
          b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
      }
      return null;
    }
    function vd(a, b) {
      return {responder: a, props: b};
    }
    var wd = q.ReactCurrentDispatcher, J = q.ReactCurrentBatchConfig, xd = 0, yd = null, L = null, zd = null, Ad = null, M = null, Bd = null, Cd = 0, Dd = null, Ed = 0, Fd = false, Gd = null, Hd = 0;
    function P() {
      throw Error(n(321));
    }
    function Id(a, b) {
      if (b === null)
        return false;
      for (var c = 0; c < b.length && c < a.length; c++)
        if (!oc(a[c], b[c]))
          return false;
      return true;
    }
    function Jd(a, b, c, d, e, f) {
      xd = f;
      yd = b;
      zd = a !== null ? a.memoizedState : null;
      wd.current = zd === null ? Kd : Ld;
      b = c(d, e);
      if (Fd) {
        do
          Fd = false, Hd += 1, zd = a !== null ? a.memoizedState : null, Bd = Ad, Dd = M = L = null, wd.current = Ld, b = c(d, e);
        while (Fd);
        Gd = null;
        Hd = 0;
      }
      wd.current = Md;
      a = yd;
      a.memoizedState = Ad;
      a.expirationTime = Cd;
      a.updateQueue = Dd;
      a.effectTag |= Ed;
      a = L !== null && L.next !== null;
      xd = 0;
      Bd = M = Ad = zd = L = yd = null;
      Cd = 0;
      Dd = null;
      Ed = 0;
      if (a)
        throw Error(n(300));
      return b;
    }
    function Nd() {
      wd.current = Md;
      xd = 0;
      Bd = M = Ad = zd = L = yd = null;
      Cd = 0;
      Dd = null;
      Ed = 0;
      Fd = false;
      Gd = null;
      Hd = 0;
    }
    function Od() {
      var a = {memoizedState: null, baseState: null, queue: null, baseUpdate: null, next: null};
      M === null ? Ad = M = a : M = M.next = a;
      return M;
    }
    function Pd() {
      if (Bd !== null)
        M = Bd, Bd = M.next, L = zd, zd = L !== null ? L.next : null;
      else {
        if (zd === null)
          throw Error(n(310));
        L = zd;
        var a = {memoizedState: L.memoizedState, baseState: L.baseState, queue: L.queue, baseUpdate: L.baseUpdate, next: null};
        M = M === null ? Ad = a : M.next = a;
        zd = L.next;
      }
      return M;
    }
    function Qd(a, b) {
      return typeof b === "function" ? b(a) : b;
    }
    function Rd(a) {
      var b = Pd(), c = b.queue;
      if (c === null)
        throw Error(n(311));
      c.lastRenderedReducer = a;
      if (0 < Hd) {
        var d = c.dispatch;
        if (Gd !== null) {
          var e = Gd.get(c);
          if (e !== void 0) {
            Gd.delete(c);
            var f = b.memoizedState;
            do
              f = a(f, e.action), e = e.next;
            while (e !== null);
            oc(f, b.memoizedState) || (Bc = true);
            b.memoizedState = f;
            b.baseUpdate === c.last && (b.baseState = f);
            c.lastRenderedState = f;
            return [f, d];
          }
        }
        return [b.memoizedState, d];
      }
      d = c.last;
      var g = b.baseUpdate;
      f = b.baseState;
      g !== null ? (d !== null && (d.next = null), d = g.next) : d = d !== null ? d.next : null;
      if (d !== null) {
        var l = e = null, h = d, k = false;
        do {
          var p = h.expirationTime;
          p < xd ? (k || (k = true, l = g, e = f), p > Cd && (Cd = p, Pc(Cd))) : (Oc(p, h.suspenseConfig), f = h.eagerReducer === a ? h.eagerState : a(f, h.action));
          g = h;
          h = h.next;
        } while (h !== null && h !== d);
        k || (l = g, e = f);
        oc(f, b.memoizedState) || (Bc = true);
        b.memoizedState = f;
        b.baseUpdate = l;
        b.baseState = e;
        c.lastRenderedState = f;
      }
      return [b.memoizedState, c.dispatch];
    }
    function Sd(a) {
      var b = Od();
      typeof a === "function" && (a = a());
      b.memoizedState = b.baseState = a;
      a = b.queue = {last: null, dispatch: null, lastRenderedReducer: Qd, lastRenderedState: a};
      a = a.dispatch = Td.bind(null, yd, a);
      return [b.memoizedState, a];
    }
    function Ud(a) {
      return Rd(Qd, a);
    }
    function Vd(a, b, c, d) {
      a = {tag: a, create: b, destroy: c, deps: d, next: null};
      Dd === null ? (Dd = {lastEffect: null}, Dd.lastEffect = a.next = a) : (b = Dd.lastEffect, b === null ? Dd.lastEffect = a.next = a : (c = b.next, b.next = a, a.next = c, Dd.lastEffect = a));
      return a;
    }
    function Wd(a, b, c, d) {
      var e = Od();
      Ed |= a;
      e.memoizedState = Vd(b, c, void 0, d === void 0 ? null : d);
    }
    function Xd(a, b, c, d) {
      var e = Pd();
      d = d === void 0 ? null : d;
      var f = void 0;
      if (L !== null) {
        var g = L.memoizedState;
        f = g.destroy;
        if (d !== null && Id(d, g.deps)) {
          Vd(0, c, f, d);
          return;
        }
      }
      Ed |= a;
      e.memoizedState = Vd(b, c, f, d);
    }
    function Yd(a, b) {
      return Wd(516, 192, a, b);
    }
    function Zd(a, b) {
      return Xd(516, 192, a, b);
    }
    function $d(a, b) {
      if (typeof b === "function")
        return a = a(), b(a), function() {
          b(null);
        };
      if (b !== null && b !== void 0)
        return a = a(), b.current = a, function() {
          b.current = null;
        };
    }
    function ae() {
    }
    function be(a, b) {
      Od().memoizedState = [a, b === void 0 ? null : b];
      return a;
    }
    function ce(a, b) {
      var c = Pd();
      b = b === void 0 ? null : b;
      var d = c.memoizedState;
      if (d !== null && b !== null && Id(b, d[1]))
        return d[0];
      c.memoizedState = [a, b];
      return a;
    }
    function Td(a, b, c) {
      if (!(25 > Hd))
        throw Error(n(301));
      var d = a.alternate;
      if (a === yd || d !== null && d === yd)
        if (Fd = true, a = {expirationTime: xd, suspenseConfig: null, action: c, eagerReducer: null, eagerState: null, next: null}, Gd === null && (Gd = new Map()), c = Gd.get(b), c === void 0)
          Gd.set(b, a);
        else {
          for (b = c; b.next !== null; )
            b = b.next;
          b.next = a;
        }
      else {
        var e = G(), f = Sc.suspense;
        e = Vc(e, a, f);
        f = {expirationTime: e, suspenseConfig: f, action: c, eagerReducer: null, eagerState: null, next: null};
        var g = b.last;
        if (g === null)
          f.next = f;
        else {
          var l = g.next;
          l !== null && (f.next = l);
          g.next = f;
        }
        b.last = f;
        if (a.expirationTime === 0 && (d === null || d.expirationTime === 0) && (d = b.lastRenderedReducer, d !== null))
          try {
            var h = b.lastRenderedState, k = d(h, c);
            f.eagerReducer = d;
            f.eagerState = k;
            if (oc(k, h))
              return;
          } catch (p) {
          } finally {
          }
        Wc(a, e);
      }
    }
    var Md = {readContext: Cc, useCallback: P, useContext: P, useEffect: P, useImperativeHandle: P, useLayoutEffect: P, useMemo: P, useReducer: P, useRef: P, useState: P, useDebugValue: P, useResponder: P, useDeferredValue: P, useTransition: P}, Kd = {readContext: Cc, useCallback: be, useContext: Cc, useEffect: Yd, useImperativeHandle: function(a, b, c) {
      c = c !== null && c !== void 0 ? c.concat([a]) : null;
      return Wd(4, 36, $d.bind(null, b, a), c);
    }, useLayoutEffect: function(a, b) {
      return Wd(4, 36, a, b);
    }, useMemo: function(a, b) {
      var c = Od();
      b = b === void 0 ? null : b;
      a = a();
      c.memoizedState = [a, b];
      return a;
    }, useReducer: function(a, b, c) {
      var d = Od();
      b = c !== void 0 ? c(b) : b;
      d.memoizedState = d.baseState = b;
      a = d.queue = {last: null, dispatch: null, lastRenderedReducer: a, lastRenderedState: b};
      a = a.dispatch = Td.bind(null, yd, a);
      return [d.memoizedState, a];
    }, useRef: function(a) {
      var b = Od();
      a = {current: a};
      return b.memoizedState = a;
    }, useState: Sd, useDebugValue: ae, useResponder: vd, useDeferredValue: function(a, b) {
      var c = Sd(a), d = c[0], e = c[1];
      Yd(function() {
        m.unstable_next(function() {
          var c2 = J.suspense;
          J.suspense = b === void 0 ? null : b;
          try {
            e(a);
          } finally {
            J.suspense = c2;
          }
        });
      }, [a, b]);
      return d;
    }, useTransition: function(a) {
      var b = Sd(false), c = b[0], d = b[1];
      return [be(function(b2) {
        d(true);
        m.unstable_next(function() {
          var c2 = J.suspense;
          J.suspense = a === void 0 ? null : a;
          try {
            d(false), b2();
          } finally {
            J.suspense = c2;
          }
        });
      }, [a, c]), c];
    }}, Ld = {readContext: Cc, useCallback: ce, useContext: Cc, useEffect: Zd, useImperativeHandle: function(a, b, c) {
      c = c !== null && c !== void 0 ? c.concat([a]) : null;
      return Xd(4, 36, $d.bind(null, b, a), c);
    }, useLayoutEffect: function(a, b) {
      return Xd(4, 36, a, b);
    }, useMemo: function(a, b) {
      var c = Pd();
      b = b === void 0 ? null : b;
      var d = c.memoizedState;
      if (d !== null && b !== null && Id(b, d[1]))
        return d[0];
      a = a();
      c.memoizedState = [a, b];
      return a;
    }, useReducer: Rd, useRef: function() {
      return Pd().memoizedState;
    }, useState: Ud, useDebugValue: ae, useResponder: vd, useDeferredValue: function(a, b) {
      var c = Ud(a), d = c[0], e = c[1];
      Zd(function() {
        m.unstable_next(function() {
          var c2 = J.suspense;
          J.suspense = b === void 0 ? null : b;
          try {
            e(a);
          } finally {
            J.suspense = c2;
          }
        });
      }, [a, b]);
      return d;
    }, useTransition: function(a) {
      var b = Ud(false), c = b[0], d = b[1];
      return [ce(function(b2) {
        d(true);
        m.unstable_next(function() {
          var c2 = J.suspense;
          J.suspense = a === void 0 ? null : a;
          try {
            d(false), b2();
          } finally {
            J.suspense = c2;
          }
        });
      }, [a, c]), c];
    }}, de = null, ee = null, fe = false;
    function ge(a, b) {
      var c = he(5, null, null, 0);
      c.elementType = "DELETED";
      c.type = "DELETED";
      c.stateNode = b;
      c.return = a;
      c.effectTag = 8;
      a.lastEffect !== null ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
    }
    function ie(a, b) {
      switch (a.tag) {
        case 5:
          return b = ob(b, a.type, a.pendingProps), b !== null ? (a.stateNode = b, true) : false;
        case 6:
          return b = pb(b, a.pendingProps), b !== null ? (a.stateNode = b, true) : false;
        case 13:
          return false;
        default:
          return false;
      }
    }
    function je(a) {
      if (fe) {
        var b = ee;
        if (b) {
          var c = b;
          if (!ie(a, b)) {
            b = sb(c);
            if (!b || !ie(a, b)) {
              a.effectTag = a.effectTag & -1025 | 2;
              fe = false;
              de = a;
              return;
            }
            ge(de, c);
          }
          de = a;
          ee = tb(b);
        } else
          a.effectTag = a.effectTag & -1025 | 2, fe = false, de = a;
      }
    }
    function ke(a) {
      for (a = a.return; a !== null && a.tag !== 5 && a.tag !== 3 && a.tag !== 13; )
        a = a.return;
      de = a;
    }
    function ne(a) {
      if (!Sa || a !== de)
        return false;
      if (!fe)
        return ke(a), fe = true, false;
      var b = a.type;
      if (a.tag !== 5 || b !== "head" && b !== "body" && !Ja(b, a.memoizedProps))
        for (b = ee; b; )
          ge(a, b), b = sb(b);
      ke(a);
      if (a.tag === 13) {
        if (!Sa)
          throw Error(n(316));
        a = a.memoizedState;
        a = a !== null ? a.dehydrated : null;
        if (!a)
          throw Error(n(317));
        ee = wb(a);
      } else
        ee = de ? sb(a.stateNode) : null;
      return true;
    }
    function oe() {
      Sa && (ee = de = null, fe = false);
    }
    var pe = q.ReactCurrentOwner, Bc = false;
    function Q(a, b, c, d) {
      b.child = a === null ? ld(b, null, c, d) : kd(b, a.child, c, d);
    }
    function qe(a, b, c, d, e) {
      c = c.render;
      var f = b.ref;
      Ac(b, e);
      d = Jd(a, b, c, d, f, e);
      if (a !== null && !Bc)
        return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), re(a, b, e);
      b.effectTag |= 1;
      Q(a, b, d, e);
      return b.child;
    }
    function se(a, b, c, d, e, f) {
      if (a === null) {
        var g = c.type;
        if (typeof g === "function" && !te(g) && g.defaultProps === void 0 && c.compare === null && c.defaultProps === void 0)
          return b.tag = 15, b.type = g, ue(a, b, g, d, e, f);
        a = hd(c.type, null, d, null, b.mode, f);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
      }
      g = a.child;
      if (e < f && (e = g.memoizedProps, c = c.compare, c = c !== null ? c : qc, c(e, d) && a.ref === b.ref))
        return re(a, b, f);
      b.effectTag |= 1;
      a = fd(g, d, f);
      a.ref = b.ref;
      a.return = b;
      return b.child = a;
    }
    function ue(a, b, c, d, e, f) {
      return a !== null && qc(a.memoizedProps, d) && a.ref === b.ref && (Bc = false, e < f) ? re(a, b, f) : ve(a, b, c, d, f);
    }
    function we(a, b) {
      var c = b.ref;
      if (a === null && c !== null || a !== null && a.ref !== c)
        b.effectTag |= 128;
    }
    function ve(a, b, c, d, e) {
      var f = C(c) ? Eb : A.current;
      f = Fb(b, f);
      Ac(b, e);
      c = Jd(a, b, c, d, f, e);
      if (a !== null && !Bc)
        return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), re(a, b, e);
      b.effectTag |= 1;
      Q(a, b, c, e);
      return b.child;
    }
    function xe(a, b, c, d, e) {
      if (C(c)) {
        var f = true;
        Kb(b);
      } else
        f = false;
      Ac(b, e);
      if (b.stateNode === null)
        a !== null && (a.alternate = null, b.alternate = null, b.effectTag |= 2), Zc(b, c, d, e), ad(b, c, d, e), d = true;
      else if (a === null) {
        var g = b.stateNode, l = b.memoizedProps;
        g.props = l;
        var h = g.context, k = c.contextType;
        typeof k === "object" && k !== null ? k = Cc(k) : (k = C(c) ? Eb : A.current, k = Fb(b, k));
        var p = c.getDerivedStateFromProps, D = typeof p === "function" || typeof g.getSnapshotBeforeUpdate === "function";
        D || typeof g.UNSAFE_componentWillReceiveProps !== "function" && typeof g.componentWillReceiveProps !== "function" || (l !== d || h !== k) && $c(b, g, d, k);
        Dc = false;
        var x = b.memoizedState;
        h = g.state = x;
        var K = b.updateQueue;
        K !== null && (Nc(b, K, d, g, e), h = b.memoizedState);
        l !== d || x !== h || B.current || Dc ? (typeof p === "function" && (Uc(b, c, p, d), h = b.memoizedState), (l = Dc || Yc(b, c, l, d, x, h, k)) ? (D || typeof g.UNSAFE_componentWillMount !== "function" && typeof g.componentWillMount !== "function" || (typeof g.componentWillMount === "function" && g.componentWillMount(), typeof g.UNSAFE_componentWillMount === "function" && g.UNSAFE_componentWillMount()), typeof g.componentDidMount === "function" && (b.effectTag |= 4)) : (typeof g.componentDidMount === "function" && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = h), g.props = d, g.state = h, g.context = k, d = l) : (typeof g.componentDidMount === "function" && (b.effectTag |= 4), d = false);
      } else
        g = b.stateNode, l = b.memoizedProps, g.props = b.type === b.elementType ? l : rc(b.type, l), h = g.context, k = c.contextType, typeof k === "object" && k !== null ? k = Cc(k) : (k = C(c) ? Eb : A.current, k = Fb(b, k)), p = c.getDerivedStateFromProps, (D = typeof p === "function" || typeof g.getSnapshotBeforeUpdate === "function") || typeof g.UNSAFE_componentWillReceiveProps !== "function" && typeof g.componentWillReceiveProps !== "function" || (l !== d || h !== k) && $c(b, g, d, k), Dc = false, h = b.memoizedState, x = g.state = h, K = b.updateQueue, K !== null && (Nc(b, K, d, g, e), x = b.memoizedState), l !== d || h !== x || B.current || Dc ? (typeof p === "function" && (Uc(b, c, p, d), x = b.memoizedState), (p = Dc || Yc(b, c, l, d, h, x, k)) ? (D || typeof g.UNSAFE_componentWillUpdate !== "function" && typeof g.componentWillUpdate !== "function" || (typeof g.componentWillUpdate === "function" && g.componentWillUpdate(d, x, k), typeof g.UNSAFE_componentWillUpdate === "function" && g.UNSAFE_componentWillUpdate(d, x, k)), typeof g.componentDidUpdate === "function" && (b.effectTag |= 4), typeof g.getSnapshotBeforeUpdate === "function" && (b.effectTag |= 256)) : (typeof g.componentDidUpdate !== "function" || l === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 4), typeof g.getSnapshotBeforeUpdate !== "function" || l === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = p) : (typeof g.componentDidUpdate !== "function" || l === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 4), typeof g.getSnapshotBeforeUpdate !== "function" || l === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 256), d = false);
      return ye(a, b, c, d, f, e);
    }
    function ye(a, b, c, d, e, f) {
      we(a, b);
      var g = (b.effectTag & 64) !== 0;
      if (!d && !g)
        return e && Lb(b, c, false), re(a, b, f);
      d = b.stateNode;
      pe.current = b;
      var l = g && typeof c.getDerivedStateFromError !== "function" ? null : d.render();
      b.effectTag |= 1;
      a !== null && g ? (b.child = kd(b, a.child, null, f), b.child = kd(b, null, l, f)) : Q(a, b, l, f);
      b.memoizedState = d.state;
      e && Lb(b, c, true);
      return b.child;
    }
    function ze(a) {
      var b = a.stateNode;
      b.pendingContext ? Ib(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Ib(a, b.context, false);
      qd(a, b.containerInfo);
    }
    var Ae = {dehydrated: null, retryTime: 0};
    function Be(a, b, c) {
      var d = b.mode, e = b.pendingProps, f = I.current, g = false, l;
      (l = (b.effectTag & 64) !== 0) || (l = (f & 2) !== 0 && (a === null || a.memoizedState !== null));
      l ? (g = true, b.effectTag &= -65) : a !== null && a.memoizedState === null || e.fallback === void 0 || e.unstable_avoidThisFallback === true || (f |= 1);
      z(I, f & 1, b);
      if (a === null) {
        e.fallback !== void 0 && je(b);
        if (g) {
          g = e.fallback;
          e = jd(null, d, 0, null);
          e.return = b;
          if ((b.mode & 2) === 0)
            for (a = b.memoizedState !== null ? b.child.child : b.child, e.child = a; a !== null; )
              a.return = e, a = a.sibling;
          c = jd(g, d, c, null);
          c.return = b;
          e.sibling = c;
          b.memoizedState = Ae;
          b.child = e;
          return c;
        }
        d = e.children;
        b.memoizedState = null;
        return b.child = ld(b, null, d, c);
      }
      if (a.memoizedState !== null) {
        a = a.child;
        d = a.sibling;
        if (g) {
          e = e.fallback;
          c = fd(a, a.pendingProps, 0);
          c.return = b;
          if ((b.mode & 2) === 0 && (g = b.memoizedState !== null ? b.child.child : b.child, g !== a.child))
            for (c.child = g; g !== null; )
              g.return = c, g = g.sibling;
          d = fd(d, e, d.expirationTime);
          d.return = b;
          c.sibling = d;
          c.childExpirationTime = 0;
          b.memoizedState = Ae;
          b.child = c;
          return d;
        }
        c = kd(b, a.child, e.children, c);
        b.memoizedState = null;
        return b.child = c;
      }
      a = a.child;
      if (g) {
        g = e.fallback;
        e = jd(null, d, 0, null);
        e.return = b;
        e.child = a;
        a !== null && (a.return = e);
        if ((b.mode & 2) === 0)
          for (a = b.memoizedState !== null ? b.child.child : b.child, e.child = a; a !== null; )
            a.return = e, a = a.sibling;
        c = jd(g, d, c, null);
        c.return = b;
        e.sibling = c;
        c.effectTag |= 2;
        e.childExpirationTime = 0;
        b.memoizedState = Ae;
        b.child = e;
        return c;
      }
      b.memoizedState = null;
      return b.child = kd(b, a, e.children, c);
    }
    function Ce(a, b) {
      a.expirationTime < b && (a.expirationTime = b);
      var c = a.alternate;
      c !== null && c.expirationTime < b && (c.expirationTime = b);
      zc(a.return, b);
    }
    function De(a, b, c, d, e, f) {
      var g = a.memoizedState;
      g === null ? a.memoizedState = {isBackwards: b, rendering: null, last: d, tail: c, tailExpiration: 0, tailMode: e, lastEffect: f} : (g.isBackwards = b, g.rendering = null, g.last = d, g.tail = c, g.tailExpiration = 0, g.tailMode = e, g.lastEffect = f);
    }
    function Ee(a, b, c) {
      var d = b.pendingProps, e = d.revealOrder, f = d.tail;
      Q(a, b, d.children, c);
      d = I.current;
      if ((d & 2) !== 0)
        d = d & 1 | 2, b.effectTag |= 64;
      else {
        if (a !== null && (a.effectTag & 64) !== 0)
          a:
            for (a = b.child; a !== null; ) {
              if (a.tag === 13)
                a.memoizedState !== null && Ce(a, c);
              else if (a.tag === 19)
                Ce(a, c);
              else if (a.child !== null) {
                a.child.return = a;
                a = a.child;
                continue;
              }
              if (a === b)
                break a;
              for (; a.sibling === null; ) {
                if (a.return === null || a.return === b)
                  break a;
                a = a.return;
              }
              a.sibling.return = a.return;
              a = a.sibling;
            }
        d &= 1;
      }
      z(I, d, b);
      if ((b.mode & 2) === 0)
        b.memoizedState = null;
      else
        switch (e) {
          case "forwards":
            c = b.child;
            for (e = null; c !== null; )
              a = c.alternate, a !== null && ud(a) === null && (e = c), c = c.sibling;
            c = e;
            c === null ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
            De(b, false, e, c, f, b.lastEffect);
            break;
          case "backwards":
            c = null;
            e = b.child;
            for (b.child = null; e !== null; ) {
              a = e.alternate;
              if (a !== null && ud(a) === null) {
                b.child = e;
                break;
              }
              a = e.sibling;
              e.sibling = c;
              c = e;
              e = a;
            }
            De(b, true, c, null, f, b.lastEffect);
            break;
          case "together":
            De(b, false, null, null, void 0, b.lastEffect);
            break;
          default:
            b.memoizedState = null;
        }
      return b.child;
    }
    function re(a, b, c) {
      a !== null && (b.dependencies = a.dependencies);
      var d = b.expirationTime;
      d !== 0 && Pc(d);
      if (b.childExpirationTime < c)
        return null;
      if (a !== null && b.child !== a.child)
        throw Error(n(153));
      if (b.child !== null) {
        a = b.child;
        c = fd(a, a.pendingProps, a.expirationTime);
        b.child = c;
        for (c.return = b; a.sibling !== null; )
          a = a.sibling, c = c.sibling = fd(a, a.pendingProps, a.expirationTime), c.return = b;
        c.sibling = null;
      }
      return b.child;
    }
    function Fe(a) {
      a.effectTag |= 4;
    }
    var Ge, He, Ie, Je;
    if (Qa)
      Ge = function(a, b) {
        for (var c = b.child; c !== null; ) {
          if (c.tag === 5 || c.tag === 6)
            Fa(a, c.stateNode);
          else if (c.tag !== 4 && c.child !== null) {
            c.child.return = c;
            c = c.child;
            continue;
          }
          if (c === b)
            break;
          for (; c.sibling === null; ) {
            if (c.return === null || c.return === b)
              return;
            c = c.return;
          }
          c.sibling.return = c.return;
          c = c.sibling;
        }
      }, He = function() {
      }, Ie = function(a, b, c, d, e) {
        a = a.memoizedProps;
        if (a !== d) {
          var f = b.stateNode, g = pd(H.current);
          c = Ia(f, c, a, d, e, g);
          (b.updateQueue = c) && Fe(b);
        }
      }, Je = function(a, b, c, d) {
        c !== d && Fe(b);
      };
    else if (Ra) {
      Ge = function(a, b, c, d) {
        for (var e = b.child; e !== null; ) {
          if (e.tag === 5) {
            var f = e.stateNode;
            c && d && (f = mb(f, e.type, e.memoizedProps, e));
            Fa(a, f);
          } else if (e.tag === 6)
            f = e.stateNode, c && d && (f = nb(f, e.memoizedProps, e)), Fa(a, f);
          else if (e.tag !== 4) {
            if (e.tag === 13 && (e.effectTag & 4) !== 0 && (f = e.memoizedState !== null)) {
              var g = e.child;
              if (g !== null && (g.child !== null && (g.child.return = g, Ge(a, g, true, f)), f = g.sibling, f !== null)) {
                f.return = e;
                e = f;
                continue;
              }
            }
            if (e.child !== null) {
              e.child.return = e;
              e = e.child;
              continue;
            }
          }
          if (e === b)
            break;
          for (; e.sibling === null; ) {
            if (e.return === null || e.return === b)
              return;
            e = e.return;
          }
          e.sibling.return = e.return;
          e = e.sibling;
        }
      };
      var Ke = function(a, b, c, d) {
        for (var e = b.child; e !== null; ) {
          if (e.tag === 5) {
            var f = e.stateNode;
            c && d && (f = mb(f, e.type, e.memoizedProps, e));
            ib(a, f);
          } else if (e.tag === 6)
            f = e.stateNode, c && d && (f = nb(f, e.memoizedProps, e)), ib(a, f);
          else if (e.tag !== 4) {
            if (e.tag === 13 && (e.effectTag & 4) !== 0 && (f = e.memoizedState !== null)) {
              var g = e.child;
              if (g !== null && (g.child !== null && (g.child.return = g, Ke(a, g, true, f)), f = g.sibling, f !== null)) {
                f.return = e;
                e = f;
                continue;
              }
            }
            if (e.child !== null) {
              e.child.return = e;
              e = e.child;
              continue;
            }
          }
          if (e === b)
            break;
          for (; e.sibling === null; ) {
            if (e.return === null || e.return === b)
              return;
            e = e.return;
          }
          e.sibling.return = e.return;
          e = e.sibling;
        }
      };
      He = function(a) {
        var b = a.stateNode;
        if (a.firstEffect !== null) {
          var c = b.containerInfo, d = hb(c);
          Ke(d, a, false, false);
          b.pendingChildren = d;
          Fe(a);
          kb(c, d);
        }
      };
      Ie = function(a, b, c, d, e) {
        var f = a.stateNode, g = a.memoizedProps;
        if ((a = b.firstEffect === null) && g === d)
          b.stateNode = f;
        else {
          var l = b.stateNode, h = pd(H.current), k = null;
          g !== d && (k = Ia(l, c, g, d, e, h));
          a && k === null ? b.stateNode = f : (f = gb(f, k, c, g, d, b, a, l), Ga(f, c, d, e, h) && Fe(b), b.stateNode = f, a ? Fe(b) : Ge(f, b, false, false));
        }
      };
      Je = function(a, b, c, d) {
        c !== d && (a = pd(od.current), c = pd(H.current), b.stateNode = La(d, a, c, b), Fe(b));
      };
    } else
      He = function() {
      }, Ie = function() {
      }, Je = function() {
      };
    function Le(a, b) {
      switch (a.tailMode) {
        case "hidden":
          b = a.tail;
          for (var c = null; b !== null; )
            b.alternate !== null && (c = b), b = b.sibling;
          c === null ? a.tail = null : c.sibling = null;
          break;
        case "collapsed":
          c = a.tail;
          for (var d = null; c !== null; )
            c.alternate !== null && (d = c), c = c.sibling;
          d === null ? b || a.tail === null ? a.tail = null : a.tail.sibling = null : d.sibling = null;
      }
    }
    function Me(a) {
      switch (a.tag) {
        case 1:
          C(a.type) && Gb(a);
          var b = a.effectTag;
          return b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;
        case 3:
          rd(a);
          Hb(a);
          b = a.effectTag;
          if ((b & 64) !== 0)
            throw Error(n(285));
          a.effectTag = b & -4097 | 64;
          return a;
        case 5:
          return td(a), null;
        case 13:
          return y(I, a), b = a.effectTag, b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;
        case 19:
          return y(I, a), null;
        case 4:
          return rd(a), null;
        case 10:
          return yc(a), null;
        default:
          return null;
      }
    }
    function Ne(a, b) {
      return {value: a, source: b, stack: Ab(b)};
    }
    var Oe = typeof WeakSet === "function" ? WeakSet : Set;
    function Pe(a, b) {
      var c = b.source, d = b.stack;
      d === null && c !== null && (d = Ab(c));
      c !== null && ta(c.type);
      b = b.value;
      a !== null && a.tag === 1 && ta(a.type);
      try {
        console.error(b);
      } catch (e) {
        setTimeout(function() {
          throw e;
        });
      }
    }
    function Qe(a, b) {
      try {
        b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();
      } catch (c) {
        Re(a, c);
      }
    }
    function Se(a) {
      var b = a.ref;
      if (b !== null)
        if (typeof b === "function")
          try {
            b(null);
          } catch (c) {
            Re(a, c);
          }
        else
          b.current = null;
    }
    function Te(a, b) {
      switch (b.tag) {
        case 0:
        case 11:
        case 15:
          Ue(2, 0, b);
          break;
        case 1:
          if (b.effectTag & 256 && a !== null) {
            var c = a.memoizedProps, d = a.memoizedState;
            a = b.stateNode;
            b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : rc(b.type, c), d);
            a.__reactInternalSnapshotBeforeUpdate = b;
          }
          break;
        case 3:
        case 5:
        case 6:
        case 4:
        case 17:
          break;
        default:
          throw Error(n(163));
      }
    }
    function Ue(a, b, c) {
      c = c.updateQueue;
      c = c !== null ? c.lastEffect : null;
      if (c !== null) {
        var d = c = c.next;
        do {
          if ((d.tag & a) !== 0) {
            var e = d.destroy;
            d.destroy = void 0;
            e !== void 0 && e();
          }
          (d.tag & b) !== 0 && (e = d.create, d.destroy = e());
          d = d.next;
        } while (d !== c);
      }
    }
    function Ve(a, b, c) {
      typeof We === "function" && We(b);
      switch (b.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          a = b.updateQueue;
          if (a !== null && (a = a.lastEffect, a !== null)) {
            var d = a.next;
            hc(97 < c ? 97 : c, function() {
              var a2 = d;
              do {
                var c2 = a2.destroy;
                if (c2 !== void 0) {
                  var g = b;
                  try {
                    c2();
                  } catch (l) {
                    Re(g, l);
                  }
                }
                a2 = a2.next;
              } while (a2 !== d);
            });
          }
          break;
        case 1:
          Se(b);
          c = b.stateNode;
          typeof c.componentWillUnmount === "function" && Qe(b, c);
          break;
        case 5:
          Se(b);
          break;
        case 4:
          Qa ? Xe(a, b, c) : Ra && Ye(b);
      }
    }
    function Ze(a, b, c) {
      for (var d = b; ; )
        if (Ve(a, d, c), d.child === null || Qa && d.tag === 4) {
          if (d === b)
            break;
          for (; d.sibling === null; ) {
            if (d.return === null || d.return === b)
              return;
            d = d.return;
          }
          d.sibling.return = d.return;
          d = d.sibling;
        } else
          d.child.return = d, d = d.child;
    }
    function $e(a) {
      var b = a.alternate;
      a.return = null;
      a.child = null;
      a.memoizedState = null;
      a.updateQueue = null;
      a.dependencies = null;
      a.alternate = null;
      a.firstEffect = null;
      a.lastEffect = null;
      a.pendingProps = null;
      a.memoizedProps = null;
      b !== null && $e(b);
    }
    function Ye(a) {
      if (Ra) {
        a = a.stateNode.containerInfo;
        var b = hb(a);
        lb(a, b);
      }
    }
    function af(a) {
      return a.tag === 5 || a.tag === 3 || a.tag === 4;
    }
    function bf(a) {
      if (Qa) {
        a: {
          for (var b = a.return; b !== null; ) {
            if (af(b)) {
              var c = b;
              break a;
            }
            b = b.return;
          }
          throw Error(n(160));
        }
        b = c.stateNode;
        switch (c.tag) {
          case 5:
            var d = false;
            break;
          case 3:
            b = b.containerInfo;
            d = true;
            break;
          case 4:
            b = b.containerInfo;
            d = true;
            break;
          default:
            throw Error(n(161));
        }
        c.effectTag & 16 && (bb(b), c.effectTag &= -17);
        a:
          b:
            for (c = a; ; ) {
              for (; c.sibling === null; ) {
                if (c.return === null || af(c.return)) {
                  c = null;
                  break a;
                }
                c = c.return;
              }
              c.sibling.return = c.return;
              for (c = c.sibling; c.tag !== 5 && c.tag !== 6 && c.tag !== 18; ) {
                if (c.effectTag & 2)
                  continue b;
                if (c.child === null || c.tag === 4)
                  continue b;
                else
                  c.child.return = c, c = c.child;
              }
              if (!(c.effectTag & 2)) {
                c = c.stateNode;
                break a;
              }
            }
        for (var e = a; ; ) {
          var f = e.tag === 5 || e.tag === 6;
          if (f)
            f = f ? e.stateNode : e.stateNode.instance, c ? d ? Za(b, f, c) : Ya(b, f, c) : d ? Ua(b, f) : Ta(b, f);
          else if (e.tag !== 4 && e.child !== null) {
            e.child.return = e;
            e = e.child;
            continue;
          }
          if (e === a)
            break;
          for (; e.sibling === null; ) {
            if (e.return === null || e.return === a)
              return;
            e = e.return;
          }
          e.sibling.return = e.return;
          e = e.sibling;
        }
      }
    }
    function Xe(a, b, c) {
      for (var d = b, e = false, f, g; ; ) {
        if (!e) {
          e = d.return;
          a:
            for (; ; ) {
              if (e === null)
                throw Error(n(160));
              f = e.stateNode;
              switch (e.tag) {
                case 5:
                  g = false;
                  break a;
                case 3:
                  f = f.containerInfo;
                  g = true;
                  break a;
                case 4:
                  f = f.containerInfo;
                  g = true;
                  break a;
              }
              e = e.return;
            }
          e = true;
        }
        if (d.tag === 5 || d.tag === 6)
          Ze(a, d, c), g ? ab(f, d.stateNode) : $a(f, d.stateNode);
        else if (d.tag === 4) {
          if (d.child !== null) {
            f = d.stateNode.containerInfo;
            g = true;
            d.child.return = d;
            d = d.child;
            continue;
          }
        } else if (Ve(a, d, c), d.child !== null) {
          d.child.return = d;
          d = d.child;
          continue;
        }
        if (d === b)
          break;
        for (; d.sibling === null; ) {
          if (d.return === null || d.return === b)
            return;
          d = d.return;
          d.tag === 4 && (e = false);
        }
        d.sibling.return = d.return;
        d = d.sibling;
      }
    }
    function cf(a, b) {
      if (Qa)
        switch (b.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            Ue(4, 8, b);
            break;
          case 1:
            break;
          case 5:
            var c = b.stateNode;
            if (c != null) {
              var d = b.memoizedProps;
              a = a !== null ? a.memoizedProps : d;
              var e = b.type, f = b.updateQueue;
              b.updateQueue = null;
              f !== null && Xa(c, f, e, a, d, b);
            }
            break;
          case 6:
            if (b.stateNode === null)
              throw Error(n(162));
            c = b.memoizedProps;
            Va(b.stateNode, a !== null ? a.memoizedProps : c, c);
            break;
          case 3:
            Sa && (b = b.stateNode, b.hydrate && (b.hydrate = false, xb(b.containerInfo)));
            break;
          case 12:
            break;
          case 13:
            df(b);
            ef(b);
            break;
          case 19:
            ef(b);
            break;
          case 17:
            break;
          case 20:
            break;
          case 21:
            break;
          default:
            throw Error(n(163));
        }
      else {
        switch (b.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            Ue(4, 8, b);
            return;
          case 12:
            return;
          case 13:
            df(b);
            ef(b);
            return;
          case 19:
            ef(b);
            return;
          case 3:
            Sa && (c = b.stateNode, c.hydrate && (c.hydrate = false, xb(c.containerInfo)));
        }
        a:
          if (Ra)
            switch (b.tag) {
              case 1:
              case 5:
              case 6:
              case 20:
                break a;
              case 3:
              case 4:
                b = b.stateNode;
                lb(b.containerInfo, b.pendingChildren);
                break a;
              default:
                throw Error(n(163));
            }
      }
    }
    function df(a) {
      var b = a;
      if (a.memoizedState === null)
        var c = false;
      else
        c = true, b = a.child, ff = E();
      if (Qa && b !== null)
        a:
          if (a = b, Qa)
            for (b = a; ; ) {
              if (b.tag === 5) {
                var d = b.stateNode;
                c ? cb(d) : eb(b.stateNode, b.memoizedProps);
              } else if (b.tag === 6)
                d = b.stateNode, c ? db(d) : fb(d, b.memoizedProps);
              else if (b.tag === 13 && b.memoizedState !== null && b.memoizedState.dehydrated === null) {
                d = b.child.sibling;
                d.return = b;
                b = d;
                continue;
              } else if (b.child !== null) {
                b.child.return = b;
                b = b.child;
                continue;
              }
              if (b === a)
                break a;
              for (; b.sibling === null; ) {
                if (b.return === null || b.return === a)
                  break a;
                b = b.return;
              }
              b.sibling.return = b.return;
              b = b.sibling;
            }
    }
    function ef(a) {
      var b = a.updateQueue;
      if (b !== null) {
        a.updateQueue = null;
        var c = a.stateNode;
        c === null && (c = a.stateNode = new Oe());
        b.forEach(function(b2) {
          var d = gf.bind(null, a, b2);
          c.has(b2) || (c.add(b2), b2.then(d, d));
        });
      }
    }
    var hf = typeof WeakMap === "function" ? WeakMap : Map;
    function jf(a, b, c) {
      c = Gc(c, null);
      c.tag = 3;
      c.payload = {element: null};
      var d = b.value;
      c.callback = function() {
        kf || (kf = true, lf = d);
        Pe(a, b);
      };
      return c;
    }
    function mf(a, b, c) {
      c = Gc(c, null);
      c.tag = 3;
      var d = a.type.getDerivedStateFromError;
      if (typeof d === "function") {
        var e = b.value;
        c.payload = function() {
          Pe(a, b);
          return d(e);
        };
      }
      var f = a.stateNode;
      f !== null && typeof f.componentDidCatch === "function" && (c.callback = function() {
        typeof d !== "function" && (nf === null ? nf = new Set([this]) : nf.add(this), Pe(a, b));
        var c2 = b.stack;
        this.componentDidCatch(b.value, {componentStack: c2 !== null ? c2 : ""});
      });
      return c;
    }
    var of = Math.ceil, pf = q.ReactCurrentDispatcher, qf = q.ReactCurrentOwner, R = 0, rf = 8, S = 16, sf = 32, tf = 0, uf = 1, vf = 2, wf = 3, xf = 4, yf = 5, T = R, U = null, V = null, W = 0, X = tf, zf = null, Af = 1073741823, Bf = 1073741823, Cf = null, Df = 0, Ef = false, ff = 0, Ff = 500, Y = null, kf = false, lf = null, nf = null, Gf = false, Hf = null, If = 90, Jf = null, Kf = 0, Lf = null, Mf = 0;
    function G() {
      return (T & (S | sf)) !== R ? 1073741821 - (E() / 10 | 0) : Mf !== 0 ? Mf : Mf = 1073741821 - (E() / 10 | 0);
    }
    function Vc(a, b, c) {
      b = b.mode;
      if ((b & 2) === 0)
        return 1073741823;
      var d = fc();
      if ((b & 4) === 0)
        return d === 99 ? 1073741823 : 1073741822;
      if ((T & S) !== R)
        return W;
      if (c !== null)
        a = mc(a, c.timeoutMs | 0 || 5e3, 250);
      else
        switch (d) {
          case 99:
            a = 1073741823;
            break;
          case 98:
            a = mc(a, 150, 100);
            break;
          case 97:
          case 96:
            a = mc(a, 5e3, 250);
            break;
          case 95:
            a = 2;
            break;
          default:
            throw Error(n(326));
        }
      U !== null && a === W && --a;
      return a;
    }
    function Wc(a, b) {
      if (50 < Kf)
        throw Kf = 0, Lf = null, Error(n(185));
      a = Nf(a, b);
      if (a !== null) {
        var c = fc();
        b === 1073741823 ? (T & rf) !== R && (T & (S | sf)) === R ? Of(a) : (Z(a), T === R && F()) : Z(a);
        (T & 4) === R || c !== 98 && c !== 99 || (Jf === null ? Jf = new Map([[a, b]]) : (c = Jf.get(a), (c === void 0 || c > b) && Jf.set(a, b)));
      }
    }
    function Nf(a, b) {
      a.expirationTime < b && (a.expirationTime = b);
      var c = a.alternate;
      c !== null && c.expirationTime < b && (c.expirationTime = b);
      var d = a.return, e = null;
      if (d === null && a.tag === 3)
        e = a.stateNode;
      else
        for (; d !== null; ) {
          c = d.alternate;
          d.childExpirationTime < b && (d.childExpirationTime = b);
          c !== null && c.childExpirationTime < b && (c.childExpirationTime = b);
          if (d.return === null && d.tag === 3) {
            e = d.stateNode;
            break;
          }
          d = d.return;
        }
      e !== null && (U === e && (Pc(b), X === xf && Pf(e, W)), Qf(e, b));
      return e;
    }
    function Rf(a) {
      var b = a.lastExpiredTime;
      if (b !== 0)
        return b;
      b = a.firstPendingTime;
      if (!Sf(a, b))
        return b;
      b = a.lastPingedTime;
      a = a.nextKnownPendingLevel;
      return b > a ? b : a;
    }
    function Z(a) {
      if (a.lastExpiredTime !== 0)
        a.callbackExpirationTime = 1073741823, a.callbackPriority = 99, a.callbackNode = jc(Of.bind(null, a));
      else {
        var b = Rf(a), c = a.callbackNode;
        if (b === 0)
          c !== null && (a.callbackNode = null, a.callbackExpirationTime = 0, a.callbackPriority = 90);
        else {
          var d = G();
          b === 1073741823 ? d = 99 : b === 1 || b === 2 ? d = 95 : (d = 10 * (1073741821 - b) - 10 * (1073741821 - d), d = 0 >= d ? 99 : 250 >= d ? 98 : 5250 >= d ? 97 : 95);
          if (c !== null) {
            var e = a.callbackPriority;
            if (a.callbackExpirationTime === b && e >= d)
              return;
            c !== $b && Ob(c);
          }
          a.callbackExpirationTime = b;
          a.callbackPriority = d;
          b = b === 1073741823 ? jc(Of.bind(null, a)) : ic(d, Tf.bind(null, a), {timeout: 10 * (1073741821 - b) - E()});
          a.callbackNode = b;
        }
      }
    }
    function Tf(a, b) {
      Mf = 0;
      if (b)
        return b = G(), Uf(a, b), Z(a), null;
      var c = Rf(a);
      if (c !== 0) {
        b = a.callbackNode;
        if ((T & (S | sf)) !== R)
          throw Error(n(327));
        Vf();
        a === U && c === W || Wf(a, c);
        if (V !== null) {
          var d = T;
          T |= S;
          var e = Xf(a);
          do
            try {
              Yf();
              break;
            } catch (l) {
              Zf(a, l);
            }
          while (1);
          wc();
          T = d;
          pf.current = e;
          if (X === uf)
            throw b = zf, Wf(a, c), Pf(a, c), Z(a), b;
          if (V === null)
            switch (e = a.finishedWork = a.current.alternate, a.finishedExpirationTime = c, d = X, U = null, d) {
              case tf:
              case uf:
                throw Error(n(345));
              case vf:
                Uf(a, 2 < c ? 2 : c);
                break;
              case wf:
                Pf(a, c);
                d = a.lastSuspendedTime;
                c === d && (a.nextKnownPendingLevel = $f(e));
                if (Af === 1073741823 && (e = ff + Ff - E(), 10 < e)) {
                  if (Ef) {
                    var f = a.lastPingedTime;
                    if (f === 0 || f >= c) {
                      a.lastPingedTime = c;
                      Wf(a, c);
                      break;
                    }
                  }
                  f = Rf(a);
                  if (f !== 0 && f !== c)
                    break;
                  if (d !== 0 && d !== c) {
                    a.lastPingedTime = d;
                    break;
                  }
                  a.timeoutHandle = Ma(ag.bind(null, a), e);
                  break;
                }
                ag(a);
                break;
              case xf:
                Pf(a, c);
                d = a.lastSuspendedTime;
                c === d && (a.nextKnownPendingLevel = $f(e));
                if (Ef && (e = a.lastPingedTime, e === 0 || e >= c)) {
                  a.lastPingedTime = c;
                  Wf(a, c);
                  break;
                }
                e = Rf(a);
                if (e !== 0 && e !== c)
                  break;
                if (d !== 0 && d !== c) {
                  a.lastPingedTime = d;
                  break;
                }
                Bf !== 1073741823 ? d = 10 * (1073741821 - Bf) - E() : Af === 1073741823 ? d = 0 : (d = 10 * (1073741821 - Af) - 5e3, e = E(), c = 10 * (1073741821 - c) - e, d = e - d, 0 > d && (d = 0), d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * of(d / 1960)) - d, c < d && (d = c));
                if (10 < d) {
                  a.timeoutHandle = Ma(ag.bind(null, a), d);
                  break;
                }
                ag(a);
                break;
              case yf:
                if (Af !== 1073741823 && Cf !== null) {
                  f = Af;
                  var g = Cf;
                  d = g.busyMinDurationMs | 0;
                  0 >= d ? d = 0 : (e = g.busyDelayMs | 0, f = E() - (10 * (1073741821 - f) - (g.timeoutMs | 0 || 5e3)), d = f <= e ? 0 : e + d - f);
                  if (10 < d) {
                    Pf(a, c);
                    a.timeoutHandle = Ma(ag.bind(null, a), d);
                    break;
                  }
                }
                ag(a);
                break;
              default:
                throw Error(n(329));
            }
          Z(a);
          if (a.callbackNode === b)
            return Tf.bind(null, a);
        }
      }
      return null;
    }
    function Of(a) {
      var b = a.lastExpiredTime;
      b = b !== 0 ? b : 1073741823;
      if (a.finishedExpirationTime === b)
        ag(a);
      else {
        if ((T & (S | sf)) !== R)
          throw Error(n(327));
        Vf();
        a === U && b === W || Wf(a, b);
        if (V !== null) {
          var c = T;
          T |= S;
          var d = Xf(a);
          do
            try {
              bg();
              break;
            } catch (e) {
              Zf(a, e);
            }
          while (1);
          wc();
          T = c;
          pf.current = d;
          if (X === uf)
            throw c = zf, Wf(a, b), Pf(a, b), Z(a), c;
          if (V !== null)
            throw Error(n(261));
          a.finishedWork = a.current.alternate;
          a.finishedExpirationTime = b;
          U = null;
          ag(a);
          Z(a);
        }
      }
      return null;
    }
    function cg(a, b) {
      Uf(a, b);
      Z(a);
      (T & (S | sf)) === R && F();
    }
    function dg() {
      if (Jf !== null) {
        var a = Jf;
        Jf = null;
        a.forEach(function(a2, c) {
          Uf(c, a2);
          Z(c);
        });
        F();
      }
    }
    function eg(a, b) {
      if ((T & (S | sf)) !== R)
        throw Error(n(187));
      var c = T;
      T |= 1;
      try {
        return hc(99, a.bind(null, b));
      } finally {
        T = c, F();
      }
    }
    function Wf(a, b) {
      a.finishedWork = null;
      a.finishedExpirationTime = 0;
      var c = a.timeoutHandle;
      c !== Oa && (a.timeoutHandle = Oa, Na(c));
      if (V !== null)
        for (c = V.return; c !== null; ) {
          var d = c;
          switch (d.tag) {
            case 1:
              var e = d.type.childContextTypes;
              e !== null && e !== void 0 && Gb(d);
              break;
            case 3:
              rd(d);
              Hb(d);
              break;
            case 5:
              td(d);
              break;
            case 4:
              rd(d);
              break;
            case 13:
              y(I, d);
              break;
            case 19:
              y(I, d);
              break;
            case 10:
              yc(d);
          }
          c = c.return;
        }
      U = a;
      V = fd(a.current, null, b);
      W = b;
      X = tf;
      zf = null;
      Bf = Af = 1073741823;
      Cf = null;
      Df = 0;
      Ef = false;
    }
    function Zf(a, b) {
      do {
        try {
          wc();
          Nd();
          if (V === null || V.return === null)
            return X = uf, zf = b, null;
          a: {
            var c = a, d = V.return, e = V, f = b;
            b = W;
            e.effectTag |= 2048;
            e.firstEffect = e.lastEffect = null;
            if (f !== null && typeof f === "object" && typeof f.then === "function") {
              var g = f, l = (I.current & 1) !== 0, h = d;
              do {
                var k;
                if (k = h.tag === 13) {
                  var p = h.memoizedState;
                  if (p !== null)
                    k = p.dehydrated !== null ? true : false;
                  else {
                    var D = h.memoizedProps;
                    k = D.fallback === void 0 ? false : D.unstable_avoidThisFallback !== true ? true : l ? false : true;
                  }
                }
                if (k) {
                  var x = h.updateQueue;
                  if (x === null) {
                    var K = new Set();
                    K.add(g);
                    h.updateQueue = K;
                  } else
                    x.add(g);
                  if ((h.mode & 2) === 0) {
                    h.effectTag |= 64;
                    e.effectTag &= -2981;
                    if (e.tag === 1)
                      if (e.alternate === null)
                        e.tag = 17;
                      else {
                        var Ha = Gc(1073741823, null);
                        Ha.tag = 2;
                        Ic(e, Ha);
                      }
                    e.expirationTime = 1073741823;
                    break a;
                  }
                  f = void 0;
                  e = b;
                  var O = c.pingCache;
                  O === null ? (O = c.pingCache = new hf(), f = new Set(), O.set(g, f)) : (f = O.get(g), f === void 0 && (f = new Set(), O.set(g, f)));
                  if (!f.has(e)) {
                    f.add(e);
                    var w = fg.bind(null, c, g, e);
                    g.then(w, w);
                  }
                  h.effectTag |= 4096;
                  h.expirationTime = b;
                  break a;
                }
                h = h.return;
              } while (h !== null);
              f = Error((ta(e.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + Ab(e));
            }
            X !== yf && (X = vf);
            f = Ne(f, e);
            h = d;
            do {
              switch (h.tag) {
                case 3:
                  g = f;
                  h.effectTag |= 4096;
                  h.expirationTime = b;
                  var r = jf(h, g, b);
                  Jc(h, r);
                  break a;
                case 1:
                  g = f;
                  var t = h.type, N = h.stateNode;
                  if ((h.effectTag & 64) === 0 && (typeof t.getDerivedStateFromError === "function" || N !== null && typeof N.componentDidCatch === "function" && (nf === null || !nf.has(N)))) {
                    h.effectTag |= 4096;
                    h.expirationTime = b;
                    var Mc = mf(h, g, b);
                    Jc(h, Mc);
                    break a;
                  }
              }
              h = h.return;
            } while (h !== null);
          }
          V = gg(V);
        } catch (Sb) {
          b = Sb;
          continue;
        }
        break;
      } while (1);
    }
    function Xf() {
      var a = pf.current;
      pf.current = Md;
      return a === null ? Md : a;
    }
    function Oc(a, b) {
      a < Af && 2 < a && (Af = a);
      b !== null && a < Bf && 2 < a && (Bf = a, Cf = b);
    }
    function Pc(a) {
      a > Df && (Df = a);
    }
    function bg() {
      for (; V !== null; )
        V = hg(V);
    }
    function Yf() {
      for (; V !== null && !Pb(); )
        V = hg(V);
    }
    function hg(a) {
      var b = ig(a.alternate, a, W);
      a.memoizedProps = a.pendingProps;
      b === null && (b = gg(a));
      qf.current = null;
      return b;
    }
    function gg(a) {
      V = a;
      do {
        var b = V.alternate;
        a = V.return;
        if ((V.effectTag & 2048) === 0) {
          a: {
            var c = b;
            b = V;
            var d = W, e = b.pendingProps;
            switch (b.tag) {
              case 2:
                break;
              case 16:
                break;
              case 15:
              case 0:
                break;
              case 1:
                C(b.type) && Gb(b);
                break;
              case 3:
                rd(b);
                Hb(b);
                e = b.stateNode;
                e.pendingContext && (e.context = e.pendingContext, e.pendingContext = null);
                (c === null || c.child === null) && ne(b) && Fe(b);
                He(b);
                break;
              case 5:
                td(b);
                var f = pd(od.current);
                d = b.type;
                if (c !== null && b.stateNode != null)
                  Ie(c, b, d, e, f), c.ref !== b.ref && (b.effectTag |= 128);
                else if (e) {
                  c = pd(H.current);
                  if (ne(b)) {
                    e = b;
                    if (!Sa)
                      throw Error(n(175));
                    c = ub(e.stateNode, e.type, e.memoizedProps, f, c, e);
                    e.updateQueue = c;
                    c = c !== null ? true : false;
                    c && Fe(b);
                  } else {
                    var g = Ea(d, e, f, c, b);
                    Ge(g, b, false, false);
                    b.stateNode = g;
                    Ga(g, d, e, f, c) && Fe(b);
                  }
                  b.ref !== null && (b.effectTag |= 128);
                } else if (b.stateNode === null)
                  throw Error(n(166));
                break;
              case 6:
                if (c && b.stateNode != null)
                  Je(c, b, c.memoizedProps, e);
                else {
                  if (typeof e !== "string" && b.stateNode === null)
                    throw Error(n(166));
                  c = pd(od.current);
                  f = pd(H.current);
                  if (ne(b)) {
                    c = b;
                    if (!Sa)
                      throw Error(n(176));
                    (c = vb(c.stateNode, c.memoizedProps, c)) && Fe(b);
                  } else
                    b.stateNode = La(e, c, f, b);
                }
                break;
              case 11:
                break;
              case 13:
                y(I, b);
                e = b.memoizedState;
                if ((b.effectTag & 64) !== 0) {
                  b.expirationTime = d;
                  break a;
                }
                e = e !== null;
                f = false;
                c === null ? b.memoizedProps.fallback !== void 0 && ne(b) : (d = c.memoizedState, f = d !== null, e || d === null || (d = c.child.sibling, d !== null && (g = b.firstEffect, g !== null ? (b.firstEffect = d, d.nextEffect = g) : (b.firstEffect = b.lastEffect = d, d.nextEffect = null), d.effectTag = 8)));
                if (e && !f && (b.mode & 2) !== 0)
                  if (c === null && b.memoizedProps.unstable_avoidThisFallback !== true || (I.current & 1) !== 0)
                    X === tf && (X = wf);
                  else {
                    if (X === tf || X === wf)
                      X = xf;
                    Df !== 0 && U !== null && (Pf(U, W), Qf(U, Df));
                  }
                Ra && e && (b.effectTag |= 4);
                Qa && (e || f) && (b.effectTag |= 4);
                break;
              case 7:
                break;
              case 8:
                break;
              case 12:
                break;
              case 4:
                rd(b);
                He(b);
                break;
              case 10:
                yc(b);
                break;
              case 9:
                break;
              case 14:
                break;
              case 17:
                C(b.type) && Gb(b);
                break;
              case 19:
                y(I, b);
                e = b.memoizedState;
                if (e === null)
                  break;
                f = (b.effectTag & 64) !== 0;
                g = e.rendering;
                if (g === null)
                  if (f)
                    Le(e, false);
                  else {
                    if (X !== tf || c !== null && (c.effectTag & 64) !== 0)
                      for (c = b.child; c !== null; ) {
                        g = ud(c);
                        if (g !== null) {
                          b.effectTag |= 64;
                          Le(e, false);
                          c = g.updateQueue;
                          c !== null && (b.updateQueue = c, b.effectTag |= 4);
                          e.lastEffect === null && (b.firstEffect = null);
                          b.lastEffect = e.lastEffect;
                          c = d;
                          for (e = b.child; e !== null; )
                            f = e, d = c, f.effectTag &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, g === null ? (f.childExpirationTime = 0, f.expirationTime = d, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null) : (f.childExpirationTime = g.childExpirationTime, f.expirationTime = g.expirationTime, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, d = g.dependencies, f.dependencies = d === null ? null : {expirationTime: d.expirationTime, firstContext: d.firstContext, responders: d.responders}), e = e.sibling;
                          z(I, I.current & 1 | 2, b);
                          b = b.child;
                          break a;
                        }
                        c = c.sibling;
                      }
                  }
                else {
                  if (!f)
                    if (c = ud(g), c !== null) {
                      if (b.effectTag |= 64, f = true, c = c.updateQueue, c !== null && (b.updateQueue = c, b.effectTag |= 4), Le(e, true), e.tail === null && e.tailMode === "hidden" && !g.alternate) {
                        b = b.lastEffect = e.lastEffect;
                        b !== null && (b.nextEffect = null);
                        break;
                      }
                    } else
                      E() > e.tailExpiration && 1 < d && (b.effectTag |= 64, f = true, Le(e, false), b.expirationTime = b.childExpirationTime = d - 1);
                  e.isBackwards ? (g.sibling = b.child, b.child = g) : (c = e.last, c !== null ? c.sibling = g : b.child = g, e.last = g);
                }
                if (e.tail !== null) {
                  e.tailExpiration === 0 && (e.tailExpiration = E() + 500);
                  c = e.tail;
                  e.rendering = c;
                  e.tail = c.sibling;
                  e.lastEffect = b.lastEffect;
                  c.sibling = null;
                  e = I.current;
                  e = f ? e & 1 | 2 : e & 1;
                  z(I, e, b);
                  b = c;
                  break a;
                }
                break;
              case 20:
                break;
              case 21:
                break;
              default:
                throw Error(n(156, b.tag));
            }
            b = null;
          }
          c = V;
          if (W === 1 || c.childExpirationTime !== 1) {
            e = 0;
            for (f = c.child; f !== null; )
              d = f.expirationTime, g = f.childExpirationTime, d > e && (e = d), g > e && (e = g), f = f.sibling;
            c.childExpirationTime = e;
          }
          if (b !== null)
            return b;
          a !== null && (a.effectTag & 2048) === 0 && (a.firstEffect === null && (a.firstEffect = V.firstEffect), V.lastEffect !== null && (a.lastEffect !== null && (a.lastEffect.nextEffect = V.firstEffect), a.lastEffect = V.lastEffect), 1 < V.effectTag && (a.lastEffect !== null ? a.lastEffect.nextEffect = V : a.firstEffect = V, a.lastEffect = V));
        } else {
          b = Me(V, W);
          if (b !== null)
            return b.effectTag &= 2047, b;
          a !== null && (a.firstEffect = a.lastEffect = null, a.effectTag |= 2048);
        }
        b = V.sibling;
        if (b !== null)
          return b;
        V = a;
      } while (V !== null);
      X === tf && (X = yf);
      return null;
    }
    function $f(a) {
      var b = a.expirationTime;
      a = a.childExpirationTime;
      return b > a ? b : a;
    }
    function ag(a) {
      var b = fc();
      hc(99, jg.bind(null, a, b));
      return null;
    }
    function jg(a, b) {
      do
        Vf();
      while (Hf !== null);
      if ((T & (S | sf)) !== R)
        throw Error(n(327));
      var c = a.finishedWork, d = a.finishedExpirationTime;
      if (c === null)
        return null;
      a.finishedWork = null;
      a.finishedExpirationTime = 0;
      if (c === a.current)
        throw Error(n(177));
      a.callbackNode = null;
      a.callbackExpirationTime = 0;
      a.callbackPriority = 90;
      a.nextKnownPendingLevel = 0;
      var e = $f(c);
      a.firstPendingTime = e;
      d <= a.lastSuspendedTime ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : d <= a.firstSuspendedTime && (a.firstSuspendedTime = d - 1);
      d <= a.lastPingedTime && (a.lastPingedTime = 0);
      d <= a.lastExpiredTime && (a.lastExpiredTime = 0);
      a === U && (V = U = null, W = 0);
      1 < c.effectTag ? c.lastEffect !== null ? (c.lastEffect.nextEffect = c, e = c.firstEffect) : e = c : e = c.firstEffect;
      if (e !== null) {
        var f = T;
        T |= sf;
        qf.current = null;
        Ca(a.containerInfo);
        Y = e;
        do
          try {
            kg();
          } catch (jb) {
            if (Y === null)
              throw Error(n(330));
            Re(Y, jb);
            Y = Y.nextEffect;
          }
        while (Y !== null);
        Y = e;
        do
          try {
            for (var g = a, l = b; Y !== null; ) {
              var h = Y.effectTag;
              h & 16 && Qa && bb(Y.stateNode);
              if (h & 128) {
                var k = Y.alternate;
                if (k !== null) {
                  var p = k.ref;
                  p !== null && (typeof p === "function" ? p(null) : p.current = null);
                }
              }
              switch (h & 1038) {
                case 2:
                  bf(Y);
                  Y.effectTag &= -3;
                  break;
                case 6:
                  bf(Y);
                  Y.effectTag &= -3;
                  cf(Y.alternate, Y);
                  break;
                case 1024:
                  Y.effectTag &= -1025;
                  break;
                case 1028:
                  Y.effectTag &= -1025;
                  cf(Y.alternate, Y);
                  break;
                case 4:
                  cf(Y.alternate, Y);
                  break;
                case 8:
                  var D = g, x = Y, K = l;
                  Qa ? Xe(D, x, K) : Ze(D, x, K);
                  $e(x);
              }
              Y = Y.nextEffect;
            }
          } catch (jb) {
            if (Y === null)
              throw Error(n(330));
            Re(Y, jb);
            Y = Y.nextEffect;
          }
        while (Y !== null);
        Da(a.containerInfo);
        a.current = c;
        Y = e;
        do
          try {
            for (h = d; Y !== null; ) {
              var Ha = Y.effectTag;
              if (Ha & 36) {
                var O = Y.alternate;
                k = Y;
                p = h;
                switch (k.tag) {
                  case 0:
                  case 11:
                  case 15:
                    Ue(16, 32, k);
                    break;
                  case 1:
                    var w = k.stateNode;
                    if (k.effectTag & 4)
                      if (O === null)
                        w.componentDidMount();
                      else {
                        var r = k.elementType === k.type ? O.memoizedProps : rc(k.type, O.memoizedProps);
                        w.componentDidUpdate(r, O.memoizedState, w.__reactInternalSnapshotBeforeUpdate);
                      }
                    var t = k.updateQueue;
                    t !== null && Qc(k, t, w, p);
                    break;
                  case 3:
                    var N = k.updateQueue;
                    if (N !== null) {
                      g = null;
                      if (k.child !== null)
                        switch (k.child.tag) {
                          case 5:
                            g = za(k.child.stateNode);
                            break;
                          case 1:
                            g = k.child.stateNode;
                        }
                      Qc(k, N, g, p);
                    }
                    break;
                  case 5:
                    var Mc = k.stateNode;
                    O === null && k.effectTag & 4 && Wa(Mc, k.type, k.memoizedProps, k);
                    break;
                  case 6:
                    break;
                  case 4:
                    break;
                  case 12:
                    break;
                  case 13:
                    if (Sa && k.memoizedState === null) {
                      var Sb = k.alternate;
                      if (Sb !== null) {
                        var le = Sb.memoizedState;
                        if (le !== null) {
                          var me = le.dehydrated;
                          me !== null && yb(me);
                        }
                      }
                    }
                    break;
                  case 19:
                  case 17:
                  case 20:
                  case 21:
                    break;
                  default:
                    throw Error(n(163));
                }
              }
              if (Ha & 128) {
                k = void 0;
                var Tb = Y.ref;
                if (Tb !== null) {
                  var v = Y.stateNode;
                  switch (Y.tag) {
                    case 5:
                      k = za(v);
                      break;
                    default:
                      k = v;
                  }
                  typeof Tb === "function" ? Tb(k) : Tb.current = k;
                }
              }
              Y = Y.nextEffect;
            }
          } catch (jb) {
            if (Y === null)
              throw Error(n(330));
            Re(Y, jb);
            Y = Y.nextEffect;
          }
        while (Y !== null);
        Y = null;
        ac();
        T = f;
      } else
        a.current = c;
      if (Gf)
        Gf = false, Hf = a, If = b;
      else
        for (Y = e; Y !== null; )
          b = Y.nextEffect, Y.nextEffect = null, Y = b;
      b = a.firstPendingTime;
      b === 0 && (nf = null);
      b === 1073741823 ? a === Lf ? Kf++ : (Kf = 0, Lf = a) : Kf = 0;
      typeof lg === "function" && lg(c.stateNode, d);
      Z(a);
      if (kf)
        throw kf = false, a = lf, lf = null, a;
      if ((T & rf) !== R)
        return null;
      F();
      return null;
    }
    function kg() {
      for (; Y !== null; ) {
        var a = Y.effectTag;
        (a & 256) !== 0 && Te(Y.alternate, Y);
        (a & 512) === 0 || Gf || (Gf = true, ic(97, function() {
          Vf();
          return null;
        }));
        Y = Y.nextEffect;
      }
    }
    function Vf() {
      if (If !== 90) {
        var a = 97 < If ? 97 : If;
        If = 90;
        return hc(a, mg);
      }
    }
    function mg() {
      if (Hf === null)
        return false;
      var a = Hf;
      Hf = null;
      if ((T & (S | sf)) !== R)
        throw Error(n(331));
      var b = T;
      T |= sf;
      for (a = a.current.firstEffect; a !== null; ) {
        try {
          var c = a;
          if ((c.effectTag & 512) !== 0)
            switch (c.tag) {
              case 0:
              case 11:
              case 15:
                Ue(128, 0, c), Ue(0, 64, c);
            }
        } catch (d) {
          if (a === null)
            throw Error(n(330));
          Re(a, d);
        }
        c = a.nextEffect;
        a.nextEffect = null;
        a = c;
      }
      T = b;
      F();
      return true;
    }
    function ng(a, b, c) {
      b = Ne(c, b);
      b = jf(a, b, 1073741823);
      Ic(a, b);
      a = Nf(a, 1073741823);
      a !== null && Z(a);
    }
    function Re(a, b) {
      if (a.tag === 3)
        ng(a, a, b);
      else
        for (var c = a.return; c !== null; ) {
          if (c.tag === 3) {
            ng(c, a, b);
            break;
          } else if (c.tag === 1) {
            var d = c.stateNode;
            if (typeof c.type.getDerivedStateFromError === "function" || typeof d.componentDidCatch === "function" && (nf === null || !nf.has(d))) {
              a = Ne(b, a);
              a = mf(c, a, 1073741823);
              Ic(c, a);
              c = Nf(c, 1073741823);
              c !== null && Z(c);
              break;
            }
          }
          c = c.return;
        }
    }
    function fg(a, b, c) {
      var d = a.pingCache;
      d !== null && d.delete(b);
      U === a && W === c ? X === xf || X === wf && Af === 1073741823 && E() - ff < Ff ? Wf(a, W) : Ef = true : Sf(a, c) && (b = a.lastPingedTime, b !== 0 && b < c || (a.lastPingedTime = c, a.finishedExpirationTime === c && (a.finishedExpirationTime = 0, a.finishedWork = null), Z(a)));
    }
    function gf(a, b) {
      var c = a.stateNode;
      c !== null && c.delete(b);
      b = 0;
      b === 0 && (b = G(), b = Vc(b, a, null));
      a = Nf(a, b);
      a !== null && Z(a);
    }
    var ig;
    ig = function(a, b, c) {
      var d = b.expirationTime;
      if (a !== null) {
        var e = b.pendingProps;
        if (a.memoizedProps !== e || B.current)
          Bc = true;
        else {
          if (d < c) {
            Bc = false;
            switch (b.tag) {
              case 3:
                ze(b);
                oe();
                break;
              case 5:
                sd(b);
                if (b.mode & 4 && c !== 1 && Ka(b.type, e))
                  return b.expirationTime = b.childExpirationTime = 1, null;
                break;
              case 1:
                C(b.type) && Kb(b);
                break;
              case 4:
                qd(b, b.stateNode.containerInfo);
                break;
              case 10:
                xc(b, b.memoizedProps.value);
                break;
              case 13:
                if (b.memoizedState !== null) {
                  d = b.child.childExpirationTime;
                  if (d !== 0 && d >= c)
                    return Be(a, b, c);
                  z(I, I.current & 1, b);
                  b = re(a, b, c);
                  return b !== null ? b.sibling : null;
                }
                z(I, I.current & 1, b);
                break;
              case 19:
                d = b.childExpirationTime >= c;
                if ((a.effectTag & 64) !== 0) {
                  if (d)
                    return Ee(a, b, c);
                  b.effectTag |= 64;
                }
                e = b.memoizedState;
                e !== null && (e.rendering = null, e.tail = null);
                z(I, I.current, b);
                if (!d)
                  return null;
            }
            return re(a, b, c);
          }
          Bc = false;
        }
      } else
        Bc = false;
      b.expirationTime = 0;
      switch (b.tag) {
        case 2:
          d = b.type;
          a !== null && (a.alternate = null, b.alternate = null, b.effectTag |= 2);
          a = b.pendingProps;
          e = Fb(b, A.current);
          Ac(b, c);
          e = Jd(null, b, d, a, e, c);
          b.effectTag |= 1;
          if (typeof e === "object" && e !== null && typeof e.render === "function" && e.$$typeof === void 0) {
            b.tag = 1;
            Nd();
            if (C(d)) {
              var f = true;
              Kb(b);
            } else
              f = false;
            b.memoizedState = e.state !== null && e.state !== void 0 ? e.state : null;
            var g = d.getDerivedStateFromProps;
            typeof g === "function" && Uc(b, d, g, a);
            e.updater = Xc;
            b.stateNode = e;
            e._reactInternalFiber = b;
            ad(b, d, a, c);
            b = ye(null, b, d, true, f, c);
          } else
            b.tag = 0, Q(null, b, e, c), b = b.child;
          return b;
        case 16:
          e = b.elementType;
          a !== null && (a.alternate = null, b.alternate = null, b.effectTag |= 2);
          a = b.pendingProps;
          sa(e);
          if (e._status !== 1)
            throw e._result;
          e = e._result;
          b.type = e;
          f = b.tag = og(e);
          a = rc(e, a);
          switch (f) {
            case 0:
              b = ve(null, b, e, a, c);
              break;
            case 1:
              b = xe(null, b, e, a, c);
              break;
            case 11:
              b = qe(null, b, e, a, c);
              break;
            case 14:
              b = se(null, b, e, rc(e.type, a), d, c);
              break;
            default:
              throw Error(n(306, e, ""));
          }
          return b;
        case 0:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : rc(d, e), ve(a, b, d, e, c);
        case 1:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : rc(d, e), xe(a, b, d, e, c);
        case 3:
          ze(b);
          d = b.updateQueue;
          if (d === null)
            throw Error(n(282));
          e = b.memoizedState;
          e = e !== null ? e.element : null;
          Nc(b, d, b.pendingProps, null, c);
          d = b.memoizedState.element;
          if (d === e)
            oe(), b = re(a, b, c);
          else {
            if (e = b.stateNode.hydrate)
              Sa ? (ee = tb(b.stateNode.containerInfo), de = b, e = fe = true) : e = false;
            if (e)
              for (c = ld(b, null, d, c), b.child = c; c; )
                c.effectTag = c.effectTag & -3 | 1024, c = c.sibling;
            else
              Q(a, b, d, c), oe();
            b = b.child;
          }
          return b;
        case 5:
          return sd(b), a === null && je(b), d = b.type, e = b.pendingProps, f = a !== null ? a.memoizedProps : null, g = e.children, Ja(d, e) ? g = null : f !== null && Ja(d, f) && (b.effectTag |= 16), we(a, b), b.mode & 4 && c !== 1 && Ka(d, e) ? (b.expirationTime = b.childExpirationTime = 1, b = null) : (Q(a, b, g, c), b = b.child), b;
        case 6:
          return a === null && je(b), null;
        case 13:
          return Be(a, b, c);
        case 4:
          return qd(b, b.stateNode.containerInfo), d = b.pendingProps, a === null ? b.child = kd(b, null, d, c) : Q(a, b, d, c), b.child;
        case 11:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : rc(d, e), qe(a, b, d, e, c);
        case 7:
          return Q(a, b, b.pendingProps, c), b.child;
        case 8:
          return Q(a, b, b.pendingProps.children, c), b.child;
        case 12:
          return Q(a, b, b.pendingProps.children, c), b.child;
        case 10:
          a: {
            d = b.type._context;
            e = b.pendingProps;
            g = b.memoizedProps;
            f = e.value;
            xc(b, f);
            if (g !== null) {
              var l = g.value;
              f = oc(l, f) ? 0 : (typeof d._calculateChangedBits === "function" ? d._calculateChangedBits(l, f) : 1073741823) | 0;
              if (f === 0) {
                if (g.children === e.children && !B.current) {
                  b = re(a, b, c);
                  break a;
                }
              } else
                for (l = b.child, l !== null && (l.return = b); l !== null; ) {
                  var h = l.dependencies;
                  if (h !== null) {
                    g = l.child;
                    for (var k = h.firstContext; k !== null; ) {
                      if (k.context === d && (k.observedBits & f) !== 0) {
                        l.tag === 1 && (k = Gc(c, null), k.tag = 2, Ic(l, k));
                        l.expirationTime < c && (l.expirationTime = c);
                        k = l.alternate;
                        k !== null && k.expirationTime < c && (k.expirationTime = c);
                        zc(l.return, c);
                        h.expirationTime < c && (h.expirationTime = c);
                        break;
                      }
                      k = k.next;
                    }
                  } else
                    g = l.tag === 10 ? l.type === b.type ? null : l.child : l.child;
                  if (g !== null)
                    g.return = l;
                  else
                    for (g = l; g !== null; ) {
                      if (g === b) {
                        g = null;
                        break;
                      }
                      l = g.sibling;
                      if (l !== null) {
                        l.return = g.return;
                        g = l;
                        break;
                      }
                      g = g.return;
                    }
                  l = g;
                }
            }
            Q(a, b, e.children, c);
            b = b.child;
          }
          return b;
        case 9:
          return e = b.type, f = b.pendingProps, d = f.children, Ac(b, c), e = Cc(e, f.unstable_observedBits), d = d(e), b.effectTag |= 1, Q(a, b, d, c), b.child;
        case 14:
          return e = b.type, f = rc(e, b.pendingProps), f = rc(e.type, f), se(a, b, e, f, d, c);
        case 15:
          return ue(a, b, b.type, b.pendingProps, d, c);
        case 17:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : rc(d, e), a !== null && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, C(d) ? (a = true, Kb(b)) : a = false, Ac(b, c), Zc(b, d, e, c), ad(b, d, e, c), ye(null, b, d, true, a, c);
        case 19:
          return Ee(a, b, c);
      }
      throw Error(n(156, b.tag));
    };
    var lg = null, We = null;
    function pg(a) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined")
        return false;
      var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (b.isDisabled || !b.supportsFiber)
        return true;
      try {
        var c = b.inject(a);
        lg = function(a2) {
          try {
            b.onCommitFiberRoot(c, a2, void 0, (a2.current.effectTag & 64) === 64);
          } catch (e) {
          }
        };
        We = function(a2) {
          try {
            b.onCommitFiberUnmount(c, a2);
          } catch (e) {
          }
        };
      } catch (d) {
      }
      return true;
    }
    function qg(a, b, c, d) {
      this.tag = a;
      this.key = c;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d;
      this.effectTag = 0;
      this.lastEffect = this.firstEffect = this.nextEffect = null;
      this.childExpirationTime = this.expirationTime = 0;
      this.alternate = null;
    }
    function he(a, b, c, d) {
      return new qg(a, b, c, d);
    }
    function te(a) {
      a = a.prototype;
      return !(!a || !a.isReactComponent);
    }
    function og(a) {
      if (typeof a === "function")
        return te(a) ? 1 : 0;
      if (a !== void 0 && a !== null) {
        a = a.$$typeof;
        if (a === la)
          return 11;
        if (a === oa)
          return 14;
      }
      return 2;
    }
    function fd(a, b) {
      var c = a.alternate;
      c === null ? (c = he(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
      c.childExpirationTime = a.childExpirationTime;
      c.expirationTime = a.expirationTime;
      c.child = a.child;
      c.memoizedProps = a.memoizedProps;
      c.memoizedState = a.memoizedState;
      c.updateQueue = a.updateQueue;
      b = a.dependencies;
      c.dependencies = b === null ? null : {
        expirationTime: b.expirationTime,
        firstContext: b.firstContext,
        responders: b.responders
      };
      c.sibling = a.sibling;
      c.index = a.index;
      c.ref = a.ref;
      return c;
    }
    function hd(a, b, c, d, e, f) {
      var g = 2;
      d = a;
      if (typeof a === "function")
        te(a) && (g = 1);
      else if (typeof a === "string")
        g = 5;
      else
        a:
          switch (a) {
            case ea:
              return jd(c.children, e, f, b);
            case ka:
              g = 8;
              e |= 7;
              break;
            case fa:
              g = 8;
              e |= 1;
              break;
            case ha:
              return a = he(12, c, b, e | 8), a.elementType = ha, a.type = ha, a.expirationTime = f, a;
            case ma:
              return a = he(13, c, b, e), a.type = ma, a.elementType = ma, a.expirationTime = f, a;
            case na:
              return a = he(19, c, b, e), a.elementType = na, a.expirationTime = f, a;
            default:
              if (typeof a === "object" && a !== null)
                switch (a.$$typeof) {
                  case ia:
                    g = 10;
                    break a;
                  case ja:
                    g = 9;
                    break a;
                  case la:
                    g = 11;
                    break a;
                  case oa:
                    g = 14;
                    break a;
                  case pa:
                    g = 16;
                    d = null;
                    break a;
                }
              throw Error(n(130, a == null ? a : typeof a, ""));
          }
      b = he(g, c, b, e);
      b.elementType = a;
      b.type = d;
      b.expirationTime = f;
      return b;
    }
    function jd(a, b, c, d) {
      a = he(7, a, d, b);
      a.expirationTime = c;
      return a;
    }
    function gd(a, b, c) {
      a = he(6, a, null, b);
      a.expirationTime = c;
      return a;
    }
    function id(a, b, c) {
      b = he(4, a.children !== null ? a.children : [], a.key, b);
      b.expirationTime = c;
      b.stateNode = {containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation};
      return b;
    }
    function rg(a, b, c) {
      this.tag = b;
      this.current = null;
      this.containerInfo = a;
      this.pingCache = this.pendingChildren = null;
      this.finishedExpirationTime = 0;
      this.finishedWork = null;
      this.timeoutHandle = Oa;
      this.pendingContext = this.context = null;
      this.hydrate = c;
      this.callbackNode = null;
      this.callbackPriority = 90;
      this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
    }
    function Sf(a, b) {
      var c = a.firstSuspendedTime;
      a = a.lastSuspendedTime;
      return c !== 0 && c >= b && a <= b;
    }
    function Pf(a, b) {
      var c = a.firstSuspendedTime, d = a.lastSuspendedTime;
      c < b && (a.firstSuspendedTime = b);
      if (d > b || c === 0)
        a.lastSuspendedTime = b;
      b <= a.lastPingedTime && (a.lastPingedTime = 0);
      b <= a.lastExpiredTime && (a.lastExpiredTime = 0);
    }
    function Qf(a, b) {
      b > a.firstPendingTime && (a.firstPendingTime = b);
      var c = a.firstSuspendedTime;
      c !== 0 && (b >= c ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : b >= a.lastSuspendedTime && (a.lastSuspendedTime = b + 1), b > a.nextKnownPendingLevel && (a.nextKnownPendingLevel = b));
    }
    function Uf(a, b) {
      var c = a.lastExpiredTime;
      if (c === 0 || c > b)
        a.lastExpiredTime = b;
    }
    function sg(a) {
      var b = a._reactInternalFiber;
      if (b === void 0) {
        if (typeof a.render === "function")
          throw Error(n(188));
        throw Error(n(268, Object.keys(a)));
      }
      a = xa(b);
      return a === null ? null : a.stateNode;
    }
    function tg(a, b) {
      a = a.memoizedState;
      a !== null && a.dehydrated !== null && a.retryTime < b && (a.retryTime = b);
    }
    function ug(a, b) {
      tg(a, b);
      (a = a.alternate) && tg(a, b);
    }
    var vg = {createContainer: function(a, b, c) {
      a = new rg(a, b, c);
      b = he(3, null, null, b === 2 ? 7 : b === 1 ? 3 : 0);
      a.current = b;
      return b.stateNode = a;
    }, updateContainer: function(a, b, c, d) {
      var e = b.current, f = G(), g = Sc.suspense;
      f = Vc(f, e, g);
      a:
        if (c) {
          c = c._reactInternalFiber;
          b: {
            if (ua(c) !== c || c.tag !== 1)
              throw Error(n(170));
            var l = c;
            do {
              switch (l.tag) {
                case 3:
                  l = l.stateNode.context;
                  break b;
                case 1:
                  if (C(l.type)) {
                    l = l.stateNode.__reactInternalMemoizedMergedChildContext;
                    break b;
                  }
              }
              l = l.return;
            } while (l !== null);
            throw Error(n(171));
          }
          if (c.tag === 1) {
            var h = c.type;
            if (C(h)) {
              c = Jb(c, h, l);
              break a;
            }
          }
          c = l;
        } else
          c = Db;
      b.context === null ? b.context = c : b.pendingContext = c;
      b = Gc(f, g);
      b.payload = {element: a};
      d = d === void 0 ? null : d;
      d !== null && (b.callback = d);
      Ic(e, b);
      Wc(e, f);
      return f;
    }, batchedEventUpdates: function(a, b) {
      var c = T;
      T |= 2;
      try {
        return a(b);
      } finally {
        T = c, T === R && F();
      }
    }, batchedUpdates: function(a, b) {
      var c = T;
      T |= 1;
      try {
        return a(b);
      } finally {
        T = c, T === R && F();
      }
    }, unbatchedUpdates: function(a, b) {
      var c = T;
      T &= -2;
      T |= rf;
      try {
        return a(b);
      } finally {
        T = c, T === R && F();
      }
    }, deferredUpdates: function(a) {
      return hc(97, a);
    }, syncUpdates: function(a, b, c, d) {
      return hc(99, a.bind(null, b, c, d));
    }, discreteUpdates: function(a, b, c, d) {
      var e = T;
      T |= 4;
      try {
        return hc(98, a.bind(null, b, c, d));
      } finally {
        T = e, T === R && F();
      }
    }, flushDiscreteUpdates: function() {
      (T & (1 | S | sf)) === R && (dg(), Vf());
    }, flushControlled: function(a) {
      var b = T;
      T |= 1;
      try {
        hc(99, a);
      } finally {
        T = b, T === R && F();
      }
    }, flushSync: eg, flushPassiveEffects: Vf, IsThisRendererActing: {current: false}, getPublicRootInstance: function(a) {
      a = a.current;
      if (!a.child)
        return null;
      switch (a.child.tag) {
        case 5:
          return za(a.child.stateNode);
        default:
          return a.child.stateNode;
      }
    }, attemptSynchronousHydration: function(a) {
      switch (a.tag) {
        case 3:
          var b = a.stateNode;
          b.hydrate && cg(b, b.firstPendingTime);
          break;
        case 13:
          eg(function() {
            return Wc(a, 1073741823);
          }), b = mc(G(), 150, 100), ug(a, b);
      }
    }, attemptUserBlockingHydration: function(a) {
      if (a.tag === 13) {
        var b = mc(G(), 150, 100);
        Wc(a, b);
        ug(a, b);
      }
    }, attemptContinuousHydration: function(a) {
      if (a.tag === 13) {
        G();
        var b = lc++;
        Wc(a, b);
        ug(a, b);
      }
    }, attemptHydrationAtCurrentPriority: function(a) {
      if (a.tag === 13) {
        var b = G();
        b = Vc(b, a, null);
        Wc(a, b);
        ug(a, b);
      }
    }, findHostInstance: sg, findHostInstanceWithWarning: function(a) {
      return sg(a);
    }, findHostInstanceWithNoPortals: function(a) {
      a = ya(a);
      return a === null ? null : a.tag === 20 ? a.stateNode.instance : a.stateNode;
    }, shouldSuspend: function() {
      return false;
    }, injectIntoDevTools: function(a) {
      var b = a.findFiberByHostInstance;
      return pg(aa({}, a, {overrideHookState: null, overrideProps: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: q.ReactCurrentDispatcher, findHostInstanceByFiber: function(a2) {
        a2 = xa(a2);
        return a2 === null ? null : a2.stateNode;
      }, findFiberByHostInstance: function(a2) {
        return b ? b(a2) : null;
      }, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null}));
    }};
    module2.exports = vg.default || vg;
    var $$$renderer = module2.exports;
    module2.exports = $$$reconciler;
    return $$$renderer;
  };
});

// node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS((exports2, module2) => {
  "use strict";
  var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  module2.exports = ReactPropTypesSecret;
});

// node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS((exports2, module2) => {
  "use strict";
  var printWarning = function() {
  };
  if (process.env.NODE_ENV !== "production") {
    ReactPropTypesSecret = require_ReactPropTypesSecret();
    loggedTypeFailures = {};
    has = Function.call.bind(Object.prototype.hasOwnProperty);
    printWarning = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  var ReactPropTypesSecret;
  var loggedTypeFailures;
  var has;
  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== "production") {
      for (var typeSpecName in typeSpecs) {
        if (has(typeSpecs, typeSpecName)) {
          var error;
          try {
            if (typeof typeSpecs[typeSpecName] !== "function") {
              var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
              err.name = "Invariant Violation";
              throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : "";
            printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
          }
        }
      }
    }
  }
  checkPropTypes.resetWarningCache = function() {
    if (process.env.NODE_ENV !== "production") {
      loggedTypeFailures = {};
    }
  };
  module2.exports = checkPropTypes;
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler-tracing.production.min.js
var require_scheduler_tracing_production_min = __commonJS((exports2) => {
  /** @license React v0.18.0
   * scheduler-tracing.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var b = 0;
  exports2.__interactionsRef = null;
  exports2.__subscriberRef = null;
  exports2.unstable_clear = function(a) {
    return a();
  };
  exports2.unstable_getCurrent = function() {
    return null;
  };
  exports2.unstable_getThreadID = function() {
    return ++b;
  };
  exports2.unstable_trace = function(a, d, c) {
    return c();
  };
  exports2.unstable_wrap = function(a) {
    return a;
  };
  exports2.unstable_subscribe = function() {
  };
  exports2.unstable_unsubscribe = function() {
  };
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler-tracing.development.js
var require_scheduler_tracing_development = __commonJS((exports2) => {
  /** @license React v0.18.0
   * scheduler-tracing.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (process.env.NODE_ENV !== "production") {
    (function() {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      var enableSchedulerTracing = true;
      var DEFAULT_THREAD_ID = 0;
      var interactionIDCounter = 0;
      var threadIDCounter = 0;
      exports2.__interactionsRef = null;
      exports2.__subscriberRef = null;
      if (enableSchedulerTracing) {
        exports2.__interactionsRef = {
          current: new Set()
        };
        exports2.__subscriberRef = {
          current: null
        };
      }
      function unstable_clear(callback) {
        if (!enableSchedulerTracing) {
          return callback();
        }
        var prevInteractions = exports2.__interactionsRef.current;
        exports2.__interactionsRef.current = new Set();
        try {
          return callback();
        } finally {
          exports2.__interactionsRef.current = prevInteractions;
        }
      }
      function unstable_getCurrent() {
        if (!enableSchedulerTracing) {
          return null;
        } else {
          return exports2.__interactionsRef.current;
        }
      }
      function unstable_getThreadID() {
        return ++threadIDCounter;
      }
      function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
        if (!enableSchedulerTracing) {
          return callback();
        }
        var interaction = {
          __count: 1,
          id: interactionIDCounter++,
          name,
          timestamp
        };
        var prevInteractions = exports2.__interactionsRef.current;
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports2.__interactionsRef.current = interactions;
        var subscriber = exports2.__subscriberRef.current;
        var returnValue;
        try {
          if (subscriber !== null) {
            subscriber.onInteractionTraced(interaction);
          }
        } finally {
          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(interactions, threadID);
            }
          } finally {
            try {
              returnValue = callback();
            } finally {
              exports2.__interactionsRef.current = prevInteractions;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStopped(interactions, threadID);
                }
              } finally {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              }
            }
          }
        }
        return returnValue;
      }
      function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
        if (!enableSchedulerTracing) {
          return callback;
        }
        var wrappedInteractions = exports2.__interactionsRef.current;
        var subscriber = exports2.__subscriberRef.current;
        if (subscriber !== null) {
          subscriber.onWorkScheduled(wrappedInteractions, threadID);
        }
        wrappedInteractions.forEach(function(interaction) {
          interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
          var prevInteractions = exports2.__interactionsRef.current;
          exports2.__interactionsRef.current = wrappedInteractions;
          subscriber = exports2.__subscriberRef.current;
          try {
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(wrappedInteractions, threadID);
              }
            } finally {
              try {
                returnValue = callback.apply(void 0, arguments);
              } finally {
                exports2.__interactionsRef.current = prevInteractions;
                if (subscriber !== null) {
                  subscriber.onWorkStopped(wrappedInteractions, threadID);
                }
              }
            }
            return returnValue;
          } finally {
            if (!hasRun) {
              hasRun = true;
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          }
        }
        wrapped.cancel = function cancel() {
          subscriber = exports2.__subscriberRef.current;
          try {
            if (subscriber !== null) {
              subscriber.onWorkCanceled(wrappedInteractions, threadID);
            }
          } finally {
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count--;
              if (subscriber && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        };
        return wrapped;
      }
      var subscribers = null;
      if (enableSchedulerTracing) {
        subscribers = new Set();
      }
      function unstable_subscribe(subscriber) {
        if (enableSchedulerTracing) {
          subscribers.add(subscriber);
          if (subscribers.size === 1) {
            exports2.__subscriberRef.current = {
              onInteractionScheduledWorkCompleted,
              onInteractionTraced,
              onWorkCanceled,
              onWorkScheduled,
              onWorkStarted,
              onWorkStopped
            };
          }
        }
      }
      function unstable_unsubscribe(subscriber) {
        if (enableSchedulerTracing) {
          subscribers.delete(subscriber);
          if (subscribers.size === 0) {
            exports2.__subscriberRef.current = null;
          }
        }
      }
      function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onInteractionTraced(interaction);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkScheduled(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkStopped(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkCanceled(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      exports2.unstable_clear = unstable_clear;
      exports2.unstable_getCurrent = unstable_getCurrent;
      exports2.unstable_getThreadID = unstable_getThreadID;
      exports2.unstable_trace = unstable_trace;
      exports2.unstable_wrap = unstable_wrap;
      exports2.unstable_subscribe = unstable_subscribe;
      exports2.unstable_unsubscribe = unstable_unsubscribe;
    })();
  }
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/tracing.js
var require_tracing = __commonJS((exports2, module2) => {
  "use strict";
  if (process.env.NODE_ENV === "production") {
    module2.exports = require_scheduler_tracing_production_min();
  } else {
    module2.exports = require_scheduler_tracing_development();
  }
});

// node_modules/.pnpm/react-reconciler@0.24.0_react@17.0.1/node_modules/react-reconciler/cjs/react-reconciler.development.js
var require_react_reconciler_development = __commonJS((exports2, module2) => {
  /** @license React v0.24.0
   * react-reconciler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (process.env.NODE_ENV !== "production") {
    module2.exports = function $$$reconciler($$$hostConfig) {
      "use strict";
      var _assign = require_object_assign();
      var React2 = require_react();
      var checkPropTypes = require_checkPropTypes();
      var Scheduler = require_scheduler();
      var tracing = require_tracing();
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var FundamentalComponent = 20;
      var ScopeComponent = 21;
      var warningWithoutStack = function() {
      };
      {
        warningWithoutStack = function(condition, format) {
          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }
          if (format === void 0) {
            throw new Error("`warningWithoutStack(condition, format, ...args)` requires a warning message argument");
          }
          if (args.length > 8) {
            throw new Error("warningWithoutStack() currently supports at most 8 arguments.");
          }
          if (condition) {
            return;
          }
          if (typeof console !== "undefined") {
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console.error, console, argsWithFormat);
          }
          try {
            var argIndex = 0;
            var message = "Warning: " + format.replace(/%s/g, function() {
              return args[argIndex++];
            });
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var warningWithoutStack$1 = warningWithoutStack;
      function get(key) {
        return key._reactInternalFiber;
      }
      function set(key, value) {
        key._reactInternalFiber = value;
      }
      var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
        ReactSharedInternals.ReactCurrentDispatcher = {
          current: null
        };
      }
      if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
        ReactSharedInternals.ReactCurrentBatchConfig = {
          suspense: null
        };
      }
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var warning = warningWithoutStack$1;
      {
        warning = function(condition, format) {
          if (condition) {
            return;
          }
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }
          warningWithoutStack$1.apply(void 0, [false, format + "%s"].concat(args, [stack]));
        };
      }
      var warning$1 = warning;
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved ? lazyComponent._result : null;
      }
      function initializeLazyComponentType(lazyComponent) {
        if (lazyComponent._status === Uninitialized) {
          lazyComponent._status = Pending;
          var ctor = lazyComponent._ctor;
          var thenable = ctor();
          lazyComponent._result = thenable;
          thenable.then(function(moduleObject) {
            if (lazyComponent._status === Pending) {
              var defaultExport = moduleObject.default;
              {
                if (defaultExport === void 0) {
                  warning$1(false, "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              lazyComponent._status = Resolved;
              lazyComponent._result = defaultExport;
            }
          }, function(error) {
            if (lazyComponent._status === Pending) {
              lazyComponent._status = Rejected;
              lazyComponent._result = error;
            }
          });
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            warningWithoutStack$1(false, "Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              return "Context.Consumer";
            case REACT_PROVIDER_TYPE:
              return "Context.Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_LAZY_TYPE: {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);
              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
              break;
            }
          }
        }
        return null;
      }
      var NoEffect = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var Snapshot = 256;
      var Passive = 512;
      var Hydrating = 1024;
      var HydratingAndUpdate = 1028;
      var LifecycleEffectMask = 932;
      var HostEffectMask = 2047;
      var Incomplete = 2048;
      var ShouldCapture = 4096;
      var enableUserTimingAPI = true;
      var debugRenderPhaseSideEffectsForStrictMode = true;
      var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;
      var warnAboutDeprecatedLifecycles = true;
      var enableProfilerTimer = true;
      var enableSchedulerTracing = true;
      var enableSuspenseServerRenderer = false;
      var enableFlareAPI = false;
      var enableFundamentalAPI = false;
      var enableScopeAPI = false;
      var warnAboutUnmockedScheduler = false;
      var flushSuspenseFallbacksInTests = true;
      var enableSuspenseCallback = false;
      var warnAboutDefaultPropsOnFunctionComponents = false;
      var warnAboutStringRefs = false;
      var disableLegacyContext = false;
      var disableSchedulerTimeoutBasedOnReactExpirationTime = false;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node;
          do {
            node = nextNode;
            if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
              nearestMounted = node.return;
            }
            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }
        if (node.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance2 = ownerFiber.stateNode;
            !instance2._warnedAboutRefsInRender ? warningWithoutStack$1(false, "%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component") : void 0;
            instance2._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (!(nearestMounted !== null)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a = fiber;
        var b = alternate;
        while (true) {
          var parentA = a.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                {
                  throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
          }
          if (!(a.alternate === b)) {
            {
              throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        if (!(a.tag === HostRoot)) {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
        if (a.stateNode.current === a) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) {
          return null;
        }
        var node = currentParent;
        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === currentParent) {
            return null;
          }
          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) {
          return null;
        }
        var node = currentParent;
        while (true) {
          if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI && node.tag === FundamentalComponent) {
            return node;
          } else if (node.child && node.tag !== HostPortal) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === currentParent) {
            return null;
          }
          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      var getPublicInstance = $$$hostConfig.getPublicInstance;
      var getRootHostContext = $$$hostConfig.getRootHostContext;
      var getChildHostContext = $$$hostConfig.getChildHostContext;
      var prepareForCommit = $$$hostConfig.prepareForCommit;
      var resetAfterCommit = $$$hostConfig.resetAfterCommit;
      var createInstance = $$$hostConfig.createInstance;
      var appendInitialChild = $$$hostConfig.appendInitialChild;
      var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;
      var prepareUpdate = $$$hostConfig.prepareUpdate;
      var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;
      var shouldDeprioritizeSubtree = $$$hostConfig.shouldDeprioritizeSubtree;
      var createTextInstance = $$$hostConfig.createTextInstance;
      var scheduleTimeout = $$$hostConfig.setTimeout;
      var cancelTimeout = $$$hostConfig.clearTimeout;
      var noTimeout = $$$hostConfig.noTimeout;
      var now = $$$hostConfig.now;
      var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;
      var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;
      var supportsMutation = $$$hostConfig.supportsMutation;
      var supportsPersistence = $$$hostConfig.supportsPersistence;
      var supportsHydration = $$$hostConfig.supportsHydration;
      var mountResponderInstance = $$$hostConfig.mountResponderInstance;
      var unmountResponderInstance = $$$hostConfig.unmountResponderInstance;
      var getFundamentalComponentInstance = $$$hostConfig.getFundamentalComponentInstance;
      var mountFundamentalComponent = $$$hostConfig.mountFundamentalComponent;
      var shouldUpdateFundamentalComponent = $$$hostConfig.shouldUpdateFundamentalComponent;
      var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;
      var appendChild = $$$hostConfig.appendChild;
      var appendChildToContainer = $$$hostConfig.appendChildToContainer;
      var commitTextUpdate = $$$hostConfig.commitTextUpdate;
      var commitMount = $$$hostConfig.commitMount;
      var commitUpdate = $$$hostConfig.commitUpdate;
      var insertBefore = $$$hostConfig.insertBefore;
      var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;
      var removeChild = $$$hostConfig.removeChild;
      var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;
      var resetTextContent = $$$hostConfig.resetTextContent;
      var hideInstance = $$$hostConfig.hideInstance;
      var hideTextInstance = $$$hostConfig.hideTextInstance;
      var unhideInstance = $$$hostConfig.unhideInstance;
      var unhideTextInstance = $$$hostConfig.unhideTextInstance;
      var updateFundamentalComponent = $$$hostConfig.updateFundamentalComponent;
      var unmountFundamentalComponent = $$$hostConfig.unmountFundamentalComponent;
      var cloneInstance = $$$hostConfig.cloneInstance;
      var createContainerChildSet = $$$hostConfig.createContainerChildSet;
      var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;
      var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;
      var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;
      var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;
      var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;
      var cloneFundamentalInstance = $$$hostConfig.cloneInstance;
      var canHydrateInstance = $$$hostConfig.canHydrateInstance;
      var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;
      var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;
      var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;
      var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;
      var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;
      var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;
      var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;
      var hydrateInstance = $$$hostConfig.hydrateInstance;
      var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;
      var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;
      var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;
      var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;
      var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;
      var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;
      var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;
      var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;
      var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;
      var didNotHydrateContainerInstance = $$$hostConfig.didNotHydrateContainerInstance;
      var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;
      var didNotFindHydratableContainerInstance = $$$hostConfig.didNotFindHydratableContainerInstance;
      var didNotFindHydratableContainerTextInstance = $$$hostConfig.didNotFindHydratableContainerTextInstance;
      var didNotFindHydratableContainerSuspenseInstance = $$$hostConfig.didNotFindHydratableContainerSuspenseInstance;
      var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;
      var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;
      var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;
      var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
      var describeComponentFrame = function(name, source, ownerName) {
        var sourceInfo = "";
        if (source) {
          var path2 = source.fileName;
          var fileName = path2.replace(BEFORE_SLASH_RE, "");
          {
            if (/^index\./.test(fileName)) {
              var match = path2.match(BEFORE_SLASH_RE);
              if (match) {
                var pathBeforeSlash = match[1];
                if (pathBeforeSlash) {
                  var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                  fileName = folderName + "/" + fileName;
                }
              }
            }
          }
          sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
        } else if (ownerName) {
          sourceInfo = " (created by " + ownerName + ")";
        }
        return "\n    in " + (name || "Unknown") + sourceInfo;
      };
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function describeFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostPortal:
          case HostText:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
            return "";
          default:
            var owner = fiber._debugOwner;
            var source = fiber._debugSource;
            var name = getComponentName(fiber.type);
            var ownerName = null;
            if (owner) {
              ownerName = getComponentName(owner.type);
            }
            return describeComponentFrame(name, source, ownerName);
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        var info = "";
        var node = workInProgress2;
        do {
          info += describeFiber(node);
          node = node.return;
        } while (node);
        return info;
      }
      var current = null;
      var phase = null;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner.type);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
        return "";
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          phase = null;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
          current = fiber;
          phase = null;
        }
      }
      function setCurrentPhase(lifeCyclePhase) {
        {
          phase = lifeCyclePhase;
        }
      }
      var reactEmoji = "\u269B";
      var warningEmoji = "\u26D4";
      var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
      var currentFiber = null;
      var currentPhase = null;
      var currentPhaseFiber = null;
      var isCommitting = false;
      var hasScheduledUpdateInCurrentCommit = false;
      var hasScheduledUpdateInCurrentPhase = false;
      var commitCountInCurrentWorkLoop = 0;
      var effectCountInCurrentCommit = 0;
      var labelsInCurrentCommit = new Set();
      var formatMarkName = function(markName) {
        return reactEmoji + " " + markName;
      };
      var formatLabel = function(label, warning2) {
        var prefix = warning2 ? warningEmoji + " " : reactEmoji + " ";
        var suffix = warning2 ? " Warning: " + warning2 : "";
        return "" + prefix + label + suffix;
      };
      var beginMark = function(markName) {
        performance.mark(formatMarkName(markName));
      };
      var clearMark = function(markName) {
        performance.clearMarks(formatMarkName(markName));
      };
      var endMark = function(label, markName, warning2) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning2);
        try {
          performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {
        }
        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
      };
      var getFiberMarkName = function(label, debugID) {
        return label + " (#" + debugID + ")";
      };
      var getFiberLabel = function(componentName, isMounted2, phase2) {
        if (phase2 === null) {
          return componentName + " [" + (isMounted2 ? "update" : "mount") + "]";
        } else {
          return componentName + "." + phase2;
        }
      };
      var beginFiberMark = function(fiber, phase2) {
        var componentName = getComponentName(fiber.type) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted2 = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted2, phase2);
        if (isCommitting && labelsInCurrentCommit.has(label)) {
          return false;
        }
        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
      };
      var clearFiberMark = function(fiber, phase2) {
        var componentName = getComponentName(fiber.type) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted2 = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted2, phase2);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
      };
      var endFiberMark = function(fiber, phase2, warning2) {
        var componentName = getComponentName(fiber.type) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted2 = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted2, phase2);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning2);
      };
      var shouldIgnoreFiber = function(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
          case Mode:
            return true;
          default:
            return false;
        }
      };
      var clearPendingPhaseMeasurement = function() {
        if (currentPhase !== null && currentPhaseFiber !== null) {
          clearFiberMark(currentPhaseFiber, currentPhase);
        }
        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
      };
      var pauseTimers = function() {
        var fiber = currentFiber;
        while (fiber) {
          if (fiber._debugIsCurrentlyTiming) {
            endFiberMark(fiber, null, null);
          }
          fiber = fiber.return;
        }
      };
      var resumeTimersRecursively = function(fiber) {
        if (fiber.return !== null) {
          resumeTimersRecursively(fiber.return);
        }
        if (fiber._debugIsCurrentlyTiming) {
          beginFiberMark(fiber, null);
        }
      };
      var resumeTimers = function() {
        if (currentFiber !== null) {
          resumeTimersRecursively(currentFiber);
        }
      };
      function recordEffect() {
        if (enableUserTimingAPI) {
          effectCountInCurrentCommit++;
        }
      }
      function recordScheduleUpdate() {
        if (enableUserTimingAPI) {
          if (isCommitting) {
            hasScheduledUpdateInCurrentCommit = true;
          }
          if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
            hasScheduledUpdateInCurrentPhase = true;
          }
        }
      }
      function startWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          currentFiber = fiber;
          if (!beginFiberMark(fiber, null)) {
            return;
          }
          fiber._debugIsCurrentlyTiming = true;
        }
      }
      function cancelWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          fiber._debugIsCurrentlyTiming = false;
          clearFiberMark(fiber, null);
        }
      }
      function stopWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          currentFiber = fiber.return;
          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }
          fiber._debugIsCurrentlyTiming = false;
          endFiberMark(fiber, null, null);
        }
      }
      function stopFailedWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          currentFiber = fiber.return;
          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }
          fiber._debugIsCurrentlyTiming = false;
          var warning2 = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
          endFiberMark(fiber, null, warning2);
        }
      }
      function startPhaseTimer(fiber, phase2) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          clearPendingPhaseMeasurement();
          if (!beginFiberMark(fiber, phase2)) {
            return;
          }
          currentPhaseFiber = fiber;
          currentPhase = phase2;
        }
      }
      function stopPhaseTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning2 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning2);
          }
          currentPhase = null;
          currentPhaseFiber = null;
        }
      }
      function startWorkLoopTimer(nextUnitOfWork) {
        if (enableUserTimingAPI) {
          currentFiber = nextUnitOfWork;
          if (!supportsUserTiming) {
            return;
          }
          commitCountInCurrentWorkLoop = 0;
          beginMark("(React Tree Reconciliation)");
          resumeTimers();
        }
      }
      function stopWorkLoopTimer(interruptedBy2, didCompleteRoot) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          var warning2 = null;
          if (interruptedBy2 !== null) {
            if (interruptedBy2.tag === HostRoot) {
              warning2 = "A top-level update interrupted the previous render";
            } else {
              var componentName = getComponentName(interruptedBy2.type) || "Unknown";
              warning2 = "An update to " + componentName + " interrupted the previous render";
            }
          } else if (commitCountInCurrentWorkLoop > 1) {
            warning2 = "There were cascading updates";
          }
          commitCountInCurrentWorkLoop = 0;
          var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
          pauseTimers();
          endMark(label, "(React Tree Reconciliation)", warning2);
        }
      }
      function startCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          isCommitting = true;
          hasScheduledUpdateInCurrentCommit = false;
          labelsInCurrentCommit.clear();
          beginMark("(Committing Changes)");
        }
      }
      function stopCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          var warning2 = null;
          if (hasScheduledUpdateInCurrentCommit) {
            warning2 = "Lifecycle hook scheduled a cascading update";
          } else if (commitCountInCurrentWorkLoop > 0) {
            warning2 = "Caused by a cascading update in earlier commit";
          }
          hasScheduledUpdateInCurrentCommit = false;
          commitCountInCurrentWorkLoop++;
          isCommitting = false;
          labelsInCurrentCommit.clear();
          endMark("(Committing Changes)", "(Committing Changes)", warning2);
        }
      }
      function startCommitSnapshotEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          effectCountInCurrentCommit = 0;
          beginMark("(Committing Snapshot Effects)");
        }
      }
      function stopCommitSnapshotEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
        }
      }
      function startCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          effectCountInCurrentCommit = 0;
          beginMark("(Committing Host Effects)");
        }
      }
      function stopCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
        }
      }
      function startCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          effectCountInCurrentCommit = 0;
          beginMark("(Calling Lifecycle Methods)");
        }
      }
      function stopCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }
          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index < 0) {
          {
            warningWithoutStack$1(false, "Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index]) {
            warningWithoutStack$1(false, "Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }
      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
        if (disableLegacyContext) {
          return emptyContextObject;
        } else {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        if (disableLegacyContext) {
          return;
        } else {
          var instance2 = workInProgress2.stateNode;
          instance2.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance2.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        if (disableLegacyContext) {
          return emptyContextObject;
        } else {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance2 = workInProgress2.stateNode;
          if (instance2 && instance2.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance2.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name, getCurrentFiberStackInDev);
          }
          if (instance2) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        if (disableLegacyContext) {
          return false;
        } else {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        if (disableLegacyContext) {
          return false;
        } else {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== void 0;
        }
      }
      function popContext(fiber) {
        if (disableLegacyContext) {
          return;
        } else {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        if (disableLegacyContext) {
          return;
        } else {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        if (disableLegacyContext) {
          return;
        } else {
          if (!(contextStackCursor.current === emptyContextObject)) {
            {
              throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        if (disableLegacyContext) {
          return parentContext;
        } else {
          var instance2 = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance2.getChildContext !== "function") {
            {
              var componentName = getComponentName(type) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                warningWithoutStack$1(false, "%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext;
          {
            setCurrentPhase("getChildContext");
          }
          startPhaseTimer(fiber, "getChildContext");
          childContext = instance2.getChildContext();
          stopPhaseTimer();
          {
            setCurrentPhase(null);
          }
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              {
                throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
          }
          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name, getCurrentFiberStackInDev);
          }
          return _assign({}, parentContext, {}, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        if (disableLegacyContext) {
          return false;
        } else {
          var instance2 = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance2 && instance2.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        if (disableLegacyContext) {
          return;
        } else {
          var instance2 = workInProgress2.stateNode;
          if (!instance2) {
            {
              throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance2.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress2);
            pop(contextStackCursor, workInProgress2);
            push(contextStackCursor, mergedContext, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop(didPerformWorkStackCursor, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        if (disableLegacyContext) {
          return emptyContextObject;
        } else {
          if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
            {
              throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component = node.type;
                if (isContextProvider(Component)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          {
            {
              throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
      }
      var BlockingRoot = 1;
      var ConcurrentRoot = 2;
      var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority;
      var Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback;
      var Scheduler_cancelCallback = Scheduler.unstable_cancelCallback;
      var Scheduler_shouldYield = Scheduler.unstable_shouldYield;
      var Scheduler_requestPaint = Scheduler.unstable_requestPaint;
      var Scheduler_now = Scheduler.unstable_now;
      var Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
      var Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority;
      var Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var Scheduler_NormalPriority = Scheduler.unstable_NormalPriority;
      var Scheduler_LowPriority = Scheduler.unstable_LowPriority;
      var Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
      if (enableSchedulerTracing) {
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
          {
            throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
          }
        }
      }
      var fakeCallbackNode = {};
      var ImmediatePriority = 99;
      var UserBlockingPriority = 98;
      var NormalPriority = 97;
      var LowPriority = 96;
      var IdlePriority = 95;
      var NoPriority = 90;
      var shouldYield = Scheduler_shouldYield;
      var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
      };
      var syncQueue = null;
      var immediateQueueCallbackNode = null;
      var isFlushingSyncQueue = false;
      var initialTimeMs = Scheduler_now();
      var now$1 = initialTimeMs < 1e4 ? Scheduler_now : function() {
        return Scheduler_now() - initialTimeMs;
      };
      function getCurrentPriorityLevel() {
        switch (Scheduler_getCurrentPriorityLevel()) {
          case Scheduler_ImmediatePriority:
            return ImmediatePriority;
          case Scheduler_UserBlockingPriority:
            return UserBlockingPriority;
          case Scheduler_NormalPriority:
            return NormalPriority;
          case Scheduler_LowPriority:
            return LowPriority;
          case Scheduler_IdlePriority:
            return IdlePriority;
          default: {
            {
              throw Error("Unknown priority level.");
            }
          }
        }
      }
      function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch (reactPriorityLevel) {
          case ImmediatePriority:
            return Scheduler_ImmediatePriority;
          case UserBlockingPriority:
            return Scheduler_UserBlockingPriority;
          case NormalPriority:
            return Scheduler_NormalPriority;
          case LowPriority:
            return Scheduler_LowPriority;
          case IdlePriority:
            return Scheduler_IdlePriority;
          default: {
            {
              throw Error("Unknown priority level.");
            }
          }
        }
      }
      function runWithPriority(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
      }
      function scheduleCallback(reactPriorityLevel, callback, options) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options);
      }
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
          immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else {
          syncQueue.push(callback);
        }
        return fakeCallbackNode;
      }
      function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) {
          Scheduler_cancelCallback(callbackNode);
        }
      }
      function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
          var node = immediateQueueCallbackNode;
          immediateQueueCallbackNode = null;
          Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
      }
      function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0;
          try {
            var _isSync = true;
            var queue = syncQueue;
            runWithPriority(ImmediatePriority, function() {
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(_isSync);
                } while (callback !== null);
              }
            });
            syncQueue = null;
          } catch (error) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i + 1);
            }
            Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
            throw error;
          } finally {
            isFlushingSyncQueue = false;
          }
        }
      }
      var NoMode = 0;
      var StrictMode = 1;
      var BlockingMode = 2;
      var ConcurrentMode = 4;
      var ProfileMode = 8;
      var MAX_SIGNED_31_BIT_INT = 1073741823;
      var NoWork = 0;
      var Never = 1;
      var Idle = 2;
      var ContinuousHydration = 3;
      var Sync = MAX_SIGNED_31_BIT_INT;
      var Batched = Sync - 1;
      var UNIT_SIZE = 10;
      var MAGIC_NUMBER_OFFSET = Batched - 1;
      function msToExpirationTime(ms) {
        return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
      }
      function expirationTimeToMs(expirationTime) {
        return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
      }
      function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
      }
      function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
      }
      var LOW_PRIORITY_EXPIRATION = 5e3;
      var LOW_PRIORITY_BATCH_SIZE = 250;
      function computeAsyncExpiration(currentTime) {
        return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
      }
      function computeSuspenseExpiration(currentTime, timeoutMs) {
        return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
      }
      var HIGH_PRIORITY_EXPIRATION = 500;
      var HIGH_PRIORITY_BATCH_SIZE = 100;
      function computeInteractiveExpiration(currentTime) {
        return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
      }
      function computeContinuousHydrationExpiration(currentTime) {
        return ContinuousHydration++;
      }
      function inferPriorityFromExpirationTime(currentTime, expirationTime) {
        if (expirationTime === Sync) {
          return ImmediatePriority;
        }
        if (expirationTime === Never || expirationTime === Idle) {
          return IdlePriority;
        }
        var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
        if (msUntil <= 0) {
          return ImmediatePriority;
        }
        if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
          return UserBlockingPriority;
        }
        if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
          return NormalPriority;
        }
        return IdlePriority;
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var is$1 = typeof Object.is === "function" ? Object.is : is;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      function shallowEqual(objA, objB) {
        if (is$1(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i = 0; i < keysA.length; i++) {
          if (!hasOwnProperty2.call(objB, keysA[i]) || !is$1(objA[keysA[i]], objB[keysA[i]])) {
            return false;
          }
        }
        return true;
      }
      var lowPriorityWarningWithoutStack = function() {
      };
      {
        var printWarning = function(format) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var argIndex = 0;
          var message = "Warning: " + format.replace(/%s/g, function() {
            return args[argIndex++];
          });
          if (typeof console !== "undefined") {
            console.warn(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
        lowPriorityWarningWithoutStack = function(condition, format) {
          if (format === void 0) {
            throw new Error("`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning message argument");
          }
          if (!condition) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }
            printWarning.apply(void 0, [format].concat(args));
          }
        };
      }
      var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance2) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance2) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;
          while (node !== null) {
            if (node.mode & StrictMode) {
              maybeStrictRoot = node;
            }
            node = node.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set2) {
          var array = [];
          set2.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance2) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance2.componentWillMount === "function" && instance2.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance2.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance2.componentWillReceiveProps === "function" && instance2.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance2.componentWillUpdate === "function" && instance2.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance2.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = new Set();
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = new Set();
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = new Set();
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            warningWithoutStack$1(false, "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            warningWithoutStack$1(false, "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s", _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            warningWithoutStack$1(false, "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            lowPriorityWarningWithoutStack$1(false, "componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            lowPriorityWarningWithoutStack$1(false, "componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            lowPriorityWarningWithoutStack$1(false, "componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = new Map();
        var didWarnAboutLegacyContext = new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance2) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            warningWithoutStack$1(false, "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance2 !== null && typeof instance2.getChildContext === "function") {
            if (warningsForRoot === void 0) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
            warningWithoutStack$1(false, "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s", sortedNames, strictRootComponentStack);
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map();
        };
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            if (type !== null && type !== void 0 && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                if (type.displayName !== void 0) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet();
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
          flushPassiveEffects();
          flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root, element) {
        {
          if (root.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          syncUpdates(function() {
            updateContainer(element, root, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
            default:
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== void 0) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            scheduleWork(fiber, Sync);
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root, families) {
        {
          var hostInstances = new Set();
          var types = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
            default:
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node = fiber;
          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === fiber) {
              return foundHostInstances;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = _assign({}, baseProps);
          var defaultProps = Component.defaultProps;
          for (var propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      function readLazyComponentType(lazyComponent) {
        initializeLazyComponentType(lazyComponent);
        if (lazyComponent._status !== Resolved) {
          throw lazyComponent._result;
        }
        return lazyComponent._result;
      }
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastContextWithAllBitsObserved = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        if (isPrimaryRenderer) {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            !(context._currentRenderer === void 0 || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.") : void 0;
            context._currentRenderer = rendererSigil;
          }
        } else {
          push(valueCursor, context._currentValue2, providerFiber);
          context._currentValue2 = nextValue;
          {
            !(context._currentRenderer2 === void 0 || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.") : void 0;
            context._currentRenderer2 = rendererSigil;
          }
        }
      }
      function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        if (isPrimaryRenderer) {
          context._currentValue = currentValue;
        } else {
          context._currentValue2 = currentValue;
        }
      }
      function calculateChangedBits(context, newValue, oldValue) {
        if (is$1(oldValue, newValue)) {
          return 0;
        } else {
          var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          {
            !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits) ? warning$1(false, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits) : void 0;
          }
          return changedBits | 0;
        }
      }
      function scheduleWorkOnParentPath(parent, renderExpirationTime2) {
        var node = parent;
        while (node !== null) {
          var alternate = node.alternate;
          if (node.childExpirationTime < renderExpirationTime2) {
            node.childExpirationTime = renderExpirationTime2;
            if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
              alternate.childExpirationTime = renderExpirationTime2;
            }
          } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
            alternate.childExpirationTime = renderExpirationTime2;
          } else {
            break;
          }
          node = node.return;
        }
      }
      function propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = void 0;
          var list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;
            while (dependency !== null) {
              if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                if (fiber.tag === ClassComponent) {
                  var update = createUpdate(renderExpirationTime2, null);
                  update.tag = ForceUpdate;
                  enqueueUpdate(fiber, update);
                }
                if (fiber.expirationTime < renderExpirationTime2) {
                  fiber.expirationTime = renderExpirationTime2;
                }
                var alternate = fiber.alternate;
                if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
                  alternate.expirationTime = renderExpirationTime2;
                }
                scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
                if (list.expirationTime < renderExpirationTime2) {
                  list.expirationTime = renderExpirationTime2;
                }
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (!(parentSuspense !== null)) {
              {
                throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
            }
            if (parentSuspense.expirationTime < renderExpirationTime2) {
              parentSuspense.expirationTime = renderExpirationTime2;
            }
            var _alternate = parentSuspense.alternate;
            if (_alternate !== null && _alternate.expirationTime < renderExpirationTime2) {
              _alternate.expirationTime = renderExpirationTime2;
            }
            scheduleWorkOnParentPath(parentSuspense, renderExpirationTime2);
            nextFiber = fiber.sibling;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderExpirationTime2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;
          if (firstContext !== null) {
            if (dependencies.expirationTime >= renderExpirationTime2) {
              markWorkInProgressReceivedUpdate();
            }
            dependencies.firstContext = null;
          }
        }
      }
      function readContext(context, observedBits) {
        {
          !!isDisallowedContextReadInDEV ? warning$1(false, "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().") : void 0;
        }
        if (lastContextWithAllBitsObserved === context) {
        } else if (observedBits === false || observedBits === 0) {
        } else {
          var resolvedObservedBits;
          if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
            lastContextWithAllBitsObserved = context;
            resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
          } else {
            resolvedObservedBits = observedBits;
          }
          var contextItem = {
            context,
            observedBits: resolvedObservedBits,
            next: null
          };
          if (lastContextDependency === null) {
            if (!(currentlyRenderingFiber !== null)) {
              {
                throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              expirationTime: NoWork,
              firstContext: contextItem,
              responders: null
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return isPrimaryRenderer ? context._currentValue : context._currentValue2;
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function createUpdateQueue(baseState) {
        var queue = {
          baseState,
          firstUpdate: null,
          lastUpdate: null,
          firstCapturedUpdate: null,
          lastCapturedUpdate: null,
          firstEffect: null,
          lastEffect: null,
          firstCapturedEffect: null,
          lastCapturedEffect: null
        };
        return queue;
      }
      function cloneUpdateQueue(currentQueue) {
        var queue = {
          baseState: currentQueue.baseState,
          firstUpdate: currentQueue.firstUpdate,
          lastUpdate: currentQueue.lastUpdate,
          firstCapturedUpdate: null,
          lastCapturedUpdate: null,
          firstEffect: null,
          lastEffect: null,
          firstCapturedEffect: null,
          lastCapturedEffect: null
        };
        return queue;
      }
      function createUpdate(expirationTime, suspenseConfig) {
        var update = {
          expirationTime,
          suspenseConfig,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null,
          nextEffect: null
        };
        {
          update.priority = getCurrentPriorityLevel();
        }
        return update;
      }
      function appendUpdateToQueue(queue, update) {
        if (queue.lastUpdate === null) {
          queue.firstUpdate = queue.lastUpdate = update;
        } else {
          queue.lastUpdate.next = update;
          queue.lastUpdate = update;
        }
      }
      function enqueueUpdate(fiber, update) {
        var alternate = fiber.alternate;
        var queue1;
        var queue2;
        if (alternate === null) {
          queue1 = fiber.updateQueue;
          queue2 = null;
          if (queue1 === null) {
            queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
          }
        } else {
          queue1 = fiber.updateQueue;
          queue2 = alternate.updateQueue;
          if (queue1 === null) {
            if (queue2 === null) {
              queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
              queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
            } else {
              queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
            }
          } else {
            if (queue2 === null) {
              queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
            } else {
            }
          }
        }
        if (queue2 === null || queue1 === queue2) {
          appendUpdateToQueue(queue1, update);
        } else {
          if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
            appendUpdateToQueue(queue1, update);
            appendUpdateToQueue(queue2, update);
          } else {
            appendUpdateToQueue(queue1, update);
            queue2.lastUpdate = update;
          }
        }
        {
          if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
            warningWithoutStack$1(false, "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
      }
      function enqueueCapturedUpdate(workInProgress2, update) {
        var workInProgressQueue = workInProgress2.updateQueue;
        if (workInProgressQueue === null) {
          workInProgressQueue = workInProgress2.updateQueue = createUpdateQueue(workInProgress2.memoizedState);
        } else {
          workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress2, workInProgressQueue);
        }
        if (workInProgressQueue.lastCapturedUpdate === null) {
          workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
        } else {
          workInProgressQueue.lastCapturedUpdate.next = update;
          workInProgressQueue.lastCapturedUpdate = update;
        }
      }
      function ensureWorkInProgressQueueIsAClone(workInProgress2, queue) {
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          if (queue === current2.updateQueue) {
            queue = workInProgress2.updateQueue = cloneUpdateQueue(queue);
          }
        }
        return queue;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance2) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
                if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
                  payload.call(instance2, prevState, nextProps);
                }
              }
              var nextState = payload.call(instance2, prevState, nextProps);
              {
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.effectTag = workInProgress2.effectTag & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
                if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
                  _payload.call(instance2, prevState, nextProps);
                }
              }
              partialState = _payload.call(instance2, prevState, nextProps);
              {
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === void 0) {
              return prevState;
            }
            return _assign({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, queue, props, instance2, renderExpirationTime2) {
        hasForceUpdate = false;
        queue = ensureWorkInProgressQueueIsAClone(workInProgress2, queue);
        {
          currentlyProcessingQueue = queue;
        }
        var newBaseState = queue.baseState;
        var newFirstUpdate = null;
        var newExpirationTime = NoWork;
        var update = queue.firstUpdate;
        var resultState = newBaseState;
        while (update !== null) {
          var updateExpirationTime = update.expirationTime;
          if (updateExpirationTime < renderExpirationTime2) {
            if (newFirstUpdate === null) {
              newFirstUpdate = update;
              newBaseState = resultState;
            }
            if (newExpirationTime < updateExpirationTime) {
              newExpirationTime = updateExpirationTime;
            }
          } else {
            markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
            resultState = getStateFromUpdate(workInProgress2, queue, update, resultState, props, instance2);
            var callback = update.callback;
            if (callback !== null) {
              workInProgress2.effectTag |= Callback;
              update.nextEffect = null;
              if (queue.lastEffect === null) {
                queue.firstEffect = queue.lastEffect = update;
              } else {
                queue.lastEffect.nextEffect = update;
                queue.lastEffect = update;
              }
            }
          }
          update = update.next;
        }
        var newFirstCapturedUpdate = null;
        update = queue.firstCapturedUpdate;
        while (update !== null) {
          var _updateExpirationTime = update.expirationTime;
          if (_updateExpirationTime < renderExpirationTime2) {
            if (newFirstCapturedUpdate === null) {
              newFirstCapturedUpdate = update;
              if (newFirstUpdate === null) {
                newBaseState = resultState;
              }
            }
            if (newExpirationTime < _updateExpirationTime) {
              newExpirationTime = _updateExpirationTime;
            }
          } else {
            resultState = getStateFromUpdate(workInProgress2, queue, update, resultState, props, instance2);
            var _callback = update.callback;
            if (_callback !== null) {
              workInProgress2.effectTag |= Callback;
              update.nextEffect = null;
              if (queue.lastCapturedEffect === null) {
                queue.firstCapturedEffect = queue.lastCapturedEffect = update;
              } else {
                queue.lastCapturedEffect.nextEffect = update;
                queue.lastCapturedEffect = update;
              }
            }
          }
          update = update.next;
        }
        if (newFirstUpdate === null) {
          queue.lastUpdate = null;
        }
        if (newFirstCapturedUpdate === null) {
          queue.lastCapturedUpdate = null;
        } else {
          workInProgress2.effectTag |= Callback;
        }
        if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
          newBaseState = resultState;
        }
        queue.baseState = newBaseState;
        queue.firstUpdate = newFirstUpdate;
        queue.firstCapturedUpdate = newFirstCapturedUpdate;
        markUnprocessedUpdateTime(newExpirationTime);
        workInProgress2.expirationTime = newExpirationTime;
        workInProgress2.memoizedState = resultState;
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        if (!(typeof callback === "function")) {
          {
            throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
          }
        }
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance2, renderExpirationTime2) {
        if (finishedQueue.firstCapturedUpdate !== null) {
          if (finishedQueue.lastUpdate !== null) {
            finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
            finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
          }
          finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
        }
        commitUpdateEffects(finishedQueue.firstEffect, instance2);
        finishedQueue.firstEffect = finishedQueue.lastEffect = null;
        commitUpdateEffects(finishedQueue.firstCapturedEffect, instance2);
        finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
      }
      function commitUpdateEffects(effect, instance2) {
        while (effect !== null) {
          var callback = effect.callback;
          if (callback !== null) {
            effect.callback = null;
            callCallback(callback, instance2);
          }
          effect = effect.nextEffect;
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      function requestCurrentSuspenseConfig() {
        return ReactCurrentBatchConfig.suspense;
      }
      var fakeInternalInstance = {};
      var isArray$1 = Array.isArray;
      var emptyRefsObject = new React2.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        didWarnAboutDirectlyAssigningPropsToState = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutContextTypeAndContextTypes = new Set();
        didWarnAboutInvalidateContextType = new Set();
        var didWarnOnInvalidCallback = new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            warningWithoutStack$1(false, "%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        };
        warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentName(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              warningWithoutStack$1(false, "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            {
              {
                throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            }
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        {
          if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
            getDerivedStateFromProps(nextProps, prevState);
          }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        var updateQueue = workInProgress2.updateQueue;
        if (updateQueue !== null && workInProgress2.expirationTime === NoWork) {
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.tag = ForceUpdate;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance2 = workInProgress2.stateNode;
        if (typeof instance2.shouldComponentUpdate === "function") {
          startPhaseTimer(workInProgress2, "shouldComponentUpdate");
          var shouldUpdate = instance2.shouldComponentUpdate(newProps, newState, nextContext);
          stopPhaseTimer();
          {
            !(shouldUpdate !== void 0) ? warningWithoutStack$1(false, "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component") : void 0;
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance2 = workInProgress2.stateNode;
        {
          var name = getComponentName(ctor) || "Component";
          var renderPresent = instance2.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              warningWithoutStack$1(false, "%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            } else {
              warningWithoutStack$1(false, "%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
            }
          }
          var noGetInitialStateOnES6 = !instance2.getInitialState || instance2.getInitialState.isReactClassApproved || instance2.state;
          !noGetInitialStateOnES6 ? warningWithoutStack$1(false, "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name) : void 0;
          var noGetDefaultPropsOnES6 = !instance2.getDefaultProps || instance2.getDefaultProps.isReactClassApproved;
          !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name) : void 0;
          var noInstancePropTypes = !instance2.propTypes;
          !noInstancePropTypes ? warningWithoutStack$1(false, "propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name) : void 0;
          var noInstanceContextType = !instance2.contextType;
          !noInstanceContextType ? warningWithoutStack$1(false, "contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name) : void 0;
          if (disableLegacyContext) {
            if (ctor.childContextTypes) {
              warningWithoutStack$1(false, "%s uses the legacy childContextTypes API which is no longer supported. Use React.createContext() instead.", name);
            }
            if (ctor.contextTypes) {
              warningWithoutStack$1(false, "%s uses the legacy contextTypes API which is no longer supported. Use React.createContext() with static contextType instead.", name);
            }
          } else {
            var noInstanceContextTypes = !instance2.contextTypes;
            !noInstanceContextTypes ? warningWithoutStack$1(false, "contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name) : void 0;
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              warningWithoutStack$1(false, "%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
            }
          }
          var noComponentShouldUpdate = typeof instance2.componentShouldUpdate !== "function";
          !noComponentShouldUpdate ? warningWithoutStack$1(false, "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name) : void 0;
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance2.shouldComponentUpdate !== "undefined") {
            warningWithoutStack$1(false, "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
          }
          var noComponentDidUnmount = typeof instance2.componentDidUnmount !== "function";
          !noComponentDidUnmount ? warningWithoutStack$1(false, "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name) : void 0;
          var noComponentDidReceiveProps = typeof instance2.componentDidReceiveProps !== "function";
          !noComponentDidReceiveProps ? warningWithoutStack$1(false, "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name) : void 0;
          var noComponentWillRecieveProps = typeof instance2.componentWillRecieveProps !== "function";
          !noComponentWillRecieveProps ? warningWithoutStack$1(false, "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name) : void 0;
          var noUnsafeComponentWillRecieveProps = typeof instance2.UNSAFE_componentWillRecieveProps !== "function";
          !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name) : void 0;
          var hasMutatedProps = instance2.props !== newProps;
          !(instance2.props === void 0 || !hasMutatedProps) ? warningWithoutStack$1(false, "%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name) : void 0;
          var noInstanceDefaultProps = !instance2.defaultProps;
          !noInstanceDefaultProps ? warningWithoutStack$1(false, "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name) : void 0;
          if (typeof instance2.getSnapshotBeforeUpdate === "function" && typeof instance2.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            warningWithoutStack$1(false, "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
          }
          var noInstanceGetDerivedStateFromProps = typeof instance2.getDerivedStateFromProps !== "function";
          !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name) : void 0;
          var noInstanceGetDerivedStateFromCatch = typeof instance2.getDerivedStateFromError !== "function";
          !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name) : void 0;
          var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== "function";
          !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name) : void 0;
          var _state = instance2.state;
          if (_state && (typeof _state !== "object" || isArray$1(_state))) {
            warningWithoutStack$1(false, "%s.state: must be set to an object or null", name);
          }
          if (typeof instance2.getChildContext === "function") {
            !(typeof ctor.childContextTypes === "object") ? warningWithoutStack$1(false, "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name) : void 0;
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance2) {
        instance2.updater = classComponentUpdater;
        workInProgress2.stateNode = instance2;
        set(instance2, workInProgress2);
        {
          instance2._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props, renderExpirationTime2) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === void 0) {
                addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== void 0) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              warningWithoutStack$1(false, "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context = readContext(contextType);
        } else if (!disableLegacyContext) {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        {
          if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
            new ctor(props, context);
          }
        }
        var instance2 = new ctor(props, context);
        var state = workInProgress2.memoizedState = instance2.state !== null && instance2.state !== void 0 ? instance2.state : null;
        adoptClassInstance(workInProgress2, instance2);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentName(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              warningWithoutStack$1(false, "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance2.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance2.componentWillMount === "function" && instance2.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance2.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance2.componentWillReceiveProps === "function" && instance2.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance2.componentWillUpdate === "function" && instance2.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance2.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentName(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                warningWithoutStack$1(false, "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return instance2;
      }
      function callComponentWillMount(workInProgress2, instance2) {
        startPhaseTimer(workInProgress2, "componentWillMount");
        var oldState = instance2.state;
        if (typeof instance2.componentWillMount === "function") {
          instance2.componentWillMount();
        }
        if (typeof instance2.UNSAFE_componentWillMount === "function") {
          instance2.UNSAFE_componentWillMount();
        }
        stopPhaseTimer();
        if (oldState !== instance2.state) {
          {
            warningWithoutStack$1(false, "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance2, instance2.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext) {
        var oldState = instance2.state;
        startPhaseTimer(workInProgress2, "componentWillReceiveProps");
        if (typeof instance2.componentWillReceiveProps === "function") {
          instance2.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
          instance2.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        stopPhaseTimer();
        if (instance2.state !== oldState) {
          {
            var componentName = getComponentName(workInProgress2.type) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              warningWithoutStack$1(false, "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance2, instance2.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance2 = workInProgress2.stateNode;
        instance2.props = newProps;
        instance2.state = workInProgress2.memoizedState;
        instance2.refs = emptyRefsObject;
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance2.context = readContext(contextType);
        } else if (disableLegacyContext) {
          instance2.context = emptyContextObject;
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance2.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance2.state === newProps) {
            var componentName = getComponentName(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              warningWithoutStack$1(false, "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance2);
          }
          if (warnAboutDeprecatedLifecycles) {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance2);
          }
        }
        var updateQueue = workInProgress2.updateQueue;
        if (updateQueue !== null) {
          processUpdateQueue(workInProgress2, updateQueue, newProps, instance2, renderExpirationTime2);
          instance2.state = workInProgress2.memoizedState;
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance2.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance2.getSnapshotBeforeUpdate !== "function" && (typeof instance2.UNSAFE_componentWillMount === "function" || typeof instance2.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance2);
          updateQueue = workInProgress2.updateQueue;
          if (updateQueue !== null) {
            processUpdateQueue(workInProgress2, updateQueue, newProps, instance2, renderExpirationTime2);
            instance2.state = workInProgress2.memoizedState;
          }
        }
        if (typeof instance2.componentDidMount === "function") {
          workInProgress2.effectTag |= Update;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
        var instance2 = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance2.props = oldProps;
        var oldContext = instance2.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else if (!disableLegacyContext) {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillReceiveProps === "function" || typeof instance2.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance2.state = oldState;
        var updateQueue = workInProgress2.updateQueue;
        if (updateQueue !== null) {
          processUpdateQueue(workInProgress2, updateQueue, newProps, instance2, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
        }
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance2.componentDidMount === "function") {
            workInProgress2.effectTag |= Update;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillMount === "function" || typeof instance2.componentWillMount === "function")) {
            startPhaseTimer(workInProgress2, "componentWillMount");
            if (typeof instance2.componentWillMount === "function") {
              instance2.componentWillMount();
            }
            if (typeof instance2.UNSAFE_componentWillMount === "function") {
              instance2.UNSAFE_componentWillMount();
            }
            stopPhaseTimer();
          }
          if (typeof instance2.componentDidMount === "function") {
            workInProgress2.effectTag |= Update;
          }
        } else {
          if (typeof instance2.componentDidMount === "function") {
            workInProgress2.effectTag |= Update;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance2.props = newProps;
        instance2.state = newState;
        instance2.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderExpirationTime2) {
        var instance2 = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance2.props = workInProgress2.type === workInProgress2.elementType ? oldProps : resolveDefaultProps(workInProgress2.type, oldProps);
        var oldContext = instance2.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else if (!disableLegacyContext) {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillReceiveProps === "function" || typeof instance2.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance2.state = oldState;
        var updateQueue = workInProgress2.updateQueue;
        if (updateQueue !== null) {
          processUpdateQueue(workInProgress2, updateQueue, newProps, instance2, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
        }
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance2.componentDidUpdate === "function") {
            if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.effectTag |= Update;
            }
          }
          if (typeof instance2.getSnapshotBeforeUpdate === "function") {
            if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.effectTag |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillUpdate === "function" || typeof instance2.componentWillUpdate === "function")) {
            startPhaseTimer(workInProgress2, "componentWillUpdate");
            if (typeof instance2.componentWillUpdate === "function") {
              instance2.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance2.UNSAFE_componentWillUpdate === "function") {
              instance2.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            stopPhaseTimer();
          }
          if (typeof instance2.componentDidUpdate === "function") {
            workInProgress2.effectTag |= Update;
          }
          if (typeof instance2.getSnapshotBeforeUpdate === "function") {
            workInProgress2.effectTag |= Snapshot;
          }
        } else {
          if (typeof instance2.componentDidUpdate === "function") {
            if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.effectTag |= Update;
            }
          }
          if (typeof instance2.getSnapshotBeforeUpdate === "function") {
            if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.effectTag |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance2.props = newProps;
        instance2.state = newState;
        instance2.context = nextContext;
        return shouldUpdate;
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child) {
      };
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child) {
          if (child === null || typeof child !== "object") {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          if (!(typeof child._store === "object")) {
            {
              throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          child._store.validated = true;
          var currentComponentErrorInfo = 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.' + getCurrentFiberStackInDev();
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          warning$1(false, 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.');
        };
      }
      var isArray = Array.isArray;
      function coerceRef(returnFiber, current$$1, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if (returnFiber.mode & StrictMode || warnAboutStringRefs) {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                if (warnAboutStringRefs) {
                  warningWithoutStack$1(false, 'Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', componentName, mixedRef, getStackByFiberInDevAndProd(returnFiber));
                } else {
                  warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (!(ownerFiber.tag === ClassComponent)) {
                {
                  throw Error("Function components cannot have refs. Did you mean to use React.forwardRef()?");
                }
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              {
                throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stringRef = "" + mixedRef;
            if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === "function" && current$$1.ref._stringRef === stringRef) {
              return current$$1.ref;
            }
            var ref = function(value) {
              var refs = inst.refs;
              if (refs === emptyRefsObject) {
                refs = inst.refs = {};
              }
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (!(typeof mixedRef === "string")) {
              {
                throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
            }
            if (!element._owner) {
              {
                throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
              }
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          var addendum = "";
          {
            addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
          }
          {
            {
              throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
            }
          }
        }
      }
      function warnOnFunctionType() {
        var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
        warning$1(false, "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var last = returnFiber.lastEffect;
          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
          childToDelete.nextEffect = null;
          childToDelete.effectTag = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps, expirationTime) {
          var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }
          var current$$1 = newFiber.alternate;
          if (current$$1 !== null) {
            var oldIndex = current$$1.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.effectTag = Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
          if (current$$1 === null || current$$1.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current$$1, textContent, expirationTime);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current$$1, element, expirationTime) {
          if (current$$1 !== null && (current$$1.elementType === element.type || isCompatibleFamilyForHotReloading(current$$1, element))) {
            var existing = useFiber(current$$1, element.props, expirationTime);
            existing.ref = coerceRef(returnFiber, current$$1, element);
            existing.return = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          } else {
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current$$1, element);
            created.return = returnFiber;
            return created;
          }
        }
        function updatePortal(returnFiber, current$$1, portal, expirationTime) {
          if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current$$1, portal.children || [], expirationTime);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current$$1, fragment, expirationTime, key) {
          if (current$$1 === null || current$$1.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current$$1, fragment, expirationTime);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                _created2.return = returnFiber;
                return _created2;
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                  }
                  return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, expirationTime, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                }
                return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, expirationTime, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child);
                var key = child.key;
                if (typeof key !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                warning$1(false, "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                break;
              default:
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
          {
            var knownKeys = null;
            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (!(typeof iteratorFn === "function")) {
            {
              throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              !didWarnAboutGenerators ? warning$1(false, "Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.") : void 0;
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              !didWarnAboutMaps ? warning$1(false, "Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.") : void 0;
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (!(newChildren != null)) {
            {
              throw Error("An iterable object provided no iterator.");
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent, expirationTime);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
          var key = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
                existing.ref = coerceRef(returnFiber, child, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
          var key = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || [], expirationTime);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, expirationTime) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          var isObject = typeof newChild === "object" && newChild !== null;
          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
            }
          }
          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
          }
          if (isArray(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
          }
          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
          }
          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
            switch (returnFiber.tag) {
              case ClassComponent: {
                {
                  var instance2 = returnFiber.stateNode;
                  if (instance2.render._isMockFunction) {
                    break;
                  }
                }
              }
              case FunctionComponent: {
                var Component = returnFiber.type;
                {
                  {
                    throw Error((Component.displayName || Component.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                  }
                }
              }
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current$$1, workInProgress2) {
        if (!(current$$1 === null || workInProgress2.child === current$$1.child)) {
          {
            throw Error("Resuming work not yet implemented.");
          }
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, renderExpirationTime2) {
        var child = workInProgress2.child;
        while (child !== null) {
          resetWorkInProgress(child, renderExpirationTime2);
          child = child.sibling;
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) {
          {
            throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        return c;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type, rootInstance);
        if (context === nextContext) {
          return;
        }
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        var props = workInProgress2.memoizedProps;
        if (props.fallback === void 0) {
          return false;
        }
        if (props.unstable_avoidThisFallback !== true) {
          return true;
        }
        if (hasInvisibleParent) {
          return false;
        }
        return true;
      }
      function findFirstSuspended(row) {
        var node = row;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
            var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) {
            return null;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      var emptyObject = {};
      var isArray$2 = Array.isArray;
      function createResponderInstance(responder, responderProps, responderState, fiber) {
        return {
          fiber,
          props: responderProps,
          responder,
          rootEventTypes: null,
          state: responderState
        };
      }
      function mountEventResponder(responder, responderProps, fiber, respondersMap, rootContainerInstance) {
        var responderState = emptyObject;
        var getInitialState = responder.getInitialState;
        if (getInitialState !== null) {
          responderState = getInitialState(responderProps);
        }
        var responderInstance = createResponderInstance(responder, responderProps, responderState, fiber);
        if (!rootContainerInstance) {
          var node = fiber;
          while (node !== null) {
            var tag = node.tag;
            if (tag === HostComponent) {
              rootContainerInstance = node.stateNode;
              break;
            } else if (tag === HostRoot) {
              rootContainerInstance = node.stateNode.containerInfo;
              break;
            }
            node = node.return;
          }
        }
        mountResponderInstance(responder, responderInstance, responderProps, responderState, rootContainerInstance);
        respondersMap.set(responder, responderInstance);
      }
      function updateEventListener(listener, fiber, visistedResponders, respondersMap, rootContainerInstance) {
        var responder;
        var props;
        if (listener) {
          responder = listener.responder;
          props = listener.props;
        }
        if (!(responder && responder.$$typeof === REACT_RESPONDER_TYPE)) {
          {
            throw Error("An invalid value was used as an event listener. Expect one or many event listeners created via React.unstable_useResponder().");
          }
        }
        var listenerProps = props;
        if (visistedResponders.has(responder)) {
          {
            warning$1(false, 'Duplicate event responder "%s" found in event listeners. Event listeners passed to elements cannot use the same event responder more than once.', responder.displayName);
          }
          return;
        }
        visistedResponders.add(responder);
        var responderInstance = respondersMap.get(responder);
        if (responderInstance === void 0) {
          mountEventResponder(responder, listenerProps, fiber, respondersMap, rootContainerInstance);
        } else {
          responderInstance.props = listenerProps;
          responderInstance.fiber = fiber;
        }
      }
      function updateEventListeners(listeners, fiber, rootContainerInstance) {
        var visistedResponders = new Set();
        var dependencies = fiber.dependencies;
        if (listeners != null) {
          if (dependencies === null) {
            dependencies = fiber.dependencies = {
              expirationTime: NoWork,
              firstContext: null,
              responders: new Map()
            };
          }
          var respondersMap = dependencies.responders;
          if (respondersMap === null) {
            respondersMap = new Map();
          }
          if (isArray$2(listeners)) {
            for (var i = 0, length = listeners.length; i < length; i++) {
              var listener = listeners[i];
              updateEventListener(listener, fiber, visistedResponders, respondersMap, rootContainerInstance);
            }
          } else {
            updateEventListener(listeners, fiber, visistedResponders, respondersMap, rootContainerInstance);
          }
        }
        if (dependencies !== null) {
          var _respondersMap = dependencies.responders;
          if (_respondersMap !== null) {
            var mountedResponders = Array.from(_respondersMap.keys());
            for (var _i = 0, _length = mountedResponders.length; _i < _length; _i++) {
              var mountedResponder = mountedResponders[_i];
              if (!visistedResponders.has(mountedResponder)) {
                var responderInstance = _respondersMap.get(mountedResponder);
                unmountResponderInstance(responderInstance);
                _respondersMap.delete(mountedResponder);
              }
            }
          }
        }
      }
      function createResponderListener(responder, props) {
        var eventResponderListener = {
          responder,
          props
        };
        {
          Object.freeze(eventResponderListener);
        }
        return eventResponderListener;
      }
      var NoEffect$1 = 0;
      var UnmountSnapshot = 2;
      var UnmountMutation = 4;
      var MountMutation = 8;
      var UnmountLayout = 16;
      var MountLayout = 32;
      var MountPassive = 64;
      var UnmountPassive = 128;
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var didWarnAboutMismatchedHooksForComponent;
      {
        didWarnAboutMismatchedHooksForComponent = new Set();
      }
      var renderExpirationTime$1 = NoWork;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var nextCurrentHook = null;
      var firstWorkInProgressHook = null;
      var workInProgressHook = null;
      var nextWorkInProgressHook = null;
      var remainingExpirationTime = NoWork;
      var componentUpdateQueue = null;
      var sideEffectTag = 0;
      var didScheduleRenderPhaseUpdate = false;
      var renderPhaseUpdates = null;
      var numberOfReRenders = 0;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
            warning$1(false, "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentName(currentlyRenderingFiber$1.type);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;
              for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + "\n";
                table += row;
              }
              warning$1(false, "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }
      function throwInvalidHookError() {
        {
          {
            throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            warning$1(false, "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            warning$1(false, "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
          if (is$1(nextDeps[i], prevDeps[i])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component, props, refOrContext, nextRenderExpirationTime) {
        renderExpirationTime$1 = nextRenderExpirationTime;
        currentlyRenderingFiber$1 = workInProgress2;
        nextCurrentHook = current2 !== null ? current2.memoizedState : null;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        {
          if (nextCurrentHook !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component(props, refOrContext);
        if (didScheduleRenderPhaseUpdate) {
          do {
            didScheduleRenderPhaseUpdate = false;
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            nextCurrentHook = current2 !== null ? current2.memoizedState : null;
            nextWorkInProgressHook = firstWorkInProgressHook;
            currentHook = null;
            workInProgressHook = null;
            componentUpdateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            children = Component(props, refOrContext);
          } while (didScheduleRenderPhaseUpdate);
          renderPhaseUpdates = null;
          numberOfReRenders = 0;
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        var renderedWork = currentlyRenderingFiber$1;
        renderedWork.memoizedState = firstWorkInProgressHook;
        renderedWork.expirationTime = remainingExpirationTime;
        renderedWork.updateQueue = componentUpdateQueue;
        renderedWork.effectTag |= sideEffectTag;
        {
          renderedWork._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderExpirationTime$1 = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        nextCurrentHook = null;
        firstWorkInProgressHook = null;
        workInProgressHook = null;
        nextWorkInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
        }
        remainingExpirationTime = NoWork;
        componentUpdateQueue = null;
        sideEffectTag = 0;
        if (!!didRenderTooFewHooks) {
          {
            throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
        }
        return children;
      }
      function bailoutHooks(current2, workInProgress2, expirationTime) {
        workInProgress2.updateQueue = current2.updateQueue;
        workInProgress2.effectTag &= ~(Passive | Update);
        if (current2.expirationTime <= expirationTime) {
          current2.expirationTime = NoWork;
        }
      }
      function resetHooks() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        renderExpirationTime$1 = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        nextCurrentHook = null;
        firstWorkInProgressHook = null;
        workInProgressHook = null;
        nextWorkInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
        }
        remainingExpirationTime = NoWork;
        componentUpdateQueue = null;
        sideEffectTag = 0;
        didScheduleRenderPhaseUpdate = false;
        renderPhaseUpdates = null;
        numberOfReRenders = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          queue: null,
          baseUpdate: null,
          next: null
        };
        if (workInProgressHook === null) {
          firstWorkInProgressHook = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
          nextCurrentHook = currentHook !== null ? currentHook.next : null;
        } else {
          if (!(nextCurrentHook !== null)) {
            {
              throw Error("Rendered more hooks than during the previous render.");
            }
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            queue: currentHook.queue,
            baseUpdate: currentHook.baseUpdate,
            next: null
          };
          if (workInProgressHook === null) {
            workInProgressHook = firstWorkInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
          nextCurrentHook = currentHook.next;
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null
        };
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== void 0) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          last: null,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) {
          {
            throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
        }
        queue.lastRenderedReducer = reducer;
        if (numberOfReRenders > 0) {
          var _dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = hook.memoizedState;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== null);
              if (!is$1(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseUpdate === queue.last) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
              return [newState, _dispatch];
            }
          }
          return [hook.memoizedState, _dispatch];
        }
        var last = queue.last;
        var baseUpdate = hook.baseUpdate;
        var baseState = hook.baseState;
        var first;
        if (baseUpdate !== null) {
          if (last !== null) {
            last.next = null;
          }
          first = baseUpdate.next;
        } else {
          first = last !== null ? last.next : null;
        }
        if (first !== null) {
          var _newState = baseState;
          var newBaseState = null;
          var newBaseUpdate = null;
          var prevUpdate = baseUpdate;
          var _update = first;
          var didSkip = false;
          do {
            var updateExpirationTime = _update.expirationTime;
            if (updateExpirationTime < renderExpirationTime$1) {
              if (!didSkip) {
                didSkip = true;
                newBaseUpdate = prevUpdate;
                newBaseState = _newState;
              }
              if (updateExpirationTime > remainingExpirationTime) {
                remainingExpirationTime = updateExpirationTime;
                markUnprocessedUpdateTime(remainingExpirationTime);
              }
            } else {
              markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig);
              if (_update.eagerReducer === reducer) {
                _newState = _update.eagerState;
              } else {
                var _action = _update.action;
                _newState = reducer(_newState, _action);
              }
            }
            prevUpdate = _update;
            _update = _update.next;
          } while (_update !== null && _update !== first);
          if (!didSkip) {
            newBaseUpdate = prevUpdate;
            newBaseState = _newState;
          }
          if (!is$1(_newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = _newState;
          hook.baseUpdate = newBaseUpdate;
          hook.baseState = newBaseState;
          queue.lastRenderedState = _newState;
        }
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          last: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer, initialState);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag,
          create,
          destroy,
          deps,
          next: null
        };
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
          current: initialValue
        };
        {
          Object.seal(ref);
        }
        hook.memoizedState = ref;
        return ref;
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        sideEffectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(hookEffectTag, create, void 0, nextDeps);
      }
      function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var destroy = void 0;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              pushEffect(NoEffect$1, create, destroy, nextDeps);
              return;
            }
          }
        }
        sideEffectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        {
          if (typeof jest !== "undefined") {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
      }
      function updateEffect(create, deps) {
        {
          if (typeof jest !== "undefined") {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var _inst = create();
          refCallback(_inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== void 0) {
          var refObject = ref;
          {
            !refObject.hasOwnProperty("current") ? warning$1(false, "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}") : void 0;
          }
          var _inst2 = create();
          refObject.current = _inst2;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        {
          !(typeof create === "function") ? warning$1(false, "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null") : void 0;
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create, deps) {
        {
          !(typeof create === "function") ? warning$1(false, "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null") : void 0;
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value, config) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
          Scheduler.unstable_next(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          });
        }, [value, config]);
        return prevValue;
      }
      function updateDeferredValue(value, config) {
        var _updateState = updateState(value), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
          Scheduler.unstable_next(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          });
        }, [value, config]);
        return prevValue;
      }
      function mountTransition(config) {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
        var startTransition = mountCallback(function(callback) {
          setPending(true);
          Scheduler.unstable_next(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          });
        }, [config, isPending]);
        return [startTransition, isPending];
      }
      function updateTransition(config) {
        var _updateState2 = updateState(false), isPending = _updateState2[0], setPending = _updateState2[1];
        var startTransition = updateCallback(function(callback) {
          setPending(true);
          Scheduler.unstable_next(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          });
        }, [config, isPending]);
        return [startTransition, isPending];
      }
      function dispatchAction(fiber, queue, action) {
        if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
          {
            throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
        }
        {
          !(typeof arguments[3] !== "function") ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().") : void 0;
        }
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
          didScheduleRenderPhaseUpdate = true;
          var update = {
            expirationTime: renderExpirationTime$1,
            suspenseConfig: null,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          {
            update.priority = getCurrentPriorityLevel();
          }
          if (renderPhaseUpdates === null) {
            renderPhaseUpdates = new Map();
          }
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0) {
            renderPhaseUpdates.set(queue, update);
          } else {
            var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
            while (lastRenderPhaseUpdate.next !== null) {
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            }
            lastRenderPhaseUpdate.next = update;
          }
        } else {
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var _update2 = {
            expirationTime,
            suspenseConfig,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          {
            _update2.priority = getCurrentPriorityLevel();
          }
          var last = queue.last;
          if (last === null) {
            _update2.next = _update2;
          } else {
            var first = last.next;
            if (first !== null) {
              _update2.next = first;
            }
            last.next = _update2;
          }
          queue.last = _update2;
          if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                _update2.eagerReducer = lastRenderedReducer;
                _update2.eagerState = eagerState;
                if (is$1(eagerState, currentState)) {
                  return;
                }
              } catch (error) {
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          {
            if (typeof jest !== "undefined") {
              warnIfNotScopedWithMatchingAct(fiber);
              warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
          }
          scheduleWork(fiber, expirationTime);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useResponder: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          warning$1(false, "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          warning$1(false, "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context, observedBits) {
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue(value, formatterFn);
          },
          useResponder: function(responder, props) {
            currentHookNameInDev = "useResponder";
            mountHookTypesDev();
            return createResponderListener(responder, props);
          },
          useDeferredValue: function(value, config) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value, config);
          },
          useTransition: function(config) {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition(config);
          }
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context, observedBits) {
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue(value, formatterFn);
          },
          useResponder: function(responder, props) {
            currentHookNameInDev = "useResponder";
            updateHookTypesDev();
            return createResponderListener(responder, props);
          },
          useDeferredValue: function(value, config) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value, config);
          },
          useTransition: function(config) {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition(config);
          }
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context, observedBits) {
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue(value, formatterFn);
          },
          useResponder: function(responder, props) {
            currentHookNameInDev = "useResponder";
            updateHookTypesDev();
            return createResponderListener(responder, props);
          },
          useDeferredValue: function(value, config) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value, config);
          },
          useTransition: function(config) {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition(config);
          }
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue(value, formatterFn);
          },
          useResponder: function(responder, props) {
            currentHookNameInDev = "useResponder";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return createResponderListener(responder, props);
          },
          useDeferredValue: function(value, config) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value, config);
          },
          useTransition: function(config) {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition(config);
          }
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue(value, formatterFn);
          },
          useResponder: function(responder, props) {
            currentHookNameInDev = "useResponder";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return createResponderListener(responder, props);
          },
          useDeferredValue: function(value, config) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value, config);
          },
          useTransition: function(config) {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition(config);
          }
        };
      }
      var now$2 = Scheduler.unstable_now;
      var commitTime = 0;
      var profilerStartTime = -1;
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        if (!enableProfilerTimer) {
          return;
        }
        commitTime = now$2();
      }
      function startProfilerTimer(fiber) {
        if (!enableProfilerTimer) {
          return;
        }
        profilerStartTime = now$2();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$2();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        if (!enableProfilerTimer) {
          return;
        }
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (!enableProfilerTimer) {
          return;
        }
        if (profilerStartTime >= 0) {
          var elapsedTime = now$2() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      function warnIfHydrating() {
        {
          !!isHydrating ? warning$1(false, "We should not be hydrating here. This is a bug in React. Please file a bug.") : void 0;
        }
      }
      function enterHydrationState(fiber) {
        if (!supportsHydration) {
          return false;
        }
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance) {
        if (!supportsHydration) {
          return false;
        }
        nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
        popToNextHostParent(fiber);
        isHydrating = true;
        return true;
      }
      function deleteHydratableInstance(returnFiber, instance2) {
        {
          switch (returnFiber.tag) {
            case HostRoot:
              didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance2);
              break;
            case HostComponent:
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance2);
              break;
          }
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance2;
        childToDelete.return = returnFiber;
        childToDelete.effectTag = Deletion;
        if (returnFiber.lastEffect !== null) {
          returnFiber.lastEffect.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type, props);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;
                case SuspenseComponent:
                  didNotFindHydratableContainerSuspenseInstance(parentContainer);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                  break;
                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;
                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                  break;
              }
              break;
            }
            default:
              return;
          }
        }
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance2 = canHydrateInstance(nextInstance, type, props);
            if (instance2 !== null) {
              fiber.stateNode = instance2;
              return true;
            }
            return false;
          }
          case HostText: {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            if (enableSuspenseServerRenderer) {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  retryTime: Never
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                return true;
              }
            }
            return false;
          }
          default:
            return false;
        }
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        if (!supportsHydration) {
          {
            {
              throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        var instance2 = fiber.stateNode;
        var updatePayload = hydrateInstance(instance2, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        if (!supportsHydration) {
          {
            {
              throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        {
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
              }
            }
          }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        if (!supportsHydration) {
          {
            {
              throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          {
            throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        if (!supportsHydration) {
          {
            {
              throw Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          {
            throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (!supportsHydration) {
          return false;
        }
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        var type = fiber.type;
        if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            deleteHydratableInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function resetHydrationState() {
        if (!supportsHydration) {
          return;
        }
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
      }
      var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutMaxDuration;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      var didWarnAboutDefaultPropsOnFunctionComponent;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutMaxDuration = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
        didWarnAboutDefaultPropsOnFunctionComponent = {};
      }
      function reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2) {
        if (current$$1 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current$$1.child, nextChildren, renderExpirationTime2);
        }
      }
      function forceUnmountCurrentAndReconcile(current$$1, workInProgress2, nextChildren, renderExpirationTime2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current$$1.child, null, renderExpirationTime2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
      }
      function updateForwardRef(current$$1, workInProgress2, Component, nextProps, renderExpirationTime2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }
        var render2 = Component.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        prepareToReadContext(workInProgress2, renderExpirationTime2);
        {
          ReactCurrentOwner$2.current = workInProgress2;
          setCurrentPhase("render");
          nextChildren = renderWithHooks(current$$1, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
          if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
            if (workInProgress2.memoizedState !== null) {
              nextChildren = renderWithHooks(current$$1, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
            }
          }
          setCurrentPhase(null);
        }
        if (current$$1 !== null && !didReceiveUpdate) {
          bailoutHooks(current$$1, workInProgress2, renderExpirationTime2);
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
        }
        workInProgress2.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current$$1, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
        if (current$$1 === null) {
          var type = Component.type;
          if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current$$1, workInProgress2, resolvedType, nextProps, updateExpirationTime, renderExpirationTime2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type), getCurrentFiberStackInDev);
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress2.mode, renderExpirationTime2);
          child.ref = workInProgress2.ref;
          child.return = workInProgress2;
          workInProgress2.child = child;
          return child;
        }
        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type), getCurrentFiberStackInDev);
          }
        }
        var currentChild = current$$1.child;
        if (updateExpirationTime < renderExpirationTime2) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual;
          if (compare(prevProps, nextProps) && current$$1.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
          }
        }
        workInProgress2.effectTag |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime2);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current$$1, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              outerMemoType = refineResolvedLazyComponent(outerMemoType);
            }
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType), getCurrentFiberStackInDev);
            }
          }
        }
        if (current$$1 !== null) {
          var prevProps = current$$1.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress2.ref && workInProgress2.type === current$$1.type) {
            didReceiveUpdate = false;
            if (updateExpirationTime < renderExpirationTime2) {
              return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
            }
          }
        }
        return updateFunctionComponent(current$$1, workInProgress2, Component, nextProps, renderExpirationTime2);
      }
      function updateFragment(current$$1, workInProgress2, renderExpirationTime2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      function updateMode(current$$1, workInProgress2, renderExpirationTime2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      function updateProfiler(current$$1, workInProgress2, renderExpirationTime2) {
        if (enableProfilerTimer) {
          workInProgress2.effectTag |= Update;
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      function markRef(current$$1, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
          workInProgress2.effectTag |= Ref;
        }
      }
      function updateFunctionComponent(current$$1, workInProgress2, Component, nextProps, renderExpirationTime2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }
        var context;
        if (!disableLegacyContext) {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        prepareToReadContext(workInProgress2, renderExpirationTime2);
        {
          ReactCurrentOwner$2.current = workInProgress2;
          setCurrentPhase("render");
          nextChildren = renderWithHooks(current$$1, workInProgress2, Component, nextProps, context, renderExpirationTime2);
          if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
            if (workInProgress2.memoizedState !== null) {
              nextChildren = renderWithHooks(current$$1, workInProgress2, Component, nextProps, context, renderExpirationTime2);
            }
          }
          setCurrentPhase(null);
        }
        if (current$$1 !== null && !didReceiveUpdate) {
          bailoutHooks(current$$1, workInProgress2, renderExpirationTime2);
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
        }
        workInProgress2.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      function updateClassComponent(current$$1, workInProgress2, Component, nextProps, renderExpirationTime2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderExpirationTime2);
        var instance2 = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance2 === null) {
          if (current$$1 !== null) {
            current$$1.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          constructClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
          mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
          shouldUpdate = true;
        } else if (current$$1 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
        } else {
          shouldUpdate = updateClassInstance(current$$1, workInProgress2, Component, nextProps, renderExpirationTime2);
        }
        var nextUnitOfWork = finishClassComponent(current$$1, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2);
        {
          var inst = workInProgress2.stateNode;
          if (inst.props !== nextProps) {
            !didWarnAboutReassigningProps ? warning$1(false, "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component") : void 0;
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current$$1, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2) {
        markRef(current$$1, workInProgress2);
        var didCaptureError = (workInProgress2.effectTag & DidCapture) !== NoEffect;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, false);
          }
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
        }
        var instance2 = workInProgress2.stateNode;
        ReactCurrentOwner$2.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
          nextChildren = null;
          if (enableProfilerTimer) {
            stopProfilerTimerIfRunning(workInProgress2);
          }
        } else {
          {
            setCurrentPhase("render");
            nextChildren = instance2.render();
            if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
              instance2.render();
            }
            setCurrentPhase(null);
          }
        }
        workInProgress2.effectTag |= PerformedWork;
        if (current$$1 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        } else {
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        }
        workInProgress2.memoizedState = instance2.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root = workInProgress2.stateNode;
        if (root.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root.pendingContext, root.pendingContext !== root.context);
        } else if (root.context) {
          pushTopLevelContextObject(workInProgress2, root.context, false);
        }
        pushHostContainer(workInProgress2, root.containerInfo);
      }
      function updateHostRoot(current$$1, workInProgress2, renderExpirationTime2) {
        pushHostRootContext(workInProgress2);
        var updateQueue = workInProgress2.updateQueue;
        if (!(updateQueue !== null)) {
          {
            throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        processUpdateQueue(workInProgress2, updateQueue, nextProps, null, renderExpirationTime2);
        var nextState = workInProgress2.memoizedState;
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
          resetHydrationState();
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
        }
        var root = workInProgress2.stateNode;
        if (root.hydrate && enterHydrationState(workInProgress2)) {
          var child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          workInProgress2.child = child;
          var node = child;
          while (node) {
            node.effectTag = node.effectTag & ~Placement | Hydrating;
            node = node.sibling;
          }
        } else {
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          resetHydrationState();
        }
        return workInProgress2.child;
      }
      function updateHostComponent(current$$1, workInProgress2, renderExpirationTime2) {
        pushHostContext(workInProgress2);
        if (current$$1 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.effectTag |= ContentReset;
        }
        markRef(current$$1, workInProgress2);
        if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
          if (enableSchedulerTracing) {
            markSpawnedWork(Never);
          }
          workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
          return null;
        }
        reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      function updateHostText(current$$1, workInProgress2) {
        if (current$$1 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.effectTag |= Placement;
        }
        var props = workInProgress2.pendingProps;
        cancelWorkTimer(workInProgress2);
        var Component = readLazyComponentType(elementType);
        workInProgress2.type = Component;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
        startWorkTimer(workInProgress2);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component);
              workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
            }
            child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
            break;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component = resolveClassForHotReloading(Component);
            }
            child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
            break;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
            }
            child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
            break;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime2);
            break;
          }
          default: {
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
        }
        return child;
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderExpirationTime2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.effectTag |= Placement;
        }
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderExpirationTime2);
        constructClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
        mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
        return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component, renderExpirationTime2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.effectTag |= Placement;
        }
        var props = workInProgress2.pendingProps;
        var context;
        if (!disableLegacyContext) {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderExpirationTime2);
        var value;
        {
          if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentName(Component) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          ReactCurrentOwner$2.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component, props, context, renderExpirationTime2);
        }
        workInProgress2.effectTag |= PerformedWork;
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
          {
            var _componentName = getComponentName(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              warningWithoutStack$1(false, "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          resetHooks();
          var hasContext = false;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
          var getDerivedStateFromProps = Component.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
          }
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component, props, renderExpirationTime2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
        } else {
          workInProgress2.tag = FunctionComponent;
          {
            if (disableLegacyContext && Component.contextTypes) {
              warningWithoutStack$1(false, "%s uses the legacy contextTypes API which is no longer supported. Use React.createContext() with React.useContext() instead.", getComponentName(Component) || "Unknown");
            }
            if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                value = renderWithHooks(null, workInProgress2, Component, props, context, renderExpirationTime2);
              }
            }
          }
          reconcileChildren(null, workInProgress2, value, renderExpirationTime2);
          {
            validateFunctionComponentInDev(workInProgress2, Component);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component) {
        if (Component) {
          !!Component.childContextTypes ? warningWithoutStack$1(false, "%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component") : void 0;
        }
        if (workInProgress2.ref !== null) {
          var info = "";
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            info += "\n\nCheck the render method of `" + ownerName + "`.";
          }
          var warningKey = ownerName || workInProgress2._debugID || "";
          var debugSource = workInProgress2._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
          }
          if (!didWarnAboutFunctionRefs[warningKey]) {
            didWarnAboutFunctionRefs[warningKey] = true;
            warning$1(false, "Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
          }
        }
        if (warnAboutDefaultPropsOnFunctionComponents && Component.defaultProps !== void 0) {
          var componentName = getComponentName(Component) || "Unknown";
          if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
            warningWithoutStack$1(false, "%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
            didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
          }
        }
        if (typeof Component.getDerivedStateFromProps === "function") {
          var _componentName2 = getComponentName(Component) || "Unknown";
          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
            warningWithoutStack$1(false, "%s: Function components do not support getDerivedStateFromProps.", _componentName2);
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
          }
        }
        if (typeof Component.contextType === "object" && Component.contextType !== null) {
          var _componentName3 = getComponentName(Component) || "Unknown";
          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
            warningWithoutStack$1(false, "%s: Function components do not support contextType.", _componentName3);
            didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        retryTime: NoWork
      };
      function shouldRemainOnFallback(suspenseContext, current$$1, workInProgress2) {
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current$$1 === null || current$$1.memoizedState !== null);
      }
      function updateSuspenseComponent(current$$1, workInProgress2, renderExpirationTime2) {
        var mode = workInProgress2.mode;
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.effectTag |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var nextDidTimeout = false;
        var didSuspend = (workInProgress2.effectTag & DidCapture) !== NoEffect;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current$$1, workInProgress2)) {
          nextDidTimeout = true;
          workInProgress2.effectTag &= ~DidCapture;
        } else {
          if (current$$1 === null || current$$1.memoizedState !== null) {
            if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress2, suspenseContext);
        {
          if ("maxDuration" in nextProps) {
            if (!didWarnAboutMaxDuration) {
              didWarnAboutMaxDuration = true;
              warning$1(false, "maxDuration has been removed from React. Remove the maxDuration prop.");
            }
          }
        }
        if (current$$1 === null) {
          if (nextProps.fallback !== void 0) {
            tryToClaimNextHydratableInstance(workInProgress2);
            if (enableSuspenseServerRenderer) {
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated, renderExpirationTime2);
                }
              }
            }
          }
          if (nextDidTimeout) {
            var nextFallbackChildren = nextProps.fallback;
            var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
            primaryChildFragment.return = workInProgress2;
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              var progressedState = workInProgress2.memoizedState;
              var progressedPrimaryChild = progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
              primaryChildFragment.child = progressedPrimaryChild;
              var progressedChild = progressedPrimaryChild;
              while (progressedChild !== null) {
                progressedChild.return = primaryChildFragment;
                progressedChild = progressedChild.sibling;
              }
            }
            var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime2, null);
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          } else {
            var nextPrimaryChildren = nextProps.children;
            workInProgress2.memoizedState = null;
            return workInProgress2.child = mountChildFibers(workInProgress2, null, nextPrimaryChildren, renderExpirationTime2);
          }
        } else {
          var prevState = current$$1.memoizedState;
          if (prevState !== null) {
            if (enableSuspenseServerRenderer) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                if (!didSuspend) {
                  return updateDehydratedSuspenseComponent(current$$1, workInProgress2, _dehydrated, prevState, renderExpirationTime2);
                } else if (workInProgress2.memoizedState !== null) {
                  workInProgress2.child = current$$1.child;
                  workInProgress2.effectTag |= DidCapture;
                  return null;
                } else {
                  var _nextFallbackChildren = nextProps.fallback;
                  var _primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
                  _primaryChildFragment.return = workInProgress2;
                  _primaryChildFragment.child = null;
                  if ((workInProgress2.mode & BlockingMode) === NoMode) {
                    var _progressedChild = _primaryChildFragment.child = workInProgress2.child;
                    while (_progressedChild !== null) {
                      _progressedChild.return = _primaryChildFragment;
                      _progressedChild = _progressedChild.sibling;
                    }
                  } else {
                    reconcileChildFibers(workInProgress2, current$$1.child, null, renderExpirationTime2);
                  }
                  if (enableProfilerTimer && workInProgress2.mode & ProfileMode) {
                    var treeBaseDuration = 0;
                    var hiddenChild = _primaryChildFragment.child;
                    while (hiddenChild !== null) {
                      treeBaseDuration += hiddenChild.treeBaseDuration;
                      hiddenChild = hiddenChild.sibling;
                    }
                    _primaryChildFragment.treeBaseDuration = treeBaseDuration;
                  }
                  var _fallbackChildFragment = createFiberFromFragment(_nextFallbackChildren, mode, renderExpirationTime2, null);
                  _fallbackChildFragment.return = workInProgress2;
                  _primaryChildFragment.sibling = _fallbackChildFragment;
                  _fallbackChildFragment.effectTag |= Placement;
                  _primaryChildFragment.childExpirationTime = NoWork;
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  workInProgress2.child = _primaryChildFragment;
                  return _fallbackChildFragment;
                }
              }
            }
            var currentPrimaryChildFragment = current$$1.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            if (nextDidTimeout) {
              var _nextFallbackChildren2 = nextProps.fallback;
              var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);
              _primaryChildFragment2.return = workInProgress2;
              if ((workInProgress2.mode & BlockingMode) === NoMode) {
                var _progressedState = workInProgress2.memoizedState;
                var _progressedPrimaryChild = _progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                  _primaryChildFragment2.child = _progressedPrimaryChild;
                  var _progressedChild2 = _progressedPrimaryChild;
                  while (_progressedChild2 !== null) {
                    _progressedChild2.return = _primaryChildFragment2;
                    _progressedChild2 = _progressedChild2.sibling;
                  }
                }
              }
              if (enableProfilerTimer && workInProgress2.mode & ProfileMode) {
                var _treeBaseDuration = 0;
                var _hiddenChild = _primaryChildFragment2.child;
                while (_hiddenChild !== null) {
                  _treeBaseDuration += _hiddenChild.treeBaseDuration;
                  _hiddenChild = _hiddenChild.sibling;
                }
                _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
              }
              var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2, currentFallbackChildFragment.expirationTime);
              _fallbackChildFragment2.return = workInProgress2;
              _primaryChildFragment2.sibling = _fallbackChildFragment2;
              _primaryChildFragment2.childExpirationTime = NoWork;
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.child = _primaryChildFragment2;
              return _fallbackChildFragment2;
            } else {
              var _nextPrimaryChildren = nextProps.children;
              var currentPrimaryChild = currentPrimaryChildFragment.child;
              var primaryChild = reconcileChildFibers(workInProgress2, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime2);
              workInProgress2.memoizedState = null;
              return workInProgress2.child = primaryChild;
            }
          } else {
            var _currentPrimaryChild = current$$1.child;
            if (nextDidTimeout) {
              var _nextFallbackChildren3 = nextProps.fallback;
              var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
              _primaryChildFragment3.return = workInProgress2;
              _primaryChildFragment3.child = _currentPrimaryChild;
              if (_currentPrimaryChild !== null) {
                _currentPrimaryChild.return = _primaryChildFragment3;
              }
              if ((workInProgress2.mode & BlockingMode) === NoMode) {
                var _progressedState2 = workInProgress2.memoizedState;
                var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress2.child.child : workInProgress2.child;
                _primaryChildFragment3.child = _progressedPrimaryChild2;
                var _progressedChild3 = _progressedPrimaryChild2;
                while (_progressedChild3 !== null) {
                  _progressedChild3.return = _primaryChildFragment3;
                  _progressedChild3 = _progressedChild3.sibling;
                }
              }
              if (enableProfilerTimer && workInProgress2.mode & ProfileMode) {
                var _treeBaseDuration2 = 0;
                var _hiddenChild2 = _primaryChildFragment3.child;
                while (_hiddenChild2 !== null) {
                  _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                  _hiddenChild2 = _hiddenChild2.sibling;
                }
                _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
              }
              var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime2, null);
              _fallbackChildFragment3.return = workInProgress2;
              _primaryChildFragment3.sibling = _fallbackChildFragment3;
              _fallbackChildFragment3.effectTag |= Placement;
              _primaryChildFragment3.childExpirationTime = NoWork;
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.child = _primaryChildFragment3;
              return _fallbackChildFragment3;
            } else {
              workInProgress2.memoizedState = null;
              var _nextPrimaryChildren2 = nextProps.children;
              return workInProgress2.child = reconcileChildFibers(workInProgress2, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime2);
            }
          }
        }
      }
      function retrySuspenseComponentWithoutHydrating(current$$1, workInProgress2, renderExpirationTime2) {
        workInProgress2.memoizedState = null;
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderExpirationTime2) {
        if ((workInProgress2.mode & BlockingMode) === NoMode) {
          {
            warning$1(false, "Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOM.createBlockingRoot(container, { hydrate: true }).render(element) or remove the Suspense components from the server rendered components.");
          }
          workInProgress2.expirationTime = Sync;
        } else if (isSuspenseInstanceFallback(suspenseInstance)) {
          var serverDisplayTime = requestCurrentTimeForUpdate();
          var newExpirationTime = computeAsyncExpiration(serverDisplayTime);
          if (enableSchedulerTracing) {
            markSpawnedWork(newExpirationTime);
          }
          workInProgress2.expirationTime = newExpirationTime;
        } else {
          workInProgress2.expirationTime = Never;
          if (enableSchedulerTracing) {
            markSpawnedWork(Never);
          }
        }
        return null;
      }
      function updateDehydratedSuspenseComponent(current$$1, workInProgress2, suspenseInstance, suspenseState, renderExpirationTime2) {
        warnIfHydrating();
        if ((workInProgress2.mode & BlockingMode) === NoMode) {
          return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress2, renderExpirationTime2);
        }
        if (isSuspenseInstanceFallback(suspenseInstance)) {
          return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress2, renderExpirationTime2);
        }
        var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime2;
        if (didReceiveUpdate || hasContextChanged$$1) {
          if (renderExpirationTime2 < Sync) {
            if (suspenseState.retryTime <= renderExpirationTime2) {
              var attemptHydrationAtExpirationTime = renderExpirationTime2 + 1;
              suspenseState.retryTime = attemptHydrationAtExpirationTime;
              scheduleWork(current$$1, attemptHydrationAtExpirationTime);
            } else {
            }
          }
          renderDidSuspendDelayIfPossible();
          return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress2, renderExpirationTime2);
        } else if (isSuspenseInstancePending(suspenseInstance)) {
          workInProgress2.effectTag |= DidCapture;
          workInProgress2.child = current$$1.child;
          registerSuspenseInstanceRetry(suspenseInstance, retryDehydratedSuspenseBoundary.bind(null, current$$1));
          return null;
        } else {
          reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance);
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          var node = child;
          while (node) {
            node.effectTag |= Hydrating;
            node = node.sibling;
          }
          workInProgress2.child = child;
          return workInProgress2.child;
        }
      }
      function scheduleWorkOnFiber(fiber, renderExpirationTime2) {
        if (fiber.expirationTime < renderExpirationTime2) {
          fiber.expirationTime = renderExpirationTime2;
        }
        var alternate = fiber.alternate;
        if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
          alternate.expirationTime = renderExpirationTime2;
        }
        scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderExpirationTime2) {
        var node = firstChild;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              scheduleWorkOnFiber(node, renderExpirationTime2);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleWorkOnFiber(node, renderExpirationTime2);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  warning$1(false, '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              warning$1(false, '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              warning$1(false, '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              warning$1(false, '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index2) {
        {
          var isArray2 = Array.isArray(childSlot);
          var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
          if (isArray2 || isIterable) {
            var type = isArray2 ? "array" : "iterable";
            warning$1(false, "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                warning$1(false, 'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            last: lastContentRow,
            tail,
            tailExpiration: 0,
            tailMode,
            lastEffect: lastEffectBeforeRendering
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailExpiration = 0;
          renderState.tailMode = tailMode;
          renderState.lastEffect = lastEffectBeforeRendering;
        }
      }
      function updateSuspenseListComponent(current$$1, workInProgress2, renderExpirationTime2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current$$1, workInProgress2, newChildren, renderExpirationTime2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.effectTag |= DidCapture;
        } else {
          var didSuspendBefore = current$$1 !== null && (current$$1.effectTag & DidCapture) !== NoEffect;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderExpirationTime2);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & BlockingMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
              break;
            }
            case "together": {
              initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current$$1, workInProgress2, renderExpirationTime2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current$$1 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
        } else {
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        }
        return workInProgress2.child;
      }
      function updateContextProvider(current$$1, workInProgress2, renderExpirationTime2) {
        var providerType = workInProgress2.type;
        var context = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider", getCurrentFiberStackInDev);
          }
        }
        pushProvider(workInProgress2, newValue);
        if (oldProps !== null) {
          var oldValue = oldProps.value;
          var changedBits = calculateChangedBits(context, newValue, oldValue);
          if (changedBits === 0) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
            }
          } else {
            propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2);
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current$$1, workInProgress2, newChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current$$1, workInProgress2, renderExpirationTime2) {
        var context = workInProgress2.type;
        {
          if (context._context === void 0) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                warning$1(false, "Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render2 = newProps.children;
        {
          !(typeof render2 === "function") ? warningWithoutStack$1(false, "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.") : void 0;
        }
        prepareToReadContext(workInProgress2, renderExpirationTime2);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        {
          ReactCurrentOwner$2.current = workInProgress2;
          setCurrentPhase("render");
          newChildren = render2(newValue);
          setCurrentPhase(null);
        }
        workInProgress2.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress2, newChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      function updateFundamentalComponent$1(current$$1, workInProgress2, renderExpirationTime2) {
        var fundamentalImpl = workInProgress2.type.impl;
        if (fundamentalImpl.reconcileChildren === false) {
          return null;
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      function updateScopeComponent(current$$1, workInProgress2, renderExpirationTime2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2) {
        cancelWorkTimer(workInProgress2);
        if (current$$1 !== null) {
          workInProgress2.dependencies = current$$1.dependencies;
        }
        if (enableProfilerTimer) {
          stopProfilerTimerIfRunning(workInProgress2);
        }
        var updateExpirationTime = workInProgress2.expirationTime;
        if (updateExpirationTime !== NoWork) {
          markUnprocessedUpdateTime(updateExpirationTime);
        }
        var childExpirationTime = workInProgress2.childExpirationTime;
        if (childExpirationTime < renderExpirationTime2) {
          return null;
        } else {
          cloneChildFibers(current$$1, workInProgress2);
          return workInProgress2.child;
        }
      }
      function remountFiber(current$$1, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current$$1.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var last = returnFiber.lastEffect;
          if (last !== null) {
            last.nextEffect = current$$1;
            returnFiber.lastEffect = current$$1;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
          }
          current$$1.nextEffect = null;
          current$$1.effectTag = Deletion;
          newWorkInProgress.effectTag |= Placement;
          return newWorkInProgress;
        }
      }
      function beginWork$1(current$$1, workInProgress2, renderExpirationTime2) {
        var updateExpirationTime = workInProgress2.expirationTime;
        {
          if (workInProgress2._debugNeedsRemount && current$$1 !== null) {
            return remountFiber(current$$1, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.expirationTime));
          }
        }
        if (current$$1 !== null) {
          var oldProps = current$$1.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current$$1.type) {
            didReceiveUpdate = true;
          } else if (updateExpirationTime < renderExpirationTime2) {
            didReceiveUpdate = false;
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(workInProgress2.type, newProps)) {
                  if (enableSchedulerTracing) {
                    markSpawnedWork(Never);
                  }
                  workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
                  return null;
                }
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                pushProvider(workInProgress2, newValue);
                break;
              }
              case Profiler:
                if (enableProfilerTimer) {
                  var hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                  if (hasChildWork) {
                    workInProgress2.effectTag |= Update;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (enableSuspenseServerRenderer) {
                    if (state.dehydrated !== null) {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      workInProgress2.effectTag |= DidCapture;
                      break;
                    }
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                  if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime2) {
                    return updateSuspenseComponent(current$$1, workInProgress2, renderExpirationTime2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current$$1.effectTag & DidCapture) !== NoEffect;
                var _hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current$$1, workInProgress2, renderExpirationTime2);
                  }
                  workInProgress2.effectTag |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
            }
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
          } else {
            didReceiveUpdate = false;
          }
        } else {
          didReceiveUpdate = false;
        }
        workInProgress2.expirationTime = NoWork;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current$$1, workInProgress2, workInProgress2.type, renderExpirationTime2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current$$1, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2);
          }
          case FunctionComponent: {
            var _Component = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current$$1, workInProgress2, _Component, resolvedProps, renderExpirationTime2);
          }
          case ClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
            return updateClassComponent(current$$1, workInProgress2, _Component2, _resolvedProps, renderExpirationTime2);
          }
          case HostRoot:
            return updateHostRoot(current$$1, workInProgress2, renderExpirationTime2);
          case HostComponent:
            return updateHostComponent(current$$1, workInProgress2, renderExpirationTime2);
          case HostText:
            return updateHostText(current$$1, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current$$1, workInProgress2, renderExpirationTime2);
          case HostPortal:
            return updatePortalComponent(current$$1, workInProgress2, renderExpirationTime2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current$$1, workInProgress2, type, _resolvedProps2, renderExpirationTime2);
          }
          case Fragment:
            return updateFragment(current$$1, workInProgress2, renderExpirationTime2);
          case Mode:
            return updateMode(current$$1, workInProgress2, renderExpirationTime2);
          case Profiler:
            return updateProfiler(current$$1, workInProgress2, renderExpirationTime2);
          case ContextProvider:
            return updateContextProvider(current$$1, workInProgress2, renderExpirationTime2);
          case ContextConsumer:
            return updateContextConsumer(current$$1, workInProgress2, renderExpirationTime2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2), getCurrentFiberStackInDev);
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current$$1, workInProgress2, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current$$1, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateExpirationTime, renderExpirationTime2);
          }
          case IncompleteClassComponent: {
            var _Component3 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
            return mountIncompleteClassComponent(current$$1, workInProgress2, _Component3, _resolvedProps4, renderExpirationTime2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current$$1, workInProgress2, renderExpirationTime2);
          }
          case FundamentalComponent: {
            if (enableFundamentalAPI) {
              return updateFundamentalComponent$1(current$$1, workInProgress2, renderExpirationTime2);
            }
            break;
          }
          case ScopeComponent: {
            if (enableScopeAPI) {
              return updateScopeComponent(current$$1, workInProgress2, renderExpirationTime2);
            }
            break;
          }
        }
        {
          {
            throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function createFundamentalStateInstance(currentFiber2, props, impl, state) {
        return {
          currentFiber: currentFiber2,
          impl,
          instance: null,
          prevProps: null,
          props,
          state
        };
      }
      function isFiberSuspenseAndTimedOut(fiber) {
        return fiber.tag === SuspenseComponent && fiber.memoizedState !== null;
      }
      function getSuspenseFallbackChild(fiber) {
        return fiber.child.sibling.child;
      }
      var emptyObject$1 = {};
      function collectScopedNodes(node, fn, scopedNodes) {
        if (enableScopeAPI) {
          if (node.tag === HostComponent) {
            var _type = node.type, memoizedProps = node.memoizedProps, stateNode = node.stateNode;
            var _instance = getPublicInstance(stateNode);
            if (_instance !== null && fn(_type, memoizedProps || emptyObject$1, _instance) === true) {
              scopedNodes.push(_instance);
            }
          }
          var child = node.child;
          if (isFiberSuspenseAndTimedOut(node)) {
            child = getSuspenseFallbackChild(node);
          }
          if (child !== null) {
            collectScopedNodesFromChildren(child, fn, scopedNodes);
          }
        }
      }
      function collectFirstScopedNode(node, fn) {
        if (enableScopeAPI) {
          if (node.tag === HostComponent) {
            var _type2 = node.type, memoizedProps = node.memoizedProps, stateNode = node.stateNode;
            var _instance2 = getPublicInstance(stateNode);
            if (_instance2 !== null && fn(_type2, memoizedProps, _instance2) === true) {
              return _instance2;
            }
          }
          var child = node.child;
          if (isFiberSuspenseAndTimedOut(node)) {
            child = getSuspenseFallbackChild(node);
          }
          if (child !== null) {
            return collectFirstScopedNodeFromChildren(child, fn);
          }
        }
        return null;
      }
      function collectScopedNodesFromChildren(startingChild, fn, scopedNodes) {
        var child = startingChild;
        while (child !== null) {
          collectScopedNodes(child, fn, scopedNodes);
          child = child.sibling;
        }
      }
      function collectFirstScopedNodeFromChildren(startingChild, fn) {
        var child = startingChild;
        while (child !== null) {
          var scopedNode = collectFirstScopedNode(child, fn);
          if (scopedNode !== null) {
            return scopedNode;
          }
          child = child.sibling;
        }
        return null;
      }
      function collectNearestScopeMethods(node, scope, childrenScopes) {
        if (isValidScopeNode(node, scope)) {
          childrenScopes.push(node.stateNode.methods);
        } else {
          var child = node.child;
          if (isFiberSuspenseAndTimedOut(node)) {
            child = getSuspenseFallbackChild(node);
          }
          if (child !== null) {
            collectNearestChildScopeMethods(child, scope, childrenScopes);
          }
        }
      }
      function collectNearestChildScopeMethods(startingChild, scope, childrenScopes) {
        var child = startingChild;
        while (child !== null) {
          collectNearestScopeMethods(child, scope, childrenScopes);
          child = child.sibling;
        }
      }
      function isValidScopeNode(node, scope) {
        return node.tag === ScopeComponent && node.type === scope && node.stateNode !== null;
      }
      function createScopeMethods(scope, instance2) {
        return {
          getChildren: function() {
            var currentFiber2 = instance2.fiber;
            var child = currentFiber2.child;
            var childrenScopes = [];
            if (child !== null) {
              collectNearestChildScopeMethods(child, scope, childrenScopes);
            }
            return childrenScopes.length === 0 ? null : childrenScopes;
          },
          getChildrenFromRoot: function() {
            var currentFiber2 = instance2.fiber;
            var node = currentFiber2;
            while (node !== null) {
              var parent = node.return;
              if (parent === null) {
                break;
              }
              node = parent;
              if (node.tag === ScopeComponent && node.type === scope) {
                break;
              }
            }
            var childrenScopes = [];
            collectNearestChildScopeMethods(node.child, scope, childrenScopes);
            return childrenScopes.length === 0 ? null : childrenScopes;
          },
          getParent: function() {
            var node = instance2.fiber.return;
            while (node !== null) {
              if (node.tag === ScopeComponent && node.type === scope) {
                return node.stateNode.methods;
              }
              node = node.return;
            }
            return null;
          },
          getProps: function() {
            var currentFiber2 = instance2.fiber;
            return currentFiber2.memoizedProps;
          },
          queryAllNodes: function(fn) {
            var currentFiber2 = instance2.fiber;
            var child = currentFiber2.child;
            var scopedNodes = [];
            if (child !== null) {
              collectScopedNodesFromChildren(child, fn, scopedNodes);
            }
            return scopedNodes.length === 0 ? null : scopedNodes;
          },
          queryFirstNode: function(fn) {
            var currentFiber2 = instance2.fiber;
            var child = currentFiber2.child;
            if (child !== null) {
              return collectFirstScopedNodeFromChildren(child, fn);
            }
            return null;
          },
          containsNode: function(node) {
            var fiber = getInstanceFromNode(node);
            while (fiber !== null) {
              if (fiber.tag === ScopeComponent && fiber.type === scope && fiber.stateNode === instance2) {
                return true;
              }
              fiber = fiber.return;
            }
            return false;
          }
        };
      }
      function markUpdate(workInProgress2) {
        workInProgress2.effectTag |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.effectTag |= Ref;
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      if (supportsMutation) {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node = workInProgress2.child;
          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
              appendInitialChild(parent, node.stateNode.instance);
            } else if (node.tag === HostPortal) {
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        };
        updateHostContainer = function(workInProgress2) {
        };
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance2 = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(instance2, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress2);
          }
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        };
      } else if (supportsPersistence) {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node = workInProgress2.child;
          while (node !== null) {
            branches:
              if (node.tag === HostComponent) {
                var instance2 = node.stateNode;
                if (needsVisibilityToggle && isHidden) {
                  var props = node.memoizedProps;
                  var type = node.type;
                  instance2 = cloneHiddenInstance(instance2, type, props, node);
                }
                appendInitialChild(parent, instance2);
              } else if (node.tag === HostText) {
                var _instance = node.stateNode;
                if (needsVisibilityToggle && isHidden) {
                  var text = node.memoizedProps;
                  _instance = cloneHiddenTextInstance(_instance, text, node);
                }
                appendInitialChild(parent, _instance);
              } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
                var _instance2 = node.stateNode.instance;
                if (needsVisibilityToggle && isHidden) {
                  var _props = node.memoizedProps;
                  var _type = node.type;
                  _instance2 = cloneHiddenInstance(_instance2, _type, _props, node);
                }
                appendInitialChild(parent, _instance2);
              } else if (node.tag === HostPortal) {
              } else if (node.tag === SuspenseComponent) {
                if ((node.effectTag & Update) !== NoEffect) {
                  var newIsHidden = node.memoizedState !== null;
                  if (newIsHidden) {
                    var primaryChildParent = node.child;
                    if (primaryChildParent !== null) {
                      if (primaryChildParent.child !== null) {
                        primaryChildParent.child.return = primaryChildParent;
                        appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                      }
                      var fallbackChildParent = primaryChildParent.sibling;
                      if (fallbackChildParent !== null) {
                        fallbackChildParent.return = node;
                        node = fallbackChildParent;
                        continue;
                      }
                    }
                  }
                }
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            node = node;
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        };
        var appendAllChildrenToContainer = function(containerChildSet, workInProgress2, needsVisibilityToggle, isHidden) {
          var node = workInProgress2.child;
          while (node !== null) {
            branches:
              if (node.tag === HostComponent) {
                var instance2 = node.stateNode;
                if (needsVisibilityToggle && isHidden) {
                  var props = node.memoizedProps;
                  var type = node.type;
                  instance2 = cloneHiddenInstance(instance2, type, props, node);
                }
                appendChildToContainerChildSet(containerChildSet, instance2);
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (needsVisibilityToggle && isHidden) {
                  var text = node.memoizedProps;
                  _instance3 = cloneHiddenTextInstance(_instance3, text, node);
                }
                appendChildToContainerChildSet(containerChildSet, _instance3);
              } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
                var _instance4 = node.stateNode.instance;
                if (needsVisibilityToggle && isHidden) {
                  var _props2 = node.memoizedProps;
                  var _type2 = node.type;
                  _instance4 = cloneHiddenInstance(_instance4, _type2, _props2, node);
                }
                appendChildToContainerChildSet(containerChildSet, _instance4);
              } else if (node.tag === HostPortal) {
              } else if (node.tag === SuspenseComponent) {
                if ((node.effectTag & Update) !== NoEffect) {
                  var newIsHidden = node.memoizedState !== null;
                  if (newIsHidden) {
                    var primaryChildParent = node.child;
                    if (primaryChildParent !== null) {
                      if (primaryChildParent.child !== null) {
                        primaryChildParent.child.return = primaryChildParent;
                        appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                      }
                      var fallbackChildParent = primaryChildParent.sibling;
                      if (fallbackChildParent !== null) {
                        fallbackChildParent.return = node;
                        node = fallbackChildParent;
                        continue;
                      }
                    }
                  }
                }
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            node = node;
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        };
        updateHostContainer = function(workInProgress2) {
          var portalOrRoot = workInProgress2.stateNode;
          var childrenUnchanged = workInProgress2.firstEffect === null;
          if (childrenUnchanged) {
          } else {
            var container = portalOrRoot.containerInfo;
            var newChildSet = createContainerChildSet(container);
            appendAllChildrenToContainer(newChildSet, workInProgress2, false, false);
            portalOrRoot.pendingChildren = newChildSet;
            markUpdate(workInProgress2);
            finalizeContainerChildren(container, newChildSet);
          }
        };
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var currentInstance = current2.stateNode;
          var oldProps = current2.memoizedProps;
          var childrenUnchanged = workInProgress2.firstEffect === null;
          if (childrenUnchanged && oldProps === newProps) {
            workInProgress2.stateNode = currentInstance;
            return;
          }
          var recyclableInstance = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = null;
          if (oldProps !== newProps) {
            updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          }
          if (childrenUnchanged && updatePayload === null) {
            workInProgress2.stateNode = currentInstance;
            return;
          }
          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress2, childrenUnchanged, recyclableInstance);
          if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
            markUpdate(workInProgress2);
          }
          workInProgress2.stateNode = newInstance;
          if (childrenUnchanged) {
            markUpdate(workInProgress2);
          } else {
            appendAllChildren(newInstance, workInProgress2, false, false);
          }
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            var rootContainerInstance = getRootHostContainer();
            var currentHostContext = getHostContext();
            workInProgress2.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress2);
            markUpdate(workInProgress2);
          }
        };
      } else {
        updateHostContainer = function(workInProgress2) {
        };
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function completeWork(current2, workInProgress2, renderExpirationTime2) {
        var newProps = workInProgress2.pendingProps;
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
            break;
          case LazyComponent:
            break;
          case SimpleMemoComponent:
          case FunctionComponent:
            break;
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            break;
          }
          case HostRoot: {
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            var fiberRoot = workInProgress2.stateNode;
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              }
            }
            updateHostContainer(workInProgress2);
            break;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
              if (enableFlareAPI) {
                var prevListeners = current2.memoizedProps.listeners;
                var nextListeners = newProps.listeners;
                if (prevListeners !== nextListeners) {
                  markUpdate(workInProgress2);
                }
              }
              if (current2.ref !== workInProgress2.ref) {
                markRef$1(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (!(workInProgress2.stateNode !== null)) {
                  {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                break;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
                if (enableFlareAPI) {
                  var listeners = newProps.listeners;
                  if (listeners != null) {
                    updateEventListeners(listeners, workInProgress2, rootContainerInstance);
                  }
                }
              } else {
                var instance2 = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance2, workInProgress2, false, false);
                workInProgress2.stateNode = instance2;
                if (enableFlareAPI) {
                  var _listeners = newProps.listeners;
                  if (_listeners != null) {
                    updateEventListeners(_listeners, workInProgress2, rootContainerInstance);
                  }
                }
                if (finalizeInitialChildren(instance2, type, newProps, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef$1(workInProgress2);
              }
            }
            break;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (!(workInProgress2.stateNode !== null)) {
                  {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
            }
            break;
          }
          case ForwardRef:
            break;
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (enableSuspenseServerRenderer) {
              if (nextState !== null && nextState.dehydrated !== null) {
                if (current2 === null) {
                  var _wasHydrated3 = popHydrationState(workInProgress2);
                  if (!_wasHydrated3) {
                    {
                      throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                    }
                  }
                  prepareToHydrateHostSuspenseInstance(workInProgress2);
                  if (enableSchedulerTracing) {
                    markSpawnedWork(Never);
                  }
                  return null;
                } else {
                  resetHydrationState();
                  if ((workInProgress2.effectTag & DidCapture) === NoEffect) {
                    workInProgress2.memoizedState = null;
                  }
                  workInProgress2.effectTag |= Update;
                  return null;
                }
              }
            }
            if ((workInProgress2.effectTag & DidCapture) !== NoEffect) {
              workInProgress2.expirationTime = renderExpirationTime2;
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = false;
            if (current2 === null) {
              if (workInProgress2.memoizedProps.fallback !== void 0) {
                popHydrationState(workInProgress2);
              }
            } else {
              var prevState = current2.memoizedState;
              prevDidTimeout = prevState !== null;
              if (!nextDidTimeout && prevState !== null) {
                var currentFallbackChild = current2.child.sibling;
                if (currentFallbackChild !== null) {
                  var first = workInProgress2.firstEffect;
                  if (first !== null) {
                    workInProgress2.firstEffect = currentFallbackChild;
                    currentFallbackChild.nextEffect = first;
                  } else {
                    workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChild;
                    currentFallbackChild.nextEffect = null;
                  }
                  currentFallbackChild.effectTag = Deletion;
                }
              }
            }
            if (nextDidTimeout && !prevDidTimeout) {
              if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  renderDidSuspend();
                } else {
                  renderDidSuspendDelayIfPossible();
                }
              }
            }
            if (supportsPersistence) {
              if (nextDidTimeout) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (supportsMutation) {
              if (nextDidTimeout || prevDidTimeout) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (enableSuspenseCallback && workInProgress2.updateQueue !== null && workInProgress2.memoizedProps.suspenseCallback != null) {
              workInProgress2.effectTag |= Update;
            }
            break;
          }
          case Fragment:
            break;
          case Mode:
            break;
          case Profiler:
            break;
          case HostPortal:
            popHostContainer(workInProgress2);
            updateHostContainer(workInProgress2);
            break;
          case ContextProvider:
            popProvider(workInProgress2);
            break;
          case ContextConsumer:
            break;
          case MemoComponent:
            break;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            break;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              break;
            }
            var didSuspendAlready = (workInProgress2.effectTag & DidCapture) !== NoEffect;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.effectTag & DidCapture) === NoEffect);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.effectTag |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThennables = suspended.updateQueue;
                      if (newThennables !== null) {
                        workInProgress2.updateQueue = newThennables;
                        workInProgress2.effectTag |= Update;
                      }
                      if (renderState.lastEffect === null) {
                        workInProgress2.firstEffect = null;
                      }
                      workInProgress2.lastEffect = renderState.lastEffect;
                      resetChildFibers(workInProgress2, renderExpirationTime2);
                      pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.effectTag |= DidCapture;
                  didSuspendAlready = true;
                  var _newThennables = _suspended.updateQueue;
                  if (_newThennables !== null) {
                    workInProgress2.updateQueue = _newThennables;
                    workInProgress2.effectTag |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                    var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                    if (lastEffect !== null) {
                      lastEffect.nextEffect = null;
                    }
                    return null;
                  }
                } else if (now$1() > renderState.tailExpiration && renderExpirationTime2 > Never) {
                  workInProgress2.effectTag |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  var nextPriority = renderExpirationTime2 - 1;
                  workInProgress2.expirationTime = workInProgress2.childExpirationTime = nextPriority;
                  if (enableSchedulerTracing) {
                    markSpawnedWork(nextPriority);
                  }
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              if (renderState.tailExpiration === 0) {
                var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                renderState.tailExpiration = now$1() + TAIL_EXPIRATION_TIMEOUT_MS;
              }
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.lastEffect = workInProgress2.lastEffect;
              next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress2, suspenseContext);
              return next;
            }
            break;
          }
          case FundamentalComponent: {
            if (enableFundamentalAPI) {
              var fundamentalImpl = workInProgress2.type.impl;
              var fundamentalInstance = workInProgress2.stateNode;
              if (fundamentalInstance === null) {
                var getInitialState = fundamentalImpl.getInitialState;
                var fundamentalState;
                if (getInitialState !== void 0) {
                  fundamentalState = getInitialState(newProps);
                }
                fundamentalInstance = workInProgress2.stateNode = createFundamentalStateInstance(workInProgress2, newProps, fundamentalImpl, fundamentalState || {});
                var _instance5 = getFundamentalComponentInstance(fundamentalInstance);
                fundamentalInstance.instance = _instance5;
                if (fundamentalImpl.reconcileChildren === false) {
                  return null;
                }
                appendAllChildren(_instance5, workInProgress2, false, false);
                mountFundamentalComponent(fundamentalInstance);
              } else {
                var prevProps = fundamentalInstance.props;
                fundamentalInstance.prevProps = prevProps;
                fundamentalInstance.props = newProps;
                fundamentalInstance.currentFiber = workInProgress2;
                if (supportsPersistence) {
                  var _instance6 = cloneFundamentalInstance(fundamentalInstance);
                  fundamentalInstance.instance = _instance6;
                  appendAllChildren(_instance6, workInProgress2, false, false);
                }
                var shouldUpdate = shouldUpdateFundamentalComponent(fundamentalInstance);
                if (shouldUpdate) {
                  markUpdate(workInProgress2);
                }
              }
            }
            break;
          }
          case ScopeComponent: {
            if (enableScopeAPI) {
              if (current2 === null) {
                var _type3 = workInProgress2.type;
                var scopeInstance = {
                  fiber: workInProgress2,
                  methods: null
                };
                workInProgress2.stateNode = scopeInstance;
                scopeInstance.methods = createScopeMethods(_type3, scopeInstance);
                if (enableFlareAPI) {
                  var _listeners2 = newProps.listeners;
                  if (_listeners2 != null) {
                    var _rootContainerInstance2 = getRootHostContainer();
                    updateEventListeners(_listeners2, workInProgress2, _rootContainerInstance2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                  markUpdate(workInProgress2);
                }
              } else {
                if (enableFlareAPI) {
                  var _prevListeners = current2.memoizedProps.listeners;
                  var _nextListeners = newProps.listeners;
                  if (_prevListeners !== _nextListeners || workInProgress2.ref !== null) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  if (workInProgress2.ref !== null) {
                    markUpdate(workInProgress2);
                  }
                }
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              }
            }
            break;
          }
          default: {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        return null;
      }
      function unwindWork(workInProgress2, renderExpirationTime2) {
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            var effectTag = workInProgress2.effectTag;
            if (effectTag & ShouldCapture) {
              workInProgress2.effectTag = effectTag & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            var _effectTag = workInProgress2.effectTag;
            if (!((_effectTag & DidCapture) === NoEffect)) {
              {
                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
              }
            }
            workInProgress2.effectTag = _effectTag & ~ShouldCapture | DidCapture;
            return workInProgress2;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            if (enableSuspenseServerRenderer) {
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (!(workInProgress2.alternate !== null)) {
                  {
                    throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                }
                resetHydrationState();
              }
            }
            var _effectTag2 = workInProgress2.effectTag;
            if (_effectTag2 & ShouldCapture) {
              workInProgress2.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            popProvider(workInProgress2);
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            popProvider(interruptedWork);
            break;
          default:
            break;
        }
      }
      function createCapturedValue(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source)
        };
      }
      var invokeGuardedCallbackImpl = function(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error) {
          this.onError(error);
        }
      };
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");
          var invokeGuardedCallbackDev = function(name, func, context, a, b, c, d, e, f) {
            if (!(typeof document !== "undefined")) {
              {
                throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
            }
            var evt = document.createEvent("Event");
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
              func.apply(context, funcArgs);
              didError = false;
            }
            var error;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
              error = event.error;
              didSetError = true;
              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error != null && typeof error === "object") {
                  try {
                    error._suppressLogging = true;
                  } catch (inner) {
                  }
                }
              }
            }
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didError) {
              if (!didSetError) {
                error = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
              } else if (isCrossOriginError) {
                error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
              }
              this.onError(error);
            }
            window.removeEventListener("error", handleWindowError);
          };
          invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var reporter = {
        onError: function(error) {
          hasError = true;
          caughtError = error;
        }
      };
      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error = caughtError;
          hasError = false;
          caughtError = null;
          return error;
        } else {
          {
            {
              throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
      }
      function showErrorDialog(capturedError) {
        return true;
      }
      function logCapturedError(capturedError) {
        var logError2 = showErrorDialog(capturedError);
        if (logError2 === false) {
          return;
        }
        var error = capturedError.error;
        {
          var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
          if (error != null && error._suppressLogging) {
            if (errorBoundaryFound && willRetry) {
              return;
            }
            console.error(error);
          }
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage;
          if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\nRecreating the tree from scratch failed so React will unmount the tree.";
            }
          } else {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
          }
          var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console.error(combinedMessage);
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
      }
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      function logError(boundary, errorInfo) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;
        if (stack === null && source !== null) {
          stack = getStackByFiberInDevAndProd(source);
        }
        var capturedError = {
          componentName: source !== null ? getComponentName(source.type) : null,
          componentStack: stack !== null ? stack : "",
          error: errorInfo.value,
          errorBoundary: null,
          errorBoundaryName: null,
          errorBoundaryFound: false,
          willRetry: false
        };
        if (boundary !== null && boundary.tag === ClassComponent) {
          capturedError.errorBoundary = boundary.stateNode;
          capturedError.errorBoundaryName = getComponentName(boundary.type);
          capturedError.errorBoundaryFound = true;
          capturedError.willRetry = true;
        }
        try {
          logCapturedError(capturedError);
        } catch (e) {
          setTimeout(function() {
            throw e;
          });
        }
      }
      var callComponentWillUnmountWithTimer = function(current$$1, instance2) {
        startPhaseTimer(current$$1, "componentWillUnmount");
        instance2.props = current$$1.memoizedProps;
        instance2.state = current$$1.memoizedState;
        instance2.componentWillUnmount();
        stopPhaseTimer();
      };
      function safelyCallComponentWillUnmount(current$$1, instance2) {
        {
          invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance2);
          if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current$$1, unmountError);
          }
        }
      }
      function safelyDetachRef(current$$1) {
        var ref = current$$1.ref;
        if (ref !== null) {
          if (typeof ref === "function") {
            {
              invokeGuardedCallback(null, ref, null, null);
              if (hasCaughtError()) {
                var refError = clearCaughtError();
                captureCommitPhaseError(current$$1, refError);
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current$$1, destroy) {
        {
          invokeGuardedCallback(null, destroy, null);
          if (hasCaughtError()) {
            var error = clearCaughtError();
            captureCommitPhaseError(current$$1, error);
          }
        }
      }
      function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
            return;
          }
          case ClassComponent: {
            if (finishedWork.effectTag & Snapshot) {
              if (current$$1 !== null) {
                var prevProps = current$$1.memoizedProps;
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                var instance2 = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance2.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                    !(instance2.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                  }
                }
                var snapshot = instance2.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    warningWithoutStack$1(false, "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                  }
                }
                instance2.__reactInternalSnapshotBeforeUpdate = snapshot;
                stopPhaseTimer();
              }
            }
            return;
          }
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            return;
          default: {
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
      }
      function commitHookEffectList(unmountTag, mountTag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & unmountTag) !== NoEffect$1) {
              var destroy = effect.destroy;
              effect.destroy = void 0;
              if (destroy !== void 0) {
                destroy();
              }
            }
            if ((effect.tag & mountTag) !== NoEffect$1) {
              var create = effect.create;
              effect.destroy = create();
              {
                var _destroy = effect.destroy;
                if (_destroy !== void 0 && typeof _destroy !== "function") {
                  var addendum = void 0;
                  if (_destroy === null) {
                    addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                  } else if (typeof _destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + _destroy;
                  }
                  warningWithoutStack$1(false, "An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveHookEffects(finishedWork) {
        if ((finishedWork.effectTag & Passive) !== NoEffect) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
              commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
              break;
            }
            default:
              break;
          }
        }
      }
      function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
            break;
          }
          case ClassComponent: {
            var instance2 = finishedWork.stateNode;
            if (finishedWork.effectTag & Update) {
              if (current$$1 === null) {
                startPhaseTimer(finishedWork, "componentDidMount");
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance2.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                    !(instance2.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                  }
                }
                instance2.componentDidMount();
                stopPhaseTimer();
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, "componentDidUpdate");
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance2.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                    !(instance2.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                  }
                }
                instance2.componentDidUpdate(prevProps, prevState, instance2.__reactInternalSnapshotBeforeUpdate);
                stopPhaseTimer();
              }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  !(instance2.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                  !(instance2.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                }
              }
              commitUpdateQueue(finishedWork, updateQueue, instance2, committedExpirationTime);
            }
            return;
          }
          case HostRoot: {
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
            }
            return;
          }
          case HostComponent: {
            var _instance2 = finishedWork.stateNode;
            if (current$$1 === null && finishedWork.effectTag & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props, finishedWork);
            }
            return;
          }
          case HostText: {
            return;
          }
          case HostPortal: {
            return;
          }
          case Profiler: {
            if (enableProfilerTimer) {
              var onRender = finishedWork.memoizedProps.onRender;
              if (typeof onRender === "function") {
                if (enableSchedulerTracing) {
                  onRender(finishedWork.memoizedProps.id, current$$1 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                } else {
                  onRender(finishedWork.memoizedProps.id, current$$1 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
                }
              }
            }
            return;
          }
          case SuspenseComponent: {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            return;
          }
          case SuspenseListComponent:
          case IncompleteClassComponent:
          case FundamentalComponent:
          case ScopeComponent:
            return;
          default: {
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        if (supportsMutation) {
          var node = finishedWork;
          while (true) {
            if (node.tag === HostComponent) {
              var instance2 = node.stateNode;
              if (isHidden) {
                hideInstance(instance2);
              } else {
                unhideInstance(node.stateNode, node.memoizedProps);
              }
            } else if (node.tag === HostText) {
              var _instance3 = node.stateNode;
              if (isHidden) {
                hideTextInstance(_instance3);
              } else {
                unhideTextInstance(_instance3, node.memoizedProps);
              }
            } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
              var fallbackChildFragment = node.child.sibling;
              fallbackChildFragment.return = node;
              node = fallbackChildFragment;
              continue;
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === finishedWork) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance2 = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance2);
              break;
            default:
              instanceToUse = instance2;
          }
          if (enableScopeAPI && finishedWork.tag === ScopeComponent) {
            instanceToUse = instance2.methods;
          }
          if (typeof ref === "function") {
            ref(instanceToUse);
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                warningWithoutStack$1(false, "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function commitDetachRef(current$$1) {
        var currentRef = current$$1.ref;
        if (currentRef !== null) {
          if (typeof currentRef === "function") {
            currentRef(null);
          } else {
            currentRef.current = null;
          }
        }
      }
      function commitUnmount(finishedRoot, current$$1, renderPriorityLevel) {
        onCommitUnmount(current$$1);
        switch (current$$1.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            var updateQueue = current$$1.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                runWithPriority(priorityLevel, function() {
                  var effect = firstEffect;
                  do {
                    var destroy = effect.destroy;
                    if (destroy !== void 0) {
                      safelyCallDestroy(current$$1, destroy);
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                });
              }
            }
            break;
          }
          case ClassComponent: {
            safelyDetachRef(current$$1);
            var instance2 = current$$1.stateNode;
            if (typeof instance2.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(current$$1, instance2);
            }
            return;
          }
          case HostComponent: {
            if (enableFlareAPI) {
              var dependencies = current$$1.dependencies;
              if (dependencies !== null) {
                var respondersMap = dependencies.responders;
                if (respondersMap !== null) {
                  var responderInstances = Array.from(respondersMap.values());
                  for (var i = 0, length = responderInstances.length; i < length; i++) {
                    var responderInstance = responderInstances[i];
                    unmountResponderInstance(responderInstance);
                  }
                  dependencies.responders = null;
                }
              }
            }
            safelyDetachRef(current$$1);
            return;
          }
          case HostPortal: {
            if (supportsMutation) {
              unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
            } else if (supportsPersistence) {
              emptyPortalContainer(current$$1);
            }
            return;
          }
          case FundamentalComponent: {
            if (enableFundamentalAPI) {
              var fundamentalInstance = current$$1.stateNode;
              if (fundamentalInstance !== null) {
                unmountFundamentalComponent(fundamentalInstance);
                current$$1.stateNode = null;
              }
            }
            return;
          }
          case DehydratedFragment: {
            if (enableSuspenseCallback) {
              var hydrationCallbacks = finishedRoot.hydrationCallbacks;
              if (hydrationCallbacks !== null) {
                var onDeleted = hydrationCallbacks.onDeleted;
                if (onDeleted) {
                  onDeleted(current$$1.stateNode);
                }
              }
            }
            return;
          }
          case ScopeComponent: {
            if (enableScopeAPI) {
              safelyDetachRef(current$$1);
            }
          }
        }
      }
      function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
        var node = root;
        while (true) {
          commitUnmount(finishedRoot, node, renderPriorityLevel);
          if (node.child !== null && (!supportsMutation || node.tag !== HostPortal)) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === root) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === root) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function detachFiber(current$$1) {
        var alternate = current$$1.alternate;
        current$$1.return = null;
        current$$1.child = null;
        current$$1.memoizedState = null;
        current$$1.updateQueue = null;
        current$$1.dependencies = null;
        current$$1.alternate = null;
        current$$1.firstEffect = null;
        current$$1.lastEffect = null;
        current$$1.pendingProps = null;
        current$$1.memoizedProps = null;
        if (alternate !== null) {
          detachFiber(alternate);
        }
      }
      function emptyPortalContainer(current$$1) {
        if (!supportsPersistence) {
          return;
        }
        var portal = current$$1.stateNode;
        var containerInfo = portal.containerInfo;
        var emptyChildSet = createContainerChildSet(containerInfo);
        replaceContainerChildren(containerInfo, emptyChildSet);
      }
      function commitContainer(finishedWork) {
        if (!supportsPersistence) {
          return;
        }
        switch (finishedWork.tag) {
          case ClassComponent:
          case HostComponent:
          case HostText:
          case FundamentalComponent: {
            return;
          }
          case HostRoot:
          case HostPortal: {
            var portalOrRoot = finishedWork.stateNode;
            var containerInfo = portalOrRoot.containerInfo, pendingChildren = portalOrRoot.pendingChildren;
            replaceContainerChildren(containerInfo, pendingChildren);
            return;
          }
          default: {
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        {
          {
            throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.effectTag & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.effectTag & Placement)) {
              return node.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        if (!supportsMutation) {
          return;
        }
        var parentFiber = getHostParentFiber(finishedWork);
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch (parentFiber.tag) {
          case HostComponent:
            parent = parentStateNode;
            isContainer = false;
            break;
          case HostRoot:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;
          case HostPortal:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;
          case FundamentalComponent:
            if (enableFundamentalAPI) {
              parent = parentStateNode.instance;
              isContainer = false;
            }
          default: {
            {
              throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        if (parentFiber.effectTag & ContentReset) {
          resetTextContent(parent);
          parentFiber.effectTag &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork);
        var node = finishedWork;
        while (true) {
          var isHost = node.tag === HostComponent || node.tag === HostText;
          if (isHost || enableFundamentalAPI && node.tag === FundamentalComponent) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              if (isContainer) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                insertBefore(parent, stateNode, before);
              }
            } else {
              if (isContainer) {
                appendChildToContainer(parent, stateNode);
              } else {
                appendChild(parent, stateNode);
              }
            }
          } else if (node.tag === HostPortal) {
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel) {
        var node = current$$1;
        var currentParentIsValid = false;
        var currentParent;
        var currentParentIsContainer;
        while (true) {
          if (!currentParentIsValid) {
            var parent = node.return;
            findParent:
              while (true) {
                if (!(parent !== null)) {
                  {
                    throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var parentStateNode = parent.stateNode;
                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parentStateNode;
                    currentParentIsContainer = false;
                    break findParent;
                  case HostRoot:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                  case HostPortal:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                  case FundamentalComponent:
                    if (enableFundamentalAPI) {
                      currentParent = parentStateNode.instance;
                      currentParentIsContainer = false;
                    }
                }
                parent = parent.return;
              }
            currentParentIsValid = true;
          }
          if (node.tag === HostComponent || node.tag === HostText) {
            commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
            if (currentParentIsContainer) {
              removeChildFromContainer(currentParent, node.stateNode);
            } else {
              removeChild(currentParent, node.stateNode);
            }
          } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
            var fundamentalNode = node.stateNode.instance;
            commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
            if (currentParentIsContainer) {
              removeChildFromContainer(currentParent, fundamentalNode);
            } else {
              removeChild(currentParent, fundamentalNode);
            }
          } else if (enableSuspenseServerRenderer && node.tag === DehydratedFragment) {
            if (enableSuspenseCallback) {
              var hydrationCallbacks = finishedRoot.hydrationCallbacks;
              if (hydrationCallbacks !== null) {
                var onDeleted = hydrationCallbacks.onDeleted;
                if (onDeleted) {
                  onDeleted(node.stateNode);
                }
              }
            }
            if (currentParentIsContainer) {
              clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
            } else {
              clearSuspenseBoundary(currentParent, node.stateNode);
            }
          } else if (node.tag === HostPortal) {
            if (node.child !== null) {
              currentParent = node.stateNode.containerInfo;
              currentParentIsContainer = true;
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else {
            commitUnmount(finishedRoot, node, renderPriorityLevel);
            if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
          }
          if (node === current$$1) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === current$$1) {
              return;
            }
            node = node.return;
            if (node.tag === HostPortal) {
              currentParentIsValid = false;
            }
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function commitDeletion(finishedRoot, current$$1, renderPriorityLevel) {
        if (supportsMutation) {
          unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
        } else {
          commitNestedUnmounts(finishedRoot, current$$1, renderPriorityLevel);
        }
        detachFiber(current$$1);
      }
      function commitWork(current$$1, finishedWork) {
        if (!supportsMutation) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case HostRoot: {
              if (supportsHydration) {
                var root = finishedWork.stateNode;
                if (root.hydrate) {
                  root.hydrate = false;
                  commitHydratedContainer(root.containerInfo);
                }
              }
              break;
            }
          }
          commitContainer(finishedWork);
          return;
        }
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
            return;
          }
          case ClassComponent: {
            return;
          }
          case HostComponent: {
            var instance2 = finishedWork.stateNode;
            if (instance2 != null) {
              var newProps = finishedWork.memoizedProps;
              var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
              var type = finishedWork.type;
              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              if (updatePayload !== null) {
                commitUpdate(instance2, updatePayload, type, oldProps, newProps, finishedWork);
              }
              if (enableFlareAPI) {
                var prevListeners = oldProps.listeners;
                var nextListeners = newProps.listeners;
                if (prevListeners !== nextListeners) {
                  updateEventListeners(nextListeners, finishedWork, null);
                }
              }
            }
            return;
          }
          case HostText: {
            if (!(finishedWork.stateNode !== null)) {
              {
                throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps;
            var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }
          case HostRoot: {
            if (supportsHydration) {
              var _root = finishedWork.stateNode;
              if (_root.hydrate) {
                _root.hydrate = false;
                commitHydratedContainer(_root.containerInfo);
              }
            }
            return;
          }
          case Profiler: {
            return;
          }
          case SuspenseComponent: {
            commitSuspenseComponent(finishedWork);
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case SuspenseListComponent: {
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case IncompleteClassComponent: {
            return;
          }
          case FundamentalComponent: {
            if (enableFundamentalAPI) {
              var fundamentalInstance = finishedWork.stateNode;
              updateFundamentalComponent(fundamentalInstance);
            }
            return;
          }
          case ScopeComponent: {
            if (enableScopeAPI) {
              var scopeInstance = finishedWork.stateNode;
              scopeInstance.fiber = finishedWork;
              if (enableFlareAPI) {
                var _newProps = finishedWork.memoizedProps;
                var _oldProps = current$$1 !== null ? current$$1.memoizedProps : _newProps;
                var _prevListeners = _oldProps.listeners;
                var _nextListeners = _newProps.listeners;
                if (_prevListeners !== _nextListeners) {
                  updateEventListeners(_nextListeners, finishedWork, null);
                }
              }
            }
            return;
          }
          default: {
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
      }
      function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        var newDidTimeout;
        var primaryChildParent = finishedWork;
        if (newState === null) {
          newDidTimeout = false;
        } else {
          newDidTimeout = true;
          primaryChildParent = finishedWork.child;
          markCommitTimeOfFallback();
        }
        if (supportsMutation && primaryChildParent !== null) {
          hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
        }
        if (enableSuspenseCallback && newState !== null) {
          var suspenseCallback = finishedWork.memoizedProps.suspenseCallback;
          if (typeof suspenseCallback === "function") {
            var thenables = finishedWork.updateQueue;
            if (thenables !== null) {
              suspenseCallback(new Set(thenables));
            }
          } else {
            if (suspenseCallback !== void 0) {
              warning$1(false, "Unexpected type for suspenseCallback.");
            }
          }
        }
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        if (!supportsHydration) {
          return;
        }
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current$$1 = finishedWork.alternate;
          if (current$$1 !== null) {
            var prevState = current$$1.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
                if (enableSuspenseCallback) {
                  var hydrationCallbacks = finishedRoot.hydrationCallbacks;
                  if (hydrationCallbacks !== null) {
                    var onHydrated = hydrationCallbacks.onHydrated;
                    if (onHydrated) {
                      onHydrated(suspenseInstance);
                    }
                  }
                }
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var thenables = finishedWork.updateQueue;
        if (thenables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }
          thenables.forEach(function(thenable) {
            var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
            if (!retryCache.has(thenable)) {
              if (enableSchedulerTracing) {
                if (thenable.__reactDoNotTraceInteractions !== true) {
                  retry = tracing.unstable_wrap(retry);
                }
              }
              retryCache.add(thenable);
              thenable.then(retry, retry);
            }
          });
        }
      }
      function commitResetTextContent(current$$1) {
        if (!supportsMutation) {
          return;
        }
        resetTextContent(current$$1.stateNode);
      }
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime, null);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
          onUncaughtError(error);
          logError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime, null);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error = errorInfo.value;
          update.payload = function() {
            logError(fiber, errorInfo);
            return getDerivedStateFromError(error);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
              logError(fiber, errorInfo);
            }
            var error2 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error2, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown") : void 0;
              }
            }
          };
        } else {
          update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
          };
        }
        return update;
      }
      function attachPingListener(root, renderExpirationTime2, thenable) {
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root.pingCache = new PossiblyWeakMap();
          threadIDs = new Set();
          pingCache.set(thenable, threadIDs);
        } else {
          threadIDs = pingCache.get(thenable);
          if (threadIDs === void 0) {
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
          }
        }
        if (!threadIDs.has(renderExpirationTime2)) {
          threadIDs.add(renderExpirationTime2);
          var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime2);
          thenable.then(ping, ping);
        }
      }
      function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime2) {
        sourceFiber.effectTag |= Incomplete;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var thenable = value;
          checkForWrongSuspensePriorityInDEV(sourceFiber);
          var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
          var _workInProgress = returnFiber;
          do {
            if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
              var thenables = _workInProgress.updateQueue;
              if (thenables === null) {
                var updateQueue = new Set();
                updateQueue.add(thenable);
                _workInProgress.updateQueue = updateQueue;
              } else {
                thenables.add(thenable);
              }
              if ((_workInProgress.mode & BlockingMode) === NoMode) {
                _workInProgress.effectTag |= DidCapture;
                sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(Sync, null);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update);
                  }
                }
                sourceFiber.expirationTime = Sync;
                return;
              }
              attachPingListener(root, renderExpirationTime2, thenable);
              _workInProgress.effectTag |= ShouldCapture;
              _workInProgress.expirationTime = renderExpirationTime2;
              return;
            }
            _workInProgress = _workInProgress.return;
          } while (_workInProgress !== null);
          value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
        }
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.effectTag |= ShouldCapture;
              workInProgress2.expirationTime = renderExpirationTime2;
              var _update = createRootErrorUpdate(workInProgress2, _errorInfo, renderExpirationTime2);
              enqueueCapturedUpdate(workInProgress2, _update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance2 = workInProgress2.stateNode;
              if ((workInProgress2.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance2 !== null && typeof instance2.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance2))) {
                workInProgress2.effectTag |= ShouldCapture;
                workInProgress2.expirationTime = renderExpirationTime2;
                var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, renderExpirationTime2);
                enqueueCapturedUpdate(workInProgress2, _update2);
                return;
              }
              break;
            default:
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      var ceil = Math.ceil;
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
      var NoContext = 0;
      var BatchedContext = 1;
      var EventContext = 2;
      var DiscreteEventContext = 4;
      var LegacyUnbatchedContext = 8;
      var RenderContext = 16;
      var CommitContext = 32;
      var RootIncomplete = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var renderExpirationTime = NoWork;
      var workInProgressRootExitStatus = RootIncomplete;
      var workInProgressRootFatalError = null;
      var workInProgressRootLatestProcessedExpirationTime = Sync;
      var workInProgressRootLatestSuspenseTimeout = Sync;
      var workInProgressRootCanSuspendUsingConfig = null;
      var workInProgressRootNextUnprocessedUpdateTime = NoWork;
      var workInProgressRootHasPendingPing = false;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var nextEffect = null;
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsRenderPriority = NoPriority;
      var pendingPassiveEffectsExpirationTime = NoWork;
      var rootsWithPendingDiscreteUpdates = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var interruptedBy = null;
      var spawnedWorkDuringRender = null;
      var currentEventTime = NoWork;
      function requestCurrentTimeForUpdate() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return msToExpirationTime(now$1());
        }
        if (currentEventTime !== NoWork) {
          return currentEventTime;
        }
        currentEventTime = msToExpirationTime(now$1());
        return currentEventTime;
      }
      function getCurrentTime() {
        return msToExpirationTime(now$1());
      }
      function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) {
          return Sync;
        }
        var priorityLevel = getCurrentPriorityLevel();
        if ((mode & ConcurrentMode) === NoMode) {
          return priorityLevel === ImmediatePriority ? Sync : Batched;
        }
        if ((executionContext & RenderContext) !== NoContext) {
          return renderExpirationTime;
        }
        var expirationTime;
        if (suspenseConfig !== null) {
          expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
        } else {
          switch (priorityLevel) {
            case ImmediatePriority:
              expirationTime = Sync;
              break;
            case UserBlockingPriority:
              expirationTime = computeInteractiveExpiration(currentTime);
              break;
            case NormalPriority:
            case LowPriority:
              expirationTime = computeAsyncExpiration(currentTime);
              break;
            case IdlePriority:
              expirationTime = Idle;
              break;
            default: {
              {
                throw Error("Expected a valid priority level");
              }
            }
          }
        }
        if (workInProgressRoot !== null && expirationTime === renderExpirationTime) {
          expirationTime -= 1;
        }
        return expirationTime;
      }
      function scheduleUpdateOnFiber(fiber, expirationTime) {
        checkForNestedUpdates();
        warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);
        var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
        if (root === null) {
          warnAboutUpdateOnUnmountedFiberInDEV(fiber);
          return;
        }
        checkForInterruption(fiber, expirationTime);
        recordScheduleUpdate();
        var priorityLevel = getCurrentPriorityLevel();
        if (expirationTime === Sync) {
          if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            schedulePendingInteractions(root, expirationTime);
            performSyncWorkOnRoot(root);
          } else {
            ensureRootIsScheduled(root);
            schedulePendingInteractions(root, expirationTime);
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        } else {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, expirationTime);
        }
        if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority)) {
          if (rootsWithPendingDiscreteUpdates === null) {
            rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
          } else {
            var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);
            if (lastDiscreteTime === void 0 || lastDiscreteTime > expirationTime) {
              rootsWithPendingDiscreteUpdates.set(root, expirationTime);
            }
          }
        }
      }
      var scheduleWork = scheduleUpdateOnFiber;
      function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
        if (fiber.expirationTime < expirationTime) {
          fiber.expirationTime = expirationTime;
        }
        var alternate = fiber.alternate;
        if (alternate !== null && alternate.expirationTime < expirationTime) {
          alternate.expirationTime = expirationTime;
        }
        var node = fiber.return;
        var root = null;
        if (node === null && fiber.tag === HostRoot) {
          root = fiber.stateNode;
        } else {
          while (node !== null) {
            alternate = node.alternate;
            if (node.childExpirationTime < expirationTime) {
              node.childExpirationTime = expirationTime;
              if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                alternate.childExpirationTime = expirationTime;
              }
            } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
              alternate.childExpirationTime = expirationTime;
            }
            if (node.return === null && node.tag === HostRoot) {
              root = node.stateNode;
              break;
            }
            node = node.return;
          }
        }
        if (root !== null) {
          if (workInProgressRoot === root) {
            markUnprocessedUpdateTime(expirationTime);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspendedAtTime(root, renderExpirationTime);
            }
          }
          markRootUpdatedAtTime(root, expirationTime);
        }
        return root;
      }
      function getNextRootExpirationTimeToWorkOn(root) {
        var lastExpiredTime = root.lastExpiredTime;
        if (lastExpiredTime !== NoWork) {
          return lastExpiredTime;
        }
        var firstPendingTime = root.firstPendingTime;
        if (!isRootSuspendedAtTime(root, firstPendingTime)) {
          return firstPendingTime;
        }
        var lastPingedTime = root.lastPingedTime;
        var nextKnownPendingLevel = root.nextKnownPendingLevel;
        return lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
      }
      function ensureRootIsScheduled(root) {
        var lastExpiredTime = root.lastExpiredTime;
        if (lastExpiredTime !== NoWork) {
          root.callbackExpirationTime = Sync;
          root.callbackPriority = ImmediatePriority;
          root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
          return;
        }
        var expirationTime = getNextRootExpirationTimeToWorkOn(root);
        var existingCallbackNode = root.callbackNode;
        if (expirationTime === NoWork) {
          if (existingCallbackNode !== null) {
            root.callbackNode = null;
            root.callbackExpirationTime = NoWork;
            root.callbackPriority = NoPriority;
          }
          return;
        }
        var currentTime = requestCurrentTimeForUpdate();
        var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
        if (existingCallbackNode !== null) {
          var existingCallbackPriority = root.callbackPriority;
          var existingCallbackExpirationTime = root.callbackExpirationTime;
          if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
            return;
          }
          cancelCallback(existingCallbackNode);
        }
        root.callbackExpirationTime = expirationTime;
        root.callbackPriority = priorityLevel;
        var callbackNode;
        if (expirationTime === Sync) {
          callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
        } else if (disableSchedulerTimeoutBasedOnReactExpirationTime) {
          callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        } else {
          callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), {
            timeout: expirationTimeToMs(expirationTime) - now$1()
          });
        }
        root.callbackNode = callbackNode;
      }
      function performConcurrentWorkOnRoot(root, didTimeout) {
        currentEventTime = NoWork;
        if (didTimeout) {
          var currentTime = requestCurrentTimeForUpdate();
          markRootExpiredAtTime(root, currentTime);
          ensureRootIsScheduled(root);
          return null;
        }
        var expirationTime = getNextRootExpirationTimeToWorkOn(root);
        if (expirationTime !== NoWork) {
          var originalCallbackNode = root.callbackNode;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
            prepareFreshStack(root, expirationTime);
            startWorkOnPendingInteractions(root, expirationTime);
          }
          if (workInProgress !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher(root);
            var prevInteractions = pushInteractions(root);
            startWorkLoopTimer(workInProgress);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (enableSchedulerTracing) {
              popInteractions(prevInteractions);
            }
            if (workInProgressRootExitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              stopInterruptedWorkLoopTimer();
              prepareFreshStack(root, expirationTime);
              markRootSuspendedAtTime(root, expirationTime);
              ensureRootIsScheduled(root);
              throw fatalError;
            }
            if (workInProgress !== null) {
              stopInterruptedWorkLoopTimer();
            } else {
              stopFinishedWorkLoopTimer();
              var finishedWork = root.finishedWork = root.current.alternate;
              root.finishedExpirationTime = expirationTime;
              finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
            }
            ensureRootIsScheduled(root);
            if (root.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root);
            }
          }
        }
        return null;
      }
      function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
        workInProgressRoot = null;
        switch (exitStatus) {
          case RootIncomplete:
          case RootFatalErrored: {
            {
              {
                throw Error("Root did not complete. This is a bug in React.");
              }
            }
          }
          case RootErrored: {
            markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime);
            break;
          }
          case RootSuspended: {
            markRootSuspendedAtTime(root, expirationTime);
            var lastSuspendedTime = root.lastSuspendedTime;
            if (expirationTime === lastSuspendedTime) {
              root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
            }
            flushSuspensePriorityWarningInDEV();
            var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
            if (hasNotProcessedNewUpdates && !(flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1();
              if (msUntilTimeout > 10) {
                if (workInProgressRootHasPendingPing) {
                  var lastPingedTime = root.lastPingedTime;
                  if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                    root.lastPingedTime = expirationTime;
                    prepareFreshStack(root, expirationTime);
                    break;
                  }
                }
                var nextTime = getNextRootExpirationTimeToWorkOn(root);
                if (nextTime !== NoWork && nextTime !== expirationTime) {
                  break;
                }
                if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                  root.lastPingedTime = lastSuspendedTime;
                  break;
                }
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                break;
              }
            }
            commitRoot(root);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspendedAtTime(root, expirationTime);
            var _lastSuspendedTime = root.lastSuspendedTime;
            if (expirationTime === _lastSuspendedTime) {
              root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
            }
            flushSuspensePriorityWarningInDEV();
            if (!(flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
              if (workInProgressRootHasPendingPing) {
                var _lastPingedTime = root.lastPingedTime;
                if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                  root.lastPingedTime = expirationTime;
                  prepareFreshStack(root, expirationTime);
                  break;
                }
              }
              var _nextTime = getNextRootExpirationTimeToWorkOn(root);
              if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                break;
              }
              if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                root.lastPingedTime = _lastSuspendedTime;
                break;
              }
              var _msUntilTimeout;
              if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now$1();
              } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                _msUntilTimeout = 0;
              } else {
                var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                var currentTimeMs = now$1();
                var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                var timeElapsed = currentTimeMs - eventTimeMs;
                if (timeElapsed < 0) {
                  timeElapsed = 0;
                }
                _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                if (timeUntilExpirationMs < _msUntilTimeout) {
                  _msUntilTimeout = timeUntilExpirationMs;
                }
              }
              if (_msUntilTimeout > 10) {
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root);
            break;
          }
          case RootCompleted: {
            if (!(flushSuspenseFallbacksInTests && IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
              var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
              if (_msUntilTimeout2 > 10) {
                markRootSuspendedAtTime(root, expirationTime);
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
                break;
              }
            }
            commitRoot(root);
            break;
          }
          default: {
            {
              {
                throw Error("Unknown root exit status.");
              }
            }
          }
        }
      }
      function performSyncWorkOnRoot(root) {
        var lastExpiredTime = root.lastExpiredTime;
        var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
        if (root.finishedExpirationTime === expirationTime) {
          commitRoot(root);
        } else {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
            prepareFreshStack(root, expirationTime);
            startWorkOnPendingInteractions(root, expirationTime);
          }
          if (workInProgress !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher(root);
            var prevInteractions = pushInteractions(root);
            startWorkLoopTimer(workInProgress);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (enableSchedulerTracing) {
              popInteractions(prevInteractions);
            }
            if (workInProgressRootExitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              stopInterruptedWorkLoopTimer();
              prepareFreshStack(root, expirationTime);
              markRootSuspendedAtTime(root, expirationTime);
              ensureRootIsScheduled(root);
              throw fatalError;
            }
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            } else {
              stopFinishedWorkLoopTimer();
              root.finishedWork = root.current.alternate;
              root.finishedExpirationTime = expirationTime;
              finishSyncRender(root, workInProgressRootExitStatus, expirationTime);
            }
            ensureRootIsScheduled(root);
          }
        }
        return null;
      }
      function finishSyncRender(root, exitStatus, expirationTime) {
        workInProgressRoot = null;
        {
          if (exitStatus === RootSuspended || exitStatus === RootSuspendedWithDelay) {
            flushSuspensePriorityWarningInDEV();
          }
        }
        commitRoot(root);
      }
      function flushRoot(root, expirationTime) {
        markRootExpiredAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushSyncCallbackQueue();
        }
      }
      function flushDiscreteUpdates() {
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
          if ((executionContext & RenderContext) !== NoContext) {
            warning$1(false, "unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
          }
          return;
        }
        flushPendingDiscreteUpdates();
        flushPassiveEffects();
      }
      function deferredUpdates(fn) {
        return runWithPriority(NormalPriority, fn);
      }
      function syncUpdates(fn, a, b, c) {
        return runWithPriority(ImmediatePriority, fn.bind(null, a, b, c));
      }
      function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
          var roots = rootsWithPendingDiscreteUpdates;
          rootsWithPendingDiscreteUpdates = null;
          roots.forEach(function(expirationTime, root) {
            markRootExpiredAtTime(root, expirationTime);
            ensureRootIsScheduled(root);
          });
          flushSyncCallbackQueue();
        }
      }
      function batchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }
      function batchedEventUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }
      function discreteUpdates(fn, a, b, c) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
          return runWithPriority(UserBlockingPriority, fn.bind(null, a, b, c));
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }
      function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }
      function flushSync(fn, a) {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          {
            {
              throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
            }
          }
        }
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return runWithPriority(ImmediatePriority, fn.bind(null, a));
        } finally {
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
        }
      }
      function flushControlled(fn) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          runWithPriority(ImmediatePriority, fn);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }
      function prepareFreshStack(root, expirationTime) {
        root.finishedWork = null;
        root.finishedExpirationTime = NoWork;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            unwindInterruptedWork(interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root;
        workInProgress = createWorkInProgress(root.current, null, expirationTime);
        renderExpirationTime = expirationTime;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootLatestProcessedExpirationTime = Sync;
        workInProgressRootLatestSuspenseTimeout = Sync;
        workInProgressRootCanSuspendUsingConfig = null;
        workInProgressRootNextUnprocessedUpdateTime = NoWork;
        workInProgressRootHasPendingPing = false;
        if (enableSchedulerTracing) {
          spawnedWorkDuringRender = null;
        }
        {
          ReactStrictModeWarnings.discardPendingWarnings();
          componentsThatTriggeredHighPriSuspend = null;
        }
      }
      function handleError(root, thrownValue) {
        do {
          try {
            resetContextDependencies();
            resetHooks();
            resetCurrentFiber();
            if (workInProgress === null || workInProgress.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              return null;
            }
            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
            }
            throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime);
            workInProgress = completeUnitOfWork(workInProgress);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher(root) {
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
      function pushInteractions(root) {
        if (enableSchedulerTracing) {
          var prevInteractions = tracing.__interactionsRef.current;
          tracing.__interactionsRef.current = root.memoizedInteractions;
          return prevInteractions;
        }
        return null;
      }
      function popInteractions(prevInteractions) {
        if (enableSchedulerTracing) {
          tracing.__interactionsRef.current = prevInteractions;
        }
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now$1();
      }
      function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
        if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
          workInProgressRootLatestProcessedExpirationTime = expirationTime;
        }
        if (suspenseConfig !== null) {
          if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
            workInProgressRootLatestSuspenseTimeout = expirationTime;
            workInProgressRootCanSuspendUsingConfig = suspenseConfig;
          }
        }
      }
      function markUnprocessedUpdateTime(expirationTime) {
        if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
          workInProgressRootNextUnprocessedUpdateTime = expirationTime;
        }
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
          markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime);
          markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
        }
      }
      function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) {
          workInProgressRootExitStatus = RootErrored;
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootIncomplete;
      }
      function inferTimeFromExpirationTime(expirationTime) {
        var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
        return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
      }
      function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
        var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
        return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          workInProgress = performUnitOfWork(workInProgress);
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          workInProgress = performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current$$1 = unitOfWork.alternate;
        startWorkTimer(unitOfWork);
        setCurrentFiber(unitOfWork);
        var next;
        if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) {
          next = completeUnitOfWork(unitOfWork);
        }
        ReactCurrentOwner$1.current = null;
        return next;
      }
      function completeUnitOfWork(unitOfWork) {
        workInProgress = unitOfWork;
        do {
          var current$$1 = workInProgress.alternate;
          var returnFiber = workInProgress.return;
          if ((workInProgress.effectTag & Incomplete) === NoEffect) {
            setCurrentFiber(workInProgress);
            var next = void 0;
            if (!enableProfilerTimer || (workInProgress.mode & ProfileMode) === NoMode) {
              next = completeWork(current$$1, workInProgress, renderExpirationTime);
            } else {
              startProfilerTimer(workInProgress);
              next = completeWork(current$$1, workInProgress, renderExpirationTime);
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
            }
            stopWorkTimer(workInProgress);
            resetCurrentFiber();
            resetChildExpirationTime(workInProgress);
            if (next !== null) {
              return next;
            }
            if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = workInProgress.firstEffect;
              }
              if (workInProgress.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                }
                returnFiber.lastEffect = workInProgress.lastEffect;
              }
              var effectTag = workInProgress.effectTag;
              if (effectTag > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress;
                } else {
                  returnFiber.firstEffect = workInProgress;
                }
                returnFiber.lastEffect = workInProgress;
              }
            }
          } else {
            var _next = unwindWork(workInProgress, renderExpirationTime);
            if (enableProfilerTimer && (workInProgress.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
              var actualDuration = workInProgress.actualDuration;
              var child = workInProgress.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              workInProgress.actualDuration = actualDuration;
            }
            if (_next !== null) {
              stopFailedWorkTimer(workInProgress);
              _next.effectTag &= HostEffectMask;
              return _next;
            }
            stopWorkTimer(workInProgress);
            if (returnFiber !== null) {
              returnFiber.firstEffect = returnFiber.lastEffect = null;
              returnFiber.effectTag |= Incomplete;
            }
          }
          var siblingFiber = workInProgress.sibling;
          if (siblingFiber !== null) {
            return siblingFiber;
          }
          workInProgress = returnFiber;
        } while (workInProgress !== null);
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootCompleted;
        }
        return null;
      }
      function getRemainingExpirationTime(fiber) {
        var updateExpirationTime = fiber.expirationTime;
        var childExpirationTime = fiber.childExpirationTime;
        return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
      }
      function resetChildExpirationTime(completedWork) {
        if (renderExpirationTime !== Never && completedWork.childExpirationTime === Never) {
          return;
        }
        var newChildExpirationTime = NoWork;
        if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
          var child = completedWork.child;
          while (child !== null) {
            var childUpdateExpirationTime = child.expirationTime;
            var childChildExpirationTime = child.childExpirationTime;
            if (childUpdateExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = childUpdateExpirationTime;
            }
            if (childChildExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = childChildExpirationTime;
            }
            if (shouldBubbleActualDurations) {
              actualDuration += child.actualDuration;
            }
            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }
          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;
          while (_child !== null) {
            var _childUpdateExpirationTime = _child.expirationTime;
            var _childChildExpirationTime = _child.childExpirationTime;
            if (_childUpdateExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = _childUpdateExpirationTime;
            }
            if (_childChildExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = _childChildExpirationTime;
            }
            _child = _child.sibling;
          }
        }
        completedWork.childExpirationTime = newChildExpirationTime;
      }
      function commitRoot(root) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
        return null;
      }
      function commitRootImpl(root, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          {
            throw Error("Should not already be working.");
          }
        }
        var finishedWork = root.finishedWork;
        var expirationTime = root.finishedExpirationTime;
        if (finishedWork === null) {
          return null;
        }
        root.finishedWork = null;
        root.finishedExpirationTime = NoWork;
        if (!(finishedWork !== root.current)) {
          {
            throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        root.callbackNode = null;
        root.callbackExpirationTime = NoWork;
        root.callbackPriority = NoPriority;
        root.nextKnownPendingLevel = NoWork;
        startCommitTimer();
        var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
        markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);
        if (root === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          renderExpirationTime = NoWork;
        } else {
        }
        var firstEffect;
        if (finishedWork.effectTag > PerformedWork) {
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork;
            firstEffect = finishedWork.firstEffect;
          } else {
            firstEffect = finishedWork;
          }
        } else {
          firstEffect = finishedWork.firstEffect;
        }
        if (firstEffect !== null) {
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root);
          ReactCurrentOwner$1.current = null;
          startCommitSnapshotEffectsTimer();
          prepareForCommit(root.containerInfo);
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitBeforeMutationEffects, null);
              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var error = clearCaughtError();
                captureCommitPhaseError(nextEffect, error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          stopCommitSnapshotEffectsTimer();
          if (enableProfilerTimer) {
            recordCommitTime();
          }
          startCommitHostEffectsTimer();
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error = clearCaughtError();
                captureCommitPhaseError(nextEffect, _error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          stopCommitHostEffectsTimer();
          resetAfterCommit(root.containerInfo);
          root.current = finishedWork;
          startCommitLifeCyclesTimer();
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);
              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error2 = clearCaughtError();
                captureCommitPhaseError(nextEffect, _error2);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          stopCommitLifeCyclesTimer();
          nextEffect = null;
          requestPaint();
          if (enableSchedulerTracing) {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
        } else {
          root.current = finishedWork;
          startCommitSnapshotEffectsTimer();
          stopCommitSnapshotEffectsTimer();
          if (enableProfilerTimer) {
            recordCommitTime();
          }
          startCommitHostEffectsTimer();
          stopCommitHostEffectsTimer();
          startCommitLifeCyclesTimer();
          stopCommitLifeCyclesTimer();
        }
        stopCommitTimer();
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root;
          pendingPassiveEffectsExpirationTime = expirationTime;
          pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
          nextEffect = firstEffect;
          while (nextEffect !== null) {
            var nextNextEffect = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = nextNextEffect;
          }
        }
        var remainingExpirationTime2 = root.firstPendingTime;
        if (remainingExpirationTime2 !== NoWork) {
          if (enableSchedulerTracing) {
            if (spawnedWorkDuringRender !== null) {
              var expirationTimes = spawnedWorkDuringRender;
              spawnedWorkDuringRender = null;
              for (var i = 0; i < expirationTimes.length; i++) {
                scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
              }
            }
            schedulePendingInteractions(root, remainingExpirationTime2);
          }
        } else {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        if (enableSchedulerTracing) {
          if (!rootDidHavePassiveEffects) {
            finishPendingInteractions(root, expirationTime);
          }
        }
        if (remainingExpirationTime2 === Sync) {
          if (root === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root;
          }
        } else {
          nestedUpdateCount = 0;
        }
        onCommitRoot(finishedWork.stateNode, expirationTime);
        ensureRootIsScheduled(root);
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var _error3 = firstUncaughtError;
          firstUncaughtError = null;
          throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
          return null;
        }
        flushSyncCallbackQueue();
        return null;
      }
      function commitBeforeMutationEffects() {
        while (nextEffect !== null) {
          var effectTag = nextEffect.effectTag;
          if ((effectTag & Snapshot) !== NoEffect) {
            setCurrentFiber(nextEffect);
            recordEffect();
            var current$$1 = nextEffect.alternate;
            commitBeforeMutationLifeCycles(current$$1, nextEffect);
            resetCurrentFiber();
          }
          if ((effectTag & Passive) !== NoEffect) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          nextEffect = nextEffect.nextEffect;
        }
      }
      function commitMutationEffects(root, renderPriorityLevel) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var effectTag = nextEffect.effectTag;
          if (effectTag & ContentReset) {
            commitResetTextContent(nextEffect);
          }
          if (effectTag & Ref) {
            var current$$1 = nextEffect.alternate;
            if (current$$1 !== null) {
              commitDetachRef(current$$1);
            }
          }
          var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
          switch (primaryEffectTag) {
            case Placement: {
              commitPlacement(nextEffect);
              nextEffect.effectTag &= ~Placement;
              break;
            }
            case PlacementAndUpdate: {
              commitPlacement(nextEffect);
              nextEffect.effectTag &= ~Placement;
              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }
            case Hydrating: {
              nextEffect.effectTag &= ~Hydrating;
              break;
            }
            case HydratingAndUpdate: {
              nextEffect.effectTag &= ~Hydrating;
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }
            case Update: {
              var _current3 = nextEffect.alternate;
              commitWork(_current3, nextEffect);
              break;
            }
            case Deletion: {
              commitDeletion(root, nextEffect, renderPriorityLevel);
              break;
            }
          }
          recordEffect();
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }
      function commitLayoutEffects(root, committedExpirationTime) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var effectTag = nextEffect.effectTag;
          if (effectTag & (Update | Callback)) {
            recordEffect();
            var current$$1 = nextEffect.alternate;
            commitLifeCycles(root, current$$1, nextEffect, committedExpirationTime);
          }
          if (effectTag & Ref) {
            recordEffect();
            commitAttachRef(nextEffect);
          }
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }
      function flushPassiveEffects() {
        if (pendingPassiveEffectsRenderPriority !== NoPriority) {
          var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
          pendingPassiveEffectsRenderPriority = NoPriority;
          return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
        }
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var root = rootWithPendingPassiveEffects;
        var expirationTime = pendingPassiveEffectsExpirationTime;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsExpirationTime = NoWork;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          {
            throw Error("Cannot flush passive effects while already rendering.");
          }
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root);
        var effect = root.current.firstEffect;
        while (effect !== null) {
          {
            setCurrentFiber(effect);
            invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);
            if (hasCaughtError()) {
              if (!(effect !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var error = clearCaughtError();
              captureCommitPhaseError(effect, error);
            }
            resetCurrentFiber();
          }
          var nextNextEffect = effect.nextEffect;
          effect.nextEffect = null;
          effect = nextNextEffect;
        }
        if (enableSchedulerTracing) {
          popInteractions(prevInteractions);
          finishPendingInteractions(root, expirationTime);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue();
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance2) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance2);
      }
      function markLegacyErrorBoundaryAsFailed(instance2) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance2]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance2);
        }
      }
      function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
        enqueueUpdate(rootFiber, update);
        var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }
      }
      function captureCommitPhaseError(sourceFiber, error) {
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
          return;
        }
        var fiber = sourceFiber.return;
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance2 = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance2.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance2)) {
              var errorInfo = createCapturedValue(error, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, Sync);
              enqueueUpdate(fiber, update);
              var root = markUpdateTimeFromFiberToRoot(fiber, Sync);
              if (root !== null) {
                ensureRootIsScheduled(root);
                schedulePendingInteractions(root, Sync);
              }
              return;
            }
          }
          fiber = fiber.return;
        }
      }
      function pingSuspendedRoot(root, thenable, suspendedTime) {
        var pingCache = root.pingCache;
        if (pingCache !== null) {
          pingCache.delete(thenable);
        }
        if (workInProgressRoot === root && renderExpirationTime === suspendedTime) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root, renderExpirationTime);
          } else {
            workInProgressRootHasPendingPing = true;
          }
          return;
        }
        if (!isRootSuspendedAtTime(root, suspendedTime)) {
          return;
        }
        var lastPingedTime = root.lastPingedTime;
        if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
          return;
        }
        root.lastPingedTime = suspendedTime;
        if (root.finishedExpirationTime === suspendedTime) {
          root.finishedExpirationTime = NoWork;
          root.finishedWork = null;
        }
        ensureRootIsScheduled(root);
        schedulePendingInteractions(root, suspendedTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryTime) {
        if (retryTime === NoWork) {
          var suspenseConfig = null;
          var currentTime = requestCurrentTimeForUpdate();
          retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
        }
        var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, retryTime);
        }
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryTime = NoWork;
        if (suspenseState !== null) {
          retryTime = suspenseState.retryTime;
        }
        retryTimedOutBoundary(boundaryFiber, retryTime);
      }
      function resolveRetryThenable(boundaryFiber, thenable) {
        var retryTime = NoWork;
        var retryCache;
        if (enableSuspenseServerRenderer) {
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryTime = suspenseState.retryTime;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default: {
              {
                throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
              }
            }
          }
        } else {
          retryCache = boundaryFiber.stateNode;
        }
        if (retryCache !== null) {
          retryCache.delete(thenable);
        }
        retryTimedOutBoundary(boundaryFiber, retryTime);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
        var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
        if (busyMinDurationMs <= 0) {
          return 0;
        }
        var busyDelayMs = suspenseConfig.busyDelayMs | 0;
        var currentTimeMs = now$1();
        var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
        var timeElapsed = currentTimeMs - eventTimeMs;
        if (timeElapsed <= busyDelayMs) {
          return 0;
        }
        var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
        return msUntilTimeout;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          {
            {
              throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
          }
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            warning$1(false, "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          if (warnAboutDeprecatedLifecycles) {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      function stopFinishedWorkLoopTimer() {
        var didCompleteRoot = true;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
      }
      function stopInterruptedWorkLoopTimer() {
        var didCompleteRoot = false;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
      }
      function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
        if (enableUserTimingAPI && workInProgressRoot !== null && updateExpirationTime > renderExpirationTime) {
          interruptedBy = fiberThatReceivedUpdate;
        }
      }
      var didWarnStateUpdateForUnmountedComponent = null;
      function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        {
          var tag = fiber.tag;
          if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
            return;
          }
          var componentName = getComponentName(fiber.type) || "ReactComponent";
          if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForUnmountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
          }
          warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
        }
      }
      var beginWork$$1;
      if (replayFailedUnitOfWorkWithInvokeGuardedCallback) {
        var dummyFiber = null;
        beginWork$$1 = function(current$$1, unitOfWork, expirationTime) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork$1(current$$1, unitOfWork, expirationTime);
          } catch (originalError) {
            if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetContextDependencies();
            resetHooks();
            unwindInterruptedWork(unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork$1, null, current$$1, unitOfWork, expirationTime);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              throw replayError;
            } else {
              throw originalError;
            }
          }
        };
      } else {
        beginWork$$1 = beginWork$1;
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInGetChildContext = false;
      function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber) {
        {
          if (fiber.tag === ClassComponent) {
            switch (phase) {
              case "getChildContext":
                if (didWarnAboutUpdateInGetChildContext) {
                  return;
                }
                warningWithoutStack$1(false, "setState(...): Cannot call setState() inside getChildContext()");
                didWarnAboutUpdateInGetChildContext = true;
                break;
              case "render":
                if (didWarnAboutUpdateInRender) {
                  return;
                }
                warningWithoutStack$1(false, "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                didWarnAboutUpdateInRender = true;
                break;
            }
          }
        }
      }
      var IsThisRendererActing = {
        current: false
      };
      function warnIfNotScopedWithMatchingAct(fiber) {
        {
          if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            warningWithoutStack$1(false, "It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s", getStackByFiberInDevAndProd(fiber));
          }
        }
      }
      function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        {
          if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            warningWithoutStack$1(false, "An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
          }
        }
      }
      function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        {
          if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            warningWithoutStack$1(false, "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
          }
        }
      }
      var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
      var didWarnAboutUnmockedScheduler = false;
      function warnIfUnmockedScheduler(fiber) {
        {
          if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
              didWarnAboutUnmockedScheduler = true;
              warningWithoutStack$1(false, `In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://fb.me/react-mock-scheduler`);
            } else if (warnAboutUnmockedScheduler === true) {
              didWarnAboutUnmockedScheduler = true;
              warningWithoutStack$1(false, `Starting from React v17, the "scheduler" module will need to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://fb.me/react-mock-scheduler`);
            }
          }
        }
      }
      var componentsThatTriggeredHighPriSuspend = null;
      function checkForWrongSuspensePriorityInDEV(sourceFiber) {
        {
          var currentPriorityLevel = getCurrentPriorityLevel();
          if ((sourceFiber.mode & ConcurrentMode) !== NoEffect && (currentPriorityLevel === UserBlockingPriority || currentPriorityLevel === ImmediatePriority)) {
            var workInProgressNode = sourceFiber;
            while (workInProgressNode !== null) {
              var current$$1 = workInProgressNode.alternate;
              if (current$$1 !== null) {
                switch (workInProgressNode.tag) {
                  case ClassComponent:
                    var updateQueue = current$$1.updateQueue;
                    if (updateQueue !== null) {
                      var update = updateQueue.firstUpdate;
                      while (update !== null) {
                        var priorityLevel = update.priority;
                        if (priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority) {
                          if (componentsThatTriggeredHighPriSuspend === null) {
                            componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                          } else {
                            componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                          }
                          break;
                        }
                        update = update.next;
                      }
                    }
                    break;
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent:
                    if (workInProgressNode.memoizedState !== null && workInProgressNode.memoizedState.baseUpdate !== null) {
                      var _update = workInProgressNode.memoizedState.baseUpdate;
                      while (_update !== null) {
                        var priority = _update.priority;
                        if (priority === UserBlockingPriority || priority === ImmediatePriority) {
                          if (componentsThatTriggeredHighPriSuspend === null) {
                            componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                          } else {
                            componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                          }
                          break;
                        }
                        if (_update.next === workInProgressNode.memoizedState.baseUpdate) {
                          break;
                        }
                        _update = _update.next;
                      }
                    }
                    break;
                  default:
                    break;
                }
              }
              workInProgressNode = workInProgressNode.return;
            }
          }
        }
      }
      function flushSuspensePriorityWarningInDEV() {
        {
          if (componentsThatTriggeredHighPriSuspend !== null) {
            var componentNames = [];
            componentsThatTriggeredHighPriSuspend.forEach(function(name) {
              return componentNames.push(name);
            });
            componentsThatTriggeredHighPriSuspend = null;
            if (componentNames.length > 0) {
              warningWithoutStack$1(false, "%s triggered a user-blocking update that suspended.\n\nThe fix is to split the update into multiple parts: a user-blocking update to provide immediate feedback, and another update that triggers the bulk of the changes.\n\nRefer to the documentation for useTransition to learn how to implement this pattern.", componentNames.sort().join(", "));
            }
          }
        }
      }
      function computeThreadID(root, expirationTime) {
        return expirationTime * 1e3 + root.interactionThreadID;
      }
      function markSpawnedWork(expirationTime) {
        if (!enableSchedulerTracing) {
          return;
        }
        if (spawnedWorkDuringRender === null) {
          spawnedWorkDuringRender = [expirationTime];
        } else {
          spawnedWorkDuringRender.push(expirationTime);
        }
      }
      function scheduleInteractions(root, expirationTime, interactions) {
        if (!enableSchedulerTracing) {
          return;
        }
        if (interactions.size > 0) {
          var pendingInteractionMap = root.pendingInteractionMap;
          var pendingInteractions = pendingInteractionMap.get(expirationTime);
          if (pendingInteractions != null) {
            interactions.forEach(function(interaction) {
              if (!pendingInteractions.has(interaction)) {
                interaction.__count++;
              }
              pendingInteractions.add(interaction);
            });
          } else {
            pendingInteractionMap.set(expirationTime, new Set(interactions));
            interactions.forEach(function(interaction) {
              interaction.__count++;
            });
          }
          var subscriber = tracing.__subscriberRef.current;
          if (subscriber !== null) {
            var threadID = computeThreadID(root, expirationTime);
            subscriber.onWorkScheduled(interactions, threadID);
          }
        }
      }
      function schedulePendingInteractions(root, expirationTime) {
        if (!enableSchedulerTracing) {
          return;
        }
        scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
      }
      function startWorkOnPendingInteractions(root, expirationTime) {
        if (!enableSchedulerTracing) {
          return;
        }
        var interactions = new Set();
        root.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
          if (scheduledExpirationTime >= expirationTime) {
            scheduledInteractions.forEach(function(interaction) {
              return interactions.add(interaction);
            });
          }
        });
        root.memoizedInteractions = interactions;
        if (interactions.size > 0) {
          var subscriber = tracing.__subscriberRef.current;
          if (subscriber !== null) {
            var threadID = computeThreadID(root, expirationTime);
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              scheduleCallback(ImmediatePriority, function() {
                throw error;
              });
            }
          }
        }
      }
      function finishPendingInteractions(root, committedExpirationTime) {
        if (!enableSchedulerTracing) {
          return;
        }
        var earliestRemainingTimeAfterCommit = root.firstPendingTime;
        var subscriber;
        try {
          subscriber = tracing.__subscriberRef.current;
          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(root, committedExpirationTime);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          scheduleCallback(ImmediatePriority, function() {
            throw error;
          });
        } finally {
          var pendingInteractionMap = root.pendingInteractionMap;
          pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
              pendingInteractionMap.delete(scheduledExpirationTime);
              scheduledInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error) {
                    scheduleCallback(ImmediatePriority, function() {
                      throw error;
                    });
                  }
                }
              });
            }
          });
        }
      }
      var onCommitFiberRoot = null;
      var onCommitFiberUnmount = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            warningWithoutStack$1(false, "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
          }
          return true;
        }
        try {
          var rendererID = hook.inject(internals);
          onCommitFiberRoot = function(root, expirationTime) {
            try {
              var didError = (root.current.effectTag & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var currentTime = getCurrentTime();
                var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
              } else {
                hook.onCommitFiberRoot(rendererID, root, void 0, didError);
              }
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                warningWithoutStack$1(false, "React DevTools encountered an error: %s", err);
              }
            }
          };
          onCommitFiberUnmount = function(fiber) {
            try {
              hook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                warningWithoutStack$1(false, "React DevTools encountered an error: %s", err);
              }
            }
          };
        } catch (err) {
          {
            warningWithoutStack$1(false, "React DevTools encountered an error: %s.", err);
          }
        }
        return true;
      }
      function onCommitRoot(root, expirationTime) {
        if (typeof onCommitFiberRoot === "function") {
          onCommitFiberRoot(root, expirationTime);
        }
      }
      function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === "function") {
          onCommitFiberUnmount(fiber);
        }
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          var testMap = new Map([[nonExtensibleObject, null]]);
          var testSet = new Set([nonExtensibleObject]);
          testMap.set(0, 0);
          testSet.add(0);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = 1;
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.childExpirationTime = NoWork;
        this.alternate = null;
        if (enableProfilerTimer) {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        if (enableUserTimingAPI) {
          this._debugID = debugCounter++;
          this._debugIsCurrentlyTiming = false;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === void 0;
      }
      function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") {
          return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== void 0 && Component !== null) {
          var $$typeof = Component.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps, expirationTime) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugID = current2._debugID;
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.effectTag = NoEffect;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          if (enableProfilerTimer) {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.childExpirationTime = current2.childExpirationTime;
        workInProgress2.expirationTime = current2.expirationTime;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          expirationTime: currentDependencies.expirationTime,
          firstContext: currentDependencies.firstContext,
          responders: currentDependencies.responders
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        if (enableProfilerTimer) {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
            default:
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderExpirationTime2) {
        workInProgress2.effectTag &= Placement;
        workInProgress2.nextEffect = null;
        workInProgress2.firstEffect = null;
        workInProgress2.lastEffect = null;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childExpirationTime = NoWork;
          workInProgress2.expirationTime = renderExpirationTime2;
          workInProgress2.child = null;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          if (enableProfilerTimer) {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childExpirationTime = current2.childExpirationTime;
          workInProgress2.expirationTime = current2.expirationTime;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            expirationTime: currentDependencies.expirationTime,
            firstContext: currentDependencies.firstContext,
            responders: currentDependencies.responders
          };
          if (enableProfilerTimer) {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode | BlockingMode | StrictMode;
        } else if (tag === BlockingRoot) {
          mode = BlockingMode | StrictMode;
        } else {
          mode = NoMode;
        }
        if (enableProfilerTimer && isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
        var fiber;
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
              case REACT_CONCURRENT_MODE_TYPE:
                fiberTag = Mode;
                mode |= ConcurrentMode | BlockingMode | StrictMode;
                break;
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                    case REACT_FUNDAMENTAL_TYPE:
                      if (enableFundamentalAPI) {
                        return createFiberFromFundamental(type, pendingProps, mode, expirationTime, key);
                      }
                      break;
                    case REACT_SCOPE_TYPE:
                      if (enableScopeAPI) {
                        return createFiberFromScope(type, pendingProps, mode, expirationTime, key);
                      }
                  }
                }
                var info = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentName(owner.type) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                {
                  {
                    throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                  }
                }
              }
            }
        }
        fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromElement(element, mode, expirationTime) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromFundamental(fundamentalComponent, pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(FundamentalComponent, pendingProps, key, mode);
        fiber.elementType = fundamentalComponent;
        fiber.type = fundamentalComponent;
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromScope(scope, pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(ScopeComponent, pendingProps, key, mode);
        fiber.type = scope;
        fiber.elementType = scope;
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
        {
          if (typeof pendingProps.id !== "string" || typeof pendingProps.onRender !== "function") {
            warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        {
          fiber.type = REACT_SUSPENSE_LIST_TYPE;
        }
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromText(content, mode, expirationTime) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        fiber.type = "DELETED";
        return fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
      }
      function createFiberFromPortal(portal, mode, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.effectTag = source.effectTag;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.expirationTime = source.expirationTime;
        target.childExpirationTime = source.childExpirationTime;
        target.alternate = source.alternate;
        if (enableProfilerTimer) {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.current = null;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.pingCache = null;
        this.finishedExpirationTime = NoWork;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoPriority;
        this.firstPendingTime = NoWork;
        this.firstSuspendedTime = NoWork;
        this.lastSuspendedTime = NoWork;
        this.nextKnownPendingLevel = NoWork;
        this.lastPingedTime = NoWork;
        this.lastExpiredTime = NoWork;
        if (enableSchedulerTracing) {
          this.interactionThreadID = tracing.unstable_getThreadID();
          this.memoizedInteractions = new Set();
          this.pendingInteractionMap = new Map();
        }
        if (enableSuspenseCallback) {
          this.hydrationCallbacks = null;
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate);
        if (enableSuspenseCallback) {
          root.hydrationCallbacks = hydrationCallbacks;
        }
        var uninitializedFiber = createHostRootFiber(tag);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        return root;
      }
      function isRootSuspendedAtTime(root, expirationTime) {
        var firstSuspendedTime = root.firstSuspendedTime;
        var lastSuspendedTime = root.lastSuspendedTime;
        return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
      }
      function markRootSuspendedAtTime(root, expirationTime) {
        var firstSuspendedTime = root.firstSuspendedTime;
        var lastSuspendedTime = root.lastSuspendedTime;
        if (firstSuspendedTime < expirationTime) {
          root.firstSuspendedTime = expirationTime;
        }
        if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
          root.lastSuspendedTime = expirationTime;
        }
        if (expirationTime <= root.lastPingedTime) {
          root.lastPingedTime = NoWork;
        }
        if (expirationTime <= root.lastExpiredTime) {
          root.lastExpiredTime = NoWork;
        }
      }
      function markRootUpdatedAtTime(root, expirationTime) {
        var firstPendingTime = root.firstPendingTime;
        if (expirationTime > firstPendingTime) {
          root.firstPendingTime = expirationTime;
        }
        var firstSuspendedTime = root.firstSuspendedTime;
        if (firstSuspendedTime !== NoWork) {
          if (expirationTime >= firstSuspendedTime) {
            root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
          } else if (expirationTime >= root.lastSuspendedTime) {
            root.lastSuspendedTime = expirationTime + 1;
          }
          if (expirationTime > root.nextKnownPendingLevel) {
            root.nextKnownPendingLevel = expirationTime;
          }
        }
      }
      function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime2) {
        root.firstPendingTime = remainingExpirationTime2;
        if (finishedExpirationTime <= root.lastSuspendedTime) {
          root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
        } else if (finishedExpirationTime <= root.firstSuspendedTime) {
          root.firstSuspendedTime = finishedExpirationTime - 1;
        }
        if (finishedExpirationTime <= root.lastPingedTime) {
          root.lastPingedTime = NoWork;
        }
        if (finishedExpirationTime <= root.lastExpiredTime) {
          root.lastExpiredTime = NoWork;
        }
      }
      function markRootExpiredAtTime(root, expirationTime) {
        var lastExpiredTime = root.lastExpiredTime;
        if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
          root.lastExpiredTime = expirationTime;
        }
      }
      var ReactFiberInstrumentation = {
        debugTool: null
      };
      var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;
          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstance(component) {
        var fiber = get(component);
        if (fiber === void 0) {
          if (typeof component.render === "function") {
            {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          } else {
            {
              {
                throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
              }
            }
          }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);
          if (fiber === void 0) {
            if (typeof component.render === "function") {
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            } else {
              {
                {
                  throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                }
              }
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              if (fiber.mode & StrictMode) {
                warningWithoutStack$1(false, "%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
              } else {
                warningWithoutStack$1(false, "%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
              }
            }
          }
          return hostFiber.stateNode;
        }
        return findHostInstance(component);
      }
      function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);
      }
      function updateContainer(element, container, parentComponent, callback) {
        var current$$1 = container.current;
        var currentTime = requestCurrentTimeForUpdate();
        {
          if (typeof jest !== "undefined") {
            warnIfUnmockedScheduler(current$$1);
            warnIfNotScopedWithMatchingAct(current$$1);
          }
        }
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);
        {
          if (ReactFiberInstrumentation_1.debugTool) {
            if (current$$1.alternate === null) {
              ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
            } else if (element === null) {
              ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
            } else {
              ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
            }
          }
        }
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }
        {
          if (phase === "render" && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            warningWithoutStack$1(false, "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
          }
        }
        var update = createUpdate(expirationTime, suspenseConfig);
        update.payload = {
          element
        };
        callback = callback === void 0 ? null : callback;
        if (callback !== null) {
          !(typeof callback === "function") ? warningWithoutStack$1(false, "render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback) : void 0;
          update.callback = callback;
        }
        enqueueUpdate(current$$1, update);
        scheduleWork(current$$1, expirationTime);
        return expirationTime;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration(fiber) {
        switch (fiber.tag) {
          case HostRoot:
            var root = fiber.stateNode;
            if (root.hydrate) {
              flushRoot(root, root.firstPendingTime);
            }
            break;
          case SuspenseComponent:
            flushSync(function() {
              return scheduleWork(fiber, Sync);
            });
            var retryExpTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
            markRetryTimeIfNotHydrated(fiber, retryExpTime);
            break;
        }
      }
      function markRetryTimeImpl(fiber, retryTime) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          if (suspenseState.retryTime < retryTime) {
            suspenseState.retryTime = retryTime;
          }
        }
      }
      function markRetryTimeIfNotHydrated(fiber, retryTime) {
        markRetryTimeImpl(fiber, retryTime);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryTimeImpl(alternate, retryTime);
        }
      }
      function attemptUserBlockingHydration(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
        scheduleWork(fiber, expTime);
        markRetryTimeIfNotHydrated(fiber, expTime);
      }
      function attemptContinuousHydration(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var expTime = computeContinuousHydrationExpiration(requestCurrentTimeForUpdate());
        scheduleWork(fiber, expTime);
        markRetryTimeIfNotHydrated(fiber, expTime);
      }
      function attemptHydrationAtCurrentPriority(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var currentTime = requestCurrentTimeForUpdate();
        var expTime = computeExpirationForFiber(currentTime, fiber, null);
        scheduleWork(fiber, expTime);
        markRetryTimeIfNotHydrated(fiber, expTime);
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.tag === FundamentalComponent) {
          return hostFiber.stateNode.instance;
        }
        return hostFiber.stateNode;
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideProps = null;
      var scheduleUpdate = null;
      var setSuspenseHandler = null;
      {
        var copyWithSetImpl = function(obj, path2, idx, value) {
          if (idx >= path2.length) {
            return value;
          }
          var key = path2[idx];
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path2, idx + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path2, value) {
          return copyWithSetImpl(obj, path2, 0, value);
        };
        overrideHookState = function(fiber, id, path2, value) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id > 0) {
            currentHook2 = currentHook2.next;
            id--;
          }
          if (currentHook2 !== null) {
            var newState = copyWithSet(currentHook2.memoizedState, path2, value);
            currentHook2.memoizedState = newState;
            currentHook2.baseState = newState;
            fiber.memoizedProps = _assign({}, fiber.memoizedProps);
            scheduleWork(fiber, Sync);
          }
        };
        overrideProps = function(fiber, path2, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleWork(fiber, Sync);
        };
        scheduleUpdate = function(fiber) {
          scheduleWork(fiber, Sync);
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals(_assign({}, devToolsConfig, {
          overrideHookState,
          overrideProps,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber: function(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          },
          findFiberByHostInstance: function(instance2) {
            if (!findFiberByHostInstance) {
              return null;
            }
            return findFiberByHostInstance(instance2);
          },
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: function() {
            return current;
          }
        }));
      }
      var ReactFiberReconciler = Object.freeze({
        createContainer,
        updateContainer,
        batchedEventUpdates,
        batchedUpdates,
        unbatchedUpdates,
        deferredUpdates,
        syncUpdates,
        discreteUpdates,
        flushDiscreteUpdates,
        flushControlled,
        flushSync,
        flushPassiveEffects,
        IsThisRendererActing,
        getPublicRootInstance,
        attemptSynchronousHydration,
        attemptUserBlockingHydration,
        attemptContinuousHydration,
        attemptHydrationAtCurrentPriority,
        findHostInstance,
        findHostInstanceWithWarning,
        findHostInstanceWithNoPortals,
        shouldSuspend,
        injectIntoDevTools
      });
      var reactReconciler = ReactFiberReconciler.default || ReactFiberReconciler;
      module2.exports = reactReconciler;
      var $$$renderer = module2.exports;
      module2.exports = $$$reconciler;
      return $$$renderer;
    };
  }
});

// node_modules/.pnpm/react-reconciler@0.24.0_react@17.0.1/node_modules/react-reconciler/index.js
var require_react_reconciler = __commonJS((exports2, module2) => {
  "use strict";
  if (process.env.NODE_ENV === "production") {
    module2.exports = require_react_reconciler_production_min();
  } else {
    module2.exports = require_react_reconciler_development();
  }
});

// node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/dist/YGEnums.js
var require_YGEnums = __commonJS((exports2, module2) => {
  "use strict";
  var CONSTANTS = {
    ALIGN_COUNT: 8,
    ALIGN_AUTO: 0,
    ALIGN_FLEX_START: 1,
    ALIGN_CENTER: 2,
    ALIGN_FLEX_END: 3,
    ALIGN_STRETCH: 4,
    ALIGN_BASELINE: 5,
    ALIGN_SPACE_BETWEEN: 6,
    ALIGN_SPACE_AROUND: 7,
    DIMENSION_COUNT: 2,
    DIMENSION_WIDTH: 0,
    DIMENSION_HEIGHT: 1,
    DIRECTION_COUNT: 3,
    DIRECTION_INHERIT: 0,
    DIRECTION_LTR: 1,
    DIRECTION_RTL: 2,
    DISPLAY_COUNT: 2,
    DISPLAY_FLEX: 0,
    DISPLAY_NONE: 1,
    EDGE_COUNT: 9,
    EDGE_LEFT: 0,
    EDGE_TOP: 1,
    EDGE_RIGHT: 2,
    EDGE_BOTTOM: 3,
    EDGE_START: 4,
    EDGE_END: 5,
    EDGE_HORIZONTAL: 6,
    EDGE_VERTICAL: 7,
    EDGE_ALL: 8,
    EXPERIMENTAL_FEATURE_COUNT: 1,
    EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS: 0,
    FLEX_DIRECTION_COUNT: 4,
    FLEX_DIRECTION_COLUMN: 0,
    FLEX_DIRECTION_COLUMN_REVERSE: 1,
    FLEX_DIRECTION_ROW: 2,
    FLEX_DIRECTION_ROW_REVERSE: 3,
    JUSTIFY_COUNT: 6,
    JUSTIFY_FLEX_START: 0,
    JUSTIFY_CENTER: 1,
    JUSTIFY_FLEX_END: 2,
    JUSTIFY_SPACE_BETWEEN: 3,
    JUSTIFY_SPACE_AROUND: 4,
    JUSTIFY_SPACE_EVENLY: 5,
    LOG_LEVEL_COUNT: 6,
    LOG_LEVEL_ERROR: 0,
    LOG_LEVEL_WARN: 1,
    LOG_LEVEL_INFO: 2,
    LOG_LEVEL_DEBUG: 3,
    LOG_LEVEL_VERBOSE: 4,
    LOG_LEVEL_FATAL: 5,
    MEASURE_MODE_COUNT: 3,
    MEASURE_MODE_UNDEFINED: 0,
    MEASURE_MODE_EXACTLY: 1,
    MEASURE_MODE_AT_MOST: 2,
    NODE_TYPE_COUNT: 2,
    NODE_TYPE_DEFAULT: 0,
    NODE_TYPE_TEXT: 1,
    OVERFLOW_COUNT: 3,
    OVERFLOW_VISIBLE: 0,
    OVERFLOW_HIDDEN: 1,
    OVERFLOW_SCROLL: 2,
    POSITION_TYPE_COUNT: 2,
    POSITION_TYPE_RELATIVE: 0,
    POSITION_TYPE_ABSOLUTE: 1,
    PRINT_OPTIONS_COUNT: 3,
    PRINT_OPTIONS_LAYOUT: 1,
    PRINT_OPTIONS_STYLE: 2,
    PRINT_OPTIONS_CHILDREN: 4,
    UNIT_COUNT: 4,
    UNIT_UNDEFINED: 0,
    UNIT_POINT: 1,
    UNIT_PERCENT: 2,
    UNIT_AUTO: 3,
    WRAP_COUNT: 3,
    WRAP_NO_WRAP: 0,
    WRAP_WRAP: 1,
    WRAP_WRAP_REVERSE: 2
  };
  module2.exports = CONSTANTS;
});

// node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/dist/entry-common.js
var require_entry_common = __commonJS((exports2, module2) => {
  "use strict";
  var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var _createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _classCallCheck(instance2, Constructor) {
    if (!(instance2 instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var CONSTANTS = require_YGEnums();
  var Layout = function() {
    function Layout2(left, right, top, bottom, width, height) {
      _classCallCheck(this, Layout2);
      this.left = left;
      this.right = right;
      this.top = top;
      this.bottom = bottom;
      this.width = width;
      this.height = height;
    }
    _createClass(Layout2, [{
      key: "fromJS",
      value: function fromJS(expose) {
        expose(this.left, this.right, this.top, this.bottom, this.width, this.height);
      }
    }, {
      key: "toString",
      value: function toString() {
        return "<Layout#" + this.left + ":" + this.right + ";" + this.top + ":" + this.bottom + ";" + this.width + ":" + this.height + ">";
      }
    }]);
    return Layout2;
  }();
  var Size = function() {
    _createClass(Size2, null, [{
      key: "fromJS",
      value: function fromJS(_ref) {
        var width = _ref.width, height = _ref.height;
        return new Size2(width, height);
      }
    }]);
    function Size2(width, height) {
      _classCallCheck(this, Size2);
      this.width = width;
      this.height = height;
    }
    _createClass(Size2, [{
      key: "fromJS",
      value: function fromJS(expose) {
        expose(this.width, this.height);
      }
    }, {
      key: "toString",
      value: function toString() {
        return "<Size#" + this.width + "x" + this.height + ">";
      }
    }]);
    return Size2;
  }();
  var Value = function() {
    function Value2(unit, value) {
      _classCallCheck(this, Value2);
      this.unit = unit;
      this.value = value;
    }
    _createClass(Value2, [{
      key: "fromJS",
      value: function fromJS(expose) {
        expose(this.unit, this.value);
      }
    }, {
      key: "toString",
      value: function toString() {
        switch (this.unit) {
          case CONSTANTS.UNIT_POINT:
            return String(this.value);
          case CONSTANTS.UNIT_PERCENT:
            return this.value + "%";
          case CONSTANTS.UNIT_AUTO:
            return "auto";
          default: {
            return this.value + "?";
          }
        }
      }
    }, {
      key: "valueOf",
      value: function valueOf() {
        return this.value;
      }
    }]);
    return Value2;
  }();
  module2.exports = function(bind, lib) {
    function patch(prototype, name, fn) {
      var original = prototype[name];
      prototype[name] = function() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return fn.call.apply(fn, [this, original].concat(args));
      };
    }
    var _arr = ["setPosition", "setMargin", "setFlexBasis", "setWidth", "setHeight", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setPadding"];
    var _loop = function _loop2() {
      var _methods;
      var fnName = _arr[_i];
      var methods = (_methods = {}, _defineProperty(_methods, CONSTANTS.UNIT_POINT, lib.Node.prototype[fnName]), _defineProperty(_methods, CONSTANTS.UNIT_PERCENT, lib.Node.prototype[fnName + "Percent"]), _defineProperty(_methods, CONSTANTS.UNIT_AUTO, lib.Node.prototype[fnName + "Auto"]), _methods);
      patch(lib.Node.prototype, fnName, function(original) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        var value = args.pop();
        var unit = void 0, asNumber = void 0;
        if (value === "auto") {
          unit = CONSTANTS.UNIT_AUTO;
          asNumber = void 0;
        } else if (value instanceof Value) {
          unit = value.unit;
          asNumber = value.valueOf();
        } else {
          unit = typeof value === "string" && value.endsWith("%") ? CONSTANTS.UNIT_PERCENT : CONSTANTS.UNIT_POINT;
          asNumber = parseFloat(value);
          if (!Number.isNaN(value) && Number.isNaN(asNumber)) {
            throw new Error("Invalid value " + value + " for " + fnName);
          }
        }
        if (!methods[unit])
          throw new Error('Failed to execute "' + fnName + `": Unsupported unit '` + value + "'");
        if (asNumber !== void 0) {
          var _methods$unit;
          return (_methods$unit = methods[unit]).call.apply(_methods$unit, [this].concat(args, [asNumber]));
        } else {
          var _methods$unit2;
          return (_methods$unit2 = methods[unit]).call.apply(_methods$unit2, [this].concat(args));
        }
      });
    };
    for (var _i = 0; _i < _arr.length; _i++) {
      _loop();
    }
    patch(lib.Config.prototype, "free", function() {
      lib.Config.destroy(this);
    });
    patch(lib.Node, "create", function(_, config) {
      return config ? lib.Node.createWithConfig(config) : lib.Node.createDefault();
    });
    patch(lib.Node.prototype, "free", function() {
      lib.Node.destroy(this);
    });
    patch(lib.Node.prototype, "freeRecursive", function() {
      for (var t = 0, T = this.getChildCount(); t < T; ++t) {
        this.getChild(0).freeRecursive();
      }
      this.free();
    });
    patch(lib.Node.prototype, "setMeasureFunc", function(original, measureFunc) {
      if (measureFunc) {
        return original.call(this, function() {
          return Size.fromJS(measureFunc.apply(void 0, arguments));
        });
      } else {
        return this.unsetMeasureFunc();
      }
    });
    patch(lib.Node.prototype, "calculateLayout", function(original) {
      var width = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : NaN;
      var height = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : NaN;
      var direction = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : CONSTANTS.DIRECTION_LTR;
      return original.call(this, width, height, direction);
    });
    return _extends({
      Config: lib.Config,
      Node: lib.Node,
      Layout: bind("Layout", Layout),
      Size: bind("Size", Size),
      Value: bind("Value", Value),
      getInstanceCount: function getInstanceCount() {
        return lib.getInstanceCount.apply(lib, arguments);
      }
    }, CONSTANTS);
  };
});

// node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/build/Release/nbind.js
var require_nbind = __commonJS((exports, module) => {
  (function(root, wrapper) {
    if (typeof define == "function" && define.amd)
      define([], function() {
        return wrapper;
      });
    else if (typeof module == "object" && module.exports)
      module.exports = wrapper;
    else
      (root.nbind = root.nbind || {}).init = wrapper;
  })(exports, function(Module, cb) {
    if (typeof Module == "function") {
      cb = Module;
      Module = {};
    }
    Module.onRuntimeInitialized = function(init, cb) {
      return function() {
        if (init)
          init.apply(this, arguments);
        try {
          Module.ccall("nbind_init");
        } catch (err) {
          cb(err);
          return;
        }
        cb(null, {bind: Module._nbind_value, reflect: Module.NBind.reflect, queryType: Module.NBind.queryType, toggleLightGC: Module.toggleLightGC, lib: Module});
      };
    }(Module.onRuntimeInitialized, cb);
    var Module;
    if (!Module)
      Module = (typeof Module !== "undefined" ? Module : null) || {};
    var moduleOverrides = {};
    for (var key in Module) {
      if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
      }
    }
    var ENVIRONMENT_IS_WEB = false;
    var ENVIRONMENT_IS_WORKER = false;
    var ENVIRONMENT_IS_NODE = false;
    var ENVIRONMENT_IS_SHELL = false;
    if (Module["ENVIRONMENT"]) {
      if (Module["ENVIRONMENT"] === "WEB") {
        ENVIRONMENT_IS_WEB = true;
      } else if (Module["ENVIRONMENT"] === "WORKER") {
        ENVIRONMENT_IS_WORKER = true;
      } else if (Module["ENVIRONMENT"] === "NODE") {
        ENVIRONMENT_IS_NODE = true;
      } else if (Module["ENVIRONMENT"] === "SHELL") {
        ENVIRONMENT_IS_SHELL = true;
      } else {
        throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.");
      }
    } else {
      ENVIRONMENT_IS_WEB = typeof window === "object";
      ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
      ENVIRONMENT_IS_NODE = typeof process === "object" && true && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
      ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
    }
    if (ENVIRONMENT_IS_NODE) {
      if (!Module["print"])
        Module["print"] = console.log;
      if (!Module["printErr"])
        Module["printErr"] = console.warn;
      var nodeFS;
      var nodePath;
      Module["read"] = function shell_read(filename, binary) {
        if (!nodeFS)
          nodeFS = {}("");
        if (!nodePath)
          nodePath = {}("");
        filename = nodePath["normalize"](filename);
        var ret = nodeFS["readFileSync"](filename);
        return binary ? ret : ret.toString();
      };
      Module["readBinary"] = function readBinary(filename) {
        var ret = Module["read"](filename, true);
        if (!ret.buffer) {
          ret = new Uint8Array(ret);
        }
        assert(ret.buffer);
        return ret;
      };
      Module["load"] = function load(f) {
        globalEval(read(f));
      };
      if (!Module["thisProgram"]) {
        if (process["argv"].length > 1) {
          Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
        } else {
          Module["thisProgram"] = "unknown-program";
        }
      }
      Module["arguments"] = process["argv"].slice(2);
      if (typeof module !== "undefined") {
        module["exports"] = Module;
      }
      process["on"]("uncaughtException", function(ex) {
        if (!(ex instanceof ExitStatus)) {
          throw ex;
        }
      });
      Module["inspect"] = function() {
        return "[Emscripten Module object]";
      };
    } else if (ENVIRONMENT_IS_SHELL) {
      if (!Module["print"])
        Module["print"] = print;
      if (typeof printErr != "undefined")
        Module["printErr"] = printErr;
      if (typeof read != "undefined") {
        Module["read"] = read;
      } else {
        Module["read"] = function shell_read() {
          throw "no read() available";
        };
      }
      Module["readBinary"] = function readBinary(f) {
        if (typeof readbuffer === "function") {
          return new Uint8Array(readbuffer(f));
        }
        var data = read(f, "binary");
        assert(typeof data === "object");
        return data;
      };
      if (typeof scriptArgs != "undefined") {
        Module["arguments"] = scriptArgs;
      } else if (typeof arguments != "undefined") {
        Module["arguments"] = arguments;
      }
      if (typeof quit === "function") {
        Module["quit"] = function(status, toThrow) {
          quit(status);
        };
      }
    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      Module["read"] = function shell_read(url) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, false);
        xhr.send(null);
        return xhr.responseText;
      };
      if (ENVIRONMENT_IS_WORKER) {
        Module["readBinary"] = function readBinary(url) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.responseType = "arraybuffer";
          xhr.send(null);
          return new Uint8Array(xhr.response);
        };
      }
      Module["readAsync"] = function readAsync(url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, true);
        xhr.responseType = "arraybuffer";
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      };
      if (typeof arguments != "undefined") {
        Module["arguments"] = arguments;
      }
      if (typeof console !== "undefined") {
        if (!Module["print"])
          Module["print"] = function shell_print(x) {
            console.log(x);
          };
        if (!Module["printErr"])
          Module["printErr"] = function shell_printErr(x) {
            console.warn(x);
          };
      } else {
        var TRY_USE_DUMP = false;
        if (!Module["print"])
          Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? function(x) {
            dump(x);
          } : function(x) {
          };
      }
      if (ENVIRONMENT_IS_WORKER) {
        Module["load"] = importScripts;
      }
      if (typeof Module["setWindowTitle"] === "undefined") {
        Module["setWindowTitle"] = function(title) {
          document.title = title;
        };
      }
    } else {
      throw "Unknown runtime environment. Where are we?";
    }
    function globalEval(x) {
      eval.call(null, x);
    }
    if (!Module["load"] && Module["read"]) {
      Module["load"] = function load(f) {
        globalEval(Module["read"](f));
      };
    }
    if (!Module["print"]) {
      Module["print"] = function() {
      };
    }
    if (!Module["printErr"]) {
      Module["printErr"] = Module["print"];
    }
    if (!Module["arguments"]) {
      Module["arguments"] = [];
    }
    if (!Module["thisProgram"]) {
      Module["thisProgram"] = "./this.program";
    }
    if (!Module["quit"]) {
      Module["quit"] = function(status, toThrow) {
        throw toThrow;
      };
    }
    Module.print = Module["print"];
    Module.printErr = Module["printErr"];
    Module["preRun"] = [];
    Module["postRun"] = [];
    for (var key in moduleOverrides) {
      if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
      }
    }
    moduleOverrides = void 0;
    var Runtime = {setTempRet0: function(value) {
      tempRet0 = value;
      return value;
    }, getTempRet0: function() {
      return tempRet0;
    }, stackSave: function() {
      return STACKTOP;
    }, stackRestore: function(stackTop) {
      STACKTOP = stackTop;
    }, getNativeTypeSize: function(type) {
      switch (type) {
        case "i1":
        case "i8":
          return 1;
        case "i16":
          return 2;
        case "i32":
          return 4;
        case "i64":
          return 8;
        case "float":
          return 4;
        case "double":
          return 8;
        default: {
          if (type[type.length - 1] === "*") {
            return Runtime.QUANTUM_SIZE;
          } else if (type[0] === "i") {
            var bits = parseInt(type.substr(1));
            assert(bits % 8 === 0);
            return bits / 8;
          } else {
            return 0;
          }
        }
      }
    }, getNativeFieldSize: function(type) {
      return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
    }, STACK_ALIGN: 16, prepVararg: function(ptr, type) {
      if (type === "double" || type === "i64") {
        if (ptr & 7) {
          assert((ptr & 7) === 4);
          ptr += 4;
        }
      } else {
        assert((ptr & 3) === 0);
      }
      return ptr;
    }, getAlignSize: function(type, size, vararg) {
      if (!vararg && (type == "i64" || type == "double"))
        return 8;
      if (!type)
        return Math.min(size, 8);
      return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
    }, dynCall: function(sig, ptr, args) {
      if (args && args.length) {
        return Module["dynCall_" + sig].apply(null, [ptr].concat(args));
      } else {
        return Module["dynCall_" + sig].call(null, ptr);
      }
    }, functionPointers: [], addFunction: function(func) {
      for (var i = 0; i < Runtime.functionPointers.length; i++) {
        if (!Runtime.functionPointers[i]) {
          Runtime.functionPointers[i] = func;
          return 2 * (1 + i);
        }
      }
      throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
    }, removeFunction: function(index) {
      Runtime.functionPointers[(index - 2) / 2] = null;
    }, warnOnce: function(text) {
      if (!Runtime.warnOnce.shown)
        Runtime.warnOnce.shown = {};
      if (!Runtime.warnOnce.shown[text]) {
        Runtime.warnOnce.shown[text] = 1;
        Module.printErr(text);
      }
    }, funcWrappers: {}, getFuncWrapper: function(func, sig) {
      if (!func)
        return;
      assert(sig);
      if (!Runtime.funcWrappers[sig]) {
        Runtime.funcWrappers[sig] = {};
      }
      var sigCache = Runtime.funcWrappers[sig];
      if (!sigCache[func]) {
        if (sig.length === 1) {
          sigCache[func] = function dynCall_wrapper() {
            return Runtime.dynCall(sig, func);
          };
        } else if (sig.length === 2) {
          sigCache[func] = function dynCall_wrapper(arg) {
            return Runtime.dynCall(sig, func, [arg]);
          };
        } else {
          sigCache[func] = function dynCall_wrapper() {
            return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
          };
        }
      }
      return sigCache[func];
    }, getCompilerSetting: function(name) {
      throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
    }, stackAlloc: function(size) {
      var ret = STACKTOP;
      STACKTOP = STACKTOP + size | 0;
      STACKTOP = STACKTOP + 15 & -16;
      return ret;
    }, staticAlloc: function(size) {
      var ret = STATICTOP;
      STATICTOP = STATICTOP + size | 0;
      STATICTOP = STATICTOP + 15 & -16;
      return ret;
    }, dynamicAlloc: function(size) {
      var ret = HEAP32[DYNAMICTOP_PTR >> 2];
      var end = (ret + size + 15 | 0) & -16;
      HEAP32[DYNAMICTOP_PTR >> 2] = end;
      if (end >= TOTAL_MEMORY) {
        var success = enlargeMemory();
        if (!success) {
          HEAP32[DYNAMICTOP_PTR >> 2] = ret;
          return 0;
        }
      }
      return ret;
    }, alignMemory: function(size, quantum) {
      var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
      return ret;
    }, makeBigInt: function(low, high, unsigned) {
      var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * 4294967296 : +(low >>> 0) + +(high | 0) * 4294967296;
      return ret;
    }, GLOBAL_BASE: 8, QUANTUM_SIZE: 4, __dummy__: 0};
    Module["Runtime"] = Runtime;
    var ABORT = 0;
    var EXITSTATUS = 0;
    function assert(condition, text) {
      if (!condition) {
        abort("Assertion failed: " + text);
      }
    }
    function getCFunc(ident) {
      var func = Module["_" + ident];
      if (!func) {
        try {
          func = eval("_" + ident);
        } catch (e) {
        }
      }
      assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
      return func;
    }
    var cwrap, ccall;
    (function() {
      var JSfuncs = {stackSave: function() {
        Runtime.stackSave();
      }, stackRestore: function() {
        Runtime.stackRestore();
      }, arrayToC: function(arr) {
        var ret = Runtime.stackAlloc(arr.length);
        writeArrayToMemory(arr, ret);
        return ret;
      }, stringToC: function(str) {
        var ret = 0;
        if (str !== null && str !== void 0 && str !== 0) {
          var len = (str.length << 2) + 1;
          ret = Runtime.stackAlloc(len);
          stringToUTF8(str, ret, len);
        }
        return ret;
      }};
      var toC = {string: JSfuncs["stringToC"], array: JSfuncs["arrayToC"]};
      ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
        var func = getCFunc(ident);
        var cArgs = [];
        var stack = 0;
        if (args) {
          for (var i = 0; i < args.length; i++) {
            var converter = toC[argTypes[i]];
            if (converter) {
              if (stack === 0)
                stack = Runtime.stackSave();
              cArgs[i] = converter(args[i]);
            } else {
              cArgs[i] = args[i];
            }
          }
        }
        var ret = func.apply(null, cArgs);
        if (returnType === "string")
          ret = Pointer_stringify(ret);
        if (stack !== 0) {
          if (opts && opts.async) {
            EmterpreterAsync.asyncFinalizers.push(function() {
              Runtime.stackRestore(stack);
            });
            return;
          }
          Runtime.stackRestore(stack);
        }
        return ret;
      };
      var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
      function parseJSFunc(jsfunc) {
        var parsed = jsfunc.toString().match(sourceRegex).slice(1);
        return {arguments: parsed[0], body: parsed[1], returnValue: parsed[2]};
      }
      var JSsource = null;
      function ensureJSsource() {
        if (!JSsource) {
          JSsource = {};
          for (var fun in JSfuncs) {
            if (JSfuncs.hasOwnProperty(fun)) {
              JSsource[fun] = parseJSFunc(JSfuncs[fun]);
            }
          }
        }
      }
      cwrap = function cwrap(ident, returnType, argTypes) {
        argTypes = argTypes || [];
        var cfunc = getCFunc(ident);
        var numericArgs = argTypes.every(function(type) {
          return type === "number";
        });
        var numericRet = returnType !== "string";
        if (numericRet && numericArgs) {
          return cfunc;
        }
        var argNames = argTypes.map(function(x, i) {
          return "$" + i;
        });
        var funcstr = "(function(" + argNames.join(",") + ") {";
        var nargs = argTypes.length;
        if (!numericArgs) {
          ensureJSsource();
          funcstr += "var stack = " + JSsource["stackSave"].body + ";";
          for (var i = 0; i < nargs; i++) {
            var arg = argNames[i], type = argTypes[i];
            if (type === "number")
              continue;
            var convertCode = JSsource[type + "ToC"];
            funcstr += "var " + convertCode.arguments + " = " + arg + ";";
            funcstr += convertCode.body + ";";
            funcstr += arg + "=(" + convertCode.returnValue + ");";
          }
        }
        var cfuncname = parseJSFunc(function() {
          return cfunc;
        }).returnValue;
        funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
        if (!numericRet) {
          var strgfy = parseJSFunc(function() {
            return Pointer_stringify;
          }).returnValue;
          funcstr += "ret = " + strgfy + "(ret);";
        }
        if (!numericArgs) {
          ensureJSsource();
          funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";";
        }
        funcstr += "return ret})";
        return eval(funcstr);
      };
    })();
    Module["ccall"] = ccall;
    Module["cwrap"] = cwrap;
    function setValue(ptr, value, type, noSafe) {
      type = type || "i8";
      if (type.charAt(type.length - 1) === "*")
        type = "i32";
      switch (type) {
        case "i1":
          HEAP8[ptr >> 0] = value;
          break;
        case "i8":
          HEAP8[ptr >> 0] = value;
          break;
        case "i16":
          HEAP16[ptr >> 1] = value;
          break;
        case "i32":
          HEAP32[ptr >> 2] = value;
          break;
        case "i64":
          tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
          break;
        case "float":
          HEAPF32[ptr >> 2] = value;
          break;
        case "double":
          HEAPF64[ptr >> 3] = value;
          break;
        default:
          abort("invalid type for setValue: " + type);
      }
    }
    Module["setValue"] = setValue;
    function getValue(ptr, type, noSafe) {
      type = type || "i8";
      if (type.charAt(type.length - 1) === "*")
        type = "i32";
      switch (type) {
        case "i1":
          return HEAP8[ptr >> 0];
        case "i8":
          return HEAP8[ptr >> 0];
        case "i16":
          return HEAP16[ptr >> 1];
        case "i32":
          return HEAP32[ptr >> 2];
        case "i64":
          return HEAP32[ptr >> 2];
        case "float":
          return HEAPF32[ptr >> 2];
        case "double":
          return HEAPF64[ptr >> 3];
        default:
          abort("invalid type for setValue: " + type);
      }
      return null;
    }
    Module["getValue"] = getValue;
    var ALLOC_NORMAL = 0;
    var ALLOC_STACK = 1;
    var ALLOC_STATIC = 2;
    var ALLOC_DYNAMIC = 3;
    var ALLOC_NONE = 4;
    Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
    Module["ALLOC_STACK"] = ALLOC_STACK;
    Module["ALLOC_STATIC"] = ALLOC_STATIC;
    Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
    Module["ALLOC_NONE"] = ALLOC_NONE;
    function allocate(slab, types, allocator, ptr) {
      var zeroinit, size;
      if (typeof slab === "number") {
        zeroinit = true;
        size = slab;
      } else {
        zeroinit = false;
        size = slab.length;
      }
      var singleType = typeof types === "string" ? types : null;
      var ret;
      if (allocator == ALLOC_NONE) {
        ret = ptr;
      } else {
        ret = [typeof _malloc === "function" ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === void 0 ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
      }
      if (zeroinit) {
        var ptr = ret, stop;
        assert((ret & 3) == 0);
        stop = ret + (size & ~3);
        for (; ptr < stop; ptr += 4) {
          HEAP32[ptr >> 2] = 0;
        }
        stop = ret + size;
        while (ptr < stop) {
          HEAP8[ptr++ >> 0] = 0;
        }
        return ret;
      }
      if (singleType === "i8") {
        if (slab.subarray || slab.slice) {
          HEAPU8.set(slab, ret);
        } else {
          HEAPU8.set(new Uint8Array(slab), ret);
        }
        return ret;
      }
      var i = 0, type, typeSize, previousType;
      while (i < size) {
        var curr = slab[i];
        if (typeof curr === "function") {
          curr = Runtime.getFunctionIndex(curr);
        }
        type = singleType || types[i];
        if (type === 0) {
          i++;
          continue;
        }
        if (type == "i64")
          type = "i32";
        setValue(ret + i, curr, type);
        if (previousType !== type) {
          typeSize = Runtime.getNativeTypeSize(type);
          previousType = type;
        }
        i += typeSize;
      }
      return ret;
    }
    Module["allocate"] = allocate;
    function getMemory(size) {
      if (!staticSealed)
        return Runtime.staticAlloc(size);
      if (!runtimeInitialized)
        return Runtime.dynamicAlloc(size);
      return _malloc(size);
    }
    Module["getMemory"] = getMemory;
    function Pointer_stringify(ptr, length) {
      if (length === 0 || !ptr)
        return "";
      var hasUtf = 0;
      var t;
      var i = 0;
      while (1) {
        t = HEAPU8[ptr + i >> 0];
        hasUtf |= t;
        if (t == 0 && !length)
          break;
        i++;
        if (length && i == length)
          break;
      }
      if (!length)
        length = i;
      var ret = "";
      if (hasUtf < 128) {
        var MAX_CHUNK = 1024;
        var curr;
        while (length > 0) {
          curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
          ret = ret ? ret + curr : curr;
          ptr += MAX_CHUNK;
          length -= MAX_CHUNK;
        }
        return ret;
      }
      return Module["UTF8ToString"](ptr);
    }
    Module["Pointer_stringify"] = Pointer_stringify;
    function AsciiToString(ptr) {
      var str = "";
      while (1) {
        var ch = HEAP8[ptr++ >> 0];
        if (!ch)
          return str;
        str += String.fromCharCode(ch);
      }
    }
    Module["AsciiToString"] = AsciiToString;
    function stringToAscii(str, outPtr) {
      return writeAsciiToMemory(str, outPtr, false);
    }
    Module["stringToAscii"] = stringToAscii;
    var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
    function UTF8ArrayToString(u8Array, idx) {
      var endPtr = idx;
      while (u8Array[endPtr])
        ++endPtr;
      if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
        return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
      } else {
        var u0, u1, u2, u3, u4, u5;
        var str = "";
        while (1) {
          u0 = u8Array[idx++];
          if (!u0)
            return str;
          if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue;
          }
          u1 = u8Array[idx++] & 63;
          if ((u0 & 224) == 192) {
            str += String.fromCharCode((u0 & 31) << 6 | u1);
            continue;
          }
          u2 = u8Array[idx++] & 63;
          if ((u0 & 240) == 224) {
            u0 = (u0 & 15) << 12 | u1 << 6 | u2;
          } else {
            u3 = u8Array[idx++] & 63;
            if ((u0 & 248) == 240) {
              u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
            } else {
              u4 = u8Array[idx++] & 63;
              if ((u0 & 252) == 248) {
                u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
              } else {
                u5 = u8Array[idx++] & 63;
                u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
              }
            }
          }
          if (u0 < 65536) {
            str += String.fromCharCode(u0);
          } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
          }
        }
      }
    }
    Module["UTF8ArrayToString"] = UTF8ArrayToString;
    function UTF8ToString(ptr) {
      return UTF8ArrayToString(HEAPU8, ptr);
    }
    Module["UTF8ToString"] = UTF8ToString;
    function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
      if (!(maxBytesToWrite > 0))
        return 0;
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1;
      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343)
          u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) {
          if (outIdx >= endIdx)
            break;
          outU8Array[outIdx++] = u;
        } else if (u <= 2047) {
          if (outIdx + 1 >= endIdx)
            break;
          outU8Array[outIdx++] = 192 | u >> 6;
          outU8Array[outIdx++] = 128 | u & 63;
        } else if (u <= 65535) {
          if (outIdx + 2 >= endIdx)
            break;
          outU8Array[outIdx++] = 224 | u >> 12;
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          outU8Array[outIdx++] = 128 | u & 63;
        } else if (u <= 2097151) {
          if (outIdx + 3 >= endIdx)
            break;
          outU8Array[outIdx++] = 240 | u >> 18;
          outU8Array[outIdx++] = 128 | u >> 12 & 63;
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          outU8Array[outIdx++] = 128 | u & 63;
        } else if (u <= 67108863) {
          if (outIdx + 4 >= endIdx)
            break;
          outU8Array[outIdx++] = 248 | u >> 24;
          outU8Array[outIdx++] = 128 | u >> 18 & 63;
          outU8Array[outIdx++] = 128 | u >> 12 & 63;
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          outU8Array[outIdx++] = 128 | u & 63;
        } else {
          if (outIdx + 5 >= endIdx)
            break;
          outU8Array[outIdx++] = 252 | u >> 30;
          outU8Array[outIdx++] = 128 | u >> 24 & 63;
          outU8Array[outIdx++] = 128 | u >> 18 & 63;
          outU8Array[outIdx++] = 128 | u >> 12 & 63;
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          outU8Array[outIdx++] = 128 | u & 63;
        }
      }
      outU8Array[outIdx] = 0;
      return outIdx - startIdx;
    }
    Module["stringToUTF8Array"] = stringToUTF8Array;
    function stringToUTF8(str, outPtr, maxBytesToWrite) {
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    }
    Module["stringToUTF8"] = stringToUTF8;
    function lengthBytesUTF8(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343)
          u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) {
          ++len;
        } else if (u <= 2047) {
          len += 2;
        } else if (u <= 65535) {
          len += 3;
        } else if (u <= 2097151) {
          len += 4;
        } else if (u <= 67108863) {
          len += 5;
        } else {
          len += 6;
        }
      }
      return len;
    }
    Module["lengthBytesUTF8"] = lengthBytesUTF8;
    var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
    function demangle(func) {
      var __cxa_demangle_func = Module["___cxa_demangle"] || Module["__cxa_demangle"];
      if (__cxa_demangle_func) {
        try {
          var s = func.substr(1);
          var len = lengthBytesUTF8(s) + 1;
          var buf = _malloc(len);
          stringToUTF8(s, buf, len);
          var status = _malloc(4);
          var ret = __cxa_demangle_func(buf, 0, 0, status);
          if (getValue(status, "i32") === 0 && ret) {
            return Pointer_stringify(ret);
          }
        } catch (e) {
        } finally {
          if (buf)
            _free(buf);
          if (status)
            _free(status);
          if (ret)
            _free(ret);
        }
        return func;
      }
      Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
      return func;
    }
    function demangleAll(text) {
      var regex = /__Z[\w\d_]+/g;
      return text.replace(regex, function(x) {
        var y = demangle(x);
        return x === y ? x : x + " [" + y + "]";
      });
    }
    function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        try {
          throw new Error(0);
        } catch (e) {
          err = e;
        }
        if (!err.stack) {
          return "(no stack trace available)";
        }
      }
      return err.stack.toString();
    }
    function stackTrace() {
      var js = jsStackTrace();
      if (Module["extraStackTrace"])
        js += "\n" + Module["extraStackTrace"]();
      return demangleAll(js);
    }
    Module["stackTrace"] = stackTrace;
    var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
    function updateGlobalBufferViews() {
      Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
      Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
      Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
      Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
      Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
      Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
      Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
      Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer);
    }
    var STATIC_BASE, STATICTOP, staticSealed;
    var STACK_BASE, STACKTOP, STACK_MAX;
    var DYNAMIC_BASE, DYNAMICTOP_PTR;
    STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
    staticSealed = false;
    function abortOnCannotGrowMemory() {
      abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
    }
    function enlargeMemory() {
      abortOnCannotGrowMemory();
    }
    var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
    var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 134217728;
    if (TOTAL_MEMORY < TOTAL_STACK)
      Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was " + TOTAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
    if (Module["buffer"]) {
      buffer = Module["buffer"];
    } else {
      {
        buffer = new ArrayBuffer(TOTAL_MEMORY);
      }
    }
    updateGlobalBufferViews();
    function getTotalMemory() {
      return TOTAL_MEMORY;
    }
    HEAP32[0] = 1668509029;
    HEAP16[1] = 25459;
    if (HEAPU8[2] !== 115 || HEAPU8[3] !== 99)
      throw "Runtime error: expected the system to be little-endian!";
    Module["HEAP"] = HEAP;
    Module["buffer"] = buffer;
    Module["HEAP8"] = HEAP8;
    Module["HEAP16"] = HEAP16;
    Module["HEAP32"] = HEAP32;
    Module["HEAPU8"] = HEAPU8;
    Module["HEAPU16"] = HEAPU16;
    Module["HEAPU32"] = HEAPU32;
    Module["HEAPF32"] = HEAPF32;
    Module["HEAPF64"] = HEAPF64;
    function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == "function") {
          callback();
          continue;
        }
        var func = callback.func;
        if (typeof func === "number") {
          if (callback.arg === void 0) {
            Module["dynCall_v"](func);
          } else {
            Module["dynCall_vi"](func, callback.arg);
          }
        } else {
          func(callback.arg === void 0 ? null : callback.arg);
        }
      }
    }
    var __ATPRERUN__ = [];
    var __ATINIT__ = [];
    var __ATMAIN__ = [];
    var __ATEXIT__ = [];
    var __ATPOSTRUN__ = [];
    var runtimeInitialized = false;
    var runtimeExited = false;
    function preRun() {
      if (Module["preRun"]) {
        if (typeof Module["preRun"] == "function")
          Module["preRun"] = [Module["preRun"]];
        while (Module["preRun"].length) {
          addOnPreRun(Module["preRun"].shift());
        }
      }
      callRuntimeCallbacks(__ATPRERUN__);
    }
    function ensureInitRuntime() {
      if (runtimeInitialized)
        return;
      runtimeInitialized = true;
      callRuntimeCallbacks(__ATINIT__);
    }
    function preMain() {
      callRuntimeCallbacks(__ATMAIN__);
    }
    function exitRuntime() {
      callRuntimeCallbacks(__ATEXIT__);
      runtimeExited = true;
    }
    function postRun() {
      if (Module["postRun"]) {
        if (typeof Module["postRun"] == "function")
          Module["postRun"] = [Module["postRun"]];
        while (Module["postRun"].length) {
          addOnPostRun(Module["postRun"].shift());
        }
      }
      callRuntimeCallbacks(__ATPOSTRUN__);
    }
    function addOnPreRun(cb) {
      __ATPRERUN__.unshift(cb);
    }
    Module["addOnPreRun"] = addOnPreRun;
    function addOnInit(cb) {
      __ATINIT__.unshift(cb);
    }
    Module["addOnInit"] = addOnInit;
    function addOnPreMain(cb) {
      __ATMAIN__.unshift(cb);
    }
    Module["addOnPreMain"] = addOnPreMain;
    function addOnExit(cb) {
      __ATEXIT__.unshift(cb);
    }
    Module["addOnExit"] = addOnExit;
    function addOnPostRun(cb) {
      __ATPOSTRUN__.unshift(cb);
    }
    Module["addOnPostRun"] = addOnPostRun;
    function intArrayFromString(stringy, dontAddNull, length) {
      var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
      if (dontAddNull)
        u8array.length = numBytesWritten;
      return u8array;
    }
    Module["intArrayFromString"] = intArrayFromString;
    function intArrayToString(array) {
      var ret = [];
      for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 255) {
          chr &= 255;
        }
        ret.push(String.fromCharCode(chr));
      }
      return ret.join("");
    }
    Module["intArrayToString"] = intArrayToString;
    function writeStringToMemory(string, buffer, dontAddNull) {
      Runtime.warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
      var lastChar, end;
      if (dontAddNull) {
        end = buffer + lengthBytesUTF8(string);
        lastChar = HEAP8[end];
      }
      stringToUTF8(string, buffer, Infinity);
      if (dontAddNull)
        HEAP8[end] = lastChar;
    }
    Module["writeStringToMemory"] = writeStringToMemory;
    function writeArrayToMemory(array, buffer) {
      HEAP8.set(array, buffer);
    }
    Module["writeArrayToMemory"] = writeArrayToMemory;
    function writeAsciiToMemory(str, buffer, dontAddNull) {
      for (var i = 0; i < str.length; ++i) {
        HEAP8[buffer++ >> 0] = str.charCodeAt(i);
      }
      if (!dontAddNull)
        HEAP8[buffer >> 0] = 0;
    }
    Module["writeAsciiToMemory"] = writeAsciiToMemory;
    if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5)
      Math["imul"] = function imul(a, b) {
        var ah = a >>> 16;
        var al = a & 65535;
        var bh = b >>> 16;
        var bl = b & 65535;
        return al * bl + (ah * bl + al * bh << 16) | 0;
      };
    Math.imul = Math["imul"];
    if (!Math["fround"]) {
      var froundBuffer = new Float32Array(1);
      Math["fround"] = function(x) {
        froundBuffer[0] = x;
        return froundBuffer[0];
      };
    }
    Math.fround = Math["fround"];
    if (!Math["clz32"])
      Math["clz32"] = function(x) {
        x = x >>> 0;
        for (var i = 0; i < 32; i++) {
          if (x & 1 << 31 - i)
            return i;
        }
        return 32;
      };
    Math.clz32 = Math["clz32"];
    if (!Math["trunc"])
      Math["trunc"] = function(x) {
        return x < 0 ? Math.ceil(x) : Math.floor(x);
      };
    Math.trunc = Math["trunc"];
    var Math_abs = Math.abs;
    var Math_cos = Math.cos;
    var Math_sin = Math.sin;
    var Math_tan = Math.tan;
    var Math_acos = Math.acos;
    var Math_asin = Math.asin;
    var Math_atan = Math.atan;
    var Math_atan2 = Math.atan2;
    var Math_exp = Math.exp;
    var Math_log = Math.log;
    var Math_sqrt = Math.sqrt;
    var Math_ceil = Math.ceil;
    var Math_floor = Math.floor;
    var Math_pow = Math.pow;
    var Math_imul = Math.imul;
    var Math_fround = Math.fround;
    var Math_round = Math.round;
    var Math_min = Math.min;
    var Math_clz32 = Math.clz32;
    var Math_trunc = Math.trunc;
    var runDependencies = 0;
    var runDependencyWatcher = null;
    var dependenciesFulfilled = null;
    function getUniqueRunDependency(id) {
      return id;
    }
    function addRunDependency(id) {
      runDependencies++;
      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
    }
    Module["addRunDependency"] = addRunDependency;
    function removeRunDependency(id) {
      runDependencies--;
      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
      if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback();
        }
      }
    }
    Module["removeRunDependency"] = removeRunDependency;
    Module["preloadedImages"] = {};
    Module["preloadedAudios"] = {};
    var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5, $6, $7) {
      return _nbind.callbackSignatureList[$0].apply(this, arguments);
    }];
    function _emscripten_asm_const_iiiiiiii(code, a0, a1, a2, a3, a4, a5, a6) {
      return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6);
    }
    function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {
      return ASM_CONSTS[code](a0, a1, a2, a3);
    }
    function _emscripten_asm_const_iiidddddd(code, a0, a1, a2, a3, a4, a5, a6, a7) {
      return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6, a7);
    }
    function _emscripten_asm_const_iiididi(code, a0, a1, a2, a3, a4, a5) {
      return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
    }
    function _emscripten_asm_const_iiii(code, a0, a1, a2) {
      return ASM_CONSTS[code](a0, a1, a2);
    }
    function _emscripten_asm_const_iiiid(code, a0, a1, a2, a3) {
      return ASM_CONSTS[code](a0, a1, a2, a3);
    }
    function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
      return ASM_CONSTS[code](a0, a1, a2, a3, a4);
    }
    STATIC_BASE = Runtime.GLOBAL_BASE;
    STATICTOP = STATIC_BASE + 12800;
    __ATINIT__.push({func: function() {
      __GLOBAL__sub_I_Yoga_cpp();
    }}, {func: function() {
      __GLOBAL__sub_I_nbind_cc();
    }}, {func: function() {
      __GLOBAL__sub_I_common_cc();
    }}, {func: function() {
      __GLOBAL__sub_I_Binding_cc();
    }});
    allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 192, 127, 3, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 3, 0, 0, 0, 0, 0, 192, 127, 3, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 190, 12, 0, 0, 200, 12, 0, 0, 208, 12, 0, 0, 216, 12, 0, 0, 230, 12, 0, 0, 242, 12, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 192, 127, 3, 0, 0, 0, 180, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 183, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 184, 45, 0, 0, 185, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 186, 45, 0, 0, 185, 45, 0, 0, 148, 4, 0, 0, 3, 0, 0, 0, 187, 45, 0, 0, 164, 4, 0, 0, 188, 45, 0, 0, 2, 0, 0, 0, 189, 45, 0, 0, 164, 4, 0, 0, 188, 45, 0, 0, 185, 45, 0, 0, 164, 4, 0, 0, 185, 45, 0, 0, 164, 4, 0, 0, 188, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 183, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 190, 45, 0, 0, 190, 45, 0, 0, 182, 45, 0, 0, 182, 45, 0, 0, 185, 45, 0, 0, 181, 45, 0, 0, 185, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 185, 45, 0, 0, 182, 45, 0, 0, 185, 45, 0, 0, 48, 5, 0, 0, 3, 0, 0, 0, 56, 5, 0, 0, 1, 0, 0, 0, 189, 45, 0, 0, 185, 45, 0, 0, 164, 4, 0, 0, 76, 5, 0, 0, 2, 0, 0, 0, 191, 45, 0, 0, 186, 45, 0, 0, 182, 45, 0, 0, 185, 45, 0, 0, 192, 45, 0, 0, 185, 45, 0, 0, 182, 45, 0, 0, 186, 45, 0, 0, 185, 45, 0, 0, 76, 5, 0, 0, 76, 5, 0, 0, 136, 5, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 2, 0, 0, 0, 190, 45, 0, 0, 136, 5, 0, 0, 56, 19, 0, 0, 156, 5, 0, 0, 2, 0, 0, 0, 184, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 204, 5, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 2, 0, 0, 0, 180, 45, 0, 0, 204, 5, 0, 0, 2, 0, 0, 0, 195, 45, 0, 0, 236, 5, 0, 0, 97, 19, 0, 0, 198, 45, 0, 0, 211, 45, 0, 0, 212, 45, 0, 0, 213, 45, 0, 0, 214, 45, 0, 0, 215, 45, 0, 0, 188, 45, 0, 0, 182, 45, 0, 0, 216, 45, 0, 0, 217, 45, 0, 0, 218, 45, 0, 0, 219, 45, 0, 0, 192, 45, 0, 0, 181, 45, 0, 0, 0, 0, 0, 0, 185, 45, 0, 0, 110, 19, 0, 0, 186, 45, 0, 0, 115, 19, 0, 0, 221, 45, 0, 0, 120, 19, 0, 0, 148, 4, 0, 0, 132, 19, 0, 0, 96, 6, 0, 0, 145, 19, 0, 0, 222, 45, 0, 0, 164, 19, 0, 0, 223, 45, 0, 0, 173, 19, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 104, 6, 0, 0, 1, 0, 0, 0, 187, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 13, 0, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 164, 6, 0, 0, 188, 45, 0, 0, 172, 6, 0, 0, 180, 6, 0, 0, 2, 0, 0, 0, 188, 6, 0, 0, 7, 0, 0, 0, 224, 45, 0, 0, 7, 0, 0, 0, 164, 6, 0, 0, 1, 0, 0, 0, 213, 45, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 172, 6, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 164, 6, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 211, 45, 0, 0, 211, 45, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 224, 45, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 224, 45, 0, 0, 172, 6, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 224, 45, 0, 0, 188, 45, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 40, 7, 0, 0, 188, 45, 0, 0, 2, 0, 0, 0, 224, 45, 0, 0, 185, 45, 0, 0, 188, 45, 0, 0, 188, 45, 0, 0, 188, 45, 0, 0, 188, 45, 0, 0, 222, 45, 0, 0, 224, 45, 0, 0, 148, 4, 0, 0, 185, 45, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 185, 45, 0, 0, 164, 6, 0, 0, 148, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 148, 7, 0, 0, 2, 0, 0, 0, 225, 45, 0, 0, 183, 45, 0, 0, 188, 45, 0, 0, 168, 7, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 234, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 9, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 242, 45, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 110, 111, 100, 101, 0, 67, 97, 110, 110, 111, 116, 32, 114, 101, 115, 101, 116, 32, 97, 32, 110, 111, 100, 101, 32, 119, 104, 105, 99, 104, 32, 115, 116, 105, 108, 108, 32, 104, 97, 115, 32, 99, 104, 105, 108, 100, 114, 101, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 0, 67, 97, 110, 110, 111, 116, 32, 114, 101, 115, 101, 116, 32, 97, 32, 110, 111, 100, 101, 32, 115, 116, 105, 108, 108, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 116, 111, 32, 97, 32, 112, 97, 114, 101, 110, 116, 0, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 99, 111, 110, 102, 105, 103, 0, 67, 97, 110, 110, 111, 116, 32, 115, 101, 116, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 58, 32, 78, 111, 100, 101, 115, 32, 119, 105, 116, 104, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 99, 97, 110, 110, 111, 116, 32, 104, 97, 118, 101, 32, 99, 104, 105, 108, 100, 114, 101, 110, 46, 0, 67, 104, 105, 108, 100, 32, 97, 108, 114, 101, 97, 100, 121, 32, 104, 97, 115, 32, 97, 32, 112, 97, 114, 101, 110, 116, 44, 32, 105, 116, 32, 109, 117, 115, 116, 32, 98, 101, 32, 114, 101, 109, 111, 118, 101, 100, 32, 102, 105, 114, 115, 116, 46, 0, 67, 97, 110, 110, 111, 116, 32, 97, 100, 100, 32, 99, 104, 105, 108, 100, 58, 32, 78, 111, 100, 101, 115, 32, 119, 105, 116, 104, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 99, 97, 110, 110, 111, 116, 32, 104, 97, 118, 101, 32, 99, 104, 105, 108, 100, 114, 101, 110, 46, 0, 79, 110, 108, 121, 32, 108, 101, 97, 102, 32, 110, 111, 100, 101, 115, 32, 119, 105, 116, 104, 32, 99, 117, 115, 116, 111, 109, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 115, 104, 111, 117, 108, 100, 32, 109, 97, 110, 117, 97, 108, 108, 121, 32, 109, 97, 114, 107, 32, 116, 104, 101, 109, 115, 101, 108, 118, 101, 115, 32, 97, 115, 32, 100, 105, 114, 116, 121, 0, 67, 97, 110, 110, 111, 116, 32, 103, 101, 116, 32, 108, 97, 121, 111, 117, 116, 32, 112, 114, 111, 112, 101, 114, 116, 105, 101, 115, 32, 111, 102, 32, 109, 117, 108, 116, 105, 45, 101, 100, 103, 101, 32, 115, 104, 111, 114, 116, 104, 97, 110, 100, 115, 0, 37, 115, 37, 100, 46, 123, 91, 115, 107, 105, 112, 112, 101, 100, 93, 32, 0, 119, 109, 58, 32, 37, 115, 44, 32, 104, 109, 58, 32, 37, 115, 44, 32, 97, 119, 58, 32, 37, 102, 32, 97, 104, 58, 32, 37, 102, 32, 61, 62, 32, 100, 58, 32, 40, 37, 102, 44, 32, 37, 102, 41, 32, 37, 115, 10, 0, 37, 115, 37, 100, 46, 123, 37, 115, 0, 42, 0, 119, 109, 58, 32, 37, 115, 44, 32, 104, 109, 58, 32, 37, 115, 44, 32, 97, 119, 58, 32, 37, 102, 32, 97, 104, 58, 32, 37, 102, 32, 37, 115, 10, 0, 37, 115, 37, 100, 46, 125, 37, 115, 0, 119, 109, 58, 32, 37, 115, 44, 32, 104, 109, 58, 32, 37, 115, 44, 32, 100, 58, 32, 40, 37, 102, 44, 32, 37, 102, 41, 32, 37, 115, 10, 0, 79, 117, 116, 32, 111, 102, 32, 99, 97, 99, 104, 101, 32, 101, 110, 116, 114, 105, 101, 115, 33, 10, 0, 83, 99, 97, 108, 101, 32, 102, 97, 99, 116, 111, 114, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 98, 101, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 122, 101, 114, 111, 0, 105, 110, 105, 116, 105, 97, 108, 0, 37, 115, 10, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 85, 78, 68, 69, 70, 73, 78, 69, 68, 0, 69, 88, 65, 67, 84, 76, 89, 0, 65, 84, 95, 77, 79, 83, 84, 0, 76, 65, 89, 95, 85, 78, 68, 69, 70, 73, 78, 69, 68, 0, 76, 65, 89, 95, 69, 88, 65, 67, 84, 76, 89, 0, 76, 65, 89, 95, 65, 84, 95, 77, 79, 83, 84, 0, 97, 118, 97, 105, 108, 97, 98, 108, 101, 87, 105, 100, 116, 104, 32, 105, 115, 32, 105, 110, 100, 101, 102, 105, 110, 105, 116, 101, 32, 115, 111, 32, 119, 105, 100, 116, 104, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 89, 71, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 85, 110, 100, 101, 102, 105, 110, 101, 100, 0, 97, 118, 97, 105, 108, 97, 98, 108, 101, 72, 101, 105, 103, 104, 116, 32, 105, 115, 32, 105, 110, 100, 101, 102, 105, 110, 105, 116, 101, 32, 115, 111, 32, 104, 101, 105, 103, 104, 116, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 89, 71, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 85, 110, 100, 101, 102, 105, 110, 101, 100, 0, 102, 108, 101, 120, 0, 115, 116, 114, 101, 116, 99, 104, 0, 109, 117, 108, 116, 105, 108, 105, 110, 101, 45, 115, 116, 114, 101, 116, 99, 104, 0, 69, 120, 112, 101, 99, 116, 101, 100, 32, 110, 111, 100, 101, 32, 116, 111, 32, 104, 97, 118, 101, 32, 99, 117, 115, 116, 111, 109, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 0, 109, 101, 97, 115, 117, 114, 101, 0, 69, 120, 112, 101, 99, 116, 32, 99, 117, 115, 116, 111, 109, 32, 98, 97, 115, 101, 108, 105, 110, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 111, 32, 110, 111, 116, 32, 114, 101, 116, 117, 114, 110, 32, 78, 97, 78, 0, 97, 98, 115, 45, 109, 101, 97, 115, 117, 114, 101, 0, 97, 98, 115, 45, 108, 97, 121, 111, 117, 116, 0, 78, 111, 100, 101, 0, 99, 114, 101, 97, 116, 101, 68, 101, 102, 97, 117, 108, 116, 0, 99, 114, 101, 97, 116, 101, 87, 105, 116, 104, 67, 111, 110, 102, 105, 103, 0, 100, 101, 115, 116, 114, 111, 121, 0, 114, 101, 115, 101, 116, 0, 99, 111, 112, 121, 83, 116, 121, 108, 101, 0, 115, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 84, 121, 112, 101, 0, 115, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 0, 115, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 65, 108, 105, 103, 110, 67, 111, 110, 116, 101, 110, 116, 0, 115, 101, 116, 65, 108, 105, 103, 110, 73, 116, 101, 109, 115, 0, 115, 101, 116, 65, 108, 105, 103, 110, 83, 101, 108, 102, 0, 115, 101, 116, 70, 108, 101, 120, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 115, 101, 116, 70, 108, 101, 120, 87, 114, 97, 112, 0, 115, 101, 116, 74, 117, 115, 116, 105, 102, 121, 67, 111, 110, 116, 101, 110, 116, 0, 115, 101, 116, 77, 97, 114, 103, 105, 110, 0, 115, 101, 116, 77, 97, 114, 103, 105, 110, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 97, 114, 103, 105, 110, 65, 117, 116, 111, 0, 115, 101, 116, 79, 118, 101, 114, 102, 108, 111, 119, 0, 115, 101, 116, 68, 105, 115, 112, 108, 97, 121, 0, 115, 101, 116, 70, 108, 101, 120, 0, 115, 101, 116, 70, 108, 101, 120, 66, 97, 115, 105, 115, 0, 115, 101, 116, 70, 108, 101, 120, 66, 97, 115, 105, 115, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 70, 108, 101, 120, 71, 114, 111, 119, 0, 115, 101, 116, 70, 108, 101, 120, 83, 104, 114, 105, 110, 107, 0, 115, 101, 116, 87, 105, 100, 116, 104, 0, 115, 101, 116, 87, 105, 100, 116, 104, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 87, 105, 100, 116, 104, 65, 117, 116, 111, 0, 115, 101, 116, 72, 101, 105, 103, 104, 116, 0, 115, 101, 116, 72, 101, 105, 103, 104, 116, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 72, 101, 105, 103, 104, 116, 65, 117, 116, 111, 0, 115, 101, 116, 77, 105, 110, 87, 105, 100, 116, 104, 0, 115, 101, 116, 77, 105, 110, 87, 105, 100, 116, 104, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 105, 110, 72, 101, 105, 103, 104, 116, 0, 115, 101, 116, 77, 105, 110, 72, 101, 105, 103, 104, 116, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 97, 120, 87, 105, 100, 116, 104, 0, 115, 101, 116, 77, 97, 120, 87, 105, 100, 116, 104, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 97, 120, 72, 101, 105, 103, 104, 116, 0, 115, 101, 116, 77, 97, 120, 72, 101, 105, 103, 104, 116, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 65, 115, 112, 101, 99, 116, 82, 97, 116, 105, 111, 0, 115, 101, 116, 66, 111, 114, 100, 101, 114, 0, 115, 101, 116, 80, 97, 100, 100, 105, 110, 103, 0, 115, 101, 116, 80, 97, 100, 100, 105, 110, 103, 80, 101, 114, 99, 101, 110, 116, 0, 103, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 84, 121, 112, 101, 0, 103, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 0, 103, 101, 116, 65, 108, 105, 103, 110, 67, 111, 110, 116, 101, 110, 116, 0, 103, 101, 116, 65, 108, 105, 103, 110, 73, 116, 101, 109, 115, 0, 103, 101, 116, 65, 108, 105, 103, 110, 83, 101, 108, 102, 0, 103, 101, 116, 70, 108, 101, 120, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 103, 101, 116, 70, 108, 101, 120, 87, 114, 97, 112, 0, 103, 101, 116, 74, 117, 115, 116, 105, 102, 121, 67, 111, 110, 116, 101, 110, 116, 0, 103, 101, 116, 77, 97, 114, 103, 105, 110, 0, 103, 101, 116, 70, 108, 101, 120, 66, 97, 115, 105, 115, 0, 103, 101, 116, 70, 108, 101, 120, 71, 114, 111, 119, 0, 103, 101, 116, 70, 108, 101, 120, 83, 104, 114, 105, 110, 107, 0, 103, 101, 116, 87, 105, 100, 116, 104, 0, 103, 101, 116, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 77, 105, 110, 87, 105, 100, 116, 104, 0, 103, 101, 116, 77, 105, 110, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 77, 97, 120, 87, 105, 100, 116, 104, 0, 103, 101, 116, 77, 97, 120, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 65, 115, 112, 101, 99, 116, 82, 97, 116, 105, 111, 0, 103, 101, 116, 66, 111, 114, 100, 101, 114, 0, 103, 101, 116, 79, 118, 101, 114, 102, 108, 111, 119, 0, 103, 101, 116, 68, 105, 115, 112, 108, 97, 121, 0, 103, 101, 116, 80, 97, 100, 100, 105, 110, 103, 0, 105, 110, 115, 101, 114, 116, 67, 104, 105, 108, 100, 0, 114, 101, 109, 111, 118, 101, 67, 104, 105, 108, 100, 0, 103, 101, 116, 67, 104, 105, 108, 100, 67, 111, 117, 110, 116, 0, 103, 101, 116, 80, 97, 114, 101, 110, 116, 0, 103, 101, 116, 67, 104, 105, 108, 100, 0, 115, 101, 116, 77, 101, 97, 115, 117, 114, 101, 70, 117, 110, 99, 0, 117, 110, 115, 101, 116, 77, 101, 97, 115, 117, 114, 101, 70, 117, 110, 99, 0, 109, 97, 114, 107, 68, 105, 114, 116, 121, 0, 105, 115, 68, 105, 114, 116, 121, 0, 99, 97, 108, 99, 117, 108, 97, 116, 101, 76, 97, 121, 111, 117, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 76, 101, 102, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 82, 105, 103, 104, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 84, 111, 112, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 66, 111, 116, 116, 111, 109, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 87, 105, 100, 116, 104, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 76, 97, 121, 111, 117, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 77, 97, 114, 103, 105, 110, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 66, 111, 114, 100, 101, 114, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 80, 97, 100, 100, 105, 110, 103, 0, 67, 111, 110, 102, 105, 103, 0, 99, 114, 101, 97, 116, 101, 0, 115, 101, 116, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 97, 108, 70, 101, 97, 116, 117, 114, 101, 69, 110, 97, 98, 108, 101, 100, 0, 115, 101, 116, 80, 111, 105, 110, 116, 83, 99, 97, 108, 101, 70, 97, 99, 116, 111, 114, 0, 105, 115, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 97, 108, 70, 101, 97, 116, 117, 114, 101, 69, 110, 97, 98, 108, 101, 100, 0, 86, 97, 108, 117, 101, 0, 76, 97, 121, 111, 117, 116, 0, 83, 105, 122, 101, 0, 103, 101, 116, 73, 110, 115, 116, 97, 110, 99, 101, 67, 111, 117, 110, 116, 0, 73, 110, 116, 54, 52, 0, 1, 1, 1, 2, 2, 4, 4, 4, 4, 8, 8, 4, 8, 118, 111, 105, 100, 0, 98, 111, 111, 108, 0, 115, 116, 100, 58, 58, 115, 116, 114, 105, 110, 103, 0, 99, 98, 70, 117, 110, 99, 116, 105, 111, 110, 32, 38, 0, 99, 111, 110, 115, 116, 32, 99, 98, 70, 117, 110, 99, 116, 105, 111, 110, 32, 38, 0, 69, 120, 116, 101, 114, 110, 97, 108, 0, 66, 117, 102, 102, 101, 114, 0, 78, 66, 105, 110, 100, 73, 68, 0, 78, 66, 105, 110, 100, 0, 98, 105, 110, 100, 95, 118, 97, 108, 117, 101, 0, 114, 101, 102, 108, 101, 99, 116, 0, 113, 117, 101, 114, 121, 84, 121, 112, 101, 0, 108, 97, 108, 108, 111, 99, 0, 108, 114, 101, 115, 101, 116, 0, 123, 114, 101, 116, 117, 114, 110, 40, 95, 110, 98, 105, 110, 100, 46, 99, 97, 108, 108, 98, 97, 99, 107, 83, 105, 103, 110, 97, 116, 117, 114, 101, 76, 105, 115, 116, 91, 36, 48, 93, 46, 97, 112, 112, 108, 121, 40, 116, 104, 105, 115, 44, 97, 114, 103, 117, 109, 101, 110, 116, 115, 41, 41, 59, 125, 0, 95, 110, 98, 105, 110, 100, 95, 110, 101, 119, 0, 17, 0, 10, 0, 17, 17, 17, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 15, 10, 17, 17, 17, 3, 10, 7, 0, 1, 19, 9, 11, 11, 0, 0, 9, 6, 11, 0, 0, 11, 0, 6, 17, 0, 0, 0, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 10, 10, 17, 17, 17, 0, 10, 0, 0, 2, 0, 9, 11, 0, 0, 0, 9, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 13, 0, 0, 0, 0, 9, 14, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 15, 0, 0, 0, 0, 9, 16, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 0, 0, 0, 0, 9, 11, 0, 0, 0, 0, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 45, 43, 32, 32, 32, 48, 88, 48, 120, 0, 40, 110, 117, 108, 108, 41, 0, 45, 48, 88, 43, 48, 88, 32, 48, 88, 45, 48, 120, 43, 48, 120, 32, 48, 120, 0, 105, 110, 102, 0, 73, 78, 70, 0, 110, 97, 110, 0, 78, 65, 78, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 46, 0, 84, 33, 34, 25, 13, 1, 2, 3, 17, 75, 28, 12, 16, 4, 11, 29, 18, 30, 39, 104, 110, 111, 112, 113, 98, 32, 5, 6, 15, 19, 20, 21, 26, 8, 22, 7, 40, 36, 23, 24, 9, 10, 14, 27, 31, 37, 35, 131, 130, 125, 38, 42, 43, 60, 61, 62, 63, 67, 71, 74, 77, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 114, 115, 116, 121, 122, 123, 124, 0, 73, 108, 108, 101, 103, 97, 108, 32, 98, 121, 116, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 0, 68, 111, 109, 97, 105, 110, 32, 101, 114, 114, 111, 114, 0, 82, 101, 115, 117, 108, 116, 32, 110, 111, 116, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 98, 108, 101, 0, 78, 111, 116, 32, 97, 32, 116, 116, 121, 0, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 100, 101, 110, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 102, 105, 108, 101, 32, 111, 114, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 78, 111, 32, 115, 117, 99, 104, 32, 112, 114, 111, 99, 101, 115, 115, 0, 70, 105, 108, 101, 32, 101, 120, 105, 115, 116, 115, 0, 86, 97, 108, 117, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 32, 102, 111, 114, 32, 100, 97, 116, 97, 32, 116, 121, 112, 101, 0, 78, 111, 32, 115, 112, 97, 99, 101, 32, 108, 101, 102, 116, 32, 111, 110, 32, 100, 101, 118, 105, 99, 101, 0, 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 98, 117, 115, 121, 0, 73, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 32, 115, 121, 115, 116, 101, 109, 32, 99, 97, 108, 108, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 116, 101, 109, 112, 111, 114, 97, 114, 105, 108, 121, 32, 117, 110, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 73, 110, 118, 97, 108, 105, 100, 32, 115, 101, 101, 107, 0, 67, 114, 111, 115, 115, 45, 100, 101, 118, 105, 99, 101, 32, 108, 105, 110, 107, 0, 82, 101, 97, 100, 45, 111, 110, 108, 121, 32, 102, 105, 108, 101, 32, 115, 121, 115, 116, 101, 109, 0, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 110, 111, 116, 32, 101, 109, 112, 116, 121, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 112, 101, 101, 114, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 116, 105, 109, 101, 100, 32, 111, 117, 116, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 102, 117, 115, 101, 100, 0, 72, 111, 115, 116, 32, 105, 115, 32, 100, 111, 119, 110, 0, 72, 111, 115, 116, 32, 105, 115, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 65, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 117, 115, 101, 0, 66, 114, 111, 107, 101, 110, 32, 112, 105, 112, 101, 0, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 32, 111, 114, 32, 97, 100, 100, 114, 101, 115, 115, 0, 66, 108, 111, 99, 107, 32, 100, 101, 118, 105, 99, 101, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 0, 78, 111, 116, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 73, 115, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 84, 101, 120, 116, 32, 102, 105, 108, 101, 32, 98, 117, 115, 121, 0, 69, 120, 101, 99, 32, 102, 111, 114, 109, 97, 116, 32, 101, 114, 114, 111, 114, 0, 73, 110, 118, 97, 108, 105, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 0, 65, 114, 103, 117, 109, 101, 110, 116, 32, 108, 105, 115, 116, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 83, 121, 109, 98, 111, 108, 105, 99, 32, 108, 105, 110, 107, 32, 108, 111, 111, 112, 0, 70, 105, 108, 101, 110, 97, 109, 101, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 115, 121, 115, 116, 101, 109, 0, 78, 111, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 66, 97, 100, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 78, 111, 32, 99, 104, 105, 108, 100, 32, 112, 114, 111, 99, 101, 115, 115, 0, 66, 97, 100, 32, 97, 100, 100, 114, 101, 115, 115, 0, 70, 105, 108, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 108, 105, 110, 107, 115, 0, 78, 111, 32, 108, 111, 99, 107, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 100, 101, 97, 100, 108, 111, 99, 107, 32, 119, 111, 117, 108, 100, 32, 111, 99, 99, 117, 114, 0, 83, 116, 97, 116, 101, 32, 110, 111, 116, 32, 114, 101, 99, 111, 118, 101, 114, 97, 98, 108, 101, 0, 80, 114, 101, 118, 105, 111, 117, 115, 32, 111, 119, 110, 101, 114, 32, 100, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 99, 97, 110, 99, 101, 108, 101, 100, 0, 70, 117, 110, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 0, 78, 111, 32, 109, 101, 115, 115, 97, 103, 101, 32, 111, 102, 32, 100, 101, 115, 105, 114, 101, 100, 32, 116, 121, 112, 101, 0, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 114, 101, 109, 111, 118, 101, 100, 0, 68, 101, 118, 105, 99, 101, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 101, 97, 109, 0, 78, 111, 32, 100, 97, 116, 97, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 68, 101, 118, 105, 99, 101, 32, 116, 105, 109, 101, 111, 117, 116, 0, 79, 117, 116, 32, 111, 102, 32, 115, 116, 114, 101, 97, 109, 115, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 0, 76, 105, 110, 107, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 115, 101, 118, 101, 114, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 101, 114, 114, 111, 114, 0, 66, 97, 100, 32, 109, 101, 115, 115, 97, 103, 101, 0, 70, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 105, 110, 32, 98, 97, 100, 32, 115, 116, 97, 116, 101, 0, 78, 111, 116, 32, 97, 32, 115, 111, 99, 107, 101, 116, 0, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 77, 101, 115, 115, 97, 103, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 119, 114, 111, 110, 103, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 115, 111, 99, 107, 101, 116, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 116, 121, 112, 101, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 78, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 65, 100, 100, 114, 101, 115, 115, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 112, 114, 111, 116, 111, 99, 111, 108, 0, 65, 100, 100, 114, 101, 115, 115, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 78, 101, 116, 119, 111, 114, 107, 32, 105, 115, 32, 100, 111, 119, 110, 0, 78, 101, 116, 119, 111, 114, 107, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 110, 101, 116, 119, 111, 114, 107, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 97, 98, 111, 114, 116, 101, 100, 0, 78, 111, 32, 98, 117, 102, 102, 101, 114, 32, 115, 112, 97, 99, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 83, 111, 99, 107, 101, 116, 32, 105, 115, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 67, 97, 110, 110, 111, 116, 32, 115, 101, 110, 100, 32, 97, 102, 116, 101, 114, 32, 115, 111, 99, 107, 101, 116, 32, 115, 104, 117, 116, 100, 111, 119, 110, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 83, 116, 97, 108, 101, 32, 102, 105, 108, 101, 32, 104, 97, 110, 100, 108, 101, 0, 82, 101, 109, 111, 116, 101, 32, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 81, 117, 111, 116, 97, 32, 101, 120, 99, 101, 101, 100, 101, 100, 0, 78, 111, 32, 109, 101, 100, 105, 117, 109, 32, 102, 111, 117, 110, 100, 0, 87, 114, 111, 110, 103, 32, 109, 101, 100, 105, 117, 109, 32, 116, 121, 112, 101, 0, 78, 111, 32, 101, 114, 114, 111, 114, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 0, 0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
    var tempDoublePtr = STATICTOP;
    STATICTOP += 16;
    function _atexit(func, arg) {
      __ATEXIT__.unshift({func, arg});
    }
    function ___cxa_atexit() {
      return _atexit.apply(null, arguments);
    }
    function _abort() {
      Module["abort"]();
    }
    function __ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj() {
      Module["printErr"]("missing function: _ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj");
      abort(-1);
    }
    function __decorate(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function _defineHidden(value) {
      return function(target, key) {
        Object.defineProperty(target, key, {configurable: false, enumerable: false, value, writable: true});
      };
    }
    var _nbind = {};
    function __nbind_free_external(num) {
      _nbind.externalList[num].dereference(num);
    }
    function __nbind_reference_external(num) {
      _nbind.externalList[num].reference();
    }
    function _llvm_stackrestore(p) {
      var self2 = _llvm_stacksave;
      var ret = self2.LLVM_SAVEDSTACKS[p];
      self2.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }
    function __nbind_register_pool(pageSize, usedPtr, rootPtr, pagePtr) {
      _nbind.Pool.pageSize = pageSize;
      _nbind.Pool.usedPtr = usedPtr / 4;
      _nbind.Pool.rootPtr = rootPtr;
      _nbind.Pool.pagePtr = pagePtr / 4;
      HEAP32[usedPtr / 4] = 16909060;
      if (HEAP8[usedPtr] == 1)
        _nbind.bigEndian = true;
      HEAP32[usedPtr / 4] = 0;
      _nbind.makeTypeKindTbl = (_a2 = {}, _a2[1024] = _nbind.PrimitiveType, _a2[64] = _nbind.Int64Type, _a2[2048] = _nbind.BindClass, _a2[3072] = _nbind.BindClassPtr, _a2[4096] = _nbind.SharedClassPtr, _a2[5120] = _nbind.ArrayType, _a2[6144] = _nbind.ArrayType, _a2[7168] = _nbind.CStringType, _a2[9216] = _nbind.CallbackType, _a2[10240] = _nbind.BindType, _a2);
      _nbind.makeTypeNameTbl = {Buffer: _nbind.BufferType, External: _nbind.ExternalType, Int64: _nbind.Int64Type, _nbind_new: _nbind.CreateValueType, bool: _nbind.BooleanType, "cbFunction &": _nbind.CallbackType, "const cbFunction &": _nbind.CallbackType, "const std::string &": _nbind.StringType, "std::string": _nbind.StringType};
      Module["toggleLightGC"] = _nbind.toggleLightGC;
      _nbind.callUpcast = Module["dynCall_ii"];
      var globalScope = _nbind.makeType(_nbind.constructType, {flags: 2048, id: 0, name: ""});
      globalScope.proto = Module;
      _nbind.BindClass.list.push(globalScope);
      var _a2;
    }
    function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
      if (!Browser.mainLoop.func) {
        return 1;
      }
      if (mode == 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick);
        };
        Browser.mainLoop.method = "timeout";
      } else if (mode == 1) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = "rAF";
      } else if (mode == 2) {
        if (!window["setImmediate"]) {
          let Browser_setImmediate_messageHandler2 = function(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          };
          var Browser_setImmediate_messageHandler = Browser_setImmediate_messageHandler2;
          var setImmediates = [];
          var emscriptenMainLoopMessageId = "setimmediate";
          window.addEventListener("message", Browser_setImmediate_messageHandler2, true);
          window["setImmediate"] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module["setImmediates"] === void 0)
                Module["setImmediates"] = [];
              Module["setImmediates"].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId});
            } else
              window.postMessage(emscriptenMainLoopMessageId, "*");
          };
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window["setImmediate"](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = "immediate";
      }
      return 0;
    }
    function _emscripten_get_now() {
      abort();
    }
    function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module["noExitRuntime"] = true;
      assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
      var browserIterationFunc;
      if (typeof arg !== "undefined") {
        browserIterationFunc = function() {
          Module["dynCall_vi"](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module["dynCall_v"](func);
        };
      }
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT)
          return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              next = next + 0.5;
              Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
          Browser.mainLoop.updateStatus();
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop)
            return;
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop)
          return;
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
        if (Browser.mainLoop.method === "timeout" && Module.ctx) {
          Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
          Browser.mainLoop.method = "";
        }
        Browser.mainLoop.runIter(browserIterationFunc);
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop)
          return;
        if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData)
          SDL.audio.queueNewAudioData();
        Browser.mainLoop.scheduler();
      };
      if (!noSetTiming) {
        if (fps && fps > 0)
          _emscripten_set_main_loop_timing(0, 1e3 / fps);
        else
          _emscripten_set_main_loop_timing(1, 1);
        Browser.mainLoop.scheduler();
      }
      if (simulateInfiniteLoop) {
        throw "SimulateInfiniteLoop";
      }
    }
    var Browser = {mainLoop: {scheduler: null, method: "", currentlyRunningMainloop: 0, func: null, arg: 0, timingMode: 0, timingValue: 0, currentFrameNumber: 0, queue: [], pause: function() {
      Browser.mainLoop.scheduler = null;
      Browser.mainLoop.currentlyRunningMainloop++;
    }, resume: function() {
      Browser.mainLoop.currentlyRunningMainloop++;
      var timingMode = Browser.mainLoop.timingMode;
      var timingValue = Browser.mainLoop.timingValue;
      var func = Browser.mainLoop.func;
      Browser.mainLoop.func = null;
      _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true);
      _emscripten_set_main_loop_timing(timingMode, timingValue);
      Browser.mainLoop.scheduler();
    }, updateStatus: function() {
      if (Module["setStatus"]) {
        var message = Module["statusMessage"] || "Please wait...";
        var remaining = Browser.mainLoop.remainingBlockers;
        var expected = Browser.mainLoop.expectedBlockers;
        if (remaining) {
          if (remaining < expected) {
            Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
          } else {
            Module["setStatus"](message);
          }
        } else {
          Module["setStatus"]("");
        }
      }
    }, runIter: function(func) {
      if (ABORT)
        return;
      if (Module["preMainLoop"]) {
        var preRet = Module["preMainLoop"]();
        if (preRet === false) {
          return;
        }
      }
      try {
        func();
      } catch (e) {
        if (e instanceof ExitStatus) {
          return;
        } else {
          if (e && typeof e === "object" && e.stack)
            Module.printErr("exception thrown: " + [e, e.stack]);
          throw e;
        }
      }
      if (Module["postMainLoop"])
        Module["postMainLoop"]();
    }}, isFullscreen: false, pointerLock: false, moduleContextCreatedCallbacks: [], workers: [], init: function() {
      if (!Module["preloadPlugins"])
        Module["preloadPlugins"] = [];
      if (Browser.initted)
        return;
      Browser.initted = true;
      try {
        new Blob();
        Browser.hasBlobConstructor = true;
      } catch (e) {
        Browser.hasBlobConstructor = false;
        console.log("warning: no blob constructor, cannot create blobs with mimetypes");
      }
      Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
      Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : void 0;
      if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
        console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
        Module.noImageDecoding = true;
      }
      var imagePlugin = {};
      imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
        return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
      };
      imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
        var b = null;
        if (Browser.hasBlobConstructor) {
          try {
            b = new Blob([byteArray], {type: Browser.getMimetype(name)});
            if (b.size !== byteArray.length) {
              b = new Blob([new Uint8Array(byteArray).buffer], {type: Browser.getMimetype(name)});
            }
          } catch (e) {
            Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
          }
        }
        if (!b) {
          var bb = new Browser.BlobBuilder();
          bb.append(new Uint8Array(byteArray).buffer);
          b = bb.getBlob();
        }
        var url = Browser.URLObject.createObjectURL(b);
        var img = new Image();
        img.onload = function img_onload() {
          assert(img.complete, "Image " + name + " could not be decoded");
          var canvas2 = document.createElement("canvas");
          canvas2.width = img.width;
          canvas2.height = img.height;
          var ctx = canvas2.getContext("2d");
          ctx.drawImage(img, 0, 0);
          Module["preloadedImages"][name] = canvas2;
          Browser.URLObject.revokeObjectURL(url);
          if (onload)
            onload(byteArray);
        };
        img.onerror = function img_onerror(event) {
          console.log("Image " + url + " could not be decoded");
          if (onerror)
            onerror();
        };
        img.src = url;
      };
      Module["preloadPlugins"].push(imagePlugin);
      var audioPlugin = {};
      audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
        return !Module.noAudioDecoding && name.substr(-4) in {".ogg": 1, ".wav": 1, ".mp3": 1};
      };
      audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
        var done = false;
        function finish(audio2) {
          if (done)
            return;
          done = true;
          Module["preloadedAudios"][name] = audio2;
          if (onload)
            onload(byteArray);
        }
        function fail() {
          if (done)
            return;
          done = true;
          Module["preloadedAudios"][name] = new Audio();
          if (onerror)
            onerror();
        }
        if (Browser.hasBlobConstructor) {
          try {
            var b = new Blob([byteArray], {type: Browser.getMimetype(name)});
          } catch (e) {
            return fail();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var audio = new Audio();
          audio.addEventListener("canplaythrough", function() {
            finish(audio);
          }, false);
          audio.onerror = function audio_onerror(event) {
            if (done)
              return;
            console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
            function encode64(data) {
              var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
              var PAD = "=";
              var ret = "";
              var leftchar = 0;
              var leftbits = 0;
              for (var i = 0; i < data.length; i++) {
                leftchar = leftchar << 8 | data[i];
                leftbits += 8;
                while (leftbits >= 6) {
                  var curr = leftchar >> leftbits - 6 & 63;
                  leftbits -= 6;
                  ret += BASE[curr];
                }
              }
              if (leftbits == 2) {
                ret += BASE[(leftchar & 3) << 4];
                ret += PAD + PAD;
              } else if (leftbits == 4) {
                ret += BASE[(leftchar & 15) << 2];
                ret += PAD;
              }
              return ret;
            }
            audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
            finish(audio);
          };
          audio.src = url;
          Browser.safeSetTimeout(function() {
            finish(audio);
          }, 1e4);
        } else {
          return fail();
        }
      };
      Module["preloadPlugins"].push(audioPlugin);
      function pointerLockChange() {
        Browser.pointerLock = document["pointerLockElement"] === Module["canvas"] || document["mozPointerLockElement"] === Module["canvas"] || document["webkitPointerLockElement"] === Module["canvas"] || document["msPointerLockElement"] === Module["canvas"];
      }
      var canvas = Module["canvas"];
      if (canvas) {
        canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || function() {
        };
        canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || function() {
        };
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        document.addEventListener("pointerlockchange", pointerLockChange, false);
        document.addEventListener("mozpointerlockchange", pointerLockChange, false);
        document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
        document.addEventListener("mspointerlockchange", pointerLockChange, false);
        if (Module["elementPointerLock"]) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
              Module["canvas"].requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      }
    }, createContext: function(canvas, useWebGL, setInModule, webGLContextAttributes) {
      if (useWebGL && Module.ctx && canvas == Module.canvas)
        return Module.ctx;
      var ctx;
      var contextHandle;
      if (useWebGL) {
        var contextAttributes = {antialias: false, alpha: false};
        if (webGLContextAttributes) {
          for (var attribute in webGLContextAttributes) {
            contextAttributes[attribute] = webGLContextAttributes[attribute];
          }
        }
        contextHandle = GL.createContext(canvas, contextAttributes);
        if (contextHandle) {
          ctx = GL.getContext(contextHandle).GLctx;
        }
      } else {
        ctx = canvas.getContext("2d");
      }
      if (!ctx)
        return null;
      if (setInModule) {
        if (!useWebGL)
          assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
        Module.ctx = ctx;
        if (useWebGL)
          GL.makeContextCurrent(contextHandle);
        Module.useWebGL = useWebGL;
        Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
          callback();
        });
        Browser.init();
      }
      return ctx;
    }, destroyContext: function(canvas, useWebGL, setInModule) {
    }, fullscreenHandlersInstalled: false, lockPointer: void 0, resizeCanvas: void 0, requestFullscreen: function(lockPointer, resizeCanvas, vrDevice) {
      Browser.lockPointer = lockPointer;
      Browser.resizeCanvas = resizeCanvas;
      Browser.vrDevice = vrDevice;
      if (typeof Browser.lockPointer === "undefined")
        Browser.lockPointer = true;
      if (typeof Browser.resizeCanvas === "undefined")
        Browser.resizeCanvas = false;
      if (typeof Browser.vrDevice === "undefined")
        Browser.vrDevice = null;
      var canvas = Module["canvas"];
      function fullscreenChange() {
        Browser.isFullscreen = false;
        var canvasContainer2 = canvas.parentNode;
        if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer2) {
          canvas.exitFullscreen = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || function() {
          };
          canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
          if (Browser.lockPointer)
            canvas.requestPointerLock();
          Browser.isFullscreen = true;
          if (Browser.resizeCanvas)
            Browser.setFullscreenCanvasSize();
        } else {
          canvasContainer2.parentNode.insertBefore(canvas, canvasContainer2);
          canvasContainer2.parentNode.removeChild(canvasContainer2);
          if (Browser.resizeCanvas)
            Browser.setWindowedCanvasSize();
        }
        if (Module["onFullScreen"])
          Module["onFullScreen"](Browser.isFullscreen);
        if (Module["onFullscreen"])
          Module["onFullscreen"](Browser.isFullscreen);
        Browser.updateCanvasDimensions(canvas);
      }
      if (!Browser.fullscreenHandlersInstalled) {
        Browser.fullscreenHandlersInstalled = true;
        document.addEventListener("fullscreenchange", fullscreenChange, false);
        document.addEventListener("mozfullscreenchange", fullscreenChange, false);
        document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
        document.addEventListener("MSFullscreenChange", fullscreenChange, false);
      }
      var canvasContainer = document.createElement("div");
      canvas.parentNode.insertBefore(canvasContainer, canvas);
      canvasContainer.appendChild(canvas);
      canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? function() {
        canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]);
      } : null) || (canvasContainer["webkitRequestFullScreen"] ? function() {
        canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
      } : null);
      if (vrDevice) {
        canvasContainer.requestFullscreen({vrDisplay: vrDevice});
      } else {
        canvasContainer.requestFullscreen();
      }
    }, requestFullScreen: function(lockPointer, resizeCanvas, vrDevice) {
      Module.printErr("Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.");
      Browser.requestFullScreen = function(lockPointer2, resizeCanvas2, vrDevice2) {
        return Browser.requestFullscreen(lockPointer2, resizeCanvas2, vrDevice2);
      };
      return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
    }, nextRAF: 0, fakeRequestAnimationFrame: function(func) {
      var now = Date.now();
      if (Browser.nextRAF === 0) {
        Browser.nextRAF = now + 1e3 / 60;
      } else {
        while (now + 2 >= Browser.nextRAF) {
          Browser.nextRAF += 1e3 / 60;
        }
      }
      var delay = Math.max(Browser.nextRAF - now, 0);
      setTimeout(func, delay);
    }, requestAnimationFrame: function requestAnimationFrame2(func) {
      if (typeof window === "undefined") {
        Browser.fakeRequestAnimationFrame(func);
      } else {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame;
        }
        window.requestAnimationFrame(func);
      }
    }, safeCallback: function(func) {
      return function() {
        if (!ABORT)
          return func.apply(null, arguments);
      };
    }, allowAsyncCallbacks: true, queuedAsyncCallbacks: [], pauseAsyncCallbacks: function() {
      Browser.allowAsyncCallbacks = false;
    }, resumeAsyncCallbacks: function() {
      Browser.allowAsyncCallbacks = true;
      if (Browser.queuedAsyncCallbacks.length > 0) {
        var callbacks = Browser.queuedAsyncCallbacks;
        Browser.queuedAsyncCallbacks = [];
        callbacks.forEach(function(func) {
          func();
        });
      }
    }, safeRequestAnimationFrame: function(func) {
      return Browser.requestAnimationFrame(function() {
        if (ABORT)
          return;
        if (Browser.allowAsyncCallbacks) {
          func();
        } else {
          Browser.queuedAsyncCallbacks.push(func);
        }
      });
    }, safeSetTimeout: function(func, timeout) {
      Module["noExitRuntime"] = true;
      return setTimeout(function() {
        if (ABORT)
          return;
        if (Browser.allowAsyncCallbacks) {
          func();
        } else {
          Browser.queuedAsyncCallbacks.push(func);
        }
      }, timeout);
    }, safeSetInterval: function(func, timeout) {
      Module["noExitRuntime"] = true;
      return setInterval(function() {
        if (ABORT)
          return;
        if (Browser.allowAsyncCallbacks) {
          func();
        }
      }, timeout);
    }, getMimetype: function(name) {
      return {jpg: "image/jpeg", jpeg: "image/jpeg", png: "image/png", bmp: "image/bmp", ogg: "audio/ogg", wav: "audio/wav", mp3: "audio/mpeg"}[name.substr(name.lastIndexOf(".") + 1)];
    }, getUserMedia: function(func) {
      if (!window.getUserMedia) {
        window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
      }
      window.getUserMedia(func);
    }, getMovementX: function(event) {
      return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
    }, getMovementY: function(event) {
      return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
    }, getMouseWheelDelta: function(event) {
      var delta = 0;
      switch (event.type) {
        case "DOMMouseScroll":
          delta = event.detail;
          break;
        case "mousewheel":
          delta = event.wheelDelta;
          break;
        case "wheel":
          delta = event["deltaY"];
          break;
        default:
          throw "unrecognized mouse wheel event: " + event.type;
      }
      return delta;
    }, mouseX: 0, mouseY: 0, mouseMovementX: 0, mouseMovementY: 0, touches: {}, lastTouches: {}, calculateMouseEvent: function(event) {
      if (Browser.pointerLock) {
        if (event.type != "mousemove" && "mozMovementX" in event) {
          Browser.mouseMovementX = Browser.mouseMovementY = 0;
        } else {
          Browser.mouseMovementX = Browser.getMovementX(event);
          Browser.mouseMovementY = Browser.getMovementY(event);
        }
        if (typeof SDL != "undefined") {
          Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
        } else {
          Browser.mouseX += Browser.mouseMovementX;
          Browser.mouseY += Browser.mouseMovementY;
        }
      } else {
        var rect = Module["canvas"].getBoundingClientRect();
        var cw = Module["canvas"].width;
        var ch = Module["canvas"].height;
        var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
        var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
        if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
          var touch = event.touch;
          if (touch === void 0) {
            return;
          }
          var adjustedX = touch.pageX - (scrollX + rect.left);
          var adjustedY = touch.pageY - (scrollY + rect.top);
          adjustedX = adjustedX * (cw / rect.width);
          adjustedY = adjustedY * (ch / rect.height);
          var coords = {x: adjustedX, y: adjustedY};
          if (event.type === "touchstart") {
            Browser.lastTouches[touch.identifier] = coords;
            Browser.touches[touch.identifier] = coords;
          } else if (event.type === "touchend" || event.type === "touchmove") {
            var last = Browser.touches[touch.identifier];
            if (!last)
              last = coords;
            Browser.lastTouches[touch.identifier] = last;
            Browser.touches[touch.identifier] = coords;
          }
          return;
        }
        var x = event.pageX - (scrollX + rect.left);
        var y = event.pageY - (scrollY + rect.top);
        x = x * (cw / rect.width);
        y = y * (ch / rect.height);
        Browser.mouseMovementX = x - Browser.mouseX;
        Browser.mouseMovementY = y - Browser.mouseY;
        Browser.mouseX = x;
        Browser.mouseY = y;
      }
    }, asyncLoad: function(url, onload, onerror, noRunDep) {
      var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
      Module["readAsync"](url, function(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
        onload(new Uint8Array(arrayBuffer));
        if (dep)
          removeRunDependency(dep);
      }, function(event) {
        if (onerror) {
          onerror();
        } else {
          throw 'Loading data file "' + url + '" failed.';
        }
      });
      if (dep)
        addRunDependency(dep);
    }, resizeListeners: [], updateResizeListeners: function() {
      var canvas = Module["canvas"];
      Browser.resizeListeners.forEach(function(listener) {
        listener(canvas.width, canvas.height);
      });
    }, setCanvasSize: function(width, height, noUpdates) {
      var canvas = Module["canvas"];
      Browser.updateCanvasDimensions(canvas, width, height);
      if (!noUpdates)
        Browser.updateResizeListeners();
    }, windowedWidth: 0, windowedHeight: 0, setFullscreenCanvasSize: function() {
      if (typeof SDL != "undefined") {
        var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
        flags = flags | 8388608;
        HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
      }
      Browser.updateResizeListeners();
    }, setWindowedCanvasSize: function() {
      if (typeof SDL != "undefined") {
        var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
        flags = flags & ~8388608;
        HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
      }
      Browser.updateResizeListeners();
    }, updateCanvasDimensions: function(canvas, wNative, hNative) {
      if (wNative && hNative) {
        canvas.widthNative = wNative;
        canvas.heightNative = hNative;
      } else {
        wNative = canvas.widthNative;
        hNative = canvas.heightNative;
      }
      var w = wNative;
      var h = hNative;
      if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
        if (w / h < Module["forcedAspectRatio"]) {
          w = Math.round(h * Module["forcedAspectRatio"]);
        } else {
          h = Math.round(w / Module["forcedAspectRatio"]);
        }
      }
      if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
        var factor = Math.min(screen.width / w, screen.height / h);
        w = Math.round(w * factor);
        h = Math.round(h * factor);
      }
      if (Browser.resizeCanvas) {
        if (canvas.width != w)
          canvas.width = w;
        if (canvas.height != h)
          canvas.height = h;
        if (typeof canvas.style != "undefined") {
          canvas.style.removeProperty("width");
          canvas.style.removeProperty("height");
        }
      } else {
        if (canvas.width != wNative)
          canvas.width = wNative;
        if (canvas.height != hNative)
          canvas.height = hNative;
        if (typeof canvas.style != "undefined") {
          if (w != wNative || h != hNative) {
            canvas.style.setProperty("width", w + "px", "important");
            canvas.style.setProperty("height", h + "px", "important");
          } else {
            canvas.style.removeProperty("width");
            canvas.style.removeProperty("height");
          }
        }
      }
    }, wgetRequests: {}, nextWgetRequestHandle: 0, getNextWgetRequestHandle: function() {
      var handle = Browser.nextWgetRequestHandle;
      Browser.nextWgetRequestHandle++;
      return handle;
    }};
    var SYSCALLS = {varargs: 0, get: function(varargs) {
      SYSCALLS.varargs += 4;
      var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
      return ret;
    }, getStr: function() {
      var ret = Pointer_stringify(SYSCALLS.get());
      return ret;
    }, get64: function() {
      var low = SYSCALLS.get(), high = SYSCALLS.get();
      if (low >= 0)
        assert(high === 0);
      else
        assert(high === -1);
      return low;
    }, getZero: function() {
      assert(SYSCALLS.get() === 0);
    }};
    function ___syscall6(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var stream = SYSCALLS.getStreamFromFD();
        FS.close(stream);
        return 0;
      } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
          abort(e);
        return -e.errno;
      }
    }
    function ___syscall54(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        return 0;
      } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
          abort(e);
        return -e.errno;
      }
    }
    function _typeModule(self2) {
      var structureList = [[0, 1, "X"], [1, 1, "const X"], [128, 1, "X *"], [256, 1, "X &"], [384, 1, "X &&"], [512, 1, "std::shared_ptr<X>"], [640, 1, "std::unique_ptr<X>"], [5120, 1, "std::vector<X>"], [6144, 2, "std::array<X, Y>"], [9216, -1, "std::function<X (Y)>"]];
      function applyStructure(outerName, outerFlags, innerName, innerFlags, param, flip) {
        if (outerFlags == 1) {
          var ref = innerFlags & 896;
          if (ref == 128 || ref == 256 || ref == 384)
            outerName = "X const";
        }
        var name;
        if (flip) {
          name = innerName.replace("X", outerName).replace("Y", param);
        } else {
          name = outerName.replace("X", innerName).replace("Y", param);
        }
        return name.replace(/([*&]) (?=[*&])/g, "$1");
      }
      function reportProblem(problem, id, kind, structureType, place) {
        throw new Error(problem + " type " + kind.replace("X", id + "?") + (structureType ? " with flag " + structureType : "") + " in " + place);
      }
      function getComplexType(id, constructType, getType, queryType, place, kind, prevStructure, depth) {
        if (kind === void 0) {
          kind = "X";
        }
        if (depth === void 0) {
          depth = 1;
        }
        var result = getType(id);
        if (result)
          return result;
        var query2 = queryType(id);
        var structureType = query2.placeholderFlag;
        var structure = structureList[structureType];
        if (prevStructure && structure) {
          kind = applyStructure(prevStructure[2], prevStructure[0], kind, structure[0], "?", true);
        }
        var problem;
        if (structureType == 0)
          problem = "Unbound";
        if (structureType >= 10)
          problem = "Corrupt";
        if (depth > 20)
          problem = "Deeply nested";
        if (problem)
          reportProblem(problem, id, kind, structureType, place || "?");
        var subId = query2.paramList[0];
        var subType = getComplexType(subId, constructType, getType, queryType, place, kind, structure, depth + 1);
        var srcSpec;
        var spec = {flags: structure[0], id, name: "", paramList: [subType]};
        var argList = [];
        var structureParam = "?";
        switch (query2.placeholderFlag) {
          case 1:
            srcSpec = subType.spec;
            break;
          case 2:
            if ((subType.flags & 15360) == 1024 && subType.spec.ptrSize == 1) {
              spec.flags = 7168;
              break;
            }
            ;
          case 3:
          case 6:
          case 5:
            srcSpec = subType.spec;
            if ((subType.flags & 15360) != 2048) {
            }
            break;
          case 8:
            structureParam = "" + query2.paramList[1];
            spec.paramList.push(query2.paramList[1]);
            break;
          case 9:
            for (var _i = 0, _a2 = query2.paramList[1]; _i < _a2.length; _i++) {
              var paramId = _a2[_i];
              var paramType = getComplexType(paramId, constructType, getType, queryType, place, kind, structure, depth + 1);
              argList.push(paramType.name);
              spec.paramList.push(paramType);
            }
            structureParam = argList.join(", ");
            break;
          default:
            break;
        }
        spec.name = applyStructure(structure[2], structure[0], subType.name, subType.flags, structureParam);
        if (srcSpec) {
          for (var _b = 0, _c = Object.keys(srcSpec); _b < _c.length; _b++) {
            var key = _c[_b];
            spec[key] = spec[key] || srcSpec[key];
          }
          spec.flags |= srcSpec.flags;
        }
        return makeType(constructType, spec);
      }
      function makeType(constructType, spec) {
        var flags = spec.flags;
        var refKind = flags & 896;
        var kind = flags & 15360;
        if (!spec.name && kind == 1024) {
          if (spec.ptrSize == 1) {
            spec.name = (flags & 16 ? "" : (flags & 8 ? "un" : "") + "signed ") + "char";
          } else {
            spec.name = (flags & 8 ? "u" : "") + (flags & 32 ? "float" : "int") + (spec.ptrSize * 8 + "_t");
          }
        }
        if (spec.ptrSize == 8 && !(flags & 32))
          kind = 64;
        if (kind == 2048) {
          if (refKind == 512 || refKind == 640) {
            kind = 4096;
          } else if (refKind)
            kind = 3072;
        }
        return constructType(kind, spec);
      }
      var Type = function() {
        function Type2(spec) {
          this.id = spec.id;
          this.name = spec.name;
          this.flags = spec.flags;
          this.spec = spec;
        }
        Type2.prototype.toString = function() {
          return this.name;
        };
        return Type2;
      }();
      var output = {Type, getComplexType, makeType, structureList};
      self2.output = output;
      return self2.output || output;
    }
    function __nbind_register_type(id, namePtr) {
      var name = _nbind.readAsciiString(namePtr);
      var spec = {flags: 10240, id, name};
      _nbind.makeType(_nbind.constructType, spec);
    }
    function __nbind_register_callback_signature(typeListPtr, typeCount) {
      var typeList = _nbind.readTypeIdList(typeListPtr, typeCount);
      var num = _nbind.callbackSignatureList.length;
      _nbind.callbackSignatureList[num] = _nbind.makeJSCaller(typeList);
      return num;
    }
    function __extends(Class, Parent) {
      for (var key in Parent)
        if (Parent.hasOwnProperty(key))
          Class[key] = Parent[key];
      function Base() {
        this.constructor = Class;
      }
      Base.prototype = Parent.prototype;
      Class.prototype = new Base();
    }
    function __nbind_register_class(idListPtr, policyListPtr, superListPtr, upcastListPtr, superCount, destructorPtr, namePtr) {
      var name = _nbind.readAsciiString(namePtr);
      var policyTbl = _nbind.readPolicyList(policyListPtr);
      var idList = HEAPU32.subarray(idListPtr / 4, idListPtr / 4 + 2);
      var spec = {flags: 2048 | (policyTbl["Value"] ? 2 : 0), id: idList[0], name};
      var bindClass = _nbind.makeType(_nbind.constructType, spec);
      bindClass.ptrType = _nbind.getComplexType(idList[1], _nbind.constructType, _nbind.getType, _nbind.queryType);
      bindClass.destroy = _nbind.makeMethodCaller(bindClass.ptrType, {boundID: spec.id, flags: 0, name: "destroy", num: 0, ptr: destructorPtr, title: bindClass.name + ".free", typeList: ["void", "uint32_t", "uint32_t"]});
      if (superCount) {
        bindClass.superIdList = Array.prototype.slice.call(HEAPU32.subarray(superListPtr / 4, superListPtr / 4 + superCount));
        bindClass.upcastList = Array.prototype.slice.call(HEAPU32.subarray(upcastListPtr / 4, upcastListPtr / 4 + superCount));
      }
      Module[bindClass.name] = bindClass.makeBound(policyTbl);
      _nbind.BindClass.list.push(bindClass);
    }
    function _removeAccessorPrefix(name) {
      var prefixMatcher = /^[Gg]et_?([A-Z]?([A-Z]?))/;
      return name.replace(prefixMatcher, function(match, initial, second) {
        return second ? initial : initial.toLowerCase();
      });
    }
    function __nbind_register_function(boundID, policyListPtr, typeListPtr, typeCount, ptr, direct, signatureType, namePtr, num, flags) {
      var bindClass = _nbind.getType(boundID);
      var policyTbl = _nbind.readPolicyList(policyListPtr);
      var typeList = _nbind.readTypeIdList(typeListPtr, typeCount);
      var specList;
      if (signatureType == 5) {
        specList = [{direct: ptr, name: "__nbindConstructor", ptr: 0, title: bindClass.name + " constructor", typeList: ["uint32_t"].concat(typeList.slice(1))}, {direct, name: "__nbindValueConstructor", ptr: 0, title: bindClass.name + " value constructor", typeList: ["void", "uint32_t"].concat(typeList.slice(1))}];
      } else {
        var name_1 = _nbind.readAsciiString(namePtr);
        var title = (bindClass.name && bindClass.name + ".") + name_1;
        if (signatureType == 3 || signatureType == 4) {
          name_1 = _removeAccessorPrefix(name_1);
        }
        specList = [{boundID, direct, name: name_1, ptr, title, typeList}];
      }
      for (var _i = 0, specList_1 = specList; _i < specList_1.length; _i++) {
        var spec = specList_1[_i];
        spec.signatureType = signatureType;
        spec.policyTbl = policyTbl;
        spec.num = num;
        spec.flags = flags;
        bindClass.addMethod(spec);
      }
    }
    function _nbind_value(name, proto) {
      if (!_nbind.typeNameTbl[name])
        _nbind.throwError("Unknown value type " + name);
      Module["NBind"].bind_value(name, proto);
      _defineHidden(_nbind.typeNameTbl[name].proto.prototype.__nbindValueConstructor)(proto.prototype, "__nbindValueConstructor");
    }
    Module["_nbind_value"] = _nbind_value;
    function __nbind_get_value_object(num, ptr) {
      var obj = _nbind.popValue(num);
      if (!obj.fromJS) {
        throw new Error("Object " + obj + " has no fromJS function");
      }
      obj.fromJS(function() {
        obj.__nbindValueConstructor.apply(this, Array.prototype.concat.apply([ptr], arguments));
      });
    }
    function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
      return dest;
    }
    function __nbind_register_primitive(id, size, flags) {
      var spec = {flags: 1024 | flags, id, ptrSize: size};
      _nbind.makeType(_nbind.constructType, spec);
    }
    var cttz_i8 = allocate([8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0], "i8", ALLOC_STATIC);
    function ___setErrNo(value) {
      if (Module["___errno_location"])
        HEAP32[Module["___errno_location"]() >> 2] = value;
      return value;
    }
    function _llvm_stacksave() {
      var self2 = _llvm_stacksave;
      if (!self2.LLVM_SAVEDSTACKS) {
        self2.LLVM_SAVEDSTACKS = [];
      }
      self2.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self2.LLVM_SAVEDSTACKS.length - 1;
    }
    function ___syscall140(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
        var offset = offset_low;
        FS.llseek(stream, offset, whence);
        HEAP32[result >> 2] = stream.position;
        if (stream.getdents && offset === 0 && whence === 0)
          stream.getdents = null;
        return 0;
      } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
          abort(e);
        return -e.errno;
      }
    }
    function ___syscall146(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
        var ret = 0;
        if (!___syscall146.buffer) {
          ___syscall146.buffers = [null, [], []];
          ___syscall146.printChar = function(stream2, curr) {
            var buffer = ___syscall146.buffers[stream2];
            assert(buffer);
            if (curr === 0 || curr === 10) {
              (stream2 === 1 ? Module["print"] : Module["printErr"])(UTF8ArrayToString(buffer, 0));
              buffer.length = 0;
            } else {
              buffer.push(curr);
            }
          };
        }
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[iov + i * 8 >> 2];
          var len = HEAP32[iov + (i * 8 + 4) >> 2];
          for (var j = 0; j < len; j++) {
            ___syscall146.printChar(stream, HEAPU8[ptr + j]);
          }
          ret += len;
        }
        return ret;
      } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
          abort(e);
        return -e.errno;
      }
    }
    function __nbind_finish() {
      for (var _i = 0, _a2 = _nbind.BindClass.list; _i < _a2.length; _i++) {
        var bindClass = _a2[_i];
        bindClass.finish();
      }
    }
    var ___dso_handle = STATICTOP;
    STATICTOP += 16;
    (function(_nbind) {
      var typeIdTbl = {};
      _nbind.typeNameTbl = {};
      var Pool = function() {
        function Pool() {
        }
        Pool.lalloc = function(size) {
          size = size + 7 & ~7;
          var used = HEAPU32[Pool.usedPtr];
          if (size > Pool.pageSize / 2 || size > Pool.pageSize - used) {
            var NBind = _nbind.typeNameTbl["NBind"].proto;
            return NBind.lalloc(size);
          } else {
            HEAPU32[Pool.usedPtr] = used + size;
            return Pool.rootPtr + used;
          }
        };
        Pool.lreset = function(used, page) {
          var topPage = HEAPU32[Pool.pagePtr];
          if (topPage) {
            var NBind = _nbind.typeNameTbl["NBind"].proto;
            NBind.lreset(used, page);
          } else {
            HEAPU32[Pool.usedPtr] = used;
          }
        };
        return Pool;
      }();
      _nbind.Pool = Pool;
      function constructType(kind, spec) {
        var construct = kind == 10240 ? _nbind.makeTypeNameTbl[spec.name] || _nbind.BindType : _nbind.makeTypeKindTbl[kind];
        var bindType = new construct(spec);
        typeIdTbl[spec.id] = bindType;
        _nbind.typeNameTbl[spec.name] = bindType;
        return bindType;
      }
      _nbind.constructType = constructType;
      function getType(id) {
        return typeIdTbl[id];
      }
      _nbind.getType = getType;
      function queryType(id) {
        var placeholderFlag = HEAPU8[id];
        var paramCount = _nbind.structureList[placeholderFlag][1];
        id /= 4;
        if (paramCount < 0) {
          ++id;
          paramCount = HEAPU32[id] + 1;
        }
        var paramList = Array.prototype.slice.call(HEAPU32.subarray(id + 1, id + 1 + paramCount));
        if (placeholderFlag == 9) {
          paramList = [paramList[0], paramList.slice(1)];
        }
        return {paramList, placeholderFlag};
      }
      _nbind.queryType = queryType;
      function getTypes(idList, place) {
        return idList.map(function(id) {
          return typeof id == "number" ? _nbind.getComplexType(id, constructType, getType, queryType, place) : _nbind.typeNameTbl[id];
        });
      }
      _nbind.getTypes = getTypes;
      function readTypeIdList(typeListPtr, typeCount) {
        return Array.prototype.slice.call(HEAPU32, typeListPtr / 4, typeListPtr / 4 + typeCount);
      }
      _nbind.readTypeIdList = readTypeIdList;
      function readAsciiString(ptr) {
        var endPtr = ptr;
        while (HEAPU8[endPtr++])
          ;
        return String.fromCharCode.apply("", HEAPU8.subarray(ptr, endPtr - 1));
      }
      _nbind.readAsciiString = readAsciiString;
      function readPolicyList(policyListPtr) {
        var policyTbl = {};
        if (policyListPtr) {
          while (1) {
            var namePtr = HEAPU32[policyListPtr / 4];
            if (!namePtr)
              break;
            policyTbl[readAsciiString(namePtr)] = true;
            policyListPtr += 4;
          }
        }
        return policyTbl;
      }
      _nbind.readPolicyList = readPolicyList;
      function getDynCall(typeList, name) {
        var mangleMap = {float32_t: "d", float64_t: "d", int64_t: "d", uint64_t: "d", void: "v"};
        var signature = typeList.map(function(type) {
          return mangleMap[type.name] || "i";
        }).join("");
        var dynCall = Module["dynCall_" + signature];
        if (!dynCall) {
          throw new Error("dynCall_" + signature + " not found for " + name + "(" + typeList.map(function(type) {
            return type.name;
          }).join(", ") + ")");
        }
        return dynCall;
      }
      _nbind.getDynCall = getDynCall;
      function addMethod(obj, name, func, arity) {
        var overload = obj[name];
        if (obj.hasOwnProperty(name) && overload) {
          if (overload.arity || overload.arity === 0) {
            overload = _nbind.makeOverloader(overload, overload.arity);
            obj[name] = overload;
          }
          overload.addMethod(func, arity);
        } else {
          func.arity = arity;
          obj[name] = func;
        }
      }
      _nbind.addMethod = addMethod;
      function throwError(message) {
        throw new Error(message);
      }
      _nbind.throwError = throwError;
      _nbind.bigEndian = false;
      _a = _typeModule(_typeModule), _nbind.Type = _a.Type, _nbind.makeType = _a.makeType, _nbind.getComplexType = _a.getComplexType, _nbind.structureList = _a.structureList;
      var BindType = function(_super) {
        __extends(BindType, _super);
        function BindType() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.heap = HEAPU32;
          _this.ptrSize = 4;
          return _this;
        }
        BindType.prototype.needsWireRead = function(policyTbl) {
          return !!this.wireRead || !!this.makeWireRead;
        };
        BindType.prototype.needsWireWrite = function(policyTbl) {
          return !!this.wireWrite || !!this.makeWireWrite;
        };
        return BindType;
      }(_nbind.Type);
      _nbind.BindType = BindType;
      var PrimitiveType = function(_super) {
        __extends(PrimitiveType, _super);
        function PrimitiveType(spec) {
          var _this = _super.call(this, spec) || this;
          var heapTbl = spec.flags & 32 ? {32: HEAPF32, 64: HEAPF64} : spec.flags & 8 ? {8: HEAPU8, 16: HEAPU16, 32: HEAPU32} : {8: HEAP8, 16: HEAP16, 32: HEAP32};
          _this.heap = heapTbl[spec.ptrSize * 8];
          _this.ptrSize = spec.ptrSize;
          return _this;
        }
        PrimitiveType.prototype.needsWireWrite = function(policyTbl) {
          return !!policyTbl && !!policyTbl["Strict"];
        };
        PrimitiveType.prototype.makeWireWrite = function(expr, policyTbl) {
          return policyTbl && policyTbl["Strict"] && function(arg) {
            if (typeof arg == "number")
              return arg;
            throw new Error("Type mismatch");
          };
        };
        return PrimitiveType;
      }(BindType);
      _nbind.PrimitiveType = PrimitiveType;
      function pushCString(str, policyTbl) {
        if (str === null || str === void 0) {
          if (policyTbl && policyTbl["Nullable"]) {
            return 0;
          } else
            throw new Error("Type mismatch");
        }
        if (policyTbl && policyTbl["Strict"]) {
          if (typeof str != "string")
            throw new Error("Type mismatch");
        } else
          str = str.toString();
        var length = Module.lengthBytesUTF8(str) + 1;
        var result = _nbind.Pool.lalloc(length);
        Module.stringToUTF8Array(str, HEAPU8, result, length);
        return result;
      }
      _nbind.pushCString = pushCString;
      function popCString(ptr) {
        if (ptr === 0)
          return null;
        return Module.Pointer_stringify(ptr);
      }
      _nbind.popCString = popCString;
      var CStringType = function(_super) {
        __extends(CStringType, _super);
        function CStringType() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.wireRead = popCString;
          _this.wireWrite = pushCString;
          _this.readResources = [_nbind.resources.pool];
          _this.writeResources = [_nbind.resources.pool];
          return _this;
        }
        CStringType.prototype.makeWireWrite = function(expr, policyTbl) {
          return function(arg) {
            return pushCString(arg, policyTbl);
          };
        };
        return CStringType;
      }(BindType);
      _nbind.CStringType = CStringType;
      var BooleanType = function(_super) {
        __extends(BooleanType, _super);
        function BooleanType() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.wireRead = function(arg) {
            return !!arg;
          };
          return _this;
        }
        BooleanType.prototype.needsWireWrite = function(policyTbl) {
          return !!policyTbl && !!policyTbl["Strict"];
        };
        BooleanType.prototype.makeWireRead = function(expr) {
          return "!!(" + expr + ")";
        };
        BooleanType.prototype.makeWireWrite = function(expr, policyTbl) {
          return policyTbl && policyTbl["Strict"] && function(arg) {
            if (typeof arg == "boolean")
              return arg;
            throw new Error("Type mismatch");
          } || expr;
        };
        return BooleanType;
      }(BindType);
      _nbind.BooleanType = BooleanType;
      var Wrapper = function() {
        function Wrapper() {
        }
        Wrapper.prototype.persist = function() {
          this.__nbindState |= 1;
        };
        return Wrapper;
      }();
      _nbind.Wrapper = Wrapper;
      function makeBound(policyTbl, bindClass) {
        var Bound = function(_super) {
          __extends(Bound2, _super);
          function Bound2(marker, flags, ptr, shared) {
            var _this = _super.call(this) || this;
            if (!(_this instanceof Bound2)) {
              return new (Function.prototype.bind.apply(Bound2, Array.prototype.concat.apply([null], arguments)))();
            }
            var nbindFlags = flags;
            var nbindPtr = ptr;
            var nbindShared = shared;
            if (marker !== _nbind.ptrMarker) {
              var wirePtr = _this.__nbindConstructor.apply(_this, arguments);
              nbindFlags = 4096 | 512;
              nbindShared = HEAPU32[wirePtr / 4];
              nbindPtr = HEAPU32[wirePtr / 4 + 1];
            }
            var spec = {configurable: true, enumerable: false, value: null, writable: false};
            var propTbl = {__nbindFlags: nbindFlags, __nbindPtr: nbindPtr};
            if (nbindShared) {
              propTbl["__nbindShared"] = nbindShared;
              _nbind.mark(_this);
            }
            for (var _i = 0, _a2 = Object.keys(propTbl); _i < _a2.length; _i++) {
              var key = _a2[_i];
              spec.value = propTbl[key];
              Object.defineProperty(_this, key, spec);
            }
            _defineHidden(0)(_this, "__nbindState");
            return _this;
          }
          Bound2.prototype.free = function() {
            bindClass.destroy.call(this, this.__nbindShared, this.__nbindFlags);
            this.__nbindState |= 2;
            disableMember(this, "__nbindShared");
            disableMember(this, "__nbindPtr");
          };
          return Bound2;
        }(Wrapper);
        __decorate([_defineHidden()], Bound.prototype, "__nbindConstructor", void 0);
        __decorate([_defineHidden()], Bound.prototype, "__nbindValueConstructor", void 0);
        __decorate([_defineHidden(policyTbl)], Bound.prototype, "__nbindPolicies", void 0);
        return Bound;
      }
      _nbind.makeBound = makeBound;
      function disableMember(obj, name) {
        function die() {
          throw new Error("Accessing deleted object");
        }
        Object.defineProperty(obj, name, {configurable: false, enumerable: false, get: die, set: die});
      }
      _nbind.ptrMarker = {};
      var BindClass = function(_super) {
        __extends(BindClass, _super);
        function BindClass(spec) {
          var _this = _super.call(this, spec) || this;
          _this.wireRead = function(arg) {
            return _nbind.popValue(arg, _this.ptrType);
          };
          _this.wireWrite = function(arg) {
            return pushPointer(arg, _this.ptrType, true);
          };
          _this.pendingSuperCount = 0;
          _this.ready = false;
          _this.methodTbl = {};
          if (spec.paramList) {
            _this.classType = spec.paramList[0].classType;
            _this.proto = _this.classType.proto;
          } else
            _this.classType = _this;
          return _this;
        }
        BindClass.prototype.makeBound = function(policyTbl) {
          var Bound = _nbind.makeBound(policyTbl, this);
          this.proto = Bound;
          this.ptrType.proto = Bound;
          return Bound;
        };
        BindClass.prototype.addMethod = function(spec) {
          var overloadList = this.methodTbl[spec.name] || [];
          overloadList.push(spec);
          this.methodTbl[spec.name] = overloadList;
        };
        BindClass.prototype.registerMethods = function(src, staticOnly) {
          var setter;
          for (var _i = 0, _a2 = Object.keys(src.methodTbl); _i < _a2.length; _i++) {
            var name_1 = _a2[_i];
            var overloadList = src.methodTbl[name_1];
            for (var _b = 0, overloadList_1 = overloadList; _b < overloadList_1.length; _b++) {
              var spec = overloadList_1[_b];
              var target = void 0;
              var caller = void 0;
              target = this.proto.prototype;
              if (staticOnly && spec.signatureType != 1)
                continue;
              switch (spec.signatureType) {
                case 1:
                  target = this.proto;
                case 5:
                  caller = _nbind.makeCaller(spec);
                  _nbind.addMethod(target, spec.name, caller, spec.typeList.length - 1);
                  break;
                case 4:
                  setter = _nbind.makeMethodCaller(src.ptrType, spec);
                  break;
                case 3:
                  Object.defineProperty(target, spec.name, {configurable: true, enumerable: false, get: _nbind.makeMethodCaller(src.ptrType, spec), set: setter});
                  break;
                case 2:
                  caller = _nbind.makeMethodCaller(src.ptrType, spec);
                  _nbind.addMethod(target, spec.name, caller, spec.typeList.length - 1);
                  break;
                default:
                  break;
              }
            }
          }
        };
        BindClass.prototype.registerSuperMethods = function(src, firstSuper, visitTbl) {
          if (visitTbl[src.name])
            return;
          visitTbl[src.name] = true;
          var superNum = 0;
          var nextFirst;
          for (var _i = 0, _a2 = src.superIdList || []; _i < _a2.length; _i++) {
            var superId = _a2[_i];
            var superClass = _nbind.getType(superId);
            if (superNum++ < firstSuper || firstSuper < 0) {
              nextFirst = -1;
            } else {
              nextFirst = 0;
            }
            this.registerSuperMethods(superClass, nextFirst, visitTbl);
          }
          this.registerMethods(src, firstSuper < 0);
        };
        BindClass.prototype.finish = function() {
          if (this.ready)
            return this;
          this.ready = true;
          this.superList = (this.superIdList || []).map(function(superId) {
            return _nbind.getType(superId).finish();
          });
          var Bound = this.proto;
          if (this.superList.length) {
            var Proto = function() {
              this.constructor = Bound;
            };
            Proto.prototype = this.superList[0].proto.prototype;
            Bound.prototype = new Proto();
          }
          if (Bound != Module)
            Bound.prototype.__nbindType = this;
          this.registerSuperMethods(this, 1, {});
          return this;
        };
        BindClass.prototype.upcastStep = function(dst, ptr) {
          if (dst == this)
            return ptr;
          for (var i = 0; i < this.superList.length; ++i) {
            var superPtr = this.superList[i].upcastStep(dst, _nbind.callUpcast(this.upcastList[i], ptr));
            if (superPtr)
              return superPtr;
          }
          return 0;
        };
        return BindClass;
      }(_nbind.BindType);
      BindClass.list = [];
      _nbind.BindClass = BindClass;
      function popPointer(ptr, type) {
        return ptr ? new type.proto(_nbind.ptrMarker, type.flags, ptr) : null;
      }
      _nbind.popPointer = popPointer;
      function pushPointer(obj, type, tryValue) {
        if (!(obj instanceof _nbind.Wrapper)) {
          if (tryValue) {
            return _nbind.pushValue(obj);
          } else
            throw new Error("Type mismatch");
        }
        var ptr = obj.__nbindPtr;
        var objType = obj.__nbindType.classType;
        var classType = type.classType;
        if (obj instanceof type.proto) {
          while (objType != classType) {
            ptr = _nbind.callUpcast(objType.upcastList[0], ptr);
            objType = objType.superList[0];
          }
        } else {
          ptr = objType.upcastStep(classType, ptr);
          if (!ptr)
            throw new Error("Type mismatch");
        }
        return ptr;
      }
      _nbind.pushPointer = pushPointer;
      function pushMutablePointer(obj, type) {
        var ptr = pushPointer(obj, type);
        if (obj.__nbindFlags & 1) {
          throw new Error("Passing a const value as a non-const argument");
        }
        return ptr;
      }
      var BindClassPtr = function(_super) {
        __extends(BindClassPtr, _super);
        function BindClassPtr(spec) {
          var _this = _super.call(this, spec) || this;
          _this.classType = spec.paramList[0].classType;
          _this.proto = _this.classType.proto;
          var isConst = spec.flags & 1;
          var isValue = (_this.flags & 896) == 256 && spec.flags & 2;
          var push = isConst ? pushPointer : pushMutablePointer;
          var pop = isValue ? _nbind.popValue : popPointer;
          _this.makeWireWrite = function(expr, policyTbl) {
            return policyTbl["Nullable"] ? function(arg) {
              return arg ? push(arg, _this) : 0;
            } : function(arg) {
              return push(arg, _this);
            };
          };
          _this.wireRead = function(arg) {
            return pop(arg, _this);
          };
          _this.wireWrite = function(arg) {
            return push(arg, _this);
          };
          return _this;
        }
        return BindClassPtr;
      }(_nbind.BindType);
      _nbind.BindClassPtr = BindClassPtr;
      function popShared(ptr, type) {
        var shared = HEAPU32[ptr / 4];
        var unsafe = HEAPU32[ptr / 4 + 1];
        return unsafe ? new type.proto(_nbind.ptrMarker, type.flags, unsafe, shared) : null;
      }
      _nbind.popShared = popShared;
      function pushShared(obj, type) {
        if (!(obj instanceof type.proto))
          throw new Error("Type mismatch");
        return obj.__nbindShared;
      }
      function pushMutableShared(obj, type) {
        if (!(obj instanceof type.proto))
          throw new Error("Type mismatch");
        if (obj.__nbindFlags & 1) {
          throw new Error("Passing a const value as a non-const argument");
        }
        return obj.__nbindShared;
      }
      var SharedClassPtr = function(_super) {
        __extends(SharedClassPtr, _super);
        function SharedClassPtr(spec) {
          var _this = _super.call(this, spec) || this;
          _this.readResources = [_nbind.resources.pool];
          _this.classType = spec.paramList[0].classType;
          _this.proto = _this.classType.proto;
          var isConst = spec.flags & 1;
          var push = isConst ? pushShared : pushMutableShared;
          _this.wireRead = function(arg) {
            return popShared(arg, _this);
          };
          _this.wireWrite = function(arg) {
            return push(arg, _this);
          };
          return _this;
        }
        return SharedClassPtr;
      }(_nbind.BindType);
      _nbind.SharedClassPtr = SharedClassPtr;
      _nbind.externalList = [0];
      var firstFreeExternal = 0;
      var External = function() {
        function External(data) {
          this.refCount = 1;
          this.data = data;
        }
        External.prototype.register = function() {
          var num = firstFreeExternal;
          if (num) {
            firstFreeExternal = _nbind.externalList[num];
          } else
            num = _nbind.externalList.length;
          _nbind.externalList[num] = this;
          return num;
        };
        External.prototype.reference = function() {
          ++this.refCount;
        };
        External.prototype.dereference = function(num) {
          if (--this.refCount == 0) {
            if (this.free)
              this.free();
            _nbind.externalList[num] = firstFreeExternal;
            firstFreeExternal = num;
          }
        };
        return External;
      }();
      _nbind.External = External;
      function popExternal(num) {
        var obj = _nbind.externalList[num];
        obj.dereference(num);
        return obj.data;
      }
      function pushExternal(obj) {
        var external = new External(obj);
        external.reference();
        return external.register();
      }
      var ExternalType = function(_super) {
        __extends(ExternalType, _super);
        function ExternalType() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.wireRead = popExternal;
          _this.wireWrite = pushExternal;
          return _this;
        }
        return ExternalType;
      }(_nbind.BindType);
      _nbind.ExternalType = ExternalType;
      _nbind.callbackSignatureList = [];
      var CallbackType = function(_super) {
        __extends(CallbackType, _super);
        function CallbackType() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.wireWrite = function(func) {
            if (typeof func != "function")
              _nbind.throwError("Type mismatch");
            return new _nbind.External(func).register();
          };
          return _this;
        }
        return CallbackType;
      }(_nbind.BindType);
      _nbind.CallbackType = CallbackType;
      _nbind.valueList = [0];
      var firstFreeValue = 0;
      function pushValue(value) {
        var num = firstFreeValue;
        if (num) {
          firstFreeValue = _nbind.valueList[num];
        } else
          num = _nbind.valueList.length;
        _nbind.valueList[num] = value;
        return num * 2 + 1;
      }
      _nbind.pushValue = pushValue;
      function popValue(num, type) {
        if (!num)
          _nbind.throwError("Value type JavaScript class is missing or not registered");
        if (num & 1) {
          num >>= 1;
          var obj = _nbind.valueList[num];
          _nbind.valueList[num] = firstFreeValue;
          firstFreeValue = num;
          return obj;
        } else if (type) {
          return _nbind.popShared(num, type);
        } else
          throw new Error("Invalid value slot " + num);
      }
      _nbind.popValue = popValue;
      var valueBase = 18446744073709552e3;
      function push64(num) {
        if (typeof num == "number")
          return num;
        return pushValue(num) * 4096 + valueBase;
      }
      function pop64(num) {
        if (num < valueBase)
          return num;
        return popValue((num - valueBase) / 4096);
      }
      var CreateValueType = function(_super) {
        __extends(CreateValueType, _super);
        function CreateValueType() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        CreateValueType.prototype.makeWireWrite = function(expr) {
          return "(_nbind.pushValue(new " + expr + "))";
        };
        return CreateValueType;
      }(_nbind.BindType);
      _nbind.CreateValueType = CreateValueType;
      var Int64Type = function(_super) {
        __extends(Int64Type, _super);
        function Int64Type() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.wireWrite = push64;
          _this.wireRead = pop64;
          return _this;
        }
        return Int64Type;
      }(_nbind.BindType);
      _nbind.Int64Type = Int64Type;
      function pushArray(arr, type) {
        if (!arr)
          return 0;
        var length = arr.length;
        if ((type.size || type.size === 0) && length < type.size) {
          throw new Error("Type mismatch");
        }
        var ptrSize = type.memberType.ptrSize;
        var result = _nbind.Pool.lalloc(4 + length * ptrSize);
        HEAPU32[result / 4] = length;
        var heap = type.memberType.heap;
        var ptr = (result + 4) / ptrSize;
        var wireWrite = type.memberType.wireWrite;
        var num = 0;
        if (wireWrite) {
          while (num < length) {
            heap[ptr++] = wireWrite(arr[num++]);
          }
        } else {
          while (num < length) {
            heap[ptr++] = arr[num++];
          }
        }
        return result;
      }
      _nbind.pushArray = pushArray;
      function popArray(ptr, type) {
        if (ptr === 0)
          return null;
        var length = HEAPU32[ptr / 4];
        var arr = new Array(length);
        var heap = type.memberType.heap;
        ptr = (ptr + 4) / type.memberType.ptrSize;
        var wireRead = type.memberType.wireRead;
        var num = 0;
        if (wireRead) {
          while (num < length) {
            arr[num++] = wireRead(heap[ptr++]);
          }
        } else {
          while (num < length) {
            arr[num++] = heap[ptr++];
          }
        }
        return arr;
      }
      _nbind.popArray = popArray;
      var ArrayType = function(_super) {
        __extends(ArrayType, _super);
        function ArrayType(spec) {
          var _this = _super.call(this, spec) || this;
          _this.wireRead = function(arg) {
            return popArray(arg, _this);
          };
          _this.wireWrite = function(arg) {
            return pushArray(arg, _this);
          };
          _this.readResources = [_nbind.resources.pool];
          _this.writeResources = [_nbind.resources.pool];
          _this.memberType = spec.paramList[0];
          if (spec.paramList[1])
            _this.size = spec.paramList[1];
          return _this;
        }
        return ArrayType;
      }(_nbind.BindType);
      _nbind.ArrayType = ArrayType;
      function pushString(str, policyTbl) {
        if (str === null || str === void 0) {
          if (policyTbl && policyTbl["Nullable"]) {
            str = "";
          } else
            throw new Error("Type mismatch");
        }
        if (policyTbl && policyTbl["Strict"]) {
          if (typeof str != "string")
            throw new Error("Type mismatch");
        } else
          str = str.toString();
        var length = Module.lengthBytesUTF8(str);
        var result = _nbind.Pool.lalloc(4 + length + 1);
        HEAPU32[result / 4] = length;
        Module.stringToUTF8Array(str, HEAPU8, result + 4, length + 1);
        return result;
      }
      _nbind.pushString = pushString;
      function popString(ptr) {
        if (ptr === 0)
          return null;
        var length = HEAPU32[ptr / 4];
        return Module.Pointer_stringify(ptr + 4, length);
      }
      _nbind.popString = popString;
      var StringType = function(_super) {
        __extends(StringType, _super);
        function StringType() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.wireRead = popString;
          _this.wireWrite = pushString;
          _this.readResources = [_nbind.resources.pool];
          _this.writeResources = [_nbind.resources.pool];
          return _this;
        }
        StringType.prototype.makeWireWrite = function(expr, policyTbl) {
          return function(arg) {
            return pushString(arg, policyTbl);
          };
        };
        return StringType;
      }(_nbind.BindType);
      _nbind.StringType = StringType;
      function makeArgList(argCount) {
        return Array.apply(null, Array(argCount)).map(function(dummy, num) {
          return "a" + (num + 1);
        });
      }
      function anyNeedsWireWrite(typeList, policyTbl) {
        return typeList.reduce(function(result, type) {
          return result || type.needsWireWrite(policyTbl);
        }, false);
      }
      function anyNeedsWireRead(typeList, policyTbl) {
        return typeList.reduce(function(result, type) {
          return result || !!type.needsWireRead(policyTbl);
        }, false);
      }
      function makeWireRead(convertParamList, policyTbl, type, expr) {
        var paramNum = convertParamList.length;
        if (type.makeWireRead) {
          return type.makeWireRead(expr, convertParamList, paramNum);
        } else if (type.wireRead) {
          convertParamList[paramNum] = type.wireRead;
          return "(convertParamList[" + paramNum + "](" + expr + "))";
        } else
          return expr;
      }
      function makeWireWrite(convertParamList, policyTbl, type, expr) {
        var wireWrite;
        var paramNum = convertParamList.length;
        if (type.makeWireWrite) {
          wireWrite = type.makeWireWrite(expr, policyTbl, convertParamList, paramNum);
        } else
          wireWrite = type.wireWrite;
        if (wireWrite) {
          if (typeof wireWrite == "string") {
            return wireWrite;
          } else {
            convertParamList[paramNum] = wireWrite;
            return "(convertParamList[" + paramNum + "](" + expr + "))";
          }
        } else
          return expr;
      }
      function buildCallerFunction(dynCall, ptrType, ptr, num, policyTbl, needsWireWrite, prefix, returnType, argTypeList, mask, err) {
        var argList = makeArgList(argTypeList.length);
        var convertParamList = [];
        var callExpression = makeWireRead(convertParamList, policyTbl, returnType, "dynCall(" + [prefix].concat(argList.map(function(name, index) {
          return makeWireWrite(convertParamList, policyTbl, argTypeList[index], name);
        })).join(",") + ")");
        var resourceSet = _nbind.listResources([returnType], argTypeList);
        var sourceCode = "function(" + argList.join(",") + "){" + (mask ? "this.__nbindFlags&mask&&err();" : "") + resourceSet.makeOpen() + "var r=" + callExpression + ";" + resourceSet.makeClose() + "return r;}";
        return eval("(" + sourceCode + ")");
      }
      function buildJSCallerFunction(returnType, argTypeList) {
        var argList = makeArgList(argTypeList.length);
        var convertParamList = [];
        var callExpression = makeWireWrite(convertParamList, null, returnType, "_nbind.externalList[num].data(" + argList.map(function(name, index) {
          return makeWireRead(convertParamList, null, argTypeList[index], name);
        }).join(",") + ")");
        var resourceSet = _nbind.listResources(argTypeList, [returnType]);
        resourceSet.remove(_nbind.resources.pool);
        var sourceCode = "function(" + ["dummy", "num"].concat(argList).join(",") + "){" + resourceSet.makeOpen() + "var r=" + callExpression + ";" + resourceSet.makeClose() + "return r;}";
        return eval("(" + sourceCode + ")");
      }
      _nbind.buildJSCallerFunction = buildJSCallerFunction;
      function makeJSCaller(idList) {
        var argCount = idList.length - 1;
        var typeList = _nbind.getTypes(idList, "callback");
        var returnType = typeList[0];
        var argTypeList = typeList.slice(1);
        var needsWireRead = anyNeedsWireRead(argTypeList, null);
        var needsWireWrite = returnType.needsWireWrite(null);
        if (!needsWireWrite && !needsWireRead) {
          switch (argCount) {
            case 0:
              return function(dummy, num) {
                return _nbind.externalList[num].data();
              };
            case 1:
              return function(dummy, num, a1) {
                return _nbind.externalList[num].data(a1);
              };
            case 2:
              return function(dummy, num, a1, a2) {
                return _nbind.externalList[num].data(a1, a2);
              };
            case 3:
              return function(dummy, num, a1, a2, a3) {
                return _nbind.externalList[num].data(a1, a2, a3);
              };
            default:
              break;
          }
        }
        return buildJSCallerFunction(returnType, argTypeList);
      }
      _nbind.makeJSCaller = makeJSCaller;
      function makeMethodCaller(ptrType, spec) {
        var argCount = spec.typeList.length - 1;
        var typeIdList = spec.typeList.slice(0);
        typeIdList.splice(1, 0, "uint32_t", spec.boundID);
        var typeList = _nbind.getTypes(typeIdList, spec.title);
        var returnType = typeList[0];
        var argTypeList = typeList.slice(3);
        var needsWireRead = returnType.needsWireRead(spec.policyTbl);
        var needsWireWrite = anyNeedsWireWrite(argTypeList, spec.policyTbl);
        var ptr = spec.ptr;
        var num = spec.num;
        var dynCall = _nbind.getDynCall(typeList, spec.title);
        var mask = ~spec.flags & 1;
        function err() {
          throw new Error("Calling a non-const method on a const object");
        }
        if (!needsWireRead && !needsWireWrite) {
          switch (argCount) {
            case 0:
              return function() {
                return this.__nbindFlags & mask ? err() : dynCall(ptr, num, _nbind.pushPointer(this, ptrType));
              };
            case 1:
              return function(a1) {
                return this.__nbindFlags & mask ? err() : dynCall(ptr, num, _nbind.pushPointer(this, ptrType), a1);
              };
            case 2:
              return function(a1, a2) {
                return this.__nbindFlags & mask ? err() : dynCall(ptr, num, _nbind.pushPointer(this, ptrType), a1, a2);
              };
            case 3:
              return function(a1, a2, a3) {
                return this.__nbindFlags & mask ? err() : dynCall(ptr, num, _nbind.pushPointer(this, ptrType), a1, a2, a3);
              };
            default:
              break;
          }
        }
        return buildCallerFunction(dynCall, ptrType, ptr, num, spec.policyTbl, needsWireWrite, "ptr,num,pushPointer(this,ptrType)", returnType, argTypeList, mask, err);
      }
      _nbind.makeMethodCaller = makeMethodCaller;
      function makeCaller(spec) {
        var argCount = spec.typeList.length - 1;
        var typeList = _nbind.getTypes(spec.typeList, spec.title);
        var returnType = typeList[0];
        var argTypeList = typeList.slice(1);
        var needsWireRead = returnType.needsWireRead(spec.policyTbl);
        var needsWireWrite = anyNeedsWireWrite(argTypeList, spec.policyTbl);
        var direct = spec.direct;
        var ptr = spec.ptr;
        if (spec.direct && !needsWireRead && !needsWireWrite) {
          var dynCall_1 = _nbind.getDynCall(typeList, spec.title);
          switch (argCount) {
            case 0:
              return function() {
                return dynCall_1(direct);
              };
            case 1:
              return function(a1) {
                return dynCall_1(direct, a1);
              };
            case 2:
              return function(a1, a2) {
                return dynCall_1(direct, a1, a2);
              };
            case 3:
              return function(a1, a2, a3) {
                return dynCall_1(direct, a1, a2, a3);
              };
            default:
              break;
          }
          ptr = 0;
        }
        var prefix;
        if (ptr) {
          var typeIdList = spec.typeList.slice(0);
          typeIdList.splice(1, 0, "uint32_t");
          typeList = _nbind.getTypes(typeIdList, spec.title);
          prefix = "ptr,num";
        } else {
          ptr = direct;
          prefix = "ptr";
        }
        var dynCall = _nbind.getDynCall(typeList, spec.title);
        return buildCallerFunction(dynCall, null, ptr, spec.num, spec.policyTbl, needsWireWrite, prefix, returnType, argTypeList);
      }
      _nbind.makeCaller = makeCaller;
      function makeOverloader(func, arity) {
        var callerList = [];
        function call() {
          return callerList[arguments.length].apply(this, arguments);
        }
        call.addMethod = function(_func, _arity) {
          callerList[_arity] = _func;
        };
        call.addMethod(func, arity);
        return call;
      }
      _nbind.makeOverloader = makeOverloader;
      var Resource = function() {
        function Resource(open, close) {
          var _this = this;
          this.makeOpen = function() {
            return Object.keys(_this.openTbl).join("");
          };
          this.makeClose = function() {
            return Object.keys(_this.closeTbl).join("");
          };
          this.openTbl = {};
          this.closeTbl = {};
          if (open)
            this.openTbl[open] = true;
          if (close)
            this.closeTbl[close] = true;
        }
        Resource.prototype.add = function(other) {
          for (var _i = 0, _a2 = Object.keys(other.openTbl); _i < _a2.length; _i++) {
            var key = _a2[_i];
            this.openTbl[key] = true;
          }
          for (var _b = 0, _c = Object.keys(other.closeTbl); _b < _c.length; _b++) {
            var key = _c[_b];
            this.closeTbl[key] = true;
          }
        };
        Resource.prototype.remove = function(other) {
          for (var _i = 0, _a2 = Object.keys(other.openTbl); _i < _a2.length; _i++) {
            var key = _a2[_i];
            delete this.openTbl[key];
          }
          for (var _b = 0, _c = Object.keys(other.closeTbl); _b < _c.length; _b++) {
            var key = _c[_b];
            delete this.closeTbl[key];
          }
        };
        return Resource;
      }();
      _nbind.Resource = Resource;
      function listResources(readList, writeList) {
        var result = new Resource();
        for (var _i = 0, readList_1 = readList; _i < readList_1.length; _i++) {
          var bindType = readList_1[_i];
          for (var _a2 = 0, _b = bindType.readResources || []; _a2 < _b.length; _a2++) {
            var resource = _b[_a2];
            result.add(resource);
          }
        }
        for (var _c = 0, writeList_1 = writeList; _c < writeList_1.length; _c++) {
          var bindType = writeList_1[_c];
          for (var _d = 0, _e = bindType.writeResources || []; _d < _e.length; _d++) {
            var resource = _e[_d];
            result.add(resource);
          }
        }
        return result;
      }
      _nbind.listResources = listResources;
      _nbind.resources = {pool: new Resource("var used=HEAPU32[_nbind.Pool.usedPtr],page=HEAPU32[_nbind.Pool.pagePtr];", "_nbind.Pool.lreset(used,page);")};
      var ExternalBuffer = function(_super) {
        __extends(ExternalBuffer, _super);
        function ExternalBuffer(buf, ptr) {
          var _this = _super.call(this, buf) || this;
          _this.ptr = ptr;
          return _this;
        }
        ExternalBuffer.prototype.free = function() {
          _free(this.ptr);
        };
        return ExternalBuffer;
      }(_nbind.External);
      function getBuffer(buf) {
        if (buf instanceof ArrayBuffer) {
          return new Uint8Array(buf);
        } else if (buf instanceof DataView) {
          return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
        } else
          return buf;
      }
      function pushBuffer(buf, policyTbl) {
        if (buf === null || buf === void 0) {
          if (policyTbl && policyTbl["Nullable"])
            buf = [];
        }
        if (typeof buf != "object")
          throw new Error("Type mismatch");
        var b = buf;
        var length = b.byteLength || b.length;
        if (!length && length !== 0 && b.byteLength !== 0)
          throw new Error("Type mismatch");
        var result = _nbind.Pool.lalloc(8);
        var data = _malloc(length);
        var ptr = result / 4;
        HEAPU32[ptr++] = length;
        HEAPU32[ptr++] = data;
        HEAPU32[ptr++] = new ExternalBuffer(buf, data).register();
        HEAPU8.set(getBuffer(buf), data);
        return result;
      }
      var BufferType = function(_super) {
        __extends(BufferType, _super);
        function BufferType() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.wireWrite = pushBuffer;
          _this.readResources = [_nbind.resources.pool];
          _this.writeResources = [_nbind.resources.pool];
          return _this;
        }
        BufferType.prototype.makeWireWrite = function(expr, policyTbl) {
          return function(arg) {
            return pushBuffer(arg, policyTbl);
          };
        };
        return BufferType;
      }(_nbind.BindType);
      _nbind.BufferType = BufferType;
      function commitBuffer(num, data, length) {
        var buf = _nbind.externalList[num].data;
        var NodeBuffer = Buffer;
        if (typeof Buffer != "function")
          NodeBuffer = function() {
          };
        if (buf instanceof Array) {
        } else {
          var src = HEAPU8.subarray(data, data + length);
          if (buf instanceof NodeBuffer) {
            var srcBuf = void 0;
            if (typeof Buffer.from == "function" && Buffer.from.length >= 3) {
              srcBuf = Buffer.from(src);
            } else
              srcBuf = new Buffer(src);
            srcBuf.copy(buf);
          } else
            getBuffer(buf).set(src);
        }
      }
      _nbind.commitBuffer = commitBuffer;
      var dirtyList = [];
      var gcTimer = 0;
      function sweep() {
        for (var _i = 0, dirtyList_1 = dirtyList; _i < dirtyList_1.length; _i++) {
          var obj = dirtyList_1[_i];
          if (!(obj.__nbindState & (1 | 2))) {
            obj.free();
          }
        }
        dirtyList = [];
        gcTimer = 0;
      }
      _nbind.mark = function(obj) {
      };
      function toggleLightGC(enable) {
        if (enable) {
          _nbind.mark = function(obj) {
            dirtyList.push(obj);
            if (!gcTimer)
              gcTimer = setTimeout(sweep, 0);
          };
        } else {
          _nbind.mark = function(obj) {
          };
        }
      }
      _nbind.toggleLightGC = toggleLightGC;
    })(_nbind);
    Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
      Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead.");
      Module["requestFullScreen"] = Module["requestFullscreen"];
      Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice);
    };
    Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) {
      Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
    };
    Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
      Browser.requestAnimationFrame(func);
    };
    Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
      Browser.setCanvasSize(width, height, noUpdates);
    };
    Module["pauseMainLoop"] = function Module_pauseMainLoop() {
      Browser.mainLoop.pause();
    };
    Module["resumeMainLoop"] = function Module_resumeMainLoop() {
      Browser.mainLoop.resume();
    };
    Module["getUserMedia"] = function Module_getUserMedia() {
      Browser.getUserMedia();
    };
    Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
      return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
    };
    if (ENVIRONMENT_IS_NODE) {
      _emscripten_get_now = function _emscripten_get_now_actual() {
        var t = process["hrtime"]();
        return t[0] * 1e3 + t[1] / 1e6;
      };
    } else if (typeof dateNow !== "undefined") {
      _emscripten_get_now = dateNow;
    } else if (typeof self === "object" && self["performance"] && typeof self["performance"]["now"] === "function") {
      _emscripten_get_now = function() {
        return self["performance"]["now"]();
      };
    } else if (typeof performance === "object" && typeof performance["now"] === "function") {
      _emscripten_get_now = function() {
        return performance["now"]();
      };
    } else {
      _emscripten_get_now = Date.now;
    }
    __ATEXIT__.push(function() {
      var fflush = Module["_fflush"];
      if (fflush)
        fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar)
        return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length)
        printChar(1, 10);
      if (buffers[2].length)
        printChar(2, 10);
    });
    DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);
    STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
    STACK_MAX = STACK_BASE + TOTAL_STACK;
    DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);
    HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
    staticSealed = true;
    function invoke_viiiii(index, a1, a2, a3, a4, a5) {
      try {
        Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_vif(index, a1, a2) {
      try {
        Module["dynCall_vif"](index, a1, a2);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_vid(index, a1, a2) {
      try {
        Module["dynCall_vid"](index, a1, a2);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_fiff(index, a1, a2, a3) {
      try {
        return Module["dynCall_fiff"](index, a1, a2, a3);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_vi(index, a1) {
      try {
        Module["dynCall_vi"](index, a1);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_vii(index, a1, a2) {
      try {
        Module["dynCall_vii"](index, a1, a2);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_ii(index, a1) {
      try {
        return Module["dynCall_ii"](index, a1);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_viddi(index, a1, a2, a3, a4) {
      try {
        Module["dynCall_viddi"](index, a1, a2, a3, a4);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_vidd(index, a1, a2, a3) {
      try {
        Module["dynCall_vidd"](index, a1, a2, a3);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_iiii(index, a1, a2, a3) {
      try {
        return Module["dynCall_iiii"](index, a1, a2, a3);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_diii(index, a1, a2, a3) {
      try {
        return Module["dynCall_diii"](index, a1, a2, a3);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_di(index, a1) {
      try {
        return Module["dynCall_di"](index, a1);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_iid(index, a1, a2) {
      try {
        return Module["dynCall_iid"](index, a1, a2);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_iii(index, a1, a2) {
      try {
        return Module["dynCall_iii"](index, a1, a2);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_viiddi(index, a1, a2, a3, a4, a5) {
      try {
        Module["dynCall_viiddi"](index, a1, a2, a3, a4, a5);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
      try {
        Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_dii(index, a1, a2) {
      try {
        return Module["dynCall_dii"](index, a1, a2);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_i(index) {
      try {
        return Module["dynCall_i"](index);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
      try {
        return Module["dynCall_iiiiii"](index, a1, a2, a3, a4, a5);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_viiid(index, a1, a2, a3, a4) {
      try {
        Module["dynCall_viiid"](index, a1, a2, a3, a4);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_viififi(index, a1, a2, a3, a4, a5, a6) {
      try {
        Module["dynCall_viififi"](index, a1, a2, a3, a4, a5, a6);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_viii(index, a1, a2, a3) {
      try {
        Module["dynCall_viii"](index, a1, a2, a3);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_v(index) {
      try {
        Module["dynCall_v"](index);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_viid(index, a1, a2, a3) {
      try {
        Module["dynCall_viid"](index, a1, a2, a3);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_idd(index, a1, a2) {
      try {
        return Module["dynCall_idd"](index, a1, a2);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    function invoke_viiii(index, a1, a2, a3, a4) {
      try {
        Module["dynCall_viiii"](index, a1, a2, a3, a4);
      } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
          throw e;
        Module["setThrew"](1, 0);
      }
    }
    Module.asmGlobalArg = {Math, Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, Float32Array, Float64Array, NaN: NaN, Infinity: Infinity};
    Module.asmLibraryArg = {abort, assert, enlargeMemory, getTotalMemory, abortOnCannotGrowMemory, invoke_viiiii, invoke_vif, invoke_vid, invoke_fiff, invoke_vi, invoke_vii, invoke_ii, invoke_viddi, invoke_vidd, invoke_iiii, invoke_diii, invoke_di, invoke_iid, invoke_iii, invoke_viiddi, invoke_viiiiii, invoke_dii, invoke_i, invoke_iiiiii, invoke_viiid, invoke_viififi, invoke_viii, invoke_v, invoke_viid, invoke_idd, invoke_viiii, _emscripten_asm_const_iiiii, _emscripten_asm_const_iiidddddd, _emscripten_asm_const_iiiid, __nbind_reference_external, _emscripten_asm_const_iiiiiiii, _removeAccessorPrefix, _typeModule, __nbind_register_pool, __decorate, _llvm_stackrestore, ___cxa_atexit, __extends, __nbind_get_value_object, __ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj, _emscripten_set_main_loop_timing, __nbind_register_primitive, __nbind_register_type, _emscripten_memcpy_big, __nbind_register_function, ___setErrNo, __nbind_register_class, __nbind_finish, _abort, _nbind_value, _llvm_stacksave, ___syscall54, _defineHidden, _emscripten_set_main_loop, _emscripten_get_now, __nbind_register_callback_signature, _emscripten_asm_const_iiiiii, __nbind_free_external, _emscripten_asm_const_iiii, _emscripten_asm_const_iiididi, ___syscall6, _atexit, ___syscall140, ___syscall146, DYNAMICTOP_PTR, tempDoublePtr, ABORT, STACKTOP, STACK_MAX, cttz_i8, ___dso_handle};
    var asm = function(global2, env, buffer) {
      "use asm";
      var a = new global2.Int8Array(buffer);
      var b = new global2.Int16Array(buffer);
      var c = new global2.Int32Array(buffer);
      var d = new global2.Uint8Array(buffer);
      var e = new global2.Uint16Array(buffer);
      var f = new global2.Uint32Array(buffer);
      var g = new global2.Float32Array(buffer);
      var h = new global2.Float64Array(buffer);
      var i = env.DYNAMICTOP_PTR | 0;
      var j = env.tempDoublePtr | 0;
      var k = env.ABORT | 0;
      var l = env.STACKTOP | 0;
      var m = env.STACK_MAX | 0;
      var n = env.cttz_i8 | 0;
      var o = env.___dso_handle | 0;
      var p = 0;
      var q = 0;
      var r = 0;
      var s = 0;
      var t = global2.NaN, u = global2.Infinity;
      var v = 0, w = 0, x = 0, y = 0, z = 0;
      var A = 0;
      var B = global2.Math.floor;
      var C = global2.Math.abs;
      var D = global2.Math.sqrt;
      var E = global2.Math.pow;
      var F = global2.Math.cos;
      var G = global2.Math.sin;
      var H = global2.Math.tan;
      var I = global2.Math.acos;
      var J = global2.Math.asin;
      var K = global2.Math.atan;
      var L = global2.Math.atan2;
      var M = global2.Math.exp;
      var N = global2.Math.log;
      var O = global2.Math.ceil;
      var P = global2.Math.imul;
      var Q = global2.Math.min;
      var R = global2.Math.max;
      var S = global2.Math.clz32;
      var T = global2.Math.fround;
      var U = env.abort;
      var V = env.assert;
      var W = env.enlargeMemory;
      var X = env.getTotalMemory;
      var Y = env.abortOnCannotGrowMemory;
      var Z = env.invoke_viiiii;
      var _ = env.invoke_vif;
      var $ = env.invoke_vid;
      var aa = env.invoke_fiff;
      var ba = env.invoke_vi;
      var ca = env.invoke_vii;
      var da = env.invoke_ii;
      var ea = env.invoke_viddi;
      var fa = env.invoke_vidd;
      var ga = env.invoke_iiii;
      var ha = env.invoke_diii;
      var ia = env.invoke_di;
      var ja = env.invoke_iid;
      var ka = env.invoke_iii;
      var la = env.invoke_viiddi;
      var ma = env.invoke_viiiiii;
      var na = env.invoke_dii;
      var oa = env.invoke_i;
      var pa = env.invoke_iiiiii;
      var qa = env.invoke_viiid;
      var ra = env.invoke_viififi;
      var sa = env.invoke_viii;
      var ta = env.invoke_v;
      var ua = env.invoke_viid;
      var va = env.invoke_idd;
      var wa = env.invoke_viiii;
      var xa = env._emscripten_asm_const_iiiii;
      var ya = env._emscripten_asm_const_iiidddddd;
      var za = env._emscripten_asm_const_iiiid;
      var Aa = env.__nbind_reference_external;
      var Ba = env._emscripten_asm_const_iiiiiiii;
      var Ca = env._removeAccessorPrefix;
      var Da = env._typeModule;
      var Ea = env.__nbind_register_pool;
      var Fa = env.__decorate;
      var Ga = env._llvm_stackrestore;
      var Ha = env.___cxa_atexit;
      var Ia = env.__extends;
      var Ja = env.__nbind_get_value_object;
      var Ka = env.__ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj;
      var La = env._emscripten_set_main_loop_timing;
      var Ma = env.__nbind_register_primitive;
      var Na = env.__nbind_register_type;
      var Oa = env._emscripten_memcpy_big;
      var Pa = env.__nbind_register_function;
      var Qa = env.___setErrNo;
      var Ra = env.__nbind_register_class;
      var Sa = env.__nbind_finish;
      var Ta = env._abort;
      var Ua = env._nbind_value;
      var Va = env._llvm_stacksave;
      var Wa = env.___syscall54;
      var Xa = env._defineHidden;
      var Ya = env._emscripten_set_main_loop;
      var Za = env._emscripten_get_now;
      var _a2 = env.__nbind_register_callback_signature;
      var $a = env._emscripten_asm_const_iiiiii;
      var ab = env.__nbind_free_external;
      var bb = env._emscripten_asm_const_iiii;
      var cb = env._emscripten_asm_const_iiididi;
      var db = env.___syscall6;
      var eb = env._atexit;
      var fb = env.___syscall140;
      var gb = env.___syscall146;
      var hb = T(0);
      const ib = T(0);
      function Jb(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = l;
        l = l + a2 | 0;
        l = l + 15 & -16;
        return b2 | 0;
      }
      function Kb() {
        return l | 0;
      }
      function Lb(a2) {
        a2 = a2 | 0;
        l = a2;
      }
      function Mb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        l = a2;
        m = b2;
      }
      function Nb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (!p) {
          p = a2;
          q = b2;
        }
      }
      function Ob(a2) {
        a2 = a2 | 0;
        A = a2;
      }
      function Pb() {
        return A | 0;
      }
      function Qb() {
        var b2 = 0, d2 = 0;
        BC(8104, 8, 400) | 0;
        BC(8504, 408, 540) | 0;
        b2 = 9044;
        d2 = b2 + 44 | 0;
        do {
          c[b2 >> 2] = 0;
          b2 = b2 + 4 | 0;
        } while ((b2 | 0) < (d2 | 0));
        a[9088] = 0;
        a[9089] = 1;
        c[2273] = 0;
        c[2274] = 948;
        c[2275] = 948;
        Ha(17, 8104, o | 0) | 0;
        return;
      }
      function Rb(a2) {
        a2 = a2 | 0;
        oc(a2 + 948 | 0);
        return;
      }
      function Sb(a2) {
        a2 = T(a2);
        return ((af(a2) | 0) & 2147483647) >>> 0 > 2139095040 | 0;
      }
      function Tb(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        a:
          do
            if (!(c[a2 + (b2 << 3) + 4 >> 2] | 0)) {
              if ((b2 | 2 | 0) == 3 ? c[a2 + 60 >> 2] | 0 : 0) {
                a2 = a2 + 56 | 0;
                break;
              }
              switch (b2 | 0) {
                case 0:
                case 2:
                case 4:
                case 5: {
                  if (c[a2 + 52 >> 2] | 0) {
                    a2 = a2 + 48 | 0;
                    break a;
                  }
                  break;
                }
                default: {
                }
              }
              if (!(c[a2 + 68 >> 2] | 0)) {
                a2 = (b2 | 1 | 0) == 5 ? 948 : d2;
                break;
              } else {
                a2 = a2 + 64 | 0;
                break;
              }
            } else
              a2 = a2 + (b2 << 3) | 0;
          while (0);
        return a2 | 0;
      }
      function Ub(b2) {
        b2 = b2 | 0;
        var d2 = 0;
        d2 = oB(1e3) | 0;
        Vb(b2, (d2 | 0) != 0, 2456);
        c[2276] = (c[2276] | 0) + 1;
        BC(d2 | 0, 8104, 1e3) | 0;
        if (a[b2 + 2 >> 0] | 0) {
          c[d2 + 4 >> 2] = 2;
          c[d2 + 12 >> 2] = 4;
        }
        c[d2 + 976 >> 2] = b2;
        return d2 | 0;
      }
      function Vb(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0;
        f2 = l;
        l = l + 16 | 0;
        e2 = f2;
        if (!b2) {
          c[e2 >> 2] = d2;
          fe(a2, 5, 3197, e2);
        }
        l = f2;
        return;
      }
      function Wb() {
        return Ub(956) | 0;
      }
      function Xb(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = qC(1e3) | 0;
        Yb(b2, a2);
        Vb(c[a2 + 976 >> 2] | 0, 1, 2456);
        c[2276] = (c[2276] | 0) + 1;
        c[b2 + 944 >> 2] = 0;
        return b2 | 0;
      }
      function Yb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        BC(a2 | 0, b2 | 0, 948) | 0;
        ie(a2 + 948 | 0, b2 + 948 | 0);
        d2 = a2 + 960 | 0;
        a2 = b2 + 960 | 0;
        b2 = d2 + 40 | 0;
        do {
          c[d2 >> 2] = c[a2 >> 2];
          d2 = d2 + 4 | 0;
          a2 = a2 + 4 | 0;
        } while ((d2 | 0) < (b2 | 0));
        return;
      }
      function Zb(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0;
        b2 = a2 + 944 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 | 0) {
          _b(d2 + 948 | 0, a2) | 0;
          c[b2 >> 2] = 0;
        }
        d2 = $b(a2) | 0;
        if (d2 | 0) {
          b2 = 0;
          do {
            c[(ac(a2, b2) | 0) + 944 >> 2] = 0;
            b2 = b2 + 1 | 0;
          } while ((b2 | 0) != (d2 | 0));
        }
        d2 = a2 + 948 | 0;
        e2 = c[d2 >> 2] | 0;
        f2 = a2 + 952 | 0;
        b2 = c[f2 >> 2] | 0;
        if ((b2 | 0) != (e2 | 0))
          c[f2 >> 2] = b2 + (~((b2 + -4 - e2 | 0) >>> 2) << 2);
        bc(d2);
        pB(a2);
        c[2276] = (c[2276] | 0) + -1;
        return;
      }
      function _b(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = c[a2 >> 2] | 0;
        i2 = a2 + 4 | 0;
        d2 = c[i2 >> 2] | 0;
        g2 = d2;
        a:
          do
            if ((e2 | 0) == (d2 | 0)) {
              f2 = e2;
              h2 = 4;
            } else {
              a2 = e2;
              while (1) {
                if ((c[a2 >> 2] | 0) == (b2 | 0)) {
                  f2 = a2;
                  h2 = 4;
                  break a;
                }
                a2 = a2 + 4 | 0;
                if ((a2 | 0) == (d2 | 0)) {
                  a2 = 0;
                  break;
                }
              }
            }
          while (0);
        if ((h2 | 0) == 4)
          if ((f2 | 0) != (d2 | 0)) {
            e2 = f2 + 4 | 0;
            a2 = g2 - e2 | 0;
            b2 = a2 >> 2;
            if (b2) {
              GC(f2 | 0, e2 | 0, a2 | 0) | 0;
              d2 = c[i2 >> 2] | 0;
            }
            a2 = f2 + (b2 << 2) | 0;
            if ((d2 | 0) == (a2 | 0))
              a2 = 1;
            else {
              c[i2 >> 2] = d2 + (~((d2 + -4 - a2 | 0) >>> 2) << 2);
              a2 = 1;
            }
          } else
            a2 = 0;
        return a2 | 0;
      }
      function $b(a2) {
        a2 = a2 | 0;
        return (c[a2 + 952 >> 2] | 0) - (c[a2 + 948 >> 2] | 0) >> 2 | 0;
      }
      function ac(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = c[a2 + 948 >> 2] | 0;
        if ((c[a2 + 952 >> 2] | 0) - d2 >> 2 >>> 0 > b2 >>> 0)
          a2 = c[d2 + (b2 << 2) >> 2] | 0;
        else
          a2 = 0;
        return a2 | 0;
      }
      function bc(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0;
        e2 = l;
        l = l + 32 | 0;
        b2 = e2;
        f2 = c[a2 >> 2] | 0;
        d2 = (c[a2 + 4 >> 2] | 0) - f2 | 0;
        if (((c[a2 + 8 >> 2] | 0) - f2 | 0) >>> 0 > d2 >>> 0) {
          f2 = d2 >> 2;
          bf(b2, f2, f2, a2 + 8 | 0);
          cf(a2, b2);
          df(b2);
        }
        l = e2;
        return;
      }
      function cc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        k2 = $b(a2) | 0;
        do
          if (k2 | 0) {
            if ((c[(ac(a2, 0) | 0) + 944 >> 2] | 0) == (a2 | 0)) {
              if (!(_b(a2 + 948 | 0, b2) | 0))
                break;
              BC(b2 + 400 | 0, 8504, 540) | 0;
              c[b2 + 944 >> 2] = 0;
              nc(a2);
              break;
            }
            h2 = c[(c[a2 + 976 >> 2] | 0) + 12 >> 2] | 0;
            i2 = a2 + 948 | 0;
            j2 = (h2 | 0) == 0;
            d2 = 0;
            g2 = 0;
            do {
              e2 = c[(c[i2 >> 2] | 0) + (g2 << 2) >> 2] | 0;
              if ((e2 | 0) == (b2 | 0))
                nc(a2);
              else {
                f2 = Xb(e2) | 0;
                c[(c[i2 >> 2] | 0) + (d2 << 2) >> 2] = f2;
                c[f2 + 944 >> 2] = a2;
                if (!j2)
                  Ib[h2 & 15](e2, f2, a2, d2);
                d2 = d2 + 1 | 0;
              }
              g2 = g2 + 1 | 0;
            } while ((g2 | 0) != (k2 | 0));
            if (d2 >>> 0 < k2 >>> 0) {
              j2 = a2 + 948 | 0;
              i2 = a2 + 952 | 0;
              h2 = d2;
              d2 = c[i2 >> 2] | 0;
              do {
                g2 = (c[j2 >> 2] | 0) + (h2 << 2) | 0;
                e2 = g2 + 4 | 0;
                f2 = d2 - e2 | 0;
                b2 = f2 >> 2;
                if (!b2)
                  f2 = d2;
                else {
                  GC(g2 | 0, e2 | 0, f2 | 0) | 0;
                  d2 = c[i2 >> 2] | 0;
                  f2 = d2;
                }
                e2 = g2 + (b2 << 2) | 0;
                if ((f2 | 0) != (e2 | 0)) {
                  d2 = f2 + (~((f2 + -4 - e2 | 0) >>> 2) << 2) | 0;
                  c[i2 >> 2] = d2;
                }
                h2 = h2 + 1 | 0;
              } while ((h2 | 0) != (k2 | 0));
            }
          }
        while (0);
        return;
      }
      function dc(b2) {
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
        ec(b2, ($b(b2) | 0) == 0, 2491);
        ec(b2, (c[b2 + 944 >> 2] | 0) == 0, 2545);
        d2 = b2 + 948 | 0;
        e2 = c[d2 >> 2] | 0;
        f2 = b2 + 952 | 0;
        g2 = c[f2 >> 2] | 0;
        if ((g2 | 0) != (e2 | 0))
          c[f2 >> 2] = g2 + (~((g2 + -4 - e2 | 0) >>> 2) << 2);
        bc(d2);
        d2 = b2 + 976 | 0;
        e2 = c[d2 >> 2] | 0;
        BC(b2 | 0, 8104, 1e3) | 0;
        if (a[e2 + 2 >> 0] | 0) {
          c[b2 + 4 >> 2] = 2;
          c[b2 + 12 >> 2] = 4;
        }
        c[d2 >> 2] = e2;
        return;
      }
      function ec(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0;
        f2 = l;
        l = l + 16 | 0;
        e2 = f2;
        if (!b2) {
          c[e2 >> 2] = d2;
          Vd(a2, 5, 3197, e2);
        }
        l = f2;
        return;
      }
      function fc() {
        return c[2276] | 0;
      }
      function gc() {
        var a2 = 0;
        a2 = oB(20) | 0;
        hc((a2 | 0) != 0, 2592);
        c[2277] = (c[2277] | 0) + 1;
        c[a2 >> 2] = c[239];
        c[a2 + 4 >> 2] = c[240];
        c[a2 + 8 >> 2] = c[241];
        c[a2 + 12 >> 2] = c[242];
        c[a2 + 16 >> 2] = c[243];
        return a2 | 0;
      }
      function hc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        e2 = l;
        l = l + 16 | 0;
        d2 = e2;
        if (!a2) {
          c[d2 >> 2] = b2;
          Vd(0, 5, 3197, d2);
        }
        l = e2;
        return;
      }
      function ic(a2) {
        a2 = a2 | 0;
        pB(a2);
        c[2277] = (c[2277] | 0) + -1;
        return;
      }
      function jc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        if (!b2) {
          d2 = 0;
          b2 = 0;
        } else {
          ec(a2, ($b(a2) | 0) == 0, 2629);
          d2 = 1;
        }
        c[a2 + 964 >> 2] = b2;
        c[a2 + 988 >> 2] = d2;
        return;
      }
      function kc(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        g2 = e2 + 8 | 0;
        f2 = e2 + 4 | 0;
        h2 = e2;
        c[f2 >> 2] = b2;
        ec(a2, (c[b2 + 944 >> 2] | 0) == 0, 2709);
        ec(a2, (c[a2 + 964 >> 2] | 0) == 0, 2763);
        lc(a2);
        b2 = a2 + 948 | 0;
        c[h2 >> 2] = (c[b2 >> 2] | 0) + (d2 << 2);
        c[g2 >> 2] = c[h2 >> 2];
        mc(b2, g2, f2) | 0;
        c[(c[f2 >> 2] | 0) + 944 >> 2] = a2;
        nc(a2);
        l = e2;
        return;
      }
      function lc(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        d2 = $b(a2) | 0;
        if (d2 | 0 ? (c[(ac(a2, 0) | 0) + 944 >> 2] | 0) != (a2 | 0) : 0) {
          e2 = c[(c[a2 + 976 >> 2] | 0) + 12 >> 2] | 0;
          f2 = a2 + 948 | 0;
          g2 = (e2 | 0) == 0;
          b2 = 0;
          do {
            h2 = c[(c[f2 >> 2] | 0) + (b2 << 2) >> 2] | 0;
            i2 = Xb(h2) | 0;
            c[(c[f2 >> 2] | 0) + (b2 << 2) >> 2] = i2;
            c[i2 + 944 >> 2] = a2;
            if (!g2)
              Ib[e2 & 15](h2, i2, a2, b2);
            b2 = b2 + 1 | 0;
          } while ((b2 | 0) != (d2 | 0));
        }
        return;
      }
      function mc(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0;
        s2 = l;
        l = l + 64 | 0;
        n2 = s2 + 52 | 0;
        i2 = s2 + 48 | 0;
        o2 = s2 + 28 | 0;
        p2 = s2 + 24 | 0;
        q2 = s2 + 20 | 0;
        r2 = s2;
        e2 = c[a2 >> 2] | 0;
        g2 = e2;
        b2 = e2 + ((c[b2 >> 2] | 0) - g2 >> 2 << 2) | 0;
        e2 = a2 + 4 | 0;
        f2 = c[e2 >> 2] | 0;
        h2 = a2 + 8 | 0;
        do
          if (f2 >>> 0 < (c[h2 >> 2] | 0) >>> 0) {
            if ((b2 | 0) == (f2 | 0)) {
              c[b2 >> 2] = c[d2 >> 2];
              c[e2 >> 2] = (c[e2 >> 2] | 0) + 4;
              break;
            }
            ef(a2, b2, f2, b2 + 4 | 0);
            if (b2 >>> 0 <= d2 >>> 0)
              d2 = (c[e2 >> 2] | 0) >>> 0 > d2 >>> 0 ? d2 + 4 | 0 : d2;
            c[b2 >> 2] = c[d2 >> 2];
          } else {
            e2 = (f2 - g2 >> 2) + 1 | 0;
            f2 = le(a2) | 0;
            if (f2 >>> 0 < e2 >>> 0)
              jC(a2);
            m2 = c[a2 >> 2] | 0;
            k2 = (c[h2 >> 2] | 0) - m2 | 0;
            g2 = k2 >> 1;
            bf(r2, k2 >> 2 >>> 0 < f2 >>> 1 >>> 0 ? g2 >>> 0 < e2 >>> 0 ? e2 : g2 : f2, b2 - m2 >> 2, a2 + 8 | 0);
            m2 = r2 + 8 | 0;
            e2 = c[m2 >> 2] | 0;
            g2 = r2 + 12 | 0;
            k2 = c[g2 >> 2] | 0;
            h2 = k2;
            j2 = e2;
            do
              if ((e2 | 0) == (k2 | 0)) {
                k2 = r2 + 4 | 0;
                e2 = c[k2 >> 2] | 0;
                t2 = c[r2 >> 2] | 0;
                f2 = t2;
                if (e2 >>> 0 <= t2 >>> 0) {
                  e2 = h2 - f2 >> 1;
                  e2 = (e2 | 0) == 0 ? 1 : e2;
                  bf(o2, e2, e2 >>> 2, c[r2 + 16 >> 2] | 0);
                  c[p2 >> 2] = c[k2 >> 2];
                  c[q2 >> 2] = c[m2 >> 2];
                  c[i2 >> 2] = c[p2 >> 2];
                  c[n2 >> 2] = c[q2 >> 2];
                  gf(o2, i2, n2);
                  e2 = c[r2 >> 2] | 0;
                  c[r2 >> 2] = c[o2 >> 2];
                  c[o2 >> 2] = e2;
                  e2 = o2 + 4 | 0;
                  t2 = c[k2 >> 2] | 0;
                  c[k2 >> 2] = c[e2 >> 2];
                  c[e2 >> 2] = t2;
                  e2 = o2 + 8 | 0;
                  t2 = c[m2 >> 2] | 0;
                  c[m2 >> 2] = c[e2 >> 2];
                  c[e2 >> 2] = t2;
                  e2 = o2 + 12 | 0;
                  t2 = c[g2 >> 2] | 0;
                  c[g2 >> 2] = c[e2 >> 2];
                  c[e2 >> 2] = t2;
                  df(o2);
                  e2 = c[m2 >> 2] | 0;
                  break;
                }
                g2 = e2;
                h2 = ((g2 - f2 >> 2) + 1 | 0) / -2 | 0;
                i2 = e2 + (h2 << 2) | 0;
                f2 = j2 - g2 | 0;
                g2 = f2 >> 2;
                if (g2) {
                  GC(i2 | 0, e2 | 0, f2 | 0) | 0;
                  e2 = c[k2 >> 2] | 0;
                }
                t2 = i2 + (g2 << 2) | 0;
                c[m2 >> 2] = t2;
                c[k2 >> 2] = e2 + (h2 << 2);
                e2 = t2;
              }
            while (0);
            c[e2 >> 2] = c[d2 >> 2];
            c[m2 >> 2] = (c[m2 >> 2] | 0) + 4;
            b2 = ff(a2, r2, b2) | 0;
            df(r2);
          }
        while (0);
        l = s2;
        return b2 | 0;
      }
      function nc(b2) {
        b2 = b2 | 0;
        var d2 = 0;
        do {
          d2 = b2 + 984 | 0;
          if (a[d2 >> 0] | 0)
            break;
          a[d2 >> 0] = 1;
          g[b2 + 504 >> 2] = T(t);
          b2 = c[b2 + 944 >> 2] | 0;
        } while ((b2 | 0) != 0);
        return;
      }
      function oc(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -4 - e2 | 0) >>> 2) << 2);
          sC(d2);
        }
        return;
      }
      function pc(a2) {
        a2 = a2 | 0;
        return c[a2 + 944 >> 2] | 0;
      }
      function qc(a2) {
        a2 = a2 | 0;
        ec(a2, (c[a2 + 964 >> 2] | 0) != 0, 2832);
        nc(a2);
        return;
      }
      function rc(b2) {
        b2 = b2 | 0;
        return (a[b2 + 984 >> 0] | 0) != 0 | 0;
      }
      function sc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (BB(a2, b2, 400) | 0) {
          BC(a2 | 0, b2 | 0, 400) | 0;
          nc(a2);
        }
        return;
      }
      function tc(a2) {
        a2 = a2 | 0;
        var b2 = ib;
        b2 = T(g[a2 + 44 >> 2]);
        a2 = Sb(b2) | 0;
        return T(a2 ? T(0) : b2);
      }
      function uc(b2) {
        b2 = b2 | 0;
        var d2 = ib;
        d2 = T(g[b2 + 48 >> 2]);
        if (Sb(d2) | 0)
          d2 = a[(c[b2 + 976 >> 2] | 0) + 2 >> 0] | 0 ? T(1) : T(0);
        return T(d2);
      }
      function vc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 + 980 >> 2] = b2;
        return;
      }
      function wc(a2) {
        a2 = a2 | 0;
        return c[a2 + 980 >> 2] | 0;
      }
      function xc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = a2 + 4 | 0;
        if ((c[d2 >> 2] | 0) != (b2 | 0)) {
          c[d2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function yc(a2) {
        a2 = a2 | 0;
        return c[a2 + 4 >> 2] | 0;
      }
      function zc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = a2 + 8 | 0;
        if ((c[d2 >> 2] | 0) != (b2 | 0)) {
          c[d2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Ac(a2) {
        a2 = a2 | 0;
        return c[a2 + 8 >> 2] | 0;
      }
      function Bc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = a2 + 12 | 0;
        if ((c[d2 >> 2] | 0) != (b2 | 0)) {
          c[d2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Cc(a2) {
        a2 = a2 | 0;
        return c[a2 + 12 >> 2] | 0;
      }
      function Dc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = a2 + 16 | 0;
        if ((c[d2 >> 2] | 0) != (b2 | 0)) {
          c[d2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Ec(a2) {
        a2 = a2 | 0;
        return c[a2 + 16 >> 2] | 0;
      }
      function Fc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = a2 + 20 | 0;
        if ((c[d2 >> 2] | 0) != (b2 | 0)) {
          c[d2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Gc(a2) {
        a2 = a2 | 0;
        return c[a2 + 20 >> 2] | 0;
      }
      function Hc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = a2 + 24 | 0;
        if ((c[d2 >> 2] | 0) != (b2 | 0)) {
          c[d2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Ic(a2) {
        a2 = a2 | 0;
        return c[a2 + 24 >> 2] | 0;
      }
      function Jc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = a2 + 28 | 0;
        if ((c[d2 >> 2] | 0) != (b2 | 0)) {
          c[d2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Kc(a2) {
        a2 = a2 | 0;
        return c[a2 + 28 >> 2] | 0;
      }
      function Lc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = a2 + 32 | 0;
        if ((c[d2 >> 2] | 0) != (b2 | 0)) {
          c[d2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Mc(a2) {
        a2 = a2 | 0;
        return c[a2 + 32 >> 2] | 0;
      }
      function Nc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = a2 + 36 | 0;
        if ((c[d2 >> 2] | 0) != (b2 | 0)) {
          c[d2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Oc(a2) {
        a2 = a2 | 0;
        return c[a2 + 36 >> 2] | 0;
      }
      function Pc(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var c2 = 0;
        c2 = a2 + 40 | 0;
        if (T(g[c2 >> 2]) != b2) {
          g[c2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Qc(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var c2 = 0;
        c2 = a2 + 44 | 0;
        if (T(g[c2 >> 2]) != b2) {
          g[c2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Rc(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var c2 = 0;
        c2 = a2 + 48 | 0;
        if (T(g[c2 >> 2]) != b2) {
          g[c2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Sc(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = (h2 ^ 1) & 1;
        e2 = a2 + 52 | 0;
        f2 = a2 + 56 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function Tc(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0;
        e2 = a2 + 52 | 0;
        d2 = a2 + 56 | 0;
        if (!(!(T(g[e2 >> 2]) != b2) ? (c[d2 >> 2] | 0) == 2 : 0)) {
          g[e2 >> 2] = b2;
          e2 = Sb(b2) | 0;
          c[d2 >> 2] = e2 ? 3 : 2;
          nc(a2);
        }
        return;
      }
      function Uc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        e2 = b2 + 52 | 0;
        d2 = c[e2 + 4 >> 2] | 0;
        b2 = a2;
        c[b2 >> 2] = c[e2 >> 2];
        c[b2 + 4 >> 2] = d2;
        return;
      }
      function Vc(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(d2) | 0;
        e2 = (h2 ^ 1) & 1;
        f2 = a2 + 132 + (b2 << 3) | 0;
        b2 = a2 + 132 + (b2 << 3) + 4 | 0;
        if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
          g[f2 >> 2] = d2;
          c[b2 >> 2] = e2;
          nc(a2);
        }
        return;
      }
      function Wc(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(d2) | 0;
        e2 = h2 ? 0 : 2;
        f2 = a2 + 132 + (b2 << 3) | 0;
        b2 = a2 + 132 + (b2 << 3) + 4 | 0;
        if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
          g[f2 >> 2] = d2;
          c[b2 >> 2] = e2;
          nc(a2);
        }
        return;
      }
      function Xc(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = b2 + 132 + (d2 << 3) | 0;
        b2 = c[e2 + 4 >> 2] | 0;
        d2 = a2;
        c[d2 >> 2] = c[e2 >> 2];
        c[d2 + 4 >> 2] = b2;
        return;
      }
      function Yc(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(d2) | 0;
        e2 = (h2 ^ 1) & 1;
        f2 = a2 + 60 + (b2 << 3) | 0;
        b2 = a2 + 60 + (b2 << 3) + 4 | 0;
        if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
          g[f2 >> 2] = d2;
          c[b2 >> 2] = e2;
          nc(a2);
        }
        return;
      }
      function Zc(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(d2) | 0;
        e2 = h2 ? 0 : 2;
        f2 = a2 + 60 + (b2 << 3) | 0;
        b2 = a2 + 60 + (b2 << 3) + 4 | 0;
        if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
          g[f2 >> 2] = d2;
          c[b2 >> 2] = e2;
          nc(a2);
        }
        return;
      }
      function _c(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = b2 + 60 + (d2 << 3) | 0;
        b2 = c[e2 + 4 >> 2] | 0;
        d2 = a2;
        c[d2 >> 2] = c[e2 >> 2];
        c[d2 + 4 >> 2] = b2;
        return;
      }
      function $c(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = a2 + 60 + (b2 << 3) + 4 | 0;
        if ((c[d2 >> 2] | 0) != 3) {
          g[a2 + 60 + (b2 << 3) >> 2] = T(t);
          c[d2 >> 2] = 3;
          nc(a2);
        }
        return;
      }
      function ad(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(d2) | 0;
        e2 = (h2 ^ 1) & 1;
        f2 = a2 + 204 + (b2 << 3) | 0;
        b2 = a2 + 204 + (b2 << 3) + 4 | 0;
        if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
          g[f2 >> 2] = d2;
          c[b2 >> 2] = e2;
          nc(a2);
        }
        return;
      }
      function bd(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(d2) | 0;
        e2 = h2 ? 0 : 2;
        f2 = a2 + 204 + (b2 << 3) | 0;
        b2 = a2 + 204 + (b2 << 3) + 4 | 0;
        if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
          g[f2 >> 2] = d2;
          c[b2 >> 2] = e2;
          nc(a2);
        }
        return;
      }
      function cd(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = b2 + 204 + (d2 << 3) | 0;
        b2 = c[e2 + 4 >> 2] | 0;
        d2 = a2;
        c[d2 >> 2] = c[e2 >> 2];
        c[d2 + 4 >> 2] = b2;
        return;
      }
      function dd(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(d2) | 0;
        e2 = (h2 ^ 1) & 1;
        f2 = a2 + 276 + (b2 << 3) | 0;
        b2 = a2 + 276 + (b2 << 3) + 4 | 0;
        if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
          g[f2 >> 2] = d2;
          c[b2 >> 2] = e2;
          nc(a2);
        }
        return;
      }
      function ed(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return T(g[a2 + 276 + (b2 << 3) >> 2]);
      }
      function fd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = (h2 ^ 1) & 1;
        e2 = a2 + 348 | 0;
        f2 = a2 + 352 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function gd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0;
        e2 = a2 + 348 | 0;
        d2 = a2 + 352 | 0;
        if (!(!(T(g[e2 >> 2]) != b2) ? (c[d2 >> 2] | 0) == 2 : 0)) {
          g[e2 >> 2] = b2;
          e2 = Sb(b2) | 0;
          c[d2 >> 2] = e2 ? 3 : 2;
          nc(a2);
        }
        return;
      }
      function hd(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = a2 + 352 | 0;
        if ((c[b2 >> 2] | 0) != 3) {
          g[a2 + 348 >> 2] = T(t);
          c[b2 >> 2] = 3;
          nc(a2);
        }
        return;
      }
      function id(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        e2 = b2 + 348 | 0;
        d2 = c[e2 + 4 >> 2] | 0;
        b2 = a2;
        c[b2 >> 2] = c[e2 >> 2];
        c[b2 + 4 >> 2] = d2;
        return;
      }
      function jd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = (h2 ^ 1) & 1;
        e2 = a2 + 356 | 0;
        f2 = a2 + 360 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function kd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0;
        e2 = a2 + 356 | 0;
        d2 = a2 + 360 | 0;
        if (!(!(T(g[e2 >> 2]) != b2) ? (c[d2 >> 2] | 0) == 2 : 0)) {
          g[e2 >> 2] = b2;
          e2 = Sb(b2) | 0;
          c[d2 >> 2] = e2 ? 3 : 2;
          nc(a2);
        }
        return;
      }
      function ld(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = a2 + 360 | 0;
        if ((c[b2 >> 2] | 0) != 3) {
          g[a2 + 356 >> 2] = T(t);
          c[b2 >> 2] = 3;
          nc(a2);
        }
        return;
      }
      function md(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        e2 = b2 + 356 | 0;
        d2 = c[e2 + 4 >> 2] | 0;
        b2 = a2;
        c[b2 >> 2] = c[e2 >> 2];
        c[b2 + 4 >> 2] = d2;
        return;
      }
      function nd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = (h2 ^ 1) & 1;
        e2 = a2 + 364 | 0;
        f2 = a2 + 368 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function od(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = h2 ? 0 : 2;
        e2 = a2 + 364 | 0;
        f2 = a2 + 368 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function pd(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        e2 = b2 + 364 | 0;
        d2 = c[e2 + 4 >> 2] | 0;
        b2 = a2;
        c[b2 >> 2] = c[e2 >> 2];
        c[b2 + 4 >> 2] = d2;
        return;
      }
      function qd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = (h2 ^ 1) & 1;
        e2 = a2 + 372 | 0;
        f2 = a2 + 376 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function rd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = h2 ? 0 : 2;
        e2 = a2 + 372 | 0;
        f2 = a2 + 376 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function sd(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        e2 = b2 + 372 | 0;
        d2 = c[e2 + 4 >> 2] | 0;
        b2 = a2;
        c[b2 >> 2] = c[e2 >> 2];
        c[b2 + 4 >> 2] = d2;
        return;
      }
      function td(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = (h2 ^ 1) & 1;
        e2 = a2 + 380 | 0;
        f2 = a2 + 384 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function ud(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = h2 ? 0 : 2;
        e2 = a2 + 380 | 0;
        f2 = a2 + 384 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function vd(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        e2 = b2 + 380 | 0;
        d2 = c[e2 + 4 >> 2] | 0;
        b2 = a2;
        c[b2 >> 2] = c[e2 >> 2];
        c[b2 + 4 >> 2] = d2;
        return;
      }
      function wd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = (h2 ^ 1) & 1;
        e2 = a2 + 388 | 0;
        f2 = a2 + 392 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function xd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
        h2 = Sb(b2) | 0;
        d2 = h2 ? 0 : 2;
        e2 = a2 + 388 | 0;
        f2 = a2 + 392 | 0;
        if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
          g[e2 >> 2] = b2;
          c[f2 >> 2] = d2;
          nc(a2);
        }
        return;
      }
      function yd(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        e2 = b2 + 388 | 0;
        d2 = c[e2 + 4 >> 2] | 0;
        b2 = a2;
        c[b2 >> 2] = c[e2 >> 2];
        c[b2 + 4 >> 2] = d2;
        return;
      }
      function zd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var c2 = 0;
        c2 = a2 + 396 | 0;
        if (T(g[c2 >> 2]) != b2) {
          g[c2 >> 2] = b2;
          nc(a2);
        }
        return;
      }
      function Ad(a2) {
        a2 = a2 | 0;
        return T(g[a2 + 396 >> 2]);
      }
      function Bd(a2) {
        a2 = a2 | 0;
        return T(g[a2 + 400 >> 2]);
      }
      function Cd(a2) {
        a2 = a2 | 0;
        return T(g[a2 + 404 >> 2]);
      }
      function Dd(a2) {
        a2 = a2 | 0;
        return T(g[a2 + 408 >> 2]);
      }
      function Ed(a2) {
        a2 = a2 | 0;
        return T(g[a2 + 412 >> 2]);
      }
      function Fd(a2) {
        a2 = a2 | 0;
        return T(g[a2 + 416 >> 2]);
      }
      function Gd(a2) {
        a2 = a2 | 0;
        return T(g[a2 + 420 >> 2]);
      }
      function Hd(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        ec(a2, (b2 | 0) < 6, 2918);
        switch (b2 | 0) {
          case 0: {
            b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 5 : 4;
            break;
          }
          case 2: {
            b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 4 : 5;
            break;
          }
          default: {
          }
        }
        return T(g[a2 + 424 + (b2 << 2) >> 2]);
      }
      function Id(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        ec(a2, (b2 | 0) < 6, 2918);
        switch (b2 | 0) {
          case 0: {
            b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 5 : 4;
            break;
          }
          case 2: {
            b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 4 : 5;
            break;
          }
          default: {
          }
        }
        return T(g[a2 + 448 + (b2 << 2) >> 2]);
      }
      function Jd(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        ec(a2, (b2 | 0) < 6, 2918);
        switch (b2 | 0) {
          case 0: {
            b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 5 : 4;
            break;
          }
          case 2: {
            b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 4 : 5;
            break;
          }
          default: {
          }
        }
        return T(g[a2 + 472 + (b2 << 2) >> 2]);
      }
      function Kd(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = ib;
        d2 = c[a2 + 4 >> 2] | 0;
        if ((d2 | 0) == (c[b2 + 4 >> 2] | 0)) {
          if (!d2)
            a2 = 1;
          else {
            e2 = T(g[a2 >> 2]);
            a2 = T(C(T(e2 - T(g[b2 >> 2])))) < T(999999974e-13);
          }
        } else
          a2 = 0;
        return a2 | 0;
      }
      function Ld(a2, b2) {
        a2 = T(a2);
        b2 = T(b2);
        var c2 = 0;
        if (Sb(a2) | 0)
          c2 = Sb(b2) | 0;
        else
          c2 = T(C(T(a2 - b2))) < T(999999974e-13);
        return c2 | 0;
      }
      function Md(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        Nd(a2, b2);
        return;
      }
      function Nd(b2, d2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 4 | 0;
        c[f2 >> 2] = 0;
        c[f2 + 4 >> 2] = 0;
        c[f2 + 8 >> 2] = 0;
        Ka(f2 | 0, b2 | 0, d2 | 0, 0);
        Vd(b2, 3, (a[f2 + 11 >> 0] | 0) < 0 ? c[f2 >> 2] | 0 : f2, e2);
        tC(f2);
        l = e2;
        return;
      }
      function Od(a2, b2, c2, d2) {
        a2 = T(a2);
        b2 = T(b2);
        c2 = c2 | 0;
        d2 = d2 | 0;
        var e2 = ib;
        a2 = T(a2 * b2);
        e2 = T(gC(a2, T(1)));
        do
          if (!(Ld(e2, T(0)) | 0)) {
            a2 = T(a2 - e2);
            if (Ld(e2, T(1)) | 0) {
              a2 = T(a2 + T(1));
              break;
            }
            if (c2) {
              a2 = T(a2 + T(1));
              break;
            }
            if (!d2) {
              if (e2 > T(0.5))
                e2 = T(1);
              else {
                d2 = Ld(e2, T(0.5)) | 0;
                e2 = d2 ? T(1) : T(0);
              }
              a2 = T(a2 + e2);
            }
          } else
            a2 = T(a2 - e2);
        while (0);
        return T(a2 / b2);
      }
      function Pd(a2, b2, c2, d2, e2, f2, h2, i2, j2, k2, l2, m2, n2) {
        a2 = a2 | 0;
        b2 = T(b2);
        c2 = c2 | 0;
        d2 = T(d2);
        e2 = e2 | 0;
        f2 = T(f2);
        h2 = h2 | 0;
        i2 = T(i2);
        j2 = T(j2);
        k2 = T(k2);
        l2 = T(l2);
        m2 = T(m2);
        n2 = n2 | 0;
        var o2 = 0, p2 = ib, q2 = ib, r2 = ib, s2 = ib, t2 = ib, u2 = ib;
        if (j2 < T(0) | k2 < T(0))
          n2 = 0;
        else {
          if ((n2 | 0) != 0 ? (p2 = T(g[n2 + 4 >> 2]), p2 != T(0)) : 0) {
            r2 = T(Od(b2, p2, 0, 0));
            s2 = T(Od(d2, p2, 0, 0));
            q2 = T(Od(f2, p2, 0, 0));
            p2 = T(Od(i2, p2, 0, 0));
          } else {
            q2 = f2;
            r2 = b2;
            p2 = i2;
            s2 = d2;
          }
          if ((e2 | 0) == (a2 | 0))
            o2 = Ld(q2, r2) | 0;
          else
            o2 = 0;
          if ((h2 | 0) == (c2 | 0))
            n2 = Ld(p2, s2) | 0;
          else
            n2 = 0;
          if ((!o2 ? (t2 = T(b2 - l2), !(Qd(a2, t2, j2) | 0)) : 0) ? !(Rd(a2, t2, e2, j2) | 0) : 0)
            o2 = Sd(a2, t2, e2, f2, j2) | 0;
          else
            o2 = 1;
          if ((!n2 ? (u2 = T(d2 - m2), !(Qd(c2, u2, k2) | 0)) : 0) ? !(Rd(c2, u2, h2, k2) | 0) : 0)
            n2 = Sd(c2, u2, h2, i2, k2) | 0;
          else
            n2 = 1;
          n2 = o2 & n2;
        }
        return n2 | 0;
      }
      function Qd(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = T(b2);
        c2 = T(c2);
        if ((a2 | 0) == 1)
          a2 = Ld(b2, c2) | 0;
        else
          a2 = 0;
        return a2 | 0;
      }
      function Rd(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = T(b2);
        c2 = c2 | 0;
        d2 = T(d2);
        if ((a2 | 0) == 2 & (c2 | 0) == 0) {
          if (!(b2 >= d2))
            a2 = Ld(b2, d2) | 0;
          else
            a2 = 1;
        } else
          a2 = 0;
        return a2 | 0;
      }
      function Sd(a2, b2, c2, d2, e2) {
        a2 = a2 | 0;
        b2 = T(b2);
        c2 = c2 | 0;
        d2 = T(d2);
        e2 = T(e2);
        if ((a2 | 0) == 2 & (c2 | 0) == 2 & d2 > b2) {
          if (!(e2 <= b2))
            a2 = Ld(b2, e2) | 0;
          else
            a2 = 1;
        } else
          a2 = 0;
        return a2 | 0;
      }
      function Td(b2, d2, e2, f2, i2, j2, k2, m2, n2, o2, p2) {
        b2 = b2 | 0;
        d2 = T(d2);
        e2 = T(e2);
        f2 = f2 | 0;
        i2 = i2 | 0;
        j2 = j2 | 0;
        k2 = T(k2);
        m2 = T(m2);
        n2 = n2 | 0;
        o2 = o2 | 0;
        p2 = p2 | 0;
        var q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = ib, v2 = ib, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0, B2 = 0, C2 = 0, D2 = 0, E2 = 0, F2 = 0, G2 = 0, H2 = ib, I2 = ib, J2 = ib, K2 = 0, L2 = 0;
        G2 = l;
        l = l + 160 | 0;
        D2 = G2 + 152 | 0;
        C2 = G2 + 120 | 0;
        B2 = G2 + 104 | 0;
        y2 = G2 + 72 | 0;
        t2 = G2 + 56 | 0;
        A2 = G2 + 8 | 0;
        x2 = G2;
        z2 = (c[2279] | 0) + 1 | 0;
        c[2279] = z2;
        E2 = b2 + 984 | 0;
        if ((a[E2 >> 0] | 0) != 0 ? (c[b2 + 512 >> 2] | 0) != (c[2278] | 0) : 0)
          w2 = 4;
        else if ((c[b2 + 516 >> 2] | 0) == (f2 | 0))
          F2 = 0;
        else
          w2 = 4;
        if ((w2 | 0) == 4) {
          c[b2 + 520 >> 2] = 0;
          c[b2 + 924 >> 2] = -1;
          c[b2 + 928 >> 2] = -1;
          g[b2 + 932 >> 2] = T(-1);
          g[b2 + 936 >> 2] = T(-1);
          F2 = 1;
        }
        a:
          do
            if (!(c[b2 + 964 >> 2] | 0)) {
              if (n2) {
                q2 = b2 + 916 | 0;
                if (!(Ld(T(g[q2 >> 2]), d2) | 0)) {
                  w2 = 21;
                  break;
                }
                if (!(Ld(T(g[b2 + 920 >> 2]), e2) | 0)) {
                  w2 = 21;
                  break;
                }
                if ((c[b2 + 924 >> 2] | 0) != (i2 | 0)) {
                  w2 = 21;
                  break;
                }
                q2 = (c[b2 + 928 >> 2] | 0) == (j2 | 0) ? q2 : 0;
                w2 = 22;
                break;
              }
              s2 = c[b2 + 520 >> 2] | 0;
              if (!s2)
                w2 = 21;
              else {
                r2 = 0;
                while (1) {
                  q2 = b2 + 524 + (r2 * 24 | 0) | 0;
                  if (((Ld(T(g[q2 >> 2]), d2) | 0 ? Ld(T(g[b2 + 524 + (r2 * 24 | 0) + 4 >> 2]), e2) | 0 : 0) ? (c[b2 + 524 + (r2 * 24 | 0) + 8 >> 2] | 0) == (i2 | 0) : 0) ? (c[b2 + 524 + (r2 * 24 | 0) + 12 >> 2] | 0) == (j2 | 0) : 0) {
                    w2 = 22;
                    break a;
                  }
                  r2 = r2 + 1 | 0;
                  if (r2 >>> 0 >= s2 >>> 0) {
                    w2 = 21;
                    break;
                  }
                }
              }
            } else {
              u2 = T(Ud(b2, 2, k2));
              v2 = T(Ud(b2, 0, k2));
              q2 = b2 + 916 | 0;
              J2 = T(g[q2 >> 2]);
              I2 = T(g[b2 + 920 >> 2]);
              H2 = T(g[b2 + 932 >> 2]);
              if (!(Pd(i2, d2, j2, e2, c[b2 + 924 >> 2] | 0, J2, c[b2 + 928 >> 2] | 0, I2, H2, T(g[b2 + 936 >> 2]), u2, v2, p2) | 0)) {
                s2 = c[b2 + 520 >> 2] | 0;
                if (!s2)
                  w2 = 21;
                else {
                  r2 = 0;
                  while (1) {
                    q2 = b2 + 524 + (r2 * 24 | 0) | 0;
                    H2 = T(g[q2 >> 2]);
                    I2 = T(g[b2 + 524 + (r2 * 24 | 0) + 4 >> 2]);
                    J2 = T(g[b2 + 524 + (r2 * 24 | 0) + 16 >> 2]);
                    if (Pd(i2, d2, j2, e2, c[b2 + 524 + (r2 * 24 | 0) + 8 >> 2] | 0, H2, c[b2 + 524 + (r2 * 24 | 0) + 12 >> 2] | 0, I2, J2, T(g[b2 + 524 + (r2 * 24 | 0) + 20 >> 2]), u2, v2, p2) | 0) {
                      w2 = 22;
                      break a;
                    }
                    r2 = r2 + 1 | 0;
                    if (r2 >>> 0 >= s2 >>> 0) {
                      w2 = 21;
                      break;
                    }
                  }
                }
              } else
                w2 = 22;
            }
          while (0);
        do
          if ((w2 | 0) == 21) {
            if (!(a[11697] | 0)) {
              q2 = 0;
              w2 = 31;
            } else {
              q2 = 0;
              w2 = 28;
            }
          } else if ((w2 | 0) == 22) {
            r2 = (a[11697] | 0) != 0;
            if (!((q2 | 0) != 0 & (F2 ^ 1)))
              if (r2) {
                w2 = 28;
                break;
              } else {
                w2 = 31;
                break;
              }
            t2 = q2 + 16 | 0;
            c[b2 + 908 >> 2] = c[t2 >> 2];
            s2 = q2 + 20 | 0;
            c[b2 + 912 >> 2] = c[s2 >> 2];
            if (!((a[11698] | 0) == 0 | r2 ^ 1)) {
              c[x2 >> 2] = Wd(z2) | 0;
              c[x2 + 4 >> 2] = z2;
              Vd(b2, 4, 2972, x2);
              r2 = c[b2 + 972 >> 2] | 0;
              if (r2 | 0)
                nb[r2 & 127](b2);
              i2 = Xd(i2, n2) | 0;
              j2 = Xd(j2, n2) | 0;
              L2 = +T(g[t2 >> 2]);
              K2 = +T(g[s2 >> 2]);
              c[A2 >> 2] = i2;
              c[A2 + 4 >> 2] = j2;
              h[A2 + 8 >> 3] = +d2;
              h[A2 + 16 >> 3] = +e2;
              h[A2 + 24 >> 3] = L2;
              h[A2 + 32 >> 3] = K2;
              c[A2 + 40 >> 2] = o2;
              Vd(b2, 4, 2989, A2);
            }
          }
        while (0);
        if ((w2 | 0) == 28) {
          r2 = Wd(z2) | 0;
          c[t2 >> 2] = r2;
          c[t2 + 4 >> 2] = z2;
          c[t2 + 8 >> 2] = F2 ? 3047 : 11699;
          Vd(b2, 4, 3038, t2);
          r2 = c[b2 + 972 >> 2] | 0;
          if (r2 | 0)
            nb[r2 & 127](b2);
          A2 = Xd(i2, n2) | 0;
          w2 = Xd(j2, n2) | 0;
          c[y2 >> 2] = A2;
          c[y2 + 4 >> 2] = w2;
          h[y2 + 8 >> 3] = +d2;
          h[y2 + 16 >> 3] = +e2;
          c[y2 + 24 >> 2] = o2;
          Vd(b2, 4, 3049, y2);
          w2 = 31;
        }
        if ((w2 | 0) == 31) {
          Yd(b2, d2, e2, f2, i2, j2, k2, m2, n2, p2);
          if (a[11697] | 0) {
            r2 = c[2279] | 0;
            A2 = Wd(r2) | 0;
            c[B2 >> 2] = A2;
            c[B2 + 4 >> 2] = r2;
            c[B2 + 8 >> 2] = F2 ? 3047 : 11699;
            Vd(b2, 4, 3083, B2);
            r2 = c[b2 + 972 >> 2] | 0;
            if (r2 | 0)
              nb[r2 & 127](b2);
            A2 = Xd(i2, n2) | 0;
            B2 = Xd(j2, n2) | 0;
            K2 = +T(g[b2 + 908 >> 2]);
            L2 = +T(g[b2 + 912 >> 2]);
            c[C2 >> 2] = A2;
            c[C2 + 4 >> 2] = B2;
            h[C2 + 8 >> 3] = K2;
            h[C2 + 16 >> 3] = L2;
            c[C2 + 24 >> 2] = o2;
            Vd(b2, 4, 3092, C2);
          }
          c[b2 + 516 >> 2] = f2;
          if (!q2) {
            r2 = b2 + 520 | 0;
            q2 = c[r2 >> 2] | 0;
            if ((q2 | 0) == 16) {
              if (a[11697] | 0)
                Vd(b2, 4, 3124, D2);
              c[r2 >> 2] = 0;
              q2 = 0;
            }
            if (n2)
              q2 = b2 + 916 | 0;
            else {
              c[r2 >> 2] = q2 + 1;
              q2 = b2 + 524 + (q2 * 24 | 0) | 0;
            }
            g[q2 >> 2] = d2;
            g[q2 + 4 >> 2] = e2;
            c[q2 + 8 >> 2] = i2;
            c[q2 + 12 >> 2] = j2;
            c[q2 + 16 >> 2] = c[b2 + 908 >> 2];
            c[q2 + 20 >> 2] = c[b2 + 912 >> 2];
            q2 = 0;
          }
        }
        if (n2) {
          c[b2 + 416 >> 2] = c[b2 + 908 >> 2];
          c[b2 + 420 >> 2] = c[b2 + 912 >> 2];
          a[b2 + 985 >> 0] = 1;
          a[E2 >> 0] = 0;
        }
        c[2279] = (c[2279] | 0) + -1;
        c[b2 + 512 >> 2] = c[2278];
        l = G2;
        return F2 | (q2 | 0) == 0 | 0;
      }
      function Ud(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        var d2 = ib;
        d2 = T(me(a2, b2, c2));
        return T(d2 + T(ne(a2, b2, c2)));
      }
      function Vd(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2;
        c[f2 >> 2] = e2;
        if (!a2)
          e2 = 0;
        else
          e2 = c[a2 + 976 >> 2] | 0;
        ge(e2, a2, b2, d2, f2);
        l = g2;
        return;
      }
      function Wd(a2) {
        a2 = a2 | 0;
        return (a2 >>> 0 > 60 ? 3201 : 3201 + (60 - a2) | 0) | 0;
      }
      function Xd(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        f2 = l;
        l = l + 32 | 0;
        d2 = f2 + 12 | 0;
        e2 = f2;
        c[d2 >> 2] = c[254];
        c[d2 + 4 >> 2] = c[255];
        c[d2 + 8 >> 2] = c[256];
        c[e2 >> 2] = c[257];
        c[e2 + 4 >> 2] = c[258];
        c[e2 + 8 >> 2] = c[259];
        if ((a2 | 0) > 2)
          a2 = 11699;
        else
          a2 = c[(b2 ? e2 : d2) + (a2 << 2) >> 2] | 0;
        l = f2;
        return a2 | 0;
      }
      function Yd(b2, e2, f2, h2, i2, k2, m2, n2, o2, p2) {
        b2 = b2 | 0;
        e2 = T(e2);
        f2 = T(f2);
        h2 = h2 | 0;
        i2 = i2 | 0;
        k2 = k2 | 0;
        m2 = T(m2);
        n2 = T(n2);
        o2 = o2 | 0;
        p2 = p2 | 0;
        var q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = ib, v2 = ib, w2 = ib, x2 = ib, y2 = ib, z2 = ib, A2 = ib, B2 = 0, C2 = 0, D2 = 0, E2 = ib, F2 = ib, G2 = 0, H2 = ib, I2 = 0, J2 = 0, K2 = 0, L2 = 0, M2 = 0, N2 = 0, O2 = 0, P2 = 0, Q2 = 0, R2 = 0, S2 = 0, U2 = 0, V2 = 0, W2 = 0, X2 = 0, Y2 = 0, Z2 = 0, _2 = 0, $2 = ib, aa2 = ib, ba2 = ib, ca2 = ib, da2 = ib, ea2 = 0, fa2 = 0, ga2 = 0, ha2 = 0, ia2 = 0, ja2 = ib, ka2 = ib, la2 = ib, ma2 = ib, na2 = ib, oa2 = ib, pa2 = 0, qa2 = ib, ra2 = ib, sa2 = ib, ta2 = ib, ua2 = ib, va2 = ib, wa2 = 0, xa2 = 0, ya2 = ib, za2 = ib, Aa2 = 0, Ba2 = 0, Ca2 = 0, Da2 = 0, Ea2 = ib, Fa2 = 0, Ga2 = 0, Ha2 = 0, Ia2 = 0, Ja2 = 0, Ka2 = 0, La2 = 0, Ma2 = ib, Na2 = 0, Oa2 = 0;
        La2 = l;
        l = l + 16 | 0;
        ea2 = La2 + 12 | 0;
        fa2 = La2 + 8 | 0;
        ga2 = La2 + 4 | 0;
        ha2 = La2;
        ec(b2, (i2 | 0) == 0 | (Sb(e2) | 0) ^ 1, 3326);
        ec(b2, (k2 | 0) == 0 | (Sb(f2) | 0) ^ 1, 3406);
        Ga2 = qe(b2, h2) | 0;
        c[b2 + 496 >> 2] = Ga2;
        Ja2 = re(2, Ga2) | 0;
        Ka2 = re(0, Ga2) | 0;
        g[b2 + 440 >> 2] = T(me(b2, Ja2, m2));
        g[b2 + 444 >> 2] = T(ne(b2, Ja2, m2));
        g[b2 + 428 >> 2] = T(me(b2, Ka2, m2));
        g[b2 + 436 >> 2] = T(ne(b2, Ka2, m2));
        g[b2 + 464 >> 2] = T(se(b2, Ja2));
        g[b2 + 468 >> 2] = T(te(b2, Ja2));
        g[b2 + 452 >> 2] = T(se(b2, Ka2));
        g[b2 + 460 >> 2] = T(te(b2, Ka2));
        g[b2 + 488 >> 2] = T(ue(b2, Ja2, m2));
        g[b2 + 492 >> 2] = T(ve(b2, Ja2, m2));
        g[b2 + 476 >> 2] = T(ue(b2, Ka2, m2));
        g[b2 + 484 >> 2] = T(ve(b2, Ka2, m2));
        do
          if (!(c[b2 + 964 >> 2] | 0)) {
            Ha2 = b2 + 948 | 0;
            Ia2 = (c[b2 + 952 >> 2] | 0) - (c[Ha2 >> 2] | 0) >> 2;
            if (!Ia2) {
              xe(b2, e2, f2, i2, k2, m2, n2);
              break;
            }
            if (!o2 ? ye(b2, e2, f2, i2, k2, m2, n2) | 0 : 0)
              break;
            lc(b2);
            Y2 = b2 + 508 | 0;
            a[Y2 >> 0] = 0;
            Ja2 = re(c[b2 + 4 >> 2] | 0, Ga2) | 0;
            Ka2 = ze(Ja2, Ga2) | 0;
            Fa2 = oe(Ja2) | 0;
            Z2 = c[b2 + 8 >> 2] | 0;
            Ba2 = b2 + 28 | 0;
            _2 = (c[Ba2 >> 2] | 0) != 0;
            ua2 = Fa2 ? m2 : n2;
            ya2 = Fa2 ? n2 : m2;
            $2 = T(Ae(b2, Ja2, m2));
            aa2 = T(Be(b2, Ja2, m2));
            u2 = T(Ae(b2, Ka2, m2));
            va2 = T(Ce(b2, Ja2, m2));
            za2 = T(Ce(b2, Ka2, m2));
            D2 = Fa2 ? i2 : k2;
            Aa2 = Fa2 ? k2 : i2;
            Ea2 = Fa2 ? va2 : za2;
            y2 = Fa2 ? za2 : va2;
            ta2 = T(Ud(b2, 2, m2));
            x2 = T(Ud(b2, 0, m2));
            v2 = T(T(be(b2 + 364 | 0, m2)) - Ea2);
            w2 = T(T(be(b2 + 380 | 0, m2)) - Ea2);
            z2 = T(T(be(b2 + 372 | 0, n2)) - y2);
            A2 = T(T(be(b2 + 388 | 0, n2)) - y2);
            ba2 = Fa2 ? v2 : z2;
            ca2 = Fa2 ? w2 : A2;
            ta2 = T(e2 - ta2);
            e2 = T(ta2 - Ea2);
            if (Sb(e2) | 0)
              Ea2 = e2;
            else
              Ea2 = T(cC(T(eC(e2, w2)), v2));
            ra2 = T(f2 - x2);
            e2 = T(ra2 - y2);
            if (Sb(e2) | 0)
              sa2 = e2;
            else
              sa2 = T(cC(T(eC(e2, A2)), z2));
            v2 = Fa2 ? Ea2 : sa2;
            qa2 = Fa2 ? sa2 : Ea2;
            a:
              do
                if ((D2 | 0) == 1) {
                  h2 = 0;
                  r2 = 0;
                  while (1) {
                    q2 = ac(b2, r2) | 0;
                    if (!h2) {
                      if (T(Ee(q2)) > T(0) ? T(Fe(q2)) > T(0) : 0)
                        h2 = q2;
                      else
                        h2 = 0;
                    } else if (De(q2) | 0) {
                      t2 = 0;
                      break a;
                    }
                    r2 = r2 + 1 | 0;
                    if (r2 >>> 0 >= Ia2 >>> 0) {
                      t2 = h2;
                      break;
                    }
                  }
                } else
                  t2 = 0;
              while (0);
            B2 = t2 + 500 | 0;
            C2 = t2 + 504 | 0;
            h2 = 0;
            q2 = 0;
            e2 = T(0);
            s2 = 0;
            do {
              r2 = c[(c[Ha2 >> 2] | 0) + (s2 << 2) >> 2] | 0;
              if ((c[r2 + 36 >> 2] | 0) == 1) {
                Ge(r2);
                a[r2 + 985 >> 0] = 1;
                a[r2 + 984 >> 0] = 0;
              } else {
                $d(r2);
                if (o2)
                  ce(r2, qe(r2, Ga2) | 0, v2, qa2, Ea2);
                do
                  if ((c[r2 + 24 >> 2] | 0) != 1) {
                    if ((r2 | 0) == (t2 | 0)) {
                      c[B2 >> 2] = c[2278];
                      g[C2 >> 2] = T(0);
                      break;
                    } else {
                      He(b2, r2, Ea2, i2, sa2, Ea2, sa2, k2, Ga2, p2);
                      break;
                    }
                  } else {
                    if (q2 | 0)
                      c[q2 + 960 >> 2] = r2;
                    c[r2 + 960 >> 2] = 0;
                    q2 = r2;
                    h2 = (h2 | 0) == 0 ? r2 : h2;
                  }
                while (0);
                oa2 = T(g[r2 + 504 >> 2]);
                e2 = T(e2 + T(oa2 + T(Ud(r2, Ja2, Ea2))));
              }
              s2 = s2 + 1 | 0;
            } while ((s2 | 0) != (Ia2 | 0));
            K2 = e2 > v2;
            pa2 = _2 & ((D2 | 0) == 2 & K2) ? 1 : D2;
            I2 = (Aa2 | 0) == 1;
            M2 = I2 & (o2 ^ 1);
            N2 = (pa2 | 0) == 1;
            O2 = (pa2 | 0) == 2;
            P2 = 976 + (Ja2 << 2) | 0;
            Q2 = (Aa2 | 2 | 0) == 2;
            W2 = I2 & (_2 ^ 1);
            R2 = 1040 + (Ka2 << 2) | 0;
            S2 = 1040 + (Ja2 << 2) | 0;
            U2 = 976 + (Ka2 << 2) | 0;
            V2 = (Aa2 | 0) != 1;
            K2 = _2 & ((D2 | 0) != 0 & K2);
            J2 = b2 + 976 | 0;
            I2 = I2 ^ 1;
            e2 = v2;
            G2 = 0;
            L2 = 0;
            oa2 = T(0);
            da2 = T(0);
            while (1) {
              b:
                do
                  if (G2 >>> 0 < Ia2 >>> 0) {
                    C2 = c[Ha2 >> 2] | 0;
                    s2 = 0;
                    A2 = T(0);
                    z2 = T(0);
                    w2 = T(0);
                    v2 = T(0);
                    r2 = 0;
                    q2 = 0;
                    t2 = G2;
                    while (1) {
                      B2 = c[C2 + (t2 << 2) >> 2] | 0;
                      if ((c[B2 + 36 >> 2] | 0) != 1 ? (c[B2 + 940 >> 2] = L2, (c[B2 + 24 >> 2] | 0) != 1) : 0) {
                        x2 = T(Ud(B2, Ja2, Ea2));
                        X2 = c[P2 >> 2] | 0;
                        f2 = T(be(B2 + 380 + (X2 << 3) | 0, ua2));
                        y2 = T(g[B2 + 504 >> 2]);
                        f2 = T(eC(f2, y2));
                        f2 = T(cC(T(be(B2 + 364 + (X2 << 3) | 0, ua2)), f2));
                        if (_2 & (s2 | 0) != 0 & T(x2 + T(z2 + f2)) > e2) {
                          k2 = s2;
                          x2 = A2;
                          D2 = t2;
                          break b;
                        }
                        x2 = T(x2 + f2);
                        f2 = T(z2 + x2);
                        x2 = T(A2 + x2);
                        if (De(B2) | 0) {
                          w2 = T(w2 + T(Ee(B2)));
                          v2 = T(v2 - T(y2 * T(Fe(B2))));
                        }
                        if (q2 | 0)
                          c[q2 + 960 >> 2] = B2;
                        c[B2 + 960 >> 2] = 0;
                        s2 = s2 + 1 | 0;
                        q2 = B2;
                        r2 = (r2 | 0) == 0 ? B2 : r2;
                      } else {
                        x2 = A2;
                        f2 = z2;
                      }
                      t2 = t2 + 1 | 0;
                      if (t2 >>> 0 < Ia2 >>> 0) {
                        A2 = x2;
                        z2 = f2;
                      } else {
                        k2 = s2;
                        D2 = t2;
                        break;
                      }
                    }
                  } else {
                    k2 = 0;
                    x2 = T(0);
                    w2 = T(0);
                    v2 = T(0);
                    r2 = 0;
                    D2 = G2;
                  }
                while (0);
              X2 = w2 > T(0) & w2 < T(1);
              E2 = X2 ? T(1) : w2;
              X2 = v2 > T(0) & v2 < T(1);
              A2 = X2 ? T(1) : v2;
              do
                if (!N2) {
                  if (!(x2 < ba2 & ((Sb(ba2) | 0) ^ 1))) {
                    if (!(x2 > ca2 & ((Sb(ca2) | 0) ^ 1))) {
                      if (!(a[(c[J2 >> 2] | 0) + 3 >> 0] | 0)) {
                        if (!(E2 == T(0)) ? !(T(Ee(b2)) == T(0)) : 0) {
                          X2 = 53;
                          break;
                        }
                        e2 = x2;
                        X2 = 53;
                      } else
                        X2 = 51;
                    } else {
                      e2 = ca2;
                      X2 = 51;
                    }
                  } else {
                    e2 = ba2;
                    X2 = 51;
                  }
                } else
                  X2 = 51;
              while (0);
              if ((X2 | 0) == 51) {
                X2 = 0;
                if (Sb(e2) | 0)
                  X2 = 53;
                else {
                  F2 = T(e2 - x2);
                  H2 = e2;
                }
              }
              if ((X2 | 0) == 53) {
                X2 = 0;
                if (x2 < T(0)) {
                  F2 = T(-x2);
                  H2 = e2;
                } else {
                  F2 = T(0);
                  H2 = e2;
                }
              }
              if (!M2 ? (ia2 = (r2 | 0) == 0, !ia2) : 0) {
                s2 = c[P2 >> 2] | 0;
                t2 = F2 < T(0);
                y2 = T(F2 / A2);
                B2 = F2 > T(0);
                z2 = T(F2 / E2);
                w2 = T(0);
                x2 = T(0);
                e2 = T(0);
                q2 = r2;
                do {
                  f2 = T(be(q2 + 380 + (s2 << 3) | 0, ua2));
                  v2 = T(be(q2 + 364 + (s2 << 3) | 0, ua2));
                  v2 = T(eC(f2, T(cC(v2, T(g[q2 + 504 >> 2])))));
                  if (t2) {
                    f2 = T(v2 * T(Fe(q2)));
                    if (f2 != T(-0) ? (Ma2 = T(v2 - T(y2 * f2)), ja2 = T(Ie(q2, Ja2, Ma2, H2, Ea2)), Ma2 != ja2) : 0) {
                      w2 = T(w2 - T(ja2 - v2));
                      e2 = T(e2 + f2);
                    }
                  } else if ((B2 ? (ka2 = T(Ee(q2)), ka2 != T(0)) : 0) ? (Ma2 = T(v2 + T(z2 * ka2)), la2 = T(Ie(q2, Ja2, Ma2, H2, Ea2)), Ma2 != la2) : 0) {
                    w2 = T(w2 - T(la2 - v2));
                    x2 = T(x2 - ka2);
                  }
                  q2 = c[q2 + 960 >> 2] | 0;
                } while ((q2 | 0) != 0);
                e2 = T(A2 + e2);
                v2 = T(F2 + w2);
                if (!ia2) {
                  y2 = T(E2 + x2);
                  t2 = c[P2 >> 2] | 0;
                  B2 = v2 < T(0);
                  C2 = e2 == T(0);
                  z2 = T(v2 / e2);
                  s2 = v2 > T(0);
                  y2 = T(v2 / y2);
                  e2 = T(0);
                  do {
                    Ma2 = T(be(r2 + 380 + (t2 << 3) | 0, ua2));
                    w2 = T(be(r2 + 364 + (t2 << 3) | 0, ua2));
                    w2 = T(eC(Ma2, T(cC(w2, T(g[r2 + 504 >> 2])))));
                    if (B2) {
                      Ma2 = T(w2 * T(Fe(r2)));
                      v2 = T(-Ma2);
                      if (Ma2 != T(-0)) {
                        Ma2 = T(z2 * v2);
                        v2 = T(Ie(r2, Ja2, T(w2 + (C2 ? v2 : Ma2)), H2, Ea2));
                      } else
                        v2 = w2;
                    } else if (s2 ? (ma2 = T(Ee(r2)), ma2 != T(0)) : 0)
                      v2 = T(Ie(r2, Ja2, T(w2 + T(y2 * ma2)), H2, Ea2));
                    else
                      v2 = w2;
                    e2 = T(e2 - T(v2 - w2));
                    x2 = T(Ud(r2, Ja2, Ea2));
                    f2 = T(Ud(r2, Ka2, Ea2));
                    v2 = T(v2 + x2);
                    g[fa2 >> 2] = v2;
                    c[ha2 >> 2] = 1;
                    w2 = T(g[r2 + 396 >> 2]);
                    c:
                      do
                        if (Sb(w2) | 0) {
                          q2 = Sb(qa2) | 0;
                          do
                            if (!q2) {
                              if (K2 | (ae(r2, Ka2, qa2) | 0 | I2))
                                break;
                              if ((Je(b2, r2) | 0) != 4)
                                break;
                              if ((c[(Ke(r2, Ka2) | 0) + 4 >> 2] | 0) == 3)
                                break;
                              if ((c[(Le(r2, Ka2) | 0) + 4 >> 2] | 0) == 3)
                                break;
                              g[ea2 >> 2] = qa2;
                              c[ga2 >> 2] = 1;
                              break c;
                            }
                          while (0);
                          if (ae(r2, Ka2, qa2) | 0) {
                            q2 = c[r2 + 992 + (c[U2 >> 2] << 2) >> 2] | 0;
                            Ma2 = T(f2 + T(be(q2, qa2)));
                            g[ea2 >> 2] = Ma2;
                            q2 = V2 & (c[q2 + 4 >> 2] | 0) == 2;
                            c[ga2 >> 2] = ((Sb(Ma2) | 0 | q2) ^ 1) & 1;
                            break;
                          } else {
                            g[ea2 >> 2] = qa2;
                            c[ga2 >> 2] = q2 ? 0 : 2;
                            break;
                          }
                        } else {
                          Ma2 = T(v2 - x2);
                          E2 = T(Ma2 / w2);
                          Ma2 = T(w2 * Ma2);
                          c[ga2 >> 2] = 1;
                          g[ea2 >> 2] = T(f2 + (Fa2 ? E2 : Ma2));
                        }
                      while (0);
                    Me(r2, Ja2, H2, Ea2, ha2, fa2);
                    Me(r2, Ka2, qa2, Ea2, ga2, ea2);
                    do
                      if (!(ae(r2, Ka2, qa2) | 0) ? (Je(b2, r2) | 0) == 4 : 0) {
                        if ((c[(Ke(r2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                          q2 = 0;
                          break;
                        }
                        q2 = (c[(Le(r2, Ka2) | 0) + 4 >> 2] | 0) != 3;
                      } else
                        q2 = 0;
                    while (0);
                    Ma2 = T(g[fa2 >> 2]);
                    E2 = T(g[ea2 >> 2]);
                    Na2 = c[ha2 >> 2] | 0;
                    Oa2 = c[ga2 >> 2] | 0;
                    Td(r2, Fa2 ? Ma2 : E2, Fa2 ? E2 : Ma2, Ga2, Fa2 ? Na2 : Oa2, Fa2 ? Oa2 : Na2, Ea2, sa2, o2 & (q2 ^ 1), 3488, p2) | 0;
                    a[Y2 >> 0] = a[Y2 >> 0] | a[r2 + 508 >> 0];
                    r2 = c[r2 + 960 >> 2] | 0;
                  } while ((r2 | 0) != 0);
                } else
                  e2 = T(0);
              } else
                e2 = T(0);
              e2 = T(F2 + e2);
              Oa2 = e2 < T(0) & 1;
              a[Y2 >> 0] = Oa2 | d[Y2 >> 0];
              if (O2 & e2 > T(0)) {
                q2 = c[P2 >> 2] | 0;
                if ((c[b2 + 364 + (q2 << 3) + 4 >> 2] | 0) != 0 ? (na2 = T(be(b2 + 364 + (q2 << 3) | 0, ua2)), na2 >= T(0)) : 0)
                  v2 = T(cC(T(0), T(na2 - T(H2 - e2))));
                else
                  v2 = T(0);
              } else
                v2 = e2;
              B2 = G2 >>> 0 < D2 >>> 0;
              if (B2) {
                t2 = c[Ha2 >> 2] | 0;
                s2 = G2;
                q2 = 0;
                do {
                  r2 = c[t2 + (s2 << 2) >> 2] | 0;
                  if (!(c[r2 + 24 >> 2] | 0)) {
                    q2 = ((c[(Ke(r2, Ja2) | 0) + 4 >> 2] | 0) == 3 & 1) + q2 | 0;
                    q2 = q2 + ((c[(Le(r2, Ja2) | 0) + 4 >> 2] | 0) == 3 & 1) | 0;
                  }
                  s2 = s2 + 1 | 0;
                } while ((s2 | 0) != (D2 | 0));
                if (q2) {
                  x2 = T(0);
                  f2 = T(0);
                } else
                  X2 = 101;
              } else
                X2 = 101;
              d:
                do
                  if ((X2 | 0) == 101) {
                    X2 = 0;
                    switch (Z2 | 0) {
                      case 1: {
                        q2 = 0;
                        x2 = T(v2 * T(0.5));
                        f2 = T(0);
                        break d;
                      }
                      case 2: {
                        q2 = 0;
                        x2 = v2;
                        f2 = T(0);
                        break d;
                      }
                      case 3: {
                        if (k2 >>> 0 <= 1) {
                          q2 = 0;
                          x2 = T(0);
                          f2 = T(0);
                          break d;
                        }
                        f2 = T((k2 + -1 | 0) >>> 0);
                        q2 = 0;
                        x2 = T(0);
                        f2 = T(T(cC(v2, T(0))) / f2);
                        break d;
                      }
                      case 5: {
                        f2 = T(v2 / T((k2 + 1 | 0) >>> 0));
                        q2 = 0;
                        x2 = f2;
                        break d;
                      }
                      case 4: {
                        f2 = T(v2 / T(k2 >>> 0));
                        q2 = 0;
                        x2 = T(f2 * T(0.5));
                        break d;
                      }
                      default: {
                        q2 = 0;
                        x2 = T(0);
                        f2 = T(0);
                        break d;
                      }
                    }
                  }
                while (0);
              e2 = T($2 + x2);
              if (B2) {
                w2 = T(v2 / T(q2 | 0));
                s2 = c[Ha2 >> 2] | 0;
                r2 = G2;
                v2 = T(0);
                do {
                  q2 = c[s2 + (r2 << 2) >> 2] | 0;
                  e:
                    do
                      if ((c[q2 + 36 >> 2] | 0) != 1) {
                        switch (c[q2 + 24 >> 2] | 0) {
                          case 1: {
                            if (Ne(q2, Ja2) | 0) {
                              if (!o2)
                                break e;
                              Ma2 = T(Oe(q2, Ja2, H2));
                              Ma2 = T(Ma2 + T(se(b2, Ja2)));
                              Ma2 = T(Ma2 + T(me(q2, Ja2, Ea2)));
                              g[q2 + 400 + (c[S2 >> 2] << 2) >> 2] = Ma2;
                              break e;
                            }
                            break;
                          }
                          case 0: {
                            Oa2 = (c[(Ke(q2, Ja2) | 0) + 4 >> 2] | 0) == 3;
                            Ma2 = T(w2 + e2);
                            e2 = Oa2 ? Ma2 : e2;
                            if (o2) {
                              Oa2 = q2 + 400 + (c[S2 >> 2] << 2) | 0;
                              g[Oa2 >> 2] = T(e2 + T(g[Oa2 >> 2]));
                            }
                            Oa2 = (c[(Le(q2, Ja2) | 0) + 4 >> 2] | 0) == 3;
                            Ma2 = T(w2 + e2);
                            e2 = Oa2 ? Ma2 : e2;
                            if (M2) {
                              Ma2 = T(f2 + T(Ud(q2, Ja2, Ea2)));
                              v2 = qa2;
                              e2 = T(e2 + T(Ma2 + T(g[q2 + 504 >> 2])));
                              break e;
                            } else {
                              e2 = T(e2 + T(f2 + T(Pe(q2, Ja2, Ea2))));
                              v2 = T(cC(v2, T(Pe(q2, Ka2, Ea2))));
                              break e;
                            }
                          }
                          default: {
                          }
                        }
                        if (o2) {
                          Ma2 = T(x2 + T(se(b2, Ja2)));
                          Oa2 = q2 + 400 + (c[S2 >> 2] << 2) | 0;
                          g[Oa2 >> 2] = T(Ma2 + T(g[Oa2 >> 2]));
                        }
                      }
                    while (0);
                  r2 = r2 + 1 | 0;
                } while ((r2 | 0) != (D2 | 0));
              } else
                v2 = T(0);
              f2 = T(aa2 + e2);
              if (Q2)
                x2 = T(T(Ie(b2, Ka2, T(za2 + v2), ya2, m2)) - za2);
              else
                x2 = qa2;
              w2 = T(T(Ie(b2, Ka2, T(za2 + (W2 ? qa2 : v2)), ya2, m2)) - za2);
              if (B2 & o2) {
                r2 = G2;
                do {
                  s2 = c[(c[Ha2 >> 2] | 0) + (r2 << 2) >> 2] | 0;
                  do
                    if ((c[s2 + 36 >> 2] | 0) != 1) {
                      if ((c[s2 + 24 >> 2] | 0) == 1) {
                        if (Ne(s2, Ka2) | 0) {
                          Ma2 = T(Oe(s2, Ka2, qa2));
                          Ma2 = T(Ma2 + T(se(b2, Ka2)));
                          Ma2 = T(Ma2 + T(me(s2, Ka2, Ea2)));
                          q2 = c[R2 >> 2] | 0;
                          g[s2 + 400 + (q2 << 2) >> 2] = Ma2;
                          if (!(Sb(Ma2) | 0))
                            break;
                        } else
                          q2 = c[R2 >> 2] | 0;
                        Ma2 = T(se(b2, Ka2));
                        g[s2 + 400 + (q2 << 2) >> 2] = T(Ma2 + T(me(s2, Ka2, Ea2)));
                        break;
                      }
                      q2 = Je(b2, s2) | 0;
                      do
                        if ((q2 | 0) == 4) {
                          if ((c[(Ke(s2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                            X2 = 139;
                            break;
                          }
                          if ((c[(Le(s2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                            X2 = 139;
                            break;
                          }
                          if (ae(s2, Ka2, qa2) | 0) {
                            e2 = u2;
                            break;
                          }
                          Na2 = c[s2 + 908 + (c[P2 >> 2] << 2) >> 2] | 0;
                          c[ea2 >> 2] = Na2;
                          e2 = T(g[s2 + 396 >> 2]);
                          Oa2 = Sb(e2) | 0;
                          v2 = (c[j >> 2] = Na2, T(g[j >> 2]));
                          if (Oa2)
                            e2 = w2;
                          else {
                            F2 = T(Ud(s2, Ka2, Ea2));
                            Ma2 = T(v2 / e2);
                            e2 = T(e2 * v2);
                            e2 = T(F2 + (Fa2 ? Ma2 : e2));
                          }
                          g[fa2 >> 2] = e2;
                          g[ea2 >> 2] = T(T(Ud(s2, Ja2, Ea2)) + v2);
                          c[ga2 >> 2] = 1;
                          c[ha2 >> 2] = 1;
                          Me(s2, Ja2, H2, Ea2, ga2, ea2);
                          Me(s2, Ka2, qa2, Ea2, ha2, fa2);
                          e2 = T(g[ea2 >> 2]);
                          F2 = T(g[fa2 >> 2]);
                          Ma2 = Fa2 ? e2 : F2;
                          e2 = Fa2 ? F2 : e2;
                          Oa2 = ((Sb(Ma2) | 0) ^ 1) & 1;
                          Td(s2, Ma2, e2, Ga2, Oa2, ((Sb(e2) | 0) ^ 1) & 1, Ea2, sa2, 1, 3493, p2) | 0;
                          e2 = u2;
                        } else
                          X2 = 139;
                      while (0);
                      f:
                        do
                          if ((X2 | 0) == 139) {
                            X2 = 0;
                            e2 = T(x2 - T(Pe(s2, Ka2, Ea2)));
                            do
                              if ((c[(Ke(s2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                                if ((c[(Le(s2, Ka2) | 0) + 4 >> 2] | 0) != 3)
                                  break;
                                e2 = T(u2 + T(cC(T(0), T(e2 * T(0.5)))));
                                break f;
                              }
                            while (0);
                            if ((c[(Le(s2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                              e2 = u2;
                              break;
                            }
                            if ((c[(Ke(s2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                              e2 = T(u2 + T(cC(T(0), e2)));
                              break;
                            }
                            switch (q2 | 0) {
                              case 1: {
                                e2 = u2;
                                break f;
                              }
                              case 2: {
                                e2 = T(u2 + T(e2 * T(0.5)));
                                break f;
                              }
                              default: {
                                e2 = T(u2 + e2);
                                break f;
                              }
                            }
                          }
                        while (0);
                      Ma2 = T(oa2 + e2);
                      Oa2 = s2 + 400 + (c[R2 >> 2] << 2) | 0;
                      g[Oa2 >> 2] = T(Ma2 + T(g[Oa2 >> 2]));
                    }
                  while (0);
                  r2 = r2 + 1 | 0;
                } while ((r2 | 0) != (D2 | 0));
              }
              oa2 = T(oa2 + w2);
              da2 = T(cC(da2, f2));
              k2 = L2 + 1 | 0;
              if (D2 >>> 0 >= Ia2 >>> 0)
                break;
              else {
                e2 = H2;
                G2 = D2;
                L2 = k2;
              }
            }
            do
              if (o2) {
                q2 = k2 >>> 0 > 1;
                if (!q2 ? !(Qe(b2) | 0) : 0)
                  break;
                if (!(Sb(qa2) | 0)) {
                  e2 = T(qa2 - oa2);
                  g:
                    do
                      switch (c[b2 + 12 >> 2] | 0) {
                        case 3: {
                          u2 = T(u2 + e2);
                          z2 = T(0);
                          break;
                        }
                        case 2: {
                          u2 = T(u2 + T(e2 * T(0.5)));
                          z2 = T(0);
                          break;
                        }
                        case 4: {
                          if (qa2 > oa2)
                            z2 = T(e2 / T(k2 >>> 0));
                          else
                            z2 = T(0);
                          break;
                        }
                        case 7:
                          if (qa2 > oa2) {
                            u2 = T(u2 + T(e2 / T(k2 << 1 >>> 0)));
                            z2 = T(e2 / T(k2 >>> 0));
                            z2 = q2 ? z2 : T(0);
                            break g;
                          } else {
                            u2 = T(u2 + T(e2 * T(0.5)));
                            z2 = T(0);
                            break g;
                          }
                        case 6: {
                          z2 = T(e2 / T(L2 >>> 0));
                          z2 = qa2 > oa2 & q2 ? z2 : T(0);
                          break;
                        }
                        default:
                          z2 = T(0);
                      }
                    while (0);
                  if (k2 | 0) {
                    B2 = 1040 + (Ka2 << 2) | 0;
                    C2 = 976 + (Ka2 << 2) | 0;
                    t2 = 0;
                    r2 = 0;
                    while (1) {
                      h:
                        do
                          if (r2 >>> 0 < Ia2 >>> 0) {
                            v2 = T(0);
                            w2 = T(0);
                            e2 = T(0);
                            s2 = r2;
                            while (1) {
                              q2 = c[(c[Ha2 >> 2] | 0) + (s2 << 2) >> 2] | 0;
                              do
                                if ((c[q2 + 36 >> 2] | 0) != 1 ? (c[q2 + 24 >> 2] | 0) == 0 : 0) {
                                  if ((c[q2 + 940 >> 2] | 0) != (t2 | 0))
                                    break h;
                                  if (Re(q2, Ka2) | 0) {
                                    Ma2 = T(g[q2 + 908 + (c[C2 >> 2] << 2) >> 2]);
                                    e2 = T(cC(e2, T(Ma2 + T(Ud(q2, Ka2, Ea2)))));
                                  }
                                  if ((Je(b2, q2) | 0) != 5)
                                    break;
                                  na2 = T(Se(q2));
                                  na2 = T(na2 + T(me(q2, 0, Ea2)));
                                  Ma2 = T(g[q2 + 912 >> 2]);
                                  Ma2 = T(T(Ma2 + T(Ud(q2, 0, Ea2))) - na2);
                                  na2 = T(cC(w2, na2));
                                  Ma2 = T(cC(v2, Ma2));
                                  v2 = Ma2;
                                  w2 = na2;
                                  e2 = T(cC(e2, T(na2 + Ma2)));
                                }
                              while (0);
                              q2 = s2 + 1 | 0;
                              if (q2 >>> 0 < Ia2 >>> 0)
                                s2 = q2;
                              else {
                                s2 = q2;
                                break;
                              }
                            }
                          } else {
                            w2 = T(0);
                            e2 = T(0);
                            s2 = r2;
                          }
                        while (0);
                      y2 = T(z2 + e2);
                      f2 = u2;
                      u2 = T(u2 + y2);
                      if (r2 >>> 0 < s2 >>> 0) {
                        x2 = T(f2 + w2);
                        q2 = r2;
                        do {
                          r2 = c[(c[Ha2 >> 2] | 0) + (q2 << 2) >> 2] | 0;
                          i:
                            do
                              if ((c[r2 + 36 >> 2] | 0) != 1 ? (c[r2 + 24 >> 2] | 0) == 0 : 0)
                                switch (Je(b2, r2) | 0) {
                                  case 1: {
                                    Ma2 = T(f2 + T(me(r2, Ka2, Ea2)));
                                    g[r2 + 400 + (c[B2 >> 2] << 2) >> 2] = Ma2;
                                    break i;
                                  }
                                  case 3: {
                                    Ma2 = T(T(u2 - T(ne(r2, Ka2, Ea2))) - T(g[r2 + 908 + (c[C2 >> 2] << 2) >> 2]));
                                    g[r2 + 400 + (c[B2 >> 2] << 2) >> 2] = Ma2;
                                    break i;
                                  }
                                  case 2: {
                                    Ma2 = T(f2 + T(T(y2 - T(g[r2 + 908 + (c[C2 >> 2] << 2) >> 2])) * T(0.5)));
                                    g[r2 + 400 + (c[B2 >> 2] << 2) >> 2] = Ma2;
                                    break i;
                                  }
                                  case 4: {
                                    Ma2 = T(f2 + T(me(r2, Ka2, Ea2)));
                                    g[r2 + 400 + (c[B2 >> 2] << 2) >> 2] = Ma2;
                                    if (ae(r2, Ka2, qa2) | 0)
                                      break i;
                                    if (Fa2) {
                                      v2 = T(g[r2 + 908 >> 2]);
                                      e2 = T(v2 + T(Ud(r2, Ja2, Ea2)));
                                      w2 = y2;
                                    } else {
                                      w2 = T(g[r2 + 912 >> 2]);
                                      w2 = T(w2 + T(Ud(r2, Ka2, Ea2)));
                                      e2 = y2;
                                      v2 = T(g[r2 + 908 >> 2]);
                                    }
                                    if (Ld(e2, v2) | 0 ? Ld(w2, T(g[r2 + 912 >> 2])) | 0 : 0)
                                      break i;
                                    Td(r2, e2, w2, Ga2, 1, 1, Ea2, sa2, 1, 3501, p2) | 0;
                                    break i;
                                  }
                                  case 5: {
                                    g[r2 + 404 >> 2] = T(T(x2 - T(Se(r2))) + T(Oe(r2, 0, qa2)));
                                    break i;
                                  }
                                  default:
                                    break i;
                                }
                            while (0);
                          q2 = q2 + 1 | 0;
                        } while ((q2 | 0) != (s2 | 0));
                      }
                      t2 = t2 + 1 | 0;
                      if ((t2 | 0) == (k2 | 0))
                        break;
                      else
                        r2 = s2;
                    }
                  }
                }
              }
            while (0);
            g[b2 + 908 >> 2] = T(Ie(b2, 2, ta2, m2, m2));
            g[b2 + 912 >> 2] = T(Ie(b2, 0, ra2, n2, m2));
            if ((pa2 | 0) != 0 ? (wa2 = c[b2 + 32 >> 2] | 0, xa2 = (pa2 | 0) == 2, !(xa2 & (wa2 | 0) != 2)) : 0) {
              if (xa2 & (wa2 | 0) == 2) {
                e2 = T(va2 + H2);
                e2 = T(cC(T(eC(e2, T(Te(b2, Ja2, da2, ua2)))), va2));
                X2 = 198;
              }
            } else {
              e2 = T(Ie(b2, Ja2, da2, ua2, m2));
              X2 = 198;
            }
            if ((X2 | 0) == 198)
              g[b2 + 908 + (c[976 + (Ja2 << 2) >> 2] << 2) >> 2] = e2;
            if ((Aa2 | 0) != 0 ? (Ca2 = c[b2 + 32 >> 2] | 0, Da2 = (Aa2 | 0) == 2, !(Da2 & (Ca2 | 0) != 2)) : 0) {
              if (Da2 & (Ca2 | 0) == 2) {
                e2 = T(za2 + qa2);
                e2 = T(cC(T(eC(e2, T(Te(b2, Ka2, T(za2 + oa2), ya2)))), za2));
                X2 = 204;
              }
            } else {
              e2 = T(Ie(b2, Ka2, T(za2 + oa2), ya2, m2));
              X2 = 204;
            }
            if ((X2 | 0) == 204)
              g[b2 + 908 + (c[976 + (Ka2 << 2) >> 2] << 2) >> 2] = e2;
            if (o2) {
              if ((c[Ba2 >> 2] | 0) == 2) {
                r2 = 976 + (Ka2 << 2) | 0;
                s2 = 1040 + (Ka2 << 2) | 0;
                q2 = 0;
                do {
                  t2 = ac(b2, q2) | 0;
                  if (!(c[t2 + 24 >> 2] | 0)) {
                    Na2 = c[r2 >> 2] | 0;
                    Ma2 = T(g[b2 + 908 + (Na2 << 2) >> 2]);
                    Oa2 = t2 + 400 + (c[s2 >> 2] << 2) | 0;
                    Ma2 = T(Ma2 - T(g[Oa2 >> 2]));
                    g[Oa2 >> 2] = T(Ma2 - T(g[t2 + 908 + (Na2 << 2) >> 2]));
                  }
                  q2 = q2 + 1 | 0;
                } while ((q2 | 0) != (Ia2 | 0));
              }
              if (h2 | 0) {
                q2 = Fa2 ? pa2 : i2;
                do {
                  Ue(b2, h2, Ea2, q2, sa2, Ga2, p2);
                  h2 = c[h2 + 960 >> 2] | 0;
                } while ((h2 | 0) != 0);
              }
              q2 = (Ja2 | 2 | 0) == 3;
              r2 = (Ka2 | 2 | 0) == 3;
              if (q2 | r2) {
                h2 = 0;
                do {
                  s2 = c[(c[Ha2 >> 2] | 0) + (h2 << 2) >> 2] | 0;
                  if ((c[s2 + 36 >> 2] | 0) != 1) {
                    if (q2)
                      Ve(b2, s2, Ja2);
                    if (r2)
                      Ve(b2, s2, Ka2);
                  }
                  h2 = h2 + 1 | 0;
                } while ((h2 | 0) != (Ia2 | 0));
              }
            }
          } else
            we(b2, e2, f2, i2, k2, m2, n2);
        while (0);
        l = La2;
        return;
      }
      function Zd(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        var c2 = 0;
        Vb(a2, b2 >= T(0), 3147);
        c2 = b2 == T(0);
        g[a2 + 4 >> 2] = c2 ? T(0) : b2;
        return;
      }
      function _d(b2, d2, e2, f2) {
        b2 = b2 | 0;
        d2 = T(d2);
        e2 = T(e2);
        f2 = f2 | 0;
        var h2 = ib, i2 = ib, j2 = 0, k2 = 0, l2 = 0;
        c[2278] = (c[2278] | 0) + 1;
        $d(b2);
        if (!(ae(b2, 2, d2) | 0)) {
          h2 = T(be(b2 + 380 | 0, d2));
          if (!(h2 >= T(0))) {
            l2 = ((Sb(d2) | 0) ^ 1) & 1;
            h2 = d2;
          } else
            l2 = 2;
        } else {
          h2 = T(be(c[b2 + 992 >> 2] | 0, d2));
          l2 = 1;
          h2 = T(h2 + T(Ud(b2, 2, d2)));
        }
        if (!(ae(b2, 0, e2) | 0)) {
          i2 = T(be(b2 + 388 | 0, e2));
          if (!(i2 >= T(0))) {
            k2 = ((Sb(e2) | 0) ^ 1) & 1;
            i2 = e2;
          } else
            k2 = 2;
        } else {
          i2 = T(be(c[b2 + 996 >> 2] | 0, e2));
          k2 = 1;
          i2 = T(i2 + T(Ud(b2, 0, d2)));
        }
        j2 = b2 + 976 | 0;
        if (Td(b2, h2, i2, f2, l2, k2, d2, e2, 1, 3189, c[j2 >> 2] | 0) | 0 ? (ce(b2, c[b2 + 496 >> 2] | 0, d2, e2, d2), de(b2, T(g[(c[j2 >> 2] | 0) + 4 >> 2]), T(0), T(0)), a[11696] | 0) : 0)
          Md(b2, 7);
        return;
      }
      function $d(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        h2 = i2 + 24 | 0;
        g2 = i2 + 16 | 0;
        e2 = i2 + 8 | 0;
        f2 = i2;
        d2 = 0;
        do {
          b2 = a2 + 380 + (d2 << 3) | 0;
          if (!((c[a2 + 380 + (d2 << 3) + 4 >> 2] | 0) != 0 ? (j2 = b2, k2 = c[j2 + 4 >> 2] | 0, m2 = e2, c[m2 >> 2] = c[j2 >> 2], c[m2 + 4 >> 2] = k2, m2 = a2 + 364 + (d2 << 3) | 0, k2 = c[m2 + 4 >> 2] | 0, j2 = f2, c[j2 >> 2] = c[m2 >> 2], c[j2 + 4 >> 2] = k2, c[g2 >> 2] = c[e2 >> 2], c[g2 + 4 >> 2] = c[e2 + 4 >> 2], c[h2 >> 2] = c[f2 >> 2], c[h2 + 4 >> 2] = c[f2 + 4 >> 2], Kd(g2, h2) | 0) : 0))
            b2 = a2 + 348 + (d2 << 3) | 0;
          c[a2 + 992 + (d2 << 2) >> 2] = b2;
          d2 = d2 + 1 | 0;
        } while ((d2 | 0) != 2);
        l = i2;
        return;
      }
      function ae(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = 0;
        a2 = c[a2 + 992 + (c[976 + (b2 << 2) >> 2] << 2) >> 2] | 0;
        switch (c[a2 + 4 >> 2] | 0) {
          case 0:
          case 3: {
            a2 = 0;
            break;
          }
          case 1: {
            if (T(g[a2 >> 2]) < T(0))
              a2 = 0;
            else
              e2 = 5;
            break;
          }
          case 2: {
            if (T(g[a2 >> 2]) < T(0))
              a2 = 0;
            else
              a2 = (Sb(d2) | 0) ^ 1;
            break;
          }
          default:
            e2 = 5;
        }
        if ((e2 | 0) == 5)
          a2 = 1;
        return a2 | 0;
      }
      function be(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        switch (c[a2 + 4 >> 2] | 0) {
          case 2: {
            b2 = T(T(T(g[a2 >> 2]) * b2) / T(100));
            break;
          }
          case 1: {
            b2 = T(g[a2 >> 2]);
            break;
          }
          default:
            b2 = T(t);
        }
        return T(b2);
      }
      function ce(a2, b2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        e2 = T(e2);
        f2 = T(f2);
        var h2 = 0, i2 = ib;
        b2 = c[a2 + 944 >> 2] | 0 ? b2 : 1;
        h2 = re(c[a2 + 4 >> 2] | 0, b2) | 0;
        b2 = ze(h2, b2) | 0;
        d2 = T($e(a2, h2, d2));
        e2 = T($e(a2, b2, e2));
        i2 = T(d2 + T(me(a2, h2, f2)));
        g[a2 + 400 + (c[1040 + (h2 << 2) >> 2] << 2) >> 2] = i2;
        d2 = T(d2 + T(ne(a2, h2, f2)));
        g[a2 + 400 + (c[1e3 + (h2 << 2) >> 2] << 2) >> 2] = d2;
        d2 = T(e2 + T(me(a2, b2, f2)));
        g[a2 + 400 + (c[1040 + (b2 << 2) >> 2] << 2) >> 2] = d2;
        f2 = T(e2 + T(ne(a2, b2, f2)));
        g[a2 + 400 + (c[1e3 + (b2 << 2) >> 2] << 2) >> 2] = f2;
        return;
      }
      function de(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = T(b2);
        d2 = T(d2);
        e2 = T(e2);
        var f2 = 0, h2 = 0, i2 = ib, j2 = ib, k2 = 0, l2 = 0, m2 = ib, n2 = 0, o2 = ib, p2 = ib, q2 = ib, r2 = ib;
        if (!(b2 == T(0))) {
          f2 = a2 + 400 | 0;
          r2 = T(g[f2 >> 2]);
          h2 = a2 + 404 | 0;
          q2 = T(g[h2 >> 2]);
          n2 = a2 + 416 | 0;
          p2 = T(g[n2 >> 2]);
          l2 = a2 + 420 | 0;
          i2 = T(g[l2 >> 2]);
          o2 = T(r2 + d2);
          m2 = T(q2 + e2);
          e2 = T(o2 + p2);
          j2 = T(m2 + i2);
          k2 = (c[a2 + 988 >> 2] | 0) == 1;
          g[f2 >> 2] = T(Od(r2, b2, 0, k2));
          g[h2 >> 2] = T(Od(q2, b2, 0, k2));
          d2 = T(gC(T(p2 * b2), T(1)));
          if (Ld(d2, T(0)) | 0)
            h2 = 0;
          else
            h2 = (Ld(d2, T(1)) | 0) ^ 1;
          d2 = T(gC(T(i2 * b2), T(1)));
          if (Ld(d2, T(0)) | 0)
            f2 = 0;
          else
            f2 = (Ld(d2, T(1)) | 0) ^ 1;
          r2 = T(Od(e2, b2, k2 & h2, k2 & (h2 ^ 1)));
          g[n2 >> 2] = T(r2 - T(Od(o2, b2, 0, k2)));
          r2 = T(Od(j2, b2, k2 & f2, k2 & (f2 ^ 1)));
          g[l2 >> 2] = T(r2 - T(Od(m2, b2, 0, k2)));
          h2 = (c[a2 + 952 >> 2] | 0) - (c[a2 + 948 >> 2] | 0) >> 2;
          if (h2 | 0) {
            f2 = 0;
            do {
              de(ac(a2, f2) | 0, b2, o2, m2);
              f2 = f2 + 1 | 0;
            } while ((f2 | 0) != (h2 | 0));
          }
        }
        return;
      }
      function ee(a2, b2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        switch (d2 | 0) {
          case 5:
          case 0: {
            a2 = CB(c[489] | 0, e2, f2) | 0;
            break;
          }
          default:
            a2 = iC(e2, f2) | 0;
        }
        return a2 | 0;
      }
      function fe(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        f2 = l;
        l = l + 16 | 0;
        g2 = f2;
        c[g2 >> 2] = e2;
        ge(a2, 0, b2, d2, g2);
        l = f2;
        return;
      }
      function ge(a2, b2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        a2 = a2 | 0 ? a2 : 956;
        Bb[c[a2 + 8 >> 2] & 1](a2, b2, d2, e2, f2) | 0;
        if ((d2 | 0) == 5)
          Ta();
        else
          return;
      }
      function he(b2, c2, d2) {
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        a[b2 + c2 >> 0] = d2 & 1;
        return;
      }
      function ie(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        c[a2 >> 2] = 0;
        c[a2 + 4 >> 2] = 0;
        c[a2 + 8 >> 2] = 0;
        d2 = b2 + 4 | 0;
        e2 = (c[d2 >> 2] | 0) - (c[b2 >> 2] | 0) >> 2;
        if (e2 | 0) {
          je(a2, e2);
          ke(a2, c[b2 >> 2] | 0, c[d2 >> 2] | 0, e2);
        }
        return;
      }
      function je(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        if ((le(a2) | 0) >>> 0 < b2 >>> 0)
          jC(a2);
        if (b2 >>> 0 > 1073741823)
          Ta();
        else {
          d2 = qC(b2 << 2) | 0;
          c[a2 + 4 >> 2] = d2;
          c[a2 >> 2] = d2;
          c[a2 + 8 >> 2] = d2 + (b2 << 2);
          return;
        }
      }
      function ke(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        e2 = a2 + 4 | 0;
        a2 = d2 - b2 | 0;
        if ((a2 | 0) > 0) {
          BC(c[e2 >> 2] | 0, b2 | 0, a2 | 0) | 0;
          c[e2 >> 2] = (c[e2 >> 2] | 0) + (a2 >>> 2 << 2);
        }
        return;
      }
      function le(a2) {
        a2 = a2 | 0;
        return 1073741823;
      }
      function me(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        if (oe(b2) | 0 ? (c[a2 + 96 >> 2] | 0) != 0 : 0)
          a2 = a2 + 92 | 0;
        else
          a2 = Tb(a2 + 60 | 0, c[1040 + (b2 << 2) >> 2] | 0, 992) | 0;
        return T(pe(a2, d2));
      }
      function ne(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        if (oe(b2) | 0 ? (c[a2 + 104 >> 2] | 0) != 0 : 0)
          a2 = a2 + 100 | 0;
        else
          a2 = Tb(a2 + 60 | 0, c[1e3 + (b2 << 2) >> 2] | 0, 992) | 0;
        return T(pe(a2, d2));
      }
      function oe(a2) {
        a2 = a2 | 0;
        return (a2 | 1 | 0) == 3 | 0;
      }
      function pe(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        if ((c[a2 + 4 >> 2] | 0) == 3)
          b2 = T(0);
        else
          b2 = T(be(a2, b2));
        return T(b2);
      }
      function qe(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        a2 = c[a2 >> 2] | 0;
        return ((a2 | 0) == 0 ? (b2 | 0) > 1 ? b2 : 1 : a2) | 0;
      }
      function re(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c2 = 0;
        a:
          do
            if ((b2 | 0) == 2) {
              switch (a2 | 0) {
                case 2: {
                  a2 = 3;
                  break a;
                }
                case 3:
                  break;
                default: {
                  c2 = 4;
                  break a;
                }
              }
              a2 = 2;
            } else
              c2 = 4;
          while (0);
        return a2 | 0;
      }
      function se(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = ib;
        if (!((oe(b2) | 0 ? (c[a2 + 312 >> 2] | 0) != 0 : 0) ? (d2 = T(g[a2 + 308 >> 2]), d2 >= T(0)) : 0))
          d2 = T(cC(T(g[(Tb(a2 + 276 | 0, c[1040 + (b2 << 2) >> 2] | 0, 992) | 0) >> 2]), T(0)));
        return T(d2);
      }
      function te(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = ib;
        if (!((oe(b2) | 0 ? (c[a2 + 320 >> 2] | 0) != 0 : 0) ? (d2 = T(g[a2 + 316 >> 2]), d2 >= T(0)) : 0))
          d2 = T(cC(T(g[(Tb(a2 + 276 | 0, c[1e3 + (b2 << 2) >> 2] | 0, 992) | 0) >> 2]), T(0)));
        return T(d2);
      }
      function ue(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = ib;
        if (!((oe(b2) | 0 ? (c[a2 + 240 >> 2] | 0) != 0 : 0) ? (e2 = T(be(a2 + 236 | 0, d2)), e2 >= T(0)) : 0))
          e2 = T(cC(T(be(Tb(a2 + 204 | 0, c[1040 + (b2 << 2) >> 2] | 0, 992) | 0, d2)), T(0)));
        return T(e2);
      }
      function ve(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = ib;
        if (!((oe(b2) | 0 ? (c[a2 + 248 >> 2] | 0) != 0 : 0) ? (e2 = T(be(a2 + 244 | 0, d2)), e2 >= T(0)) : 0))
          e2 = T(cC(T(be(Tb(a2 + 204 | 0, c[1e3 + (b2 << 2) >> 2] | 0, 992) | 0, d2)), T(0)));
        return T(e2);
      }
      function we(a2, b2, d2, e2, f2, h2, i2) {
        a2 = a2 | 0;
        b2 = T(b2);
        d2 = T(d2);
        e2 = e2 | 0;
        f2 = f2 | 0;
        h2 = T(h2);
        i2 = T(i2);
        var j2 = ib, k2 = ib, m2 = ib, n2 = ib, o2 = ib, p2 = ib, q2 = 0, r2 = 0, s2 = 0;
        s2 = l;
        l = l + 16 | 0;
        q2 = s2;
        r2 = a2 + 964 | 0;
        ec(a2, (c[r2 >> 2] | 0) != 0, 3519);
        j2 = T(Ce(a2, 2, b2));
        k2 = T(Ce(a2, 0, b2));
        m2 = T(Ud(a2, 2, b2));
        n2 = T(Ud(a2, 0, b2));
        if (Sb(b2) | 0)
          o2 = b2;
        else
          o2 = T(cC(T(0), T(T(b2 - m2) - j2)));
        if (Sb(d2) | 0)
          p2 = d2;
        else
          p2 = T(cC(T(0), T(T(d2 - n2) - k2)));
        if ((e2 | 0) == 1 & (f2 | 0) == 1) {
          g[a2 + 908 >> 2] = T(Ie(a2, 2, T(b2 - m2), h2, h2));
          b2 = T(Ie(a2, 0, T(d2 - n2), i2, h2));
        } else {
          Db[c[r2 >> 2] & 1](q2, a2, o2, e2, p2, f2);
          o2 = T(j2 + T(g[q2 >> 2]));
          p2 = T(b2 - m2);
          g[a2 + 908 >> 2] = T(Ie(a2, 2, (e2 | 2 | 0) == 2 ? o2 : p2, h2, h2));
          p2 = T(k2 + T(g[q2 + 4 >> 2]));
          b2 = T(d2 - n2);
          b2 = T(Ie(a2, 0, (f2 | 2 | 0) == 2 ? p2 : b2, i2, h2));
        }
        g[a2 + 912 >> 2] = b2;
        l = s2;
        return;
      }
      function xe(a2, b2, c2, d2, e2, f2, h2) {
        a2 = a2 | 0;
        b2 = T(b2);
        c2 = T(c2);
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = T(f2);
        h2 = T(h2);
        var i2 = ib, j2 = ib, k2 = ib, l2 = ib;
        k2 = T(Ce(a2, 2, f2));
        i2 = T(Ce(a2, 0, f2));
        l2 = T(Ud(a2, 2, f2));
        j2 = T(Ud(a2, 0, f2));
        b2 = T(b2 - l2);
        g[a2 + 908 >> 2] = T(Ie(a2, 2, (d2 | 2 | 0) == 2 ? k2 : b2, f2, f2));
        c2 = T(c2 - j2);
        g[a2 + 912 >> 2] = T(Ie(a2, 0, (e2 | 2 | 0) == 2 ? i2 : c2, h2, f2));
        return;
      }
      function ye(a2, b2, c2, d2, e2, f2, h2) {
        a2 = a2 | 0;
        b2 = T(b2);
        c2 = T(c2);
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = T(f2);
        h2 = T(h2);
        var i2 = 0, j2 = ib, k2 = ib;
        i2 = (d2 | 0) == 2;
        if ((!(b2 <= T(0) & i2) ? !(c2 <= T(0) & (e2 | 0) == 2) : 0) ? !((d2 | 0) == 1 & (e2 | 0) == 1) : 0)
          a2 = 0;
        else {
          j2 = T(Ud(a2, 0, f2));
          k2 = T(Ud(a2, 2, f2));
          i2 = b2 < T(0) & i2 | (Sb(b2) | 0);
          b2 = T(b2 - k2);
          g[a2 + 908 >> 2] = T(Ie(a2, 2, i2 ? T(0) : b2, f2, f2));
          b2 = T(c2 - j2);
          i2 = c2 < T(0) & (e2 | 0) == 2 | (Sb(c2) | 0);
          g[a2 + 912 >> 2] = T(Ie(a2, 0, i2 ? T(0) : b2, h2, f2));
          a2 = 1;
        }
        return a2 | 0;
      }
      function ze(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (We(a2) | 0)
          a2 = re(2, b2) | 0;
        else
          a2 = 0;
        return a2 | 0;
      }
      function Ae(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        c2 = T(ue(a2, b2, c2));
        return T(c2 + T(se(a2, b2)));
      }
      function Be(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        c2 = T(ve(a2, b2, c2));
        return T(c2 + T(te(a2, b2)));
      }
      function Ce(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        var d2 = ib;
        d2 = T(Ae(a2, b2, c2));
        return T(d2 + T(Be(a2, b2, c2)));
      }
      function De(a2) {
        a2 = a2 | 0;
        if (!(c[a2 + 24 >> 2] | 0)) {
          if (T(Ee(a2)) != T(0))
            a2 = 1;
          else
            a2 = T(Fe(a2)) != T(0);
        } else
          a2 = 0;
        return a2 | 0;
      }
      function Ee(a2) {
        a2 = a2 | 0;
        var b2 = ib;
        if (c[a2 + 944 >> 2] | 0) {
          b2 = T(g[a2 + 44 >> 2]);
          if (Sb(b2) | 0) {
            b2 = T(g[a2 + 40 >> 2]);
            a2 = b2 > T(0) & ((Sb(b2) | 0) ^ 1);
            return T(a2 ? b2 : T(0));
          }
        } else
          b2 = T(0);
        return T(b2);
      }
      function Fe(b2) {
        b2 = b2 | 0;
        var d2 = ib, e2 = 0, f2 = ib;
        do
          if (c[b2 + 944 >> 2] | 0) {
            d2 = T(g[b2 + 48 >> 2]);
            if (Sb(d2) | 0) {
              e2 = a[(c[b2 + 976 >> 2] | 0) + 2 >> 0] | 0;
              if (e2 << 24 >> 24 == 0 ? (f2 = T(g[b2 + 40 >> 2]), f2 < T(0) & ((Sb(f2) | 0) ^ 1)) : 0) {
                d2 = T(-f2);
                break;
              }
              d2 = e2 << 24 >> 24 ? T(1) : T(0);
            }
          } else
            d2 = T(0);
        while (0);
        return T(d2);
      }
      function Ge(b2) {
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        yC(b2 + 400 | 0, 0, 540) | 0;
        a[b2 + 985 >> 0] = 1;
        lc(b2);
        e2 = $b(b2) | 0;
        if (e2 | 0) {
          d2 = b2 + 948 | 0;
          b2 = 0;
          do {
            Ge(c[(c[d2 >> 2] | 0) + (b2 << 2) >> 2] | 0);
            b2 = b2 + 1 | 0;
          } while ((b2 | 0) != (e2 | 0));
        }
        return;
      }
      function He(a2, b2, d2, e2, f2, h2, i2, j2, k2, m2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        e2 = e2 | 0;
        f2 = T(f2);
        h2 = T(h2);
        i2 = T(i2);
        j2 = j2 | 0;
        k2 = k2 | 0;
        m2 = m2 | 0;
        var n2 = 0, o2 = ib, p2 = 0, q2 = 0, r2 = ib, s2 = ib, u2 = 0, v2 = ib, w2 = 0, x2 = ib, y2 = 0, z2 = 0, A2 = 0, B2 = 0, C2 = 0, D2 = 0, E2 = 0, F2 = 0, G2 = 0, H2 = 0;
        G2 = l;
        l = l + 16 | 0;
        A2 = G2 + 12 | 0;
        B2 = G2 + 8 | 0;
        C2 = G2 + 4 | 0;
        D2 = G2;
        F2 = re(c[a2 + 4 >> 2] | 0, k2) | 0;
        y2 = oe(F2) | 0;
        o2 = T(be(Xe(b2) | 0, y2 ? h2 : i2));
        z2 = ae(b2, 2, h2) | 0;
        E2 = ae(b2, 0, i2) | 0;
        do
          if (!(Sb(o2) | 0) ? !(Sb(y2 ? d2 : f2) | 0) : 0) {
            n2 = b2 + 504 | 0;
            if (!(Sb(T(g[n2 >> 2])) | 0)) {
              if (!(Ye(c[b2 + 976 >> 2] | 0, 0) | 0))
                break;
              if ((c[b2 + 500 >> 2] | 0) == (c[2278] | 0))
                break;
            }
            g[n2 >> 2] = T(cC(o2, T(Ce(b2, F2, h2))));
          } else
            p2 = 7;
        while (0);
        do
          if ((p2 | 0) == 7) {
            w2 = y2 ^ 1;
            if (!(w2 | z2 ^ 1)) {
              i2 = T(be(c[b2 + 992 >> 2] | 0, h2));
              g[b2 + 504 >> 2] = T(cC(i2, T(Ce(b2, 2, h2))));
              break;
            }
            if (!(y2 | E2 ^ 1)) {
              i2 = T(be(c[b2 + 996 >> 2] | 0, i2));
              g[b2 + 504 >> 2] = T(cC(i2, T(Ce(b2, 0, h2))));
              break;
            }
            g[A2 >> 2] = T(t);
            g[B2 >> 2] = T(t);
            c[C2 >> 2] = 0;
            c[D2 >> 2] = 0;
            v2 = T(Ud(b2, 2, h2));
            x2 = T(Ud(b2, 0, h2));
            if (z2) {
              r2 = T(v2 + T(be(c[b2 + 992 >> 2] | 0, h2)));
              g[A2 >> 2] = r2;
              c[C2 >> 2] = 1;
              q2 = 1;
            } else {
              q2 = 0;
              r2 = T(t);
            }
            if (E2) {
              o2 = T(x2 + T(be(c[b2 + 996 >> 2] | 0, i2)));
              g[B2 >> 2] = o2;
              c[D2 >> 2] = 1;
              n2 = 1;
            } else {
              n2 = 0;
              o2 = T(t);
            }
            p2 = c[a2 + 32 >> 2] | 0;
            if (!(y2 & (p2 | 0) == 2)) {
              if (Sb(r2) | 0 ? !(Sb(d2) | 0) : 0) {
                g[A2 >> 2] = d2;
                c[C2 >> 2] = 2;
                q2 = 2;
                r2 = d2;
              }
            } else
              p2 = 2;
            if ((!((p2 | 0) == 2 & w2) ? Sb(o2) | 0 : 0) ? !(Sb(f2) | 0) : 0) {
              g[B2 >> 2] = f2;
              c[D2 >> 2] = 2;
              n2 = 2;
              o2 = f2;
            }
            s2 = T(g[b2 + 396 >> 2]);
            u2 = Sb(s2) | 0;
            do
              if (!u2) {
                if ((q2 | 0) == 1 & w2) {
                  g[B2 >> 2] = T(T(r2 - v2) / s2);
                  c[D2 >> 2] = 1;
                  n2 = 1;
                  p2 = 1;
                  break;
                }
                if (y2 & (n2 | 0) == 1) {
                  g[A2 >> 2] = T(s2 * T(o2 - x2));
                  c[C2 >> 2] = 1;
                  n2 = 1;
                  p2 = 1;
                } else
                  p2 = q2;
              } else
                p2 = q2;
            while (0);
            H2 = Sb(d2) | 0;
            q2 = (Je(a2, b2) | 0) != 4;
            if (!(y2 | z2 | ((e2 | 0) != 1 | H2) | (q2 | (p2 | 0) == 1)) ? (g[A2 >> 2] = d2, c[C2 >> 2] = 1, !u2) : 0) {
              g[B2 >> 2] = T(T(d2 - v2) / s2);
              c[D2 >> 2] = 1;
              n2 = 1;
            }
            if (!(E2 | w2 | ((j2 | 0) != 1 | (Sb(f2) | 0)) | (q2 | (n2 | 0) == 1)) ? (g[B2 >> 2] = f2, c[D2 >> 2] = 1, !u2) : 0) {
              g[A2 >> 2] = T(s2 * T(f2 - x2));
              c[C2 >> 2] = 1;
            }
            Me(b2, 2, h2, h2, C2, A2);
            Me(b2, 0, i2, h2, D2, B2);
            d2 = T(g[A2 >> 2]);
            f2 = T(g[B2 >> 2]);
            Td(b2, d2, f2, k2, c[C2 >> 2] | 0, c[D2 >> 2] | 0, h2, i2, 0, 3565, m2) | 0;
            i2 = T(g[b2 + 908 + (c[976 + (F2 << 2) >> 2] << 2) >> 2]);
            g[b2 + 504 >> 2] = T(cC(i2, T(Ce(b2, F2, h2))));
          }
        while (0);
        c[b2 + 500 >> 2] = c[2278];
        l = G2;
        return;
      }
      function Ie(a2, b2, c2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        d2 = T(d2);
        e2 = T(e2);
        d2 = T(Te(a2, b2, c2, d2));
        return T(cC(d2, T(Ce(a2, b2, e2))));
      }
      function Je(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        b2 = b2 + 20 | 0;
        b2 = c[((c[b2 >> 2] | 0) == 0 ? a2 + 16 | 0 : b2) >> 2] | 0;
        if ((b2 | 0) == 5 ? We(c[a2 + 4 >> 2] | 0) | 0 : 0)
          b2 = 1;
        return b2 | 0;
      }
      function Ke(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (oe(b2) | 0 ? (c[a2 + 96 >> 2] | 0) != 0 : 0)
          b2 = 4;
        else
          b2 = c[1040 + (b2 << 2) >> 2] | 0;
        return a2 + 60 + (b2 << 3) | 0;
      }
      function Le(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (oe(b2) | 0 ? (c[a2 + 104 >> 2] | 0) != 0 : 0)
          b2 = 5;
        else
          b2 = c[1e3 + (b2 << 2) >> 2] | 0;
        return a2 + 60 + (b2 << 3) | 0;
      }
      function Me(a2, b2, d2, e2, f2, h2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        e2 = T(e2);
        f2 = f2 | 0;
        h2 = h2 | 0;
        d2 = T(be(a2 + 380 + (c[976 + (b2 << 2) >> 2] << 3) | 0, d2));
        d2 = T(d2 + T(Ud(a2, b2, e2)));
        switch (c[f2 >> 2] | 0) {
          case 2:
          case 1: {
            f2 = Sb(d2) | 0;
            e2 = T(g[h2 >> 2]);
            g[h2 >> 2] = f2 | e2 < d2 ? e2 : d2;
            break;
          }
          case 0: {
            if (!(Sb(d2) | 0)) {
              c[f2 >> 2] = 2;
              g[h2 >> 2] = d2;
            }
            break;
          }
          default: {
          }
        }
        return;
      }
      function Ne(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        a2 = a2 + 132 | 0;
        if (oe(b2) | 0 ? (c[(Tb(a2, 4, 948) | 0) + 4 >> 2] | 0) != 0 : 0)
          a2 = 1;
        else
          a2 = (c[(Tb(a2, c[1040 + (b2 << 2) >> 2] | 0, 948) | 0) + 4 >> 2] | 0) != 0;
        return a2 | 0;
      }
      function Oe(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = 0, f2 = 0;
        a2 = a2 + 132 | 0;
        if (oe(b2) | 0 ? (e2 = Tb(a2, 4, 948) | 0, (c[e2 + 4 >> 2] | 0) != 0) : 0)
          f2 = 4;
        else {
          e2 = Tb(a2, c[1040 + (b2 << 2) >> 2] | 0, 948) | 0;
          if (!(c[e2 + 4 >> 2] | 0))
            d2 = T(0);
          else
            f2 = 4;
        }
        if ((f2 | 0) == 4)
          d2 = T(be(e2, d2));
        return T(d2);
      }
      function Pe(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = ib;
        e2 = T(g[a2 + 908 + (c[976 + (b2 << 2) >> 2] << 2) >> 2]);
        e2 = T(e2 + T(me(a2, b2, d2)));
        return T(e2 + T(ne(a2, b2, d2)));
      }
      function Qe(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        a:
          do
            if (!(We(c[a2 + 4 >> 2] | 0) | 0)) {
              if ((c[a2 + 16 >> 2] | 0) != 5) {
                d2 = $b(a2) | 0;
                if (!d2)
                  b2 = 0;
                else {
                  b2 = 0;
                  while (1) {
                    e2 = ac(a2, b2) | 0;
                    if ((c[e2 + 24 >> 2] | 0) == 0 ? (c[e2 + 20 >> 2] | 0) == 5 : 0) {
                      b2 = 1;
                      break a;
                    }
                    b2 = b2 + 1 | 0;
                    if (b2 >>> 0 >= d2 >>> 0) {
                      b2 = 0;
                      break;
                    }
                  }
                }
              } else
                b2 = 1;
            } else
              b2 = 0;
          while (0);
        return b2 | 0;
      }
      function Re(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = ib;
        d2 = T(g[a2 + 908 + (c[976 + (b2 << 2) >> 2] << 2) >> 2]);
        return d2 >= T(0) & ((Sb(d2) | 0) ^ 1) | 0;
      }
      function Se(a2) {
        a2 = a2 | 0;
        var b2 = ib, d2 = 0, e2 = 0, f2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = ib;
        d2 = c[a2 + 968 >> 2] | 0;
        if (!d2) {
          h2 = $b(a2) | 0;
          do
            if (h2 | 0) {
              d2 = 0;
              f2 = 0;
              while (1) {
                e2 = ac(a2, f2) | 0;
                if (c[e2 + 940 >> 2] | 0) {
                  i2 = 8;
                  break;
                }
                if ((c[e2 + 24 >> 2] | 0) != 1) {
                  j2 = (Je(a2, e2) | 0) == 5;
                  if (j2) {
                    d2 = e2;
                    break;
                  } else
                    d2 = (d2 | 0) == 0 ? e2 : d2;
                }
                f2 = f2 + 1 | 0;
                if (f2 >>> 0 >= h2 >>> 0) {
                  i2 = 8;
                  break;
                }
              }
              if ((i2 | 0) == 8) {
                if (!d2)
                  break;
              }
              b2 = T(Se(d2));
              return T(b2 + T(g[d2 + 404 >> 2]));
            }
          while (0);
          b2 = T(g[a2 + 912 >> 2]);
        } else {
          k2 = T(g[a2 + 908 >> 2]);
          b2 = T(g[a2 + 912 >> 2]);
          b2 = T(mb[d2 & 0](a2, k2, b2));
          ec(a2, (Sb(b2) | 0) ^ 1, 3573);
        }
        return T(b2);
      }
      function Te(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        d2 = T(d2);
        var e2 = ib, f2 = 0;
        if (!(We(b2) | 0)) {
          if (oe(b2) | 0) {
            b2 = 0;
            f2 = 3;
          } else {
            d2 = T(t);
            e2 = T(t);
          }
        } else {
          b2 = 1;
          f2 = 3;
        }
        if ((f2 | 0) == 3) {
          e2 = T(be(a2 + 364 + (b2 << 3) | 0, d2));
          d2 = T(be(a2 + 380 + (b2 << 3) | 0, d2));
        }
        f2 = d2 < c2 & (d2 >= T(0) & ((Sb(d2) | 0) ^ 1));
        c2 = f2 ? d2 : c2;
        f2 = e2 >= T(0) & ((Sb(e2) | 0) ^ 1) & c2 < e2;
        return T(f2 ? e2 : c2);
      }
      function Ue(a2, b2, d2, e2, f2, h2, i2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        e2 = e2 | 0;
        f2 = T(f2);
        h2 = h2 | 0;
        i2 = i2 | 0;
        var j2 = ib, k2 = ib, l2 = 0, m2 = 0, n2 = ib, o2 = ib, p2 = ib, q2 = 0, r2 = 0, s2 = 0, u2 = 0, v2 = ib, w2 = 0;
        s2 = re(c[a2 + 4 >> 2] | 0, h2) | 0;
        q2 = ze(s2, h2) | 0;
        r2 = oe(s2) | 0;
        n2 = T(Ud(b2, 2, d2));
        o2 = T(Ud(b2, 0, d2));
        if (!(ae(b2, 2, d2) | 0)) {
          if (Ne(b2, 2) | 0 ? Ze(b2, 2) | 0 : 0) {
            j2 = T(g[a2 + 908 >> 2]);
            k2 = T(se(a2, 2));
            k2 = T(j2 - T(k2 + T(te(a2, 2))));
            j2 = T(Oe(b2, 2, d2));
            j2 = T(Ie(b2, 2, T(k2 - T(j2 + T(_e(b2, 2, d2)))), d2, d2));
          } else
            j2 = T(t);
        } else
          j2 = T(n2 + T(be(c[b2 + 992 >> 2] | 0, d2)));
        if (!(ae(b2, 0, f2) | 0)) {
          if (Ne(b2, 0) | 0 ? Ze(b2, 0) | 0 : 0) {
            k2 = T(g[a2 + 912 >> 2]);
            v2 = T(se(a2, 0));
            v2 = T(k2 - T(v2 + T(te(a2, 0))));
            k2 = T(Oe(b2, 0, f2));
            k2 = T(Ie(b2, 0, T(v2 - T(k2 + T(_e(b2, 0, f2)))), f2, d2));
          } else
            k2 = T(t);
        } else
          k2 = T(o2 + T(be(c[b2 + 996 >> 2] | 0, f2)));
        l2 = Sb(j2) | 0;
        m2 = Sb(k2) | 0;
        do
          if (l2 ^ m2 ? (p2 = T(g[b2 + 396 >> 2]), !(Sb(p2) | 0)) : 0)
            if (l2) {
              j2 = T(n2 + T(T(k2 - o2) * p2));
              break;
            } else {
              v2 = T(o2 + T(T(j2 - n2) / p2));
              k2 = m2 ? v2 : k2;
              break;
            }
        while (0);
        m2 = Sb(j2) | 0;
        l2 = Sb(k2) | 0;
        if (m2 | l2) {
          w2 = (m2 ^ 1) & 1;
          e2 = d2 > T(0) & ((e2 | 0) != 0 & m2);
          j2 = r2 ? j2 : e2 ? d2 : j2;
          Td(b2, j2, k2, h2, r2 ? w2 : e2 ? 2 : w2, m2 & (l2 ^ 1) & 1, j2, k2, 0, 3623, i2) | 0;
          j2 = T(g[b2 + 908 >> 2]);
          j2 = T(j2 + T(Ud(b2, 2, d2)));
          k2 = T(g[b2 + 912 >> 2]);
          k2 = T(k2 + T(Ud(b2, 0, d2)));
        }
        Td(b2, j2, k2, h2, 1, 1, j2, k2, 1, 3635, i2) | 0;
        if (Ze(b2, s2) | 0 ? !(Ne(b2, s2) | 0) : 0) {
          w2 = c[976 + (s2 << 2) >> 2] | 0;
          v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
          v2 = T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2]));
          v2 = T(v2 - T(te(a2, s2)));
          v2 = T(v2 - T(ne(b2, s2, d2)));
          v2 = T(v2 - T(_e(b2, s2, r2 ? d2 : f2)));
          g[b2 + 400 + (c[1040 + (s2 << 2) >> 2] << 2) >> 2] = v2;
        } else
          u2 = 21;
        do
          if ((u2 | 0) == 21) {
            if (!(Ne(b2, s2) | 0) ? (c[a2 + 8 >> 2] | 0) == 1 : 0) {
              w2 = c[976 + (s2 << 2) >> 2] | 0;
              v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
              v2 = T(T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2])) * T(0.5));
              g[b2 + 400 + (c[1040 + (s2 << 2) >> 2] << 2) >> 2] = v2;
              break;
            }
            if (!(Ne(b2, s2) | 0) ? (c[a2 + 8 >> 2] | 0) == 2 : 0) {
              w2 = c[976 + (s2 << 2) >> 2] | 0;
              v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
              v2 = T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2]));
              g[b2 + 400 + (c[1040 + (s2 << 2) >> 2] << 2) >> 2] = v2;
            }
          }
        while (0);
        if (Ze(b2, q2) | 0 ? !(Ne(b2, q2) | 0) : 0) {
          w2 = c[976 + (q2 << 2) >> 2] | 0;
          v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
          v2 = T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2]));
          v2 = T(v2 - T(te(a2, q2)));
          v2 = T(v2 - T(ne(b2, q2, d2)));
          v2 = T(v2 - T(_e(b2, q2, r2 ? f2 : d2)));
          g[b2 + 400 + (c[1040 + (q2 << 2) >> 2] << 2) >> 2] = v2;
        } else
          u2 = 30;
        do
          if ((u2 | 0) == 30 ? !(Ne(b2, q2) | 0) : 0) {
            if ((Je(a2, b2) | 0) == 2) {
              w2 = c[976 + (q2 << 2) >> 2] | 0;
              v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
              v2 = T(T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2])) * T(0.5));
              g[b2 + 400 + (c[1040 + (q2 << 2) >> 2] << 2) >> 2] = v2;
              break;
            }
            w2 = (Je(a2, b2) | 0) == 3;
            if (w2 ^ (c[a2 + 28 >> 2] | 0) == 2) {
              w2 = c[976 + (q2 << 2) >> 2] | 0;
              v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
              v2 = T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2]));
              g[b2 + 400 + (c[1040 + (q2 << 2) >> 2] << 2) >> 2] = v2;
            }
          }
        while (0);
        return;
      }
      function Ve(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = ib, f2 = 0;
        f2 = c[976 + (d2 << 2) >> 2] | 0;
        e2 = T(g[b2 + 908 + (f2 << 2) >> 2]);
        e2 = T(T(g[a2 + 908 + (f2 << 2) >> 2]) - e2);
        e2 = T(e2 - T(g[b2 + 400 + (c[1040 + (d2 << 2) >> 2] << 2) >> 2]));
        g[b2 + 400 + (c[1e3 + (d2 << 2) >> 2] << 2) >> 2] = e2;
        return;
      }
      function We(a2) {
        a2 = a2 | 0;
        return (a2 | 1 | 0) == 1 | 0;
      }
      function Xe(b2) {
        b2 = b2 | 0;
        var d2 = ib;
        switch (c[b2 + 56 >> 2] | 0) {
          case 0:
          case 3: {
            d2 = T(g[b2 + 40 >> 2]);
            if (d2 > T(0) & ((Sb(d2) | 0) ^ 1))
              b2 = a[(c[b2 + 976 >> 2] | 0) + 2 >> 0] | 0 ? 1056 : 992;
            else
              b2 = 1056;
            break;
          }
          default:
            b2 = b2 + 52 | 0;
        }
        return b2 | 0;
      }
      function Ye(b2, c2) {
        b2 = b2 | 0;
        c2 = c2 | 0;
        return (a[b2 + c2 >> 0] | 0) != 0 | 0;
      }
      function Ze(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        a2 = a2 + 132 | 0;
        if (oe(b2) | 0 ? (c[(Tb(a2, 5, 948) | 0) + 4 >> 2] | 0) != 0 : 0)
          a2 = 1;
        else
          a2 = (c[(Tb(a2, c[1e3 + (b2 << 2) >> 2] | 0, 948) | 0) + 4 >> 2] | 0) != 0;
        return a2 | 0;
      }
      function _e(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = T(d2);
        var e2 = 0, f2 = 0;
        a2 = a2 + 132 | 0;
        if (oe(b2) | 0 ? (e2 = Tb(a2, 5, 948) | 0, (c[e2 + 4 >> 2] | 0) != 0) : 0)
          f2 = 4;
        else {
          e2 = Tb(a2, c[1e3 + (b2 << 2) >> 2] | 0, 948) | 0;
          if (!(c[e2 + 4 >> 2] | 0))
            d2 = T(0);
          else
            f2 = 4;
        }
        if ((f2 | 0) == 4)
          d2 = T(be(e2, d2));
        return T(d2);
      }
      function $e(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        if (Ne(a2, b2) | 0)
          c2 = T(Oe(a2, b2, c2));
        else
          c2 = T(-T(_e(a2, b2, c2)));
        return T(c2);
      }
      function af(a2) {
        a2 = T(a2);
        return (g[j >> 2] = a2, c[j >> 2] | 0) | 0;
      }
      function bf(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 1073741823)
              Ta();
            else {
              f2 = qC(b2 << 2) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 2) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 2);
        return;
      }
      function cf(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 2) << 2) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function df(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -4 - b2 | 0) >>> 2) << 2);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function ef(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        h2 = a2 + 4 | 0;
        i2 = c[h2 >> 2] | 0;
        f2 = i2 - e2 | 0;
        g2 = f2 >> 2;
        a2 = b2 + (g2 << 2) | 0;
        if (a2 >>> 0 < d2 >>> 0) {
          e2 = i2;
          do {
            c[e2 >> 2] = c[a2 >> 2];
            a2 = a2 + 4 | 0;
            e2 = (c[h2 >> 2] | 0) + 4 | 0;
            c[h2 >> 2] = e2;
          } while (a2 >>> 0 < d2 >>> 0);
        }
        if (g2 | 0)
          GC(i2 + (0 - g2 << 2) | 0, b2 | 0, f2 | 0) | 0;
        return;
      }
      function ff(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = b2 + 4 | 0;
        j2 = c[i2 >> 2] | 0;
        f2 = c[a2 >> 2] | 0;
        h2 = d2;
        g2 = h2 - f2 | 0;
        e2 = j2 + (0 - (g2 >> 2) << 2) | 0;
        c[i2 >> 2] = e2;
        if ((g2 | 0) > 0)
          BC(e2 | 0, f2 | 0, g2 | 0) | 0;
        f2 = a2 + 4 | 0;
        g2 = b2 + 8 | 0;
        e2 = (c[f2 >> 2] | 0) - h2 | 0;
        if ((e2 | 0) > 0) {
          BC(c[g2 >> 2] | 0, d2 | 0, e2 | 0) | 0;
          c[g2 >> 2] = (c[g2 >> 2] | 0) + (e2 >>> 2 << 2);
        }
        h2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = c[i2 >> 2];
        c[i2 >> 2] = h2;
        h2 = c[f2 >> 2] | 0;
        c[f2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = h2;
        h2 = a2 + 8 | 0;
        d2 = b2 + 12 | 0;
        a2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[d2 >> 2];
        c[d2 >> 2] = a2;
        c[b2 >> 2] = c[i2 >> 2];
        return j2 | 0;
      }
      function gf(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        h2 = c[b2 >> 2] | 0;
        g2 = c[d2 >> 2] | 0;
        if ((h2 | 0) != (g2 | 0)) {
          f2 = a2 + 8 | 0;
          d2 = ((g2 + -4 - h2 | 0) >>> 2) + 1 | 0;
          a2 = h2;
          e2 = c[f2 >> 2] | 0;
          do {
            c[e2 >> 2] = c[a2 >> 2];
            e2 = (c[f2 >> 2] | 0) + 4 | 0;
            c[f2 >> 2] = e2;
            a2 = a2 + 4 | 0;
          } while ((a2 | 0) != (g2 | 0));
          c[b2 >> 2] = h2 + (d2 << 2);
        }
        return;
      }
      function hf() {
        Qb();
        return;
      }
      function jf() {
        var a2 = 0;
        a2 = qC(4) | 0;
        kf(a2);
        return a2 | 0;
      }
      function kf(a2) {
        a2 = a2 | 0;
        c[a2 >> 2] = gc() | 0;
        return;
      }
      function lf(a2) {
        a2 = a2 | 0;
        if (a2 | 0) {
          mf(a2);
          sC(a2);
        }
        return;
      }
      function mf(a2) {
        a2 = a2 | 0;
        ic(c[a2 >> 2] | 0);
        return;
      }
      function nf(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        he(c[a2 >> 2] | 0, b2, d2);
        return;
      }
      function of(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        Zd(c[a2 >> 2] | 0, b2);
        return;
      }
      function pf(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return Ye(c[a2 >> 2] | 0, b2) | 0;
      }
      function qf() {
        var a2 = 0;
        a2 = qC(8) | 0;
        rf(a2, 0);
        return a2 | 0;
      }
      function rf(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (!b2)
          b2 = Wb() | 0;
        else
          b2 = Ub(c[b2 >> 2] | 0) | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = 0;
        vc(b2, a2);
        return;
      }
      function sf(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = qC(8) | 0;
        rf(b2, a2);
        return b2 | 0;
      }
      function tf(a2) {
        a2 = a2 | 0;
        if (a2 | 0) {
          uf(a2);
          sC(a2);
        }
        return;
      }
      function uf(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        Zb(c[a2 >> 2] | 0);
        b2 = a2 + 4 | 0;
        a2 = c[b2 >> 2] | 0;
        c[b2 >> 2] = 0;
        if (a2 | 0) {
          vf(a2);
          sC(a2);
        }
        return;
      }
      function vf(a2) {
        a2 = a2 | 0;
        wf(a2);
        return;
      }
      function wf(a2) {
        a2 = a2 | 0;
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          ab(a2 | 0);
        return;
      }
      function xf(a2) {
        a2 = a2 | 0;
        return wc(a2) | 0;
      }
      function yf(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0;
        d2 = a2 + 4 | 0;
        b2 = c[d2 >> 2] | 0;
        c[d2 >> 2] = 0;
        if (b2 | 0) {
          vf(b2);
          sC(b2);
        }
        dc(c[a2 >> 2] | 0);
        return;
      }
      function zf(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        sc(c[a2 >> 2] | 0, c[b2 >> 2] | 0);
        return;
      }
      function Af(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        Hc(c[a2 >> 2] | 0, b2);
        return;
      }
      function Bf(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        Vc(c[a2 >> 2] | 0, b2, T(d2));
        return;
      }
      function Cf(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        Wc(c[a2 >> 2] | 0, b2, T(d2));
        return;
      }
      function Df(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        Bc(c[a2 >> 2] | 0, b2);
        return;
      }
      function Ef(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        Dc(c[a2 >> 2] | 0, b2);
        return;
      }
      function Ff(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        Fc(c[a2 >> 2] | 0, b2);
        return;
      }
      function Gf(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        xc(c[a2 >> 2] | 0, b2);
        return;
      }
      function Hf(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        Jc(c[a2 >> 2] | 0, b2);
        return;
      }
      function If(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        zc(c[a2 >> 2] | 0, b2);
        return;
      }
      function Jf(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        Yc(c[a2 >> 2] | 0, b2, T(d2));
        return;
      }
      function Kf(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        Zc(c[a2 >> 2] | 0, b2, T(d2));
        return;
      }
      function Lf(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        $c(c[a2 >> 2] | 0, b2);
        return;
      }
      function Mf(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        Lc(c[a2 >> 2] | 0, b2);
        return;
      }
      function Nf(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        Nc(c[a2 >> 2] | 0, b2);
        return;
      }
      function Of(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        Pc(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function Pf(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        Sc(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function Qf(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        Tc(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function Rf(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        Qc(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function Sf(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        Rc(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function Tf(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        fd(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function Uf(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        gd(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function Vf(a2) {
        a2 = a2 | 0;
        hd(c[a2 >> 2] | 0);
        return;
      }
      function Wf(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        jd(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function Xf(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        kd(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function Yf(a2) {
        a2 = a2 | 0;
        ld(c[a2 >> 2] | 0);
        return;
      }
      function Zf(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        nd(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function _f(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        od(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function $f(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        qd(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function ag(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        rd(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function bg(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        td(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function cg(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        ud(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function dg(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        wd(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function eg(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        xd(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function fg(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        zd(c[a2 >> 2] | 0, T(b2));
        return;
      }
      function gg(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        dd(c[a2 >> 2] | 0, b2, T(d2));
        return;
      }
      function hg(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        ad(c[a2 >> 2] | 0, b2, T(d2));
        return;
      }
      function ig(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        bd(c[a2 >> 2] | 0, b2, T(d2));
        return;
      }
      function jg(a2) {
        a2 = a2 | 0;
        return Ic(c[a2 >> 2] | 0) | 0;
      }
      function kg(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2;
        Xc(f2, c[b2 >> 2] | 0, d2);
        lg(a2, f2);
        l = e2;
        return;
      }
      function lg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        mg(a2, c[b2 + 4 >> 2] | 0, +T(g[b2 >> 2]));
        return;
      }
      function mg(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        c[a2 >> 2] = b2;
        h[a2 + 8 >> 3] = d2;
        return;
      }
      function ng(a2) {
        a2 = a2 | 0;
        return Cc(c[a2 >> 2] | 0) | 0;
      }
      function og(a2) {
        a2 = a2 | 0;
        return Ec(c[a2 >> 2] | 0) | 0;
      }
      function pg(a2) {
        a2 = a2 | 0;
        return Gc(c[a2 >> 2] | 0) | 0;
      }
      function qg(a2) {
        a2 = a2 | 0;
        return yc(c[a2 >> 2] | 0) | 0;
      }
      function rg(a2) {
        a2 = a2 | 0;
        return Kc(c[a2 >> 2] | 0) | 0;
      }
      function sg(a2) {
        a2 = a2 | 0;
        return Ac(c[a2 >> 2] | 0) | 0;
      }
      function tg(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2;
        _c(f2, c[b2 >> 2] | 0, d2);
        lg(a2, f2);
        l = e2;
        return;
      }
      function ug(a2) {
        a2 = a2 | 0;
        return Mc(c[a2 >> 2] | 0) | 0;
      }
      function vg(a2) {
        a2 = a2 | 0;
        return Oc(c[a2 >> 2] | 0) | 0;
      }
      function wg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2;
        Uc(e2, c[b2 >> 2] | 0);
        lg(a2, e2);
        l = d2;
        return;
      }
      function xg(a2) {
        a2 = a2 | 0;
        return + +T(tc(c[a2 >> 2] | 0));
      }
      function yg(a2) {
        a2 = a2 | 0;
        return + +T(uc(c[a2 >> 2] | 0));
      }
      function zg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2;
        id(e2, c[b2 >> 2] | 0);
        lg(a2, e2);
        l = d2;
        return;
      }
      function Ag(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2;
        md(e2, c[b2 >> 2] | 0);
        lg(a2, e2);
        l = d2;
        return;
      }
      function Bg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2;
        pd(e2, c[b2 >> 2] | 0);
        lg(a2, e2);
        l = d2;
        return;
      }
      function Cg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2;
        sd(e2, c[b2 >> 2] | 0);
        lg(a2, e2);
        l = d2;
        return;
      }
      function Dg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2;
        vd(e2, c[b2 >> 2] | 0);
        lg(a2, e2);
        l = d2;
        return;
      }
      function Eg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2;
        yd(e2, c[b2 >> 2] | 0);
        lg(a2, e2);
        l = d2;
        return;
      }
      function Fg(a2) {
        a2 = a2 | 0;
        return + +T(Ad(c[a2 >> 2] | 0));
      }
      function Gg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return + +T(ed(c[a2 >> 2] | 0, b2));
      }
      function Hg(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2;
        cd(f2, c[b2 >> 2] | 0, d2);
        lg(a2, f2);
        l = e2;
        return;
      }
      function Ig(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        kc(c[a2 >> 2] | 0, c[b2 >> 2] | 0, d2);
        return;
      }
      function Jg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        cc(c[a2 >> 2] | 0, c[b2 >> 2] | 0);
        return;
      }
      function Kg(a2) {
        a2 = a2 | 0;
        return $b(c[a2 >> 2] | 0) | 0;
      }
      function Lg(a2) {
        a2 = a2 | 0;
        a2 = pc(c[a2 >> 2] | 0) | 0;
        if (!a2)
          a2 = 0;
        else
          a2 = xf(a2) | 0;
        return a2 | 0;
      }
      function Mg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        a2 = ac(c[a2 >> 2] | 0, b2) | 0;
        if (!a2)
          a2 = 0;
        else
          a2 = xf(a2) | 0;
        return a2 | 0;
      }
      function Ng(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        e2 = qC(4) | 0;
        Og(e2, b2);
        d2 = a2 + 4 | 0;
        b2 = c[d2 >> 2] | 0;
        c[d2 >> 2] = e2;
        if (b2 | 0) {
          vf(b2);
          sC(b2);
        }
        jc(c[a2 >> 2] | 0, 1);
        return;
      }
      function Og(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        gh(a2, b2);
        return;
      }
      function Pg(a2, b2, c2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        d2 = d2 | 0;
        e2 = T(e2);
        f2 = f2 | 0;
        var i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        j2 = i2;
        Qg(j2, wc(b2) | 0, +c2, d2, +e2, f2);
        g[a2 >> 2] = T(+h[j2 >> 3]);
        g[a2 + 4 >> 2] = T(+h[j2 + 8 >> 3]);
        l = i2;
        return;
      }
      function Qg(a2, b2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        e2 = e2 | 0;
        f2 = +f2;
        g2 = g2 | 0;
        var i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        i2 = l;
        l = l + 32 | 0;
        n2 = i2 + 8 | 0;
        m2 = i2 + 20 | 0;
        k2 = i2;
        j2 = i2 + 16 | 0;
        h[n2 >> 3] = d2;
        c[m2 >> 2] = e2;
        h[k2 >> 3] = f2;
        c[j2 >> 2] = g2;
        Rg(a2, c[b2 + 4 >> 2] | 0, n2, m2, k2, j2);
        l = i2;
        return;
      }
      function Rg(a2, b2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        j2 = i2;
        UA(j2);
        b2 = Sg(b2) | 0;
        Tg(a2, b2, +h[d2 >> 3], c[e2 >> 2] | 0, +h[f2 >> 3], c[g2 >> 2] | 0);
        WA(j2);
        l = i2;
        return;
      }
      function Sg(a2) {
        a2 = a2 | 0;
        return c[a2 >> 2] | 0;
      }
      function Tg(a2, b2, c2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = +c2;
        d2 = d2 | 0;
        e2 = +e2;
        f2 = f2 | 0;
        var g2 = 0;
        g2 = Vg(Ug() | 0) | 0;
        c2 = +Wg(c2);
        d2 = Xg(d2) | 0;
        e2 = +Wg(e2);
        Yg(a2, cb(0, g2 | 0, b2 | 0, +c2, d2 | 0, +e2, Xg(f2) | 0) | 0);
        return;
      }
      function Ug() {
        var b2 = 0;
        if (!(a[7608] | 0)) {
          dh(9120);
          b2 = 7608;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 9120;
      }
      function Vg(a2) {
        a2 = a2 | 0;
        return c[a2 + 8 >> 2] | 0;
      }
      function Wg(a2) {
        a2 = +a2;
        return + +ch(a2);
      }
      function Xg(a2) {
        a2 = a2 | 0;
        return bh(a2) | 0;
      }
      function Yg(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        f2 = l;
        l = l + 32 | 0;
        d2 = f2;
        e2 = b2;
        if (!(e2 & 1)) {
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = c[b2 + 4 >> 2];
          c[a2 + 8 >> 2] = c[b2 + 8 >> 2];
          c[a2 + 12 >> 2] = c[b2 + 12 >> 2];
        } else {
          Zg(d2, 0);
          Ja(e2 | 0, d2 | 0) | 0;
          _g(a2, d2);
          $g(d2);
        }
        l = f2;
        return;
      }
      function Zg(b2, d2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        ah(b2, d2);
        c[b2 + 8 >> 2] = 0;
        a[b2 + 24 >> 0] = 0;
        return;
      }
      function _g(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        b2 = b2 + 8 | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = c[b2 + 4 >> 2];
        c[a2 + 8 >> 2] = c[b2 + 8 >> 2];
        c[a2 + 12 >> 2] = c[b2 + 12 >> 2];
        return;
      }
      function $g(b2) {
        b2 = b2 | 0;
        a[b2 + 24 >> 0] = 0;
        return;
      }
      function ah(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = b2;
        return;
      }
      function bh(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function ch(a2) {
        a2 = +a2;
        return +a2;
      }
      function dh(a2) {
        a2 = a2 | 0;
        fh(a2, eh() | 0, 4);
        return;
      }
      function eh() {
        return 1064;
      }
      function fh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        c[a2 + 8 >> 2] = _a2(b2 | 0, d2 + 1 | 0) | 0;
        return;
      }
      function gh(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        b2 = c[b2 >> 2] | 0;
        c[a2 >> 2] = b2;
        Aa(b2 | 0);
        return;
      }
      function hh(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0;
        d2 = a2 + 4 | 0;
        b2 = c[d2 >> 2] | 0;
        c[d2 >> 2] = 0;
        if (b2 | 0) {
          vf(b2);
          sC(b2);
        }
        jc(c[a2 >> 2] | 0, 0);
        return;
      }
      function ih(a2) {
        a2 = a2 | 0;
        qc(c[a2 >> 2] | 0);
        return;
      }
      function jh(a2) {
        a2 = a2 | 0;
        return rc(c[a2 >> 2] | 0) | 0;
      }
      function kh(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = +b2;
        d2 = +d2;
        e2 = e2 | 0;
        _d(c[a2 >> 2] | 0, T(b2), T(d2), e2);
        return;
      }
      function lh(a2) {
        a2 = a2 | 0;
        return + +T(Bd(c[a2 >> 2] | 0));
      }
      function mh(a2) {
        a2 = a2 | 0;
        return + +T(Dd(c[a2 >> 2] | 0));
      }
      function nh(a2) {
        a2 = a2 | 0;
        return + +T(Cd(c[a2 >> 2] | 0));
      }
      function oh(a2) {
        a2 = a2 | 0;
        return + +T(Ed(c[a2 >> 2] | 0));
      }
      function ph(a2) {
        a2 = a2 | 0;
        return + +T(Fd(c[a2 >> 2] | 0));
      }
      function qh(a2) {
        a2 = a2 | 0;
        return + +T(Gd(c[a2 >> 2] | 0));
      }
      function rh(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        h[a2 >> 3] = +T(Bd(c[b2 >> 2] | 0));
        h[a2 + 8 >> 3] = +T(Dd(c[b2 >> 2] | 0));
        h[a2 + 16 >> 3] = +T(Cd(c[b2 >> 2] | 0));
        h[a2 + 24 >> 3] = +T(Ed(c[b2 >> 2] | 0));
        h[a2 + 32 >> 3] = +T(Fd(c[b2 >> 2] | 0));
        h[a2 + 40 >> 3] = +T(Gd(c[b2 >> 2] | 0));
        return;
      }
      function sh(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return + +T(Hd(c[a2 >> 2] | 0, b2));
      }
      function th(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return + +T(Id(c[a2 >> 2] | 0, b2));
      }
      function uh(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return + +T(Jd(c[a2 >> 2] | 0, b2));
      }
      function vh() {
        return fc() | 0;
      }
      function wh() {
        xh();
        yh();
        zh();
        Ah();
        Bh();
        Ch();
        return;
      }
      function xh() {
        kv(11713, 4938, 1);
        return;
      }
      function yh() {
        yu(10448);
        return;
      }
      function zh() {
        eu(10408);
        return;
      }
      function Ah() {
        vt(10324);
        return;
      }
      function Bh() {
        or(10096);
        return;
      }
      function Ch() {
        Dh(9132);
        return;
      }
      function Dh(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = 0, v2 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0, B2 = 0, C2 = 0, D2 = 0, E2 = 0, F2 = 0, G2 = 0, H2 = 0, I2 = 0, J2 = 0, K2 = 0, L2 = 0, M2 = 0, N2 = 0, O2 = 0, P2 = 0, Q2 = 0, R2 = 0, S2 = 0, T2 = 0, U2 = 0, V2 = 0, W2 = 0, X2 = 0, Y2 = 0, Z2 = 0, _2 = 0, $2 = 0, aa2 = 0, ba2 = 0, ca2 = 0, da2 = 0, ea2 = 0, fa2 = 0, ga2 = 0, ha2 = 0, ia2 = 0, ja2 = 0, ka2 = 0, la2 = 0, ma2 = 0, na2 = 0, oa2 = 0, pa2 = 0, qa2 = 0, ra2 = 0, sa2 = 0, ta2 = 0, ua2 = 0, va2 = 0, wa2 = 0, xa2 = 0, ya2 = 0, za2 = 0, Aa2 = 0, Ba2 = 0, Ca2 = 0, Da2 = 0, Ea2 = 0, Fa2 = 0, Ga2 = 0;
        b2 = l;
        l = l + 672 | 0;
        d2 = b2 + 656 | 0;
        Ga2 = b2 + 648 | 0;
        Fa2 = b2 + 640 | 0;
        Ea2 = b2 + 632 | 0;
        Da2 = b2 + 624 | 0;
        Ca2 = b2 + 616 | 0;
        Ba2 = b2 + 608 | 0;
        Aa2 = b2 + 600 | 0;
        za2 = b2 + 592 | 0;
        ya2 = b2 + 584 | 0;
        xa2 = b2 + 576 | 0;
        wa2 = b2 + 568 | 0;
        va2 = b2 + 560 | 0;
        ua2 = b2 + 552 | 0;
        ta2 = b2 + 544 | 0;
        sa2 = b2 + 536 | 0;
        ra2 = b2 + 528 | 0;
        qa2 = b2 + 520 | 0;
        pa2 = b2 + 512 | 0;
        oa2 = b2 + 504 | 0;
        na2 = b2 + 496 | 0;
        ma2 = b2 + 488 | 0;
        la2 = b2 + 480 | 0;
        ka2 = b2 + 472 | 0;
        ja2 = b2 + 464 | 0;
        ia2 = b2 + 456 | 0;
        ha2 = b2 + 448 | 0;
        ga2 = b2 + 440 | 0;
        fa2 = b2 + 432 | 0;
        ea2 = b2 + 424 | 0;
        da2 = b2 + 416 | 0;
        ca2 = b2 + 408 | 0;
        ba2 = b2 + 400 | 0;
        aa2 = b2 + 392 | 0;
        $2 = b2 + 384 | 0;
        _2 = b2 + 376 | 0;
        Z2 = b2 + 368 | 0;
        Y2 = b2 + 360 | 0;
        X2 = b2 + 352 | 0;
        W2 = b2 + 344 | 0;
        V2 = b2 + 336 | 0;
        U2 = b2 + 328 | 0;
        T2 = b2 + 320 | 0;
        S2 = b2 + 312 | 0;
        R2 = b2 + 304 | 0;
        Q2 = b2 + 296 | 0;
        P2 = b2 + 288 | 0;
        O2 = b2 + 280 | 0;
        N2 = b2 + 272 | 0;
        M2 = b2 + 264 | 0;
        L2 = b2 + 256 | 0;
        K2 = b2 + 248 | 0;
        J2 = b2 + 240 | 0;
        I2 = b2 + 232 | 0;
        H2 = b2 + 224 | 0;
        G2 = b2 + 216 | 0;
        F2 = b2 + 208 | 0;
        E2 = b2 + 200 | 0;
        D2 = b2 + 192 | 0;
        C2 = b2 + 184 | 0;
        B2 = b2 + 176 | 0;
        A2 = b2 + 168 | 0;
        z2 = b2 + 160 | 0;
        y2 = b2 + 152 | 0;
        x2 = b2 + 144 | 0;
        w2 = b2 + 136 | 0;
        v2 = b2 + 128 | 0;
        u2 = b2 + 120 | 0;
        t2 = b2 + 112 | 0;
        s2 = b2 + 104 | 0;
        r2 = b2 + 96 | 0;
        q2 = b2 + 88 | 0;
        p2 = b2 + 80 | 0;
        o2 = b2 + 72 | 0;
        n2 = b2 + 64 | 0;
        m2 = b2 + 56 | 0;
        k2 = b2 + 48 | 0;
        j2 = b2 + 40 | 0;
        i2 = b2 + 32 | 0;
        h2 = b2 + 24 | 0;
        g2 = b2 + 16 | 0;
        f2 = b2 + 8 | 0;
        e2 = b2;
        Eh(a2, 3646);
        Fh(a2, 3651, 2) | 0;
        Gh(a2, 3665, 2) | 0;
        Hh(a2, 3682, 18) | 0;
        c[Ga2 >> 2] = 19;
        c[Ga2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[Ga2 >> 2];
        c[d2 + 4 >> 2] = c[Ga2 + 4 >> 2];
        Ih(a2, 3690, d2) | 0;
        c[Fa2 >> 2] = 1;
        c[Fa2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[Fa2 >> 2];
        c[d2 + 4 >> 2] = c[Fa2 + 4 >> 2];
        Jh(a2, 3696, d2) | 0;
        c[Ea2 >> 2] = 2;
        c[Ea2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[Ea2 >> 2];
        c[d2 + 4 >> 2] = c[Ea2 + 4 >> 2];
        Kh(a2, 3706, d2) | 0;
        c[Da2 >> 2] = 1;
        c[Da2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[Da2 >> 2];
        c[d2 + 4 >> 2] = c[Da2 + 4 >> 2];
        Lh(a2, 3722, d2) | 0;
        c[Ca2 >> 2] = 2;
        c[Ca2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[Ca2 >> 2];
        c[d2 + 4 >> 2] = c[Ca2 + 4 >> 2];
        Lh(a2, 3734, d2) | 0;
        c[Ba2 >> 2] = 3;
        c[Ba2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[Ba2 >> 2];
        c[d2 + 4 >> 2] = c[Ba2 + 4 >> 2];
        Kh(a2, 3753, d2) | 0;
        c[Aa2 >> 2] = 4;
        c[Aa2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[Aa2 >> 2];
        c[d2 + 4 >> 2] = c[Aa2 + 4 >> 2];
        Kh(a2, 3769, d2) | 0;
        c[za2 >> 2] = 5;
        c[za2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[za2 >> 2];
        c[d2 + 4 >> 2] = c[za2 + 4 >> 2];
        Kh(a2, 3783, d2) | 0;
        c[ya2 >> 2] = 6;
        c[ya2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ya2 >> 2];
        c[d2 + 4 >> 2] = c[ya2 + 4 >> 2];
        Kh(a2, 3796, d2) | 0;
        c[xa2 >> 2] = 7;
        c[xa2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[xa2 >> 2];
        c[d2 + 4 >> 2] = c[xa2 + 4 >> 2];
        Kh(a2, 3813, d2) | 0;
        c[wa2 >> 2] = 8;
        c[wa2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[wa2 >> 2];
        c[d2 + 4 >> 2] = c[wa2 + 4 >> 2];
        Kh(a2, 3825, d2) | 0;
        c[va2 >> 2] = 3;
        c[va2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[va2 >> 2];
        c[d2 + 4 >> 2] = c[va2 + 4 >> 2];
        Lh(a2, 3843, d2) | 0;
        c[ua2 >> 2] = 4;
        c[ua2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ua2 >> 2];
        c[d2 + 4 >> 2] = c[ua2 + 4 >> 2];
        Lh(a2, 3853, d2) | 0;
        c[ta2 >> 2] = 9;
        c[ta2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ta2 >> 2];
        c[d2 + 4 >> 2] = c[ta2 + 4 >> 2];
        Kh(a2, 3870, d2) | 0;
        c[sa2 >> 2] = 10;
        c[sa2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[sa2 >> 2];
        c[d2 + 4 >> 2] = c[sa2 + 4 >> 2];
        Kh(a2, 3884, d2) | 0;
        c[ra2 >> 2] = 11;
        c[ra2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ra2 >> 2];
        c[d2 + 4 >> 2] = c[ra2 + 4 >> 2];
        Kh(a2, 3896, d2) | 0;
        c[qa2 >> 2] = 1;
        c[qa2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[qa2 >> 2];
        c[d2 + 4 >> 2] = c[qa2 + 4 >> 2];
        Mh(a2, 3907, d2) | 0;
        c[pa2 >> 2] = 2;
        c[pa2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[pa2 >> 2];
        c[d2 + 4 >> 2] = c[pa2 + 4 >> 2];
        Mh(a2, 3915, d2) | 0;
        c[oa2 >> 2] = 3;
        c[oa2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[oa2 >> 2];
        c[d2 + 4 >> 2] = c[oa2 + 4 >> 2];
        Mh(a2, 3928, d2) | 0;
        c[na2 >> 2] = 4;
        c[na2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[na2 >> 2];
        c[d2 + 4 >> 2] = c[na2 + 4 >> 2];
        Mh(a2, 3948, d2) | 0;
        c[ma2 >> 2] = 5;
        c[ma2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ma2 >> 2];
        c[d2 + 4 >> 2] = c[ma2 + 4 >> 2];
        Mh(a2, 3960, d2) | 0;
        c[la2 >> 2] = 6;
        c[la2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[la2 >> 2];
        c[d2 + 4 >> 2] = c[la2 + 4 >> 2];
        Mh(a2, 3974, d2) | 0;
        c[ka2 >> 2] = 7;
        c[ka2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ka2 >> 2];
        c[d2 + 4 >> 2] = c[ka2 + 4 >> 2];
        Mh(a2, 3983, d2) | 0;
        c[ja2 >> 2] = 20;
        c[ja2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ja2 >> 2];
        c[d2 + 4 >> 2] = c[ja2 + 4 >> 2];
        Ih(a2, 3999, d2) | 0;
        c[ia2 >> 2] = 8;
        c[ia2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ia2 >> 2];
        c[d2 + 4 >> 2] = c[ia2 + 4 >> 2];
        Mh(a2, 4012, d2) | 0;
        c[ha2 >> 2] = 9;
        c[ha2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ha2 >> 2];
        c[d2 + 4 >> 2] = c[ha2 + 4 >> 2];
        Mh(a2, 4022, d2) | 0;
        c[ga2 >> 2] = 21;
        c[ga2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ga2 >> 2];
        c[d2 + 4 >> 2] = c[ga2 + 4 >> 2];
        Ih(a2, 4039, d2) | 0;
        c[fa2 >> 2] = 10;
        c[fa2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[fa2 >> 2];
        c[d2 + 4 >> 2] = c[fa2 + 4 >> 2];
        Mh(a2, 4053, d2) | 0;
        c[ea2 >> 2] = 11;
        c[ea2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ea2 >> 2];
        c[d2 + 4 >> 2] = c[ea2 + 4 >> 2];
        Mh(a2, 4065, d2) | 0;
        c[da2 >> 2] = 12;
        c[da2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[da2 >> 2];
        c[d2 + 4 >> 2] = c[da2 + 4 >> 2];
        Mh(a2, 4084, d2) | 0;
        c[ca2 >> 2] = 13;
        c[ca2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ca2 >> 2];
        c[d2 + 4 >> 2] = c[ca2 + 4 >> 2];
        Mh(a2, 4097, d2) | 0;
        c[ba2 >> 2] = 14;
        c[ba2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[ba2 >> 2];
        c[d2 + 4 >> 2] = c[ba2 + 4 >> 2];
        Mh(a2, 4117, d2) | 0;
        c[aa2 >> 2] = 15;
        c[aa2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[aa2 >> 2];
        c[d2 + 4 >> 2] = c[aa2 + 4 >> 2];
        Mh(a2, 4129, d2) | 0;
        c[$2 >> 2] = 16;
        c[$2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[$2 >> 2];
        c[d2 + 4 >> 2] = c[$2 + 4 >> 2];
        Mh(a2, 4148, d2) | 0;
        c[_2 >> 2] = 17;
        c[_2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[_2 >> 2];
        c[d2 + 4 >> 2] = c[_2 + 4 >> 2];
        Mh(a2, 4161, d2) | 0;
        c[Z2 >> 2] = 18;
        c[Z2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[Z2 >> 2];
        c[d2 + 4 >> 2] = c[Z2 + 4 >> 2];
        Mh(a2, 4181, d2) | 0;
        c[Y2 >> 2] = 5;
        c[Y2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[Y2 >> 2];
        c[d2 + 4 >> 2] = c[Y2 + 4 >> 2];
        Lh(a2, 4196, d2) | 0;
        c[X2 >> 2] = 6;
        c[X2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[X2 >> 2];
        c[d2 + 4 >> 2] = c[X2 + 4 >> 2];
        Lh(a2, 4206, d2) | 0;
        c[W2 >> 2] = 7;
        c[W2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[W2 >> 2];
        c[d2 + 4 >> 2] = c[W2 + 4 >> 2];
        Lh(a2, 4217, d2) | 0;
        c[V2 >> 2] = 3;
        c[V2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[V2 >> 2];
        c[d2 + 4 >> 2] = c[V2 + 4 >> 2];
        Nh(a2, 4235, d2) | 0;
        c[U2 >> 2] = 1;
        c[U2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[U2 >> 2];
        c[d2 + 4 >> 2] = c[U2 + 4 >> 2];
        Oh(a2, 4251, d2) | 0;
        c[T2 >> 2] = 4;
        c[T2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[T2 >> 2];
        c[d2 + 4 >> 2] = c[T2 + 4 >> 2];
        Nh(a2, 4263, d2) | 0;
        c[S2 >> 2] = 5;
        c[S2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[S2 >> 2];
        c[d2 + 4 >> 2] = c[S2 + 4 >> 2];
        Nh(a2, 4279, d2) | 0;
        c[R2 >> 2] = 6;
        c[R2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[R2 >> 2];
        c[d2 + 4 >> 2] = c[R2 + 4 >> 2];
        Nh(a2, 4293, d2) | 0;
        c[Q2 >> 2] = 7;
        c[Q2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[Q2 >> 2];
        c[d2 + 4 >> 2] = c[Q2 + 4 >> 2];
        Nh(a2, 4306, d2) | 0;
        c[P2 >> 2] = 8;
        c[P2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[P2 >> 2];
        c[d2 + 4 >> 2] = c[P2 + 4 >> 2];
        Nh(a2, 4323, d2) | 0;
        c[O2 >> 2] = 9;
        c[O2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[O2 >> 2];
        c[d2 + 4 >> 2] = c[O2 + 4 >> 2];
        Nh(a2, 4335, d2) | 0;
        c[N2 >> 2] = 2;
        c[N2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[N2 >> 2];
        c[d2 + 4 >> 2] = c[N2 + 4 >> 2];
        Oh(a2, 4353, d2) | 0;
        c[M2 >> 2] = 12;
        c[M2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[M2 >> 2];
        c[d2 + 4 >> 2] = c[M2 + 4 >> 2];
        Ph(a2, 4363, d2) | 0;
        c[L2 >> 2] = 1;
        c[L2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[L2 >> 2];
        c[d2 + 4 >> 2] = c[L2 + 4 >> 2];
        Qh(a2, 4376, d2) | 0;
        c[K2 >> 2] = 2;
        c[K2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[K2 >> 2];
        c[d2 + 4 >> 2] = c[K2 + 4 >> 2];
        Qh(a2, 4388, d2) | 0;
        c[J2 >> 2] = 13;
        c[J2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[J2 >> 2];
        c[d2 + 4 >> 2] = c[J2 + 4 >> 2];
        Ph(a2, 4402, d2) | 0;
        c[I2 >> 2] = 14;
        c[I2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[I2 >> 2];
        c[d2 + 4 >> 2] = c[I2 + 4 >> 2];
        Ph(a2, 4411, d2) | 0;
        c[H2 >> 2] = 15;
        c[H2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[H2 >> 2];
        c[d2 + 4 >> 2] = c[H2 + 4 >> 2];
        Ph(a2, 4421, d2) | 0;
        c[G2 >> 2] = 16;
        c[G2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[G2 >> 2];
        c[d2 + 4 >> 2] = c[G2 + 4 >> 2];
        Ph(a2, 4433, d2) | 0;
        c[F2 >> 2] = 17;
        c[F2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[F2 >> 2];
        c[d2 + 4 >> 2] = c[F2 + 4 >> 2];
        Ph(a2, 4446, d2) | 0;
        c[E2 >> 2] = 18;
        c[E2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[E2 >> 2];
        c[d2 + 4 >> 2] = c[E2 + 4 >> 2];
        Ph(a2, 4458, d2) | 0;
        c[D2 >> 2] = 3;
        c[D2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[D2 >> 2];
        c[d2 + 4 >> 2] = c[D2 + 4 >> 2];
        Qh(a2, 4471, d2) | 0;
        c[C2 >> 2] = 1;
        c[C2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[C2 >> 2];
        c[d2 + 4 >> 2] = c[C2 + 4 >> 2];
        Rh(a2, 4486, d2) | 0;
        c[B2 >> 2] = 10;
        c[B2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[B2 >> 2];
        c[d2 + 4 >> 2] = c[B2 + 4 >> 2];
        Nh(a2, 4496, d2) | 0;
        c[A2 >> 2] = 11;
        c[A2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[A2 >> 2];
        c[d2 + 4 >> 2] = c[A2 + 4 >> 2];
        Nh(a2, 4508, d2) | 0;
        c[z2 >> 2] = 3;
        c[z2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[z2 >> 2];
        c[d2 + 4 >> 2] = c[z2 + 4 >> 2];
        Oh(a2, 4519, d2) | 0;
        c[y2 >> 2] = 4;
        c[y2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[y2 >> 2];
        c[d2 + 4 >> 2] = c[y2 + 4 >> 2];
        Sh(a2, 4530, d2) | 0;
        c[x2 >> 2] = 19;
        c[x2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[x2 >> 2];
        c[d2 + 4 >> 2] = c[x2 + 4 >> 2];
        Th(a2, 4542, d2) | 0;
        c[w2 >> 2] = 12;
        c[w2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[w2 >> 2];
        c[d2 + 4 >> 2] = c[w2 + 4 >> 2];
        Uh(a2, 4554, d2) | 0;
        c[v2 >> 2] = 13;
        c[v2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[v2 >> 2];
        c[d2 + 4 >> 2] = c[v2 + 4 >> 2];
        Vh(a2, 4568, d2) | 0;
        c[u2 >> 2] = 2;
        c[u2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[u2 >> 2];
        c[d2 + 4 >> 2] = c[u2 + 4 >> 2];
        Wh(a2, 4578, d2) | 0;
        c[t2 >> 2] = 20;
        c[t2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[t2 >> 2];
        c[d2 + 4 >> 2] = c[t2 + 4 >> 2];
        Xh(a2, 4587, d2) | 0;
        c[s2 >> 2] = 22;
        c[s2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[s2 >> 2];
        c[d2 + 4 >> 2] = c[s2 + 4 >> 2];
        Ih(a2, 4602, d2) | 0;
        c[r2 >> 2] = 23;
        c[r2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[r2 >> 2];
        c[d2 + 4 >> 2] = c[r2 + 4 >> 2];
        Ih(a2, 4619, d2) | 0;
        c[q2 >> 2] = 14;
        c[q2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[q2 >> 2];
        c[d2 + 4 >> 2] = c[q2 + 4 >> 2];
        Yh(a2, 4629, d2) | 0;
        c[p2 >> 2] = 1;
        c[p2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[p2 >> 2];
        c[d2 + 4 >> 2] = c[p2 + 4 >> 2];
        Zh(a2, 4637, d2) | 0;
        c[o2 >> 2] = 4;
        c[o2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[o2 >> 2];
        c[d2 + 4 >> 2] = c[o2 + 4 >> 2];
        Qh(a2, 4653, d2) | 0;
        c[n2 >> 2] = 5;
        c[n2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[n2 >> 2];
        c[d2 + 4 >> 2] = c[n2 + 4 >> 2];
        Qh(a2, 4669, d2) | 0;
        c[m2 >> 2] = 6;
        c[m2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[m2 >> 2];
        c[d2 + 4 >> 2] = c[m2 + 4 >> 2];
        Qh(a2, 4686, d2) | 0;
        c[k2 >> 2] = 7;
        c[k2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[k2 >> 2];
        c[d2 + 4 >> 2] = c[k2 + 4 >> 2];
        Qh(a2, 4701, d2) | 0;
        c[j2 >> 2] = 8;
        c[j2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[j2 >> 2];
        c[d2 + 4 >> 2] = c[j2 + 4 >> 2];
        Qh(a2, 4719, d2) | 0;
        c[i2 >> 2] = 9;
        c[i2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[i2 >> 2];
        c[d2 + 4 >> 2] = c[i2 + 4 >> 2];
        Qh(a2, 4736, d2) | 0;
        c[h2 >> 2] = 21;
        c[h2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[h2 >> 2];
        c[d2 + 4 >> 2] = c[h2 + 4 >> 2];
        _h(a2, 4754, d2) | 0;
        c[g2 >> 2] = 2;
        c[g2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[g2 >> 2];
        c[d2 + 4 >> 2] = c[g2 + 4 >> 2];
        Rh(a2, 4772, d2) | 0;
        c[f2 >> 2] = 3;
        c[f2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[f2 >> 2];
        c[d2 + 4 >> 2] = c[f2 + 4 >> 2];
        Rh(a2, 4790, d2) | 0;
        c[e2 >> 2] = 4;
        c[e2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[e2 >> 2];
        c[d2 + 4 >> 2] = c[e2 + 4 >> 2];
        Rh(a2, 4808, d2) | 0;
        l = b2;
        return;
      }
      function Eh(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = dr() | 0;
        c[a2 >> 2] = d2;
        er(d2, b2);
        Hv(c[a2 >> 2] | 0);
        return;
      }
      function Fh(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        Oq(a2, ai(b2) | 0, c2, 0);
        return a2 | 0;
      }
      function Gh(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        tq(a2, ai(b2) | 0, c2, 0);
        return a2 | 0;
      }
      function Hh(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        cq(a2, ai(b2) | 0, c2, 0);
        return a2 | 0;
      }
      function Ih(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Lp(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Jh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        pp(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Kh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Yo(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Lh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Fo(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Mh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        mo(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Nh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Un(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Oh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Bn(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Ph(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Um(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Qh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Bm(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Rh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        im(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Sh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Rl(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Th(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        vl(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Uh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        bl(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Vh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Kk(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Wh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        nk(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Xh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Rj(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Yh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        xj(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function Zh(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        _i(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function _h(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        $h(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function $h(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        bi(a2, d2, f2, 1);
        l = e2;
        return;
      }
      function ai(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function bi(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = ci() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = di(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, ei(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function ci() {
        var b2 = 0, d2 = 0;
        if (!(a[7616] | 0)) {
          qi(9136);
          Ha(24, 9136, o | 0) | 0;
          d2 = 7616;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9136) | 0)) {
          b2 = 9136;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          qi(9136);
        }
        return 9136;
      }
      function di(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function ei(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = ci() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          ki(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          li(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function fi(a2, b2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0;
        h2 = l;
        l = l + 32 | 0;
        o2 = h2 + 24 | 0;
        n2 = h2 + 20 | 0;
        j2 = h2 + 16 | 0;
        m2 = h2 + 12 | 0;
        k2 = h2 + 8 | 0;
        i2 = h2 + 4 | 0;
        p2 = h2;
        c[n2 >> 2] = b2;
        c[j2 >> 2] = d2;
        c[m2 >> 2] = e2;
        c[k2 >> 2] = f2;
        c[i2 >> 2] = g2;
        g2 = a2 + 28 | 0;
        c[p2 >> 2] = c[g2 >> 2];
        c[o2 >> 2] = c[p2 >> 2];
        gi(a2 + 24 | 0, o2, n2, m2, k2, j2, i2) | 0;
        c[g2 >> 2] = c[c[g2 >> 2] >> 2];
        l = h2;
        return;
      }
      function gi(a2, b2, d2, e2, f2, g2, h2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        h2 = h2 | 0;
        a2 = hi(b2) | 0;
        b2 = qC(24) | 0;
        ii(b2 + 4 | 0, c[d2 >> 2] | 0, c[e2 >> 2] | 0, c[f2 >> 2] | 0, c[g2 >> 2] | 0, c[h2 >> 2] | 0);
        c[b2 >> 2] = c[a2 >> 2];
        c[a2 >> 2] = b2;
        return b2 | 0;
      }
      function hi(a2) {
        a2 = a2 | 0;
        return c[a2 >> 2] | 0;
      }
      function ii(a2, b2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 12 >> 2] = f2;
        c[a2 + 16 >> 2] = g2;
        return;
      }
      function ji(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return b2 | a2 | 0;
      }
      function ki(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function li(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = mi(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          ni(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          ki(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          oi(a2, i2);
          pi(i2);
          l = k2;
          return;
        }
      }
      function mi(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function ni(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function oi(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function pi(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function qi(a2) {
        a2 = a2 | 0;
        ui(a2);
        return;
      }
      function ri(a2) {
        a2 = a2 | 0;
        ti(a2 + 24 | 0);
        return;
      }
      function si(a2) {
        a2 = a2 | 0;
        return c[a2 >> 2] | 0;
      }
      function ti(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function ui(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 3, b2, wi() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function vi() {
        return 9228;
      }
      function wi() {
        return 1140;
      }
      function xi(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2 + 8 | 0;
        f2 = d2;
        g2 = zi(a2) | 0;
        a2 = c[g2 + 4 >> 2] | 0;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = a2;
        c[e2 >> 2] = c[f2 >> 2];
        c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
        b2 = Ai(b2, e2) | 0;
        l = d2;
        return b2 | 0;
      }
      function yi(a2, b2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 12 >> 2] = f2;
        c[a2 + 16 >> 2] = g2;
        return;
      }
      function zi(a2) {
        a2 = a2 | 0;
        return (c[(ci() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Ai(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        f2 = l;
        l = l + 48 | 0;
        e2 = f2;
        d2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
        ob[d2 & 31](e2, a2);
        e2 = Bi(e2) | 0;
        l = f2;
        return e2 | 0;
      }
      function Bi(a2) {
        a2 = a2 | 0;
        var b2 = 0, c2 = 0, d2 = 0, e2 = 0;
        e2 = l;
        l = l + 32 | 0;
        b2 = e2 + 12 | 0;
        c2 = e2;
        d2 = Di(Ci() | 0) | 0;
        if (!d2)
          a2 = Ii(a2) | 0;
        else {
          Ei(b2, d2);
          Fi(c2, b2);
          Gi(a2, c2);
          a2 = Hi(b2) | 0;
        }
        l = e2;
        return a2 | 0;
      }
      function Ci() {
        var b2 = 0;
        if (!(a[7632] | 0)) {
          Ti(9184);
          Ha(25, 9184, o | 0) | 0;
          b2 = 7632;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 9184;
      }
      function Di(a2) {
        a2 = a2 | 0;
        return c[a2 + 36 >> 2] | 0;
      }
      function Ei(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = a2;
        c[a2 + 8 >> 2] = 0;
        return;
      }
      function Fi(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = c[b2 + 4 >> 2];
        c[a2 + 8 >> 2] = 0;
        return;
      }
      function Gi(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        Ni(b2, a2, a2 + 8 | 0, a2 + 16 | 0, a2 + 24 | 0, a2 + 32 | 0, a2 + 40 | 0) | 0;
        return;
      }
      function Hi(a2) {
        a2 = a2 | 0;
        return c[(c[a2 + 4 >> 2] | 0) + 8 >> 2] | 0;
      }
      function Ii(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = l;
        l = l + 16 | 0;
        d2 = j2 + 4 | 0;
        e2 = j2;
        f2 = jy(8) | 0;
        g2 = f2;
        h2 = qC(48) | 0;
        i2 = h2;
        b2 = i2 + 48 | 0;
        do {
          c[i2 >> 2] = c[a2 >> 2];
          i2 = i2 + 4 | 0;
          a2 = a2 + 4 | 0;
        } while ((i2 | 0) < (b2 | 0));
        b2 = g2 + 4 | 0;
        c[b2 >> 2] = h2;
        i2 = qC(8) | 0;
        h2 = c[b2 >> 2] | 0;
        c[e2 >> 2] = 0;
        c[d2 >> 2] = c[e2 >> 2];
        Ji(i2, h2, d2);
        c[f2 >> 2] = i2;
        l = j2;
        return g2 | 0;
      }
      function Ji(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        d2 = qC(16) | 0;
        c[d2 + 4 >> 2] = 0;
        c[d2 + 8 >> 2] = 0;
        c[d2 >> 2] = 1092;
        c[d2 + 12 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function Ki(a2) {
        a2 = a2 | 0;
        kC(a2);
        sC(a2);
        return;
      }
      function Li(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 12 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Mi(a2) {
        a2 = a2 | 0;
        sC(a2);
        return;
      }
      function Ni(a2, b2, d2, e2, f2, g2, h2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        h2 = h2 | 0;
        g2 = Oi(c[a2 >> 2] | 0, b2, d2, e2, f2, g2, h2) | 0;
        h2 = a2 + 4 | 0;
        c[(c[h2 >> 2] | 0) + 8 >> 2] = g2;
        return c[(c[h2 >> 2] | 0) + 8 >> 2] | 0;
      }
      function Oi(a2, b2, c2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        j2 = i2;
        UA(j2);
        a2 = Sg(a2) | 0;
        g2 = Pi(a2, +h[b2 >> 3], +h[c2 >> 3], +h[d2 >> 3], +h[e2 >> 3], +h[f2 >> 3], +h[g2 >> 3]) | 0;
        WA(j2);
        l = i2;
        return g2 | 0;
      }
      function Pi(a2, b2, c2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = +b2;
        c2 = +c2;
        d2 = +d2;
        e2 = +e2;
        f2 = +f2;
        g2 = +g2;
        var h2 = 0;
        h2 = Vg(Qi() | 0) | 0;
        b2 = +Wg(b2);
        c2 = +Wg(c2);
        d2 = +Wg(d2);
        e2 = +Wg(e2);
        f2 = +Wg(f2);
        return ya(0, h2 | 0, a2 | 0, +b2, +c2, +d2, +e2, +f2, + +Wg(g2)) | 0;
      }
      function Qi() {
        var b2 = 0;
        if (!(a[7624] | 0)) {
          Ri(9172);
          b2 = 7624;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 9172;
      }
      function Ri(a2) {
        a2 = a2 | 0;
        fh(a2, Si() | 0, 6);
        return;
      }
      function Si() {
        return 1112;
      }
      function Ti(a2) {
        a2 = a2 | 0;
        Zi(a2);
        return;
      }
      function Ui(a2) {
        a2 = a2 | 0;
        Vi(a2 + 24 | 0);
        Wi(a2 + 16 | 0);
        return;
      }
      function Vi(a2) {
        a2 = a2 | 0;
        Yi(a2);
        return;
      }
      function Wi(a2) {
        a2 = a2 | 0;
        Xi(a2);
        return;
      }
      function Xi(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0;
        b2 = c[a2 >> 2] | 0;
        if (b2 | 0)
          do {
            d2 = b2;
            b2 = c[b2 >> 2] | 0;
            sC(d2);
          } while ((b2 | 0) != 0);
        c[a2 >> 2] = 0;
        return;
      }
      function Yi(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0;
        b2 = c[a2 >> 2] | 0;
        if (b2 | 0)
          do {
            d2 = b2;
            b2 = c[b2 >> 2] | 0;
            sC(d2);
          } while ((b2 | 0) != 0);
        c[a2 >> 2] = 0;
        return;
      }
      function Zi(b2) {
        b2 = b2 | 0;
        var d2 = 0;
        c[b2 + 16 >> 2] = 0;
        c[b2 + 20 >> 2] = 0;
        d2 = b2 + 24 | 0;
        c[d2 >> 2] = 0;
        c[b2 + 28 >> 2] = d2;
        c[b2 + 36 >> 2] = 0;
        a[b2 + 40 >> 0] = 0;
        a[b2 + 41 >> 0] = 0;
        return;
      }
      function _i(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        $i(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function $i(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = aj() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = bj(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, cj(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function aj() {
        var b2 = 0, d2 = 0;
        if (!(a[7640] | 0)) {
          jj(9232);
          Ha(26, 9232, o | 0) | 0;
          d2 = 7640;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9232) | 0)) {
          b2 = 9232;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          jj(9232);
        }
        return 9232;
      }
      function bj(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function cj(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = aj() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          dj(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          ej(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function dj(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function ej(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = fj(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          gj(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          dj(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          hj(a2, i2);
          ij(i2);
          l = k2;
          return;
        }
      }
      function fj(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function gj(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function hj(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function ij(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function jj(a2) {
        a2 = a2 | 0;
        mj(a2);
        return;
      }
      function kj(a2) {
        a2 = a2 | 0;
        lj(a2 + 24 | 0);
        return;
      }
      function lj(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function mj(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 1, b2, nj() | 0, 3);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function nj() {
        return 1144;
      }
      function oj(a2, b2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        e2 = +e2;
        f2 = f2 | 0;
        var g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        g2 = l;
        l = l + 16 | 0;
        h2 = g2 + 8 | 0;
        i2 = g2;
        j2 = pj(a2) | 0;
        a2 = c[j2 + 4 >> 2] | 0;
        c[i2 >> 2] = c[j2 >> 2];
        c[i2 + 4 >> 2] = a2;
        c[h2 >> 2] = c[i2 >> 2];
        c[h2 + 4 >> 2] = c[i2 + 4 >> 2];
        qj(b2, h2, d2, e2, f2);
        l = g2;
        return;
      }
      function pj(a2) {
        a2 = a2 | 0;
        return (c[(aj() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function qj(a2, b2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        e2 = +e2;
        f2 = f2 | 0;
        var g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        k2 = l;
        l = l + 16 | 0;
        h2 = k2 + 2 | 0;
        i2 = k2 + 1 | 0;
        j2 = k2;
        g2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          g2 = c[(c[a2 >> 2] | 0) + g2 >> 2] | 0;
        rj(h2, d2);
        d2 = +sj(h2, d2);
        rj(i2, e2);
        e2 = +sj(i2, e2);
        tj(j2, f2);
        j2 = uj(j2, f2) | 0;
        qb[g2 & 1](a2, d2, e2, j2);
        l = k2;
        return;
      }
      function rj(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        return;
      }
      function sj(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        return + +wj(b2);
      }
      function tj(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return;
      }
      function uj(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return vj(b2) | 0;
      }
      function vj(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function wj(a2) {
        a2 = +a2;
        return +a2;
      }
      function xj(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        yj(a2, d2, f2, 1);
        l = e2;
        return;
      }
      function yj(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = zj() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = Aj(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Bj(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function zj() {
        var b2 = 0, d2 = 0;
        if (!(a[7648] | 0)) {
          Ij(9268);
          Ha(27, 9268, o | 0) | 0;
          d2 = 7648;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9268) | 0)) {
          b2 = 9268;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Ij(9268);
        }
        return 9268;
      }
      function Aj(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Bj(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = zj() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Cj(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Dj(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Cj(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Dj(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = Ej(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          Fj(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Cj(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          Gj(a2, i2);
          Hj(i2);
          l = k2;
          return;
        }
      }
      function Ej(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function Fj(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function Gj(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Hj(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Ij(a2) {
        a2 = a2 | 0;
        Lj(a2);
        return;
      }
      function Jj(a2) {
        a2 = a2 | 0;
        Kj(a2 + 24 | 0);
        return;
      }
      function Kj(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function Lj(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 4, b2, Mj() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Mj() {
        return 1160;
      }
      function Nj(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2 + 8 | 0;
        f2 = d2;
        g2 = Oj(a2) | 0;
        a2 = c[g2 + 4 >> 2] | 0;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = a2;
        c[e2 >> 2] = c[f2 >> 2];
        c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
        b2 = Pj(b2, e2) | 0;
        l = d2;
        return b2 | 0;
      }
      function Oj(a2) {
        a2 = a2 | 0;
        return (c[(zj() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Pj(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
        return Qj(pb[d2 & 31](a2) | 0) | 0;
      }
      function Qj(a2) {
        a2 = a2 | 0;
        return a2 & 1 | 0;
      }
      function Rj(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Sj(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function Sj(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = Tj() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = Uj(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Vj(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function Tj() {
        var b2 = 0, d2 = 0;
        if (!(a[7656] | 0)) {
          ak(9304);
          Ha(28, 9304, o | 0) | 0;
          d2 = 7656;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9304) | 0)) {
          b2 = 9304;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          ak(9304);
        }
        return 9304;
      }
      function Uj(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Vj(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = Tj() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Wj(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Xj(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Wj(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Xj(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = Yj(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          Zj(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Wj(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          _j(a2, i2);
          $j(i2);
          l = k2;
          return;
        }
      }
      function Yj(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function Zj(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function _j(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function $j(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function ak(a2) {
        a2 = a2 | 0;
        dk(a2);
        return;
      }
      function bk(a2) {
        a2 = a2 | 0;
        ck(a2 + 24 | 0);
        return;
      }
      function ck(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function dk(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 5, b2, ek() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function ek() {
        return 1164;
      }
      function fk(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = gk(a2) | 0;
        a2 = c[h2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = a2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        hk(b2, f2, d2);
        l = e2;
        return;
      }
      function gk(a2) {
        a2 = a2 | 0;
        return (c[(Tj() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function hk(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2;
        e2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
        ik(f2, d2);
        d2 = jk(f2, d2) | 0;
        ob[e2 & 31](a2, d2);
        kk(f2);
        l = g2;
        return;
      }
      function ik(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        lk(a2, b2);
        return;
      }
      function jk(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return a2 | 0;
      }
      function kk(a2) {
        a2 = a2 | 0;
        vf(a2);
        return;
      }
      function lk(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        mk(a2, b2);
        return;
      }
      function mk(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = b2;
        return;
      }
      function nk(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        ok(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function ok(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = pk() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = qk(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, rk(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function pk() {
        var b2 = 0, d2 = 0;
        if (!(a[7664] | 0)) {
          yk(9340);
          Ha(29, 9340, o | 0) | 0;
          d2 = 7664;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9340) | 0)) {
          b2 = 9340;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          yk(9340);
        }
        return 9340;
      }
      function qk(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function rk(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = pk() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          sk(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          tk(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function sk(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function tk(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = uk(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          vk(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          sk(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          wk(a2, i2);
          xk(i2);
          l = k2;
          return;
        }
      }
      function uk(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function vk(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function wk(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function xk(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function yk(a2) {
        a2 = a2 | 0;
        Bk(a2);
        return;
      }
      function zk(a2) {
        a2 = a2 | 0;
        Ak(a2 + 24 | 0);
        return;
      }
      function Ak(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function Bk(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 4, b2, Ck() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Ck() {
        return 1180;
      }
      function Dk(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = Ek(a2) | 0;
        a2 = c[h2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = a2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        d2 = Fk(b2, f2, d2) | 0;
        l = e2;
        return d2 | 0;
      }
      function Ek(a2) {
        a2 = a2 | 0;
        return (c[(pk() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Fk(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2;
        e2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
        Gk(f2, d2);
        f2 = Hk(f2, d2) | 0;
        f2 = Ik(wb[e2 & 15](a2, f2) | 0) | 0;
        l = g2;
        return f2 | 0;
      }
      function Gk(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return;
      }
      function Hk(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return Jk(b2) | 0;
      }
      function Ik(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Jk(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Kk(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Lk(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function Lk(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = Mk() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = Nk(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Ok(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function Mk() {
        var b2 = 0, d2 = 0;
        if (!(a[7672] | 0)) {
          Vk(9376);
          Ha(30, 9376, o | 0) | 0;
          d2 = 7672;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9376) | 0)) {
          b2 = 9376;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Vk(9376);
        }
        return 9376;
      }
      function Nk(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Ok(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = Mk() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Pk(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Qk(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Pk(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Qk(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = Rk(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          Sk(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Pk(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          Tk(a2, i2);
          Uk(i2);
          l = k2;
          return;
        }
      }
      function Rk(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function Sk(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function Tk(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Uk(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Vk(a2) {
        a2 = a2 | 0;
        Yk(a2);
        return;
      }
      function Wk(a2) {
        a2 = a2 | 0;
        Xk(a2 + 24 | 0);
        return;
      }
      function Xk(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function Yk(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 5, b2, Zk() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Zk() {
        return 1196;
      }
      function _k(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2 + 8 | 0;
        f2 = d2;
        g2 = $k(a2) | 0;
        a2 = c[g2 + 4 >> 2] | 0;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = a2;
        c[e2 >> 2] = c[f2 >> 2];
        c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
        b2 = al(b2, e2) | 0;
        l = d2;
        return b2 | 0;
      }
      function $k(a2) {
        a2 = a2 | 0;
        return (c[(Mk() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function al(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
        return Ik(pb[d2 & 31](a2) | 0) | 0;
      }
      function bl(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        cl(a2, d2, f2, 1);
        l = e2;
        return;
      }
      function cl(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = dl() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = el(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, fl(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function dl() {
        var b2 = 0, d2 = 0;
        if (!(a[7680] | 0)) {
          ml(9412);
          Ha(31, 9412, o | 0) | 0;
          d2 = 7680;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9412) | 0)) {
          b2 = 9412;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          ml(9412);
        }
        return 9412;
      }
      function el(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function fl(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = dl() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          gl(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          hl(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function gl(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function hl(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = il(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          jl(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          gl(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          kl(a2, i2);
          ll(i2);
          l = k2;
          return;
        }
      }
      function il(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function jl(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function kl(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function ll(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function ml(a2) {
        a2 = a2 | 0;
        pl(a2);
        return;
      }
      function nl(a2) {
        a2 = a2 | 0;
        ol(a2 + 24 | 0);
        return;
      }
      function ol(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function pl(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 6, b2, ql() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function ql() {
        return 1200;
      }
      function rl(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2 + 8 | 0;
        f2 = d2;
        g2 = sl(a2) | 0;
        a2 = c[g2 + 4 >> 2] | 0;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = a2;
        c[e2 >> 2] = c[f2 >> 2];
        c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
        b2 = tl(b2, e2) | 0;
        l = d2;
        return b2 | 0;
      }
      function sl(a2) {
        a2 = a2 | 0;
        return (c[(dl() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function tl(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
        return ul(pb[d2 & 31](a2) | 0) | 0;
      }
      function ul(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function vl(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        wl(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function wl(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = xl() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = yl(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, zl(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function xl() {
        var b2 = 0, d2 = 0;
        if (!(a[7688] | 0)) {
          Gl(9448);
          Ha(32, 9448, o | 0) | 0;
          d2 = 7688;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9448) | 0)) {
          b2 = 9448;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Gl(9448);
        }
        return 9448;
      }
      function yl(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function zl(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = xl() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Al(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Bl(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Al(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Bl(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = Cl(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          Dl(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Al(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          El(a2, i2);
          Fl(i2);
          l = k2;
          return;
        }
      }
      function Cl(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function Dl(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function El(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Fl(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Gl(a2) {
        a2 = a2 | 0;
        Jl(a2);
        return;
      }
      function Hl(a2) {
        a2 = a2 | 0;
        Il(a2 + 24 | 0);
        return;
      }
      function Il(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function Jl(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 6, b2, Kl() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Kl() {
        return 1204;
      }
      function Ll(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = Ml(a2) | 0;
        a2 = c[h2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = a2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Nl(b2, f2, d2);
        l = e2;
        return;
      }
      function Ml(a2) {
        a2 = a2 | 0;
        return (c[(xl() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Nl(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2;
        e2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
        Ol(f2, d2);
        f2 = Pl(f2, d2) | 0;
        ob[e2 & 31](a2, f2);
        l = g2;
        return;
      }
      function Ol(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return;
      }
      function Pl(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return Ql(b2) | 0;
      }
      function Ql(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Rl(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Sl(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function Sl(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = Tl() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = Ul(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Vl(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function Tl() {
        var b2 = 0, d2 = 0;
        if (!(a[7696] | 0)) {
          am(9484);
          Ha(33, 9484, o | 0) | 0;
          d2 = 7696;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9484) | 0)) {
          b2 = 9484;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          am(9484);
        }
        return 9484;
      }
      function Ul(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Vl(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = Tl() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Wl(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Xl(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Wl(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Xl(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = Yl(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          Zl(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Wl(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          _l(a2, i2);
          $l(i2);
          l = k2;
          return;
        }
      }
      function Yl(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function Zl(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function _l(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function $l(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function am(a2) {
        a2 = a2 | 0;
        dm(a2);
        return;
      }
      function bm(a2) {
        a2 = a2 | 0;
        cm(a2 + 24 | 0);
        return;
      }
      function cm(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function dm(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 1, b2, em() | 0, 2);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function em() {
        return 1212;
      }
      function fm(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        f2 = l;
        l = l + 16 | 0;
        g2 = f2 + 8 | 0;
        h2 = f2;
        i2 = gm(a2) | 0;
        a2 = c[i2 + 4 >> 2] | 0;
        c[h2 >> 2] = c[i2 >> 2];
        c[h2 + 4 >> 2] = a2;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = c[h2 + 4 >> 2];
        hm(b2, g2, d2, e2);
        l = f2;
        return;
      }
      function gm(a2) {
        a2 = a2 | 0;
        return (c[(Tl() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function hm(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        i2 = l;
        l = l + 16 | 0;
        g2 = i2 + 1 | 0;
        h2 = i2;
        f2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          f2 = c[(c[a2 >> 2] | 0) + f2 >> 2] | 0;
        Ol(g2, d2);
        g2 = Pl(g2, d2) | 0;
        Gk(h2, e2);
        h2 = Hk(h2, e2) | 0;
        Eb[f2 & 15](a2, g2, h2);
        l = i2;
        return;
      }
      function im(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        jm(a2, d2, f2, 1);
        l = e2;
        return;
      }
      function jm(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = km() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = lm(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, mm(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function km() {
        var b2 = 0, d2 = 0;
        if (!(a[7704] | 0)) {
          tm(9520);
          Ha(34, 9520, o | 0) | 0;
          d2 = 7704;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9520) | 0)) {
          b2 = 9520;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          tm(9520);
        }
        return 9520;
      }
      function lm(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function mm(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = km() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          nm(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          om(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function nm(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function om(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = pm(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          qm(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          nm(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          rm(a2, i2);
          sm(i2);
          l = k2;
          return;
        }
      }
      function pm(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function qm(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function rm(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function sm(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function tm(a2) {
        a2 = a2 | 0;
        wm(a2);
        return;
      }
      function um(a2) {
        a2 = a2 | 0;
        vm(a2 + 24 | 0);
        return;
      }
      function vm(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function wm(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 1, b2, xm() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function xm() {
        return 1224;
      }
      function ym(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        f2 = l;
        l = l + 16 | 0;
        g2 = f2 + 8 | 0;
        h2 = f2;
        i2 = zm(a2) | 0;
        a2 = c[i2 + 4 >> 2] | 0;
        c[h2 >> 2] = c[i2 >> 2];
        c[h2 + 4 >> 2] = a2;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = c[h2 + 4 >> 2];
        e2 = +Am(b2, g2, d2);
        l = f2;
        return +e2;
      }
      function zm(a2) {
        a2 = a2 | 0;
        return (c[(km() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Am(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2;
        e2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
        tj(f2, d2);
        f2 = uj(f2, d2) | 0;
        h2 = +ch(+zb[e2 & 7](a2, f2));
        l = g2;
        return +h2;
      }
      function Bm(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Cm(a2, d2, f2, 1);
        l = e2;
        return;
      }
      function Cm(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = Dm() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = Em(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Fm(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function Dm() {
        var b2 = 0, d2 = 0;
        if (!(a[7712] | 0)) {
          Mm(9556);
          Ha(35, 9556, o | 0) | 0;
          d2 = 7712;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9556) | 0)) {
          b2 = 9556;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Mm(9556);
        }
        return 9556;
      }
      function Em(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Fm(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = Dm() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Gm(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Hm(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Gm(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Hm(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = Im(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          Jm(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Gm(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          Km(a2, i2);
          Lm(i2);
          l = k2;
          return;
        }
      }
      function Im(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function Jm(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function Km(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Lm(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Mm(a2) {
        a2 = a2 | 0;
        Pm(a2);
        return;
      }
      function Nm(a2) {
        a2 = a2 | 0;
        Om(a2 + 24 | 0);
        return;
      }
      function Om(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function Pm(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 5, b2, Qm() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Qm() {
        return 1232;
      }
      function Rm(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = Sm(a2) | 0;
        a2 = c[h2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = a2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        d2 = +Tm(b2, f2);
        l = e2;
        return +d2;
      }
      function Sm(a2) {
        a2 = a2 | 0;
        return (c[(Dm() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Tm(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
        return + +ch(+ub[d2 & 15](a2));
      }
      function Um(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Vm(a2, d2, f2, 1);
        l = e2;
        return;
      }
      function Vm(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = Wm() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = Xm(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Ym(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function Wm() {
        var b2 = 0, d2 = 0;
        if (!(a[7720] | 0)) {
          dn(9592);
          Ha(36, 9592, o | 0) | 0;
          d2 = 7720;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9592) | 0)) {
          b2 = 9592;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          dn(9592);
        }
        return 9592;
      }
      function Xm(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Ym(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = Wm() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Zm(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          _m(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Zm(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function _m(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = $m(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          an(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Zm(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          bn(a2, i2);
          cn(i2);
          l = k2;
          return;
        }
      }
      function $m(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function an(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function bn(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function cn(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function dn(a2) {
        a2 = a2 | 0;
        gn(a2);
        return;
      }
      function en(a2) {
        a2 = a2 | 0;
        fn(a2 + 24 | 0);
        return;
      }
      function fn(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function gn(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 7, b2, hn() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function hn() {
        return 1276;
      }
      function jn(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2 + 8 | 0;
        f2 = d2;
        g2 = kn(a2) | 0;
        a2 = c[g2 + 4 >> 2] | 0;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = a2;
        c[e2 >> 2] = c[f2 >> 2];
        c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
        b2 = ln(b2, e2) | 0;
        l = d2;
        return b2 | 0;
      }
      function kn(a2) {
        a2 = a2 | 0;
        return (c[(Wm() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function ln(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        f2 = l;
        l = l + 16 | 0;
        e2 = f2;
        d2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
        ob[d2 & 31](e2, a2);
        e2 = mn(e2) | 0;
        l = f2;
        return e2 | 0;
      }
      function mn(a2) {
        a2 = a2 | 0;
        var b2 = 0, c2 = 0, d2 = 0, e2 = 0;
        e2 = l;
        l = l + 32 | 0;
        b2 = e2 + 12 | 0;
        c2 = e2;
        d2 = Di(nn() | 0) | 0;
        if (!d2)
          a2 = pn(a2) | 0;
        else {
          Ei(b2, d2);
          Fi(c2, b2);
          on(a2, c2);
          a2 = Hi(b2) | 0;
        }
        l = e2;
        return a2 | 0;
      }
      function nn() {
        var b2 = 0;
        if (!(a[7736] | 0)) {
          An(9640);
          Ha(25, 9640, o | 0) | 0;
          b2 = 7736;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 9640;
      }
      function on(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        un(b2, a2, a2 + 8 | 0) | 0;
        return;
      }
      function pn(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        d2 = l;
        l = l + 16 | 0;
        f2 = d2 + 4 | 0;
        h2 = d2;
        e2 = jy(8) | 0;
        b2 = e2;
        i2 = qC(16) | 0;
        c[i2 >> 2] = c[a2 >> 2];
        c[i2 + 4 >> 2] = c[a2 + 4 >> 2];
        c[i2 + 8 >> 2] = c[a2 + 8 >> 2];
        c[i2 + 12 >> 2] = c[a2 + 12 >> 2];
        g2 = b2 + 4 | 0;
        c[g2 >> 2] = i2;
        a2 = qC(8) | 0;
        g2 = c[g2 >> 2] | 0;
        c[h2 >> 2] = 0;
        c[f2 >> 2] = c[h2 >> 2];
        qn(a2, g2, f2);
        c[e2 >> 2] = a2;
        l = d2;
        return b2 | 0;
      }
      function qn(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        d2 = qC(16) | 0;
        c[d2 + 4 >> 2] = 0;
        c[d2 + 8 >> 2] = 0;
        c[d2 >> 2] = 1244;
        c[d2 + 12 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function rn(a2) {
        a2 = a2 | 0;
        kC(a2);
        sC(a2);
        return;
      }
      function sn(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 12 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function tn(a2) {
        a2 = a2 | 0;
        sC(a2);
        return;
      }
      function un(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        b2 = vn(c[a2 >> 2] | 0, b2, d2) | 0;
        d2 = a2 + 4 | 0;
        c[(c[d2 >> 2] | 0) + 8 >> 2] = b2;
        return c[(c[d2 >> 2] | 0) + 8 >> 2] | 0;
      }
      function vn(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2;
        UA(f2);
        a2 = Sg(a2) | 0;
        d2 = wn(a2, c[b2 >> 2] | 0, +h[d2 >> 3]) | 0;
        WA(f2);
        l = e2;
        return d2 | 0;
      }
      function wn(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = +c2;
        var d2 = 0;
        d2 = Vg(xn() | 0) | 0;
        b2 = Xg(b2) | 0;
        return za(0, d2 | 0, a2 | 0, b2 | 0, + +Wg(c2)) | 0;
      }
      function xn() {
        var b2 = 0;
        if (!(a[7728] | 0)) {
          yn(9628);
          b2 = 7728;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 9628;
      }
      function yn(a2) {
        a2 = a2 | 0;
        fh(a2, zn() | 0, 2);
        return;
      }
      function zn() {
        return 1264;
      }
      function An(a2) {
        a2 = a2 | 0;
        Zi(a2);
        return;
      }
      function Bn(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Cn(a2, d2, f2, 1);
        l = e2;
        return;
      }
      function Cn(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = Dn() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = En(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Fn(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function Dn() {
        var b2 = 0, d2 = 0;
        if (!(a[7744] | 0)) {
          Mn(9684);
          Ha(37, 9684, o | 0) | 0;
          d2 = 7744;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9684) | 0)) {
          b2 = 9684;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Mn(9684);
        }
        return 9684;
      }
      function En(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Fn(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = Dn() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Gn(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Hn(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Gn(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Hn(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = In(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          Jn(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Gn(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          Kn(a2, i2);
          Ln(i2);
          l = k2;
          return;
        }
      }
      function In(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function Jn(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function Kn(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Ln(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Mn(a2) {
        a2 = a2 | 0;
        Pn(a2);
        return;
      }
      function Nn(a2) {
        a2 = a2 | 0;
        On(a2 + 24 | 0);
        return;
      }
      function On(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function Pn(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 5, b2, Qn() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Qn() {
        return 1280;
      }
      function Rn(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = Sn(a2) | 0;
        a2 = c[h2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = a2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        d2 = Tn(b2, f2, d2) | 0;
        l = e2;
        return d2 | 0;
      }
      function Sn(a2) {
        a2 = a2 | 0;
        return (c[(Dn() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Tn(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        h2 = l;
        l = l + 32 | 0;
        f2 = h2;
        g2 = h2 + 16 | 0;
        e2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
        tj(g2, d2);
        g2 = uj(g2, d2) | 0;
        Eb[e2 & 15](f2, a2, g2);
        g2 = mn(f2) | 0;
        l = h2;
        return g2 | 0;
      }
      function Un(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Vn(a2, d2, f2, 1);
        l = e2;
        return;
      }
      function Vn(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = Wn() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = Xn(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Yn(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function Wn() {
        var b2 = 0, d2 = 0;
        if (!(a[7752] | 0)) {
          eo(9720);
          Ha(38, 9720, o | 0) | 0;
          d2 = 7752;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9720) | 0)) {
          b2 = 9720;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          eo(9720);
        }
        return 9720;
      }
      function Xn(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Yn(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = Wn() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Zn(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          _n(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Zn(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function _n(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = $n(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          ao(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Zn(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          bo(a2, i2);
          co(i2);
          l = k2;
          return;
        }
      }
      function $n(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function ao(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function bo(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function co(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function eo(a2) {
        a2 = a2 | 0;
        ho(a2);
        return;
      }
      function fo(a2) {
        a2 = a2 | 0;
        go(a2 + 24 | 0);
        return;
      }
      function go(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function ho(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 8, b2, io() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function io() {
        return 1288;
      }
      function jo(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2 + 8 | 0;
        f2 = d2;
        g2 = ko(a2) | 0;
        a2 = c[g2 + 4 >> 2] | 0;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = a2;
        c[e2 >> 2] = c[f2 >> 2];
        c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
        b2 = lo(b2, e2) | 0;
        l = d2;
        return b2 | 0;
      }
      function ko(a2) {
        a2 = a2 | 0;
        return (c[(Wn() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function lo(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
        return bh(pb[d2 & 31](a2) | 0) | 0;
      }
      function mo(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        no(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function no(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = oo() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = po(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, qo(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function oo() {
        var b2 = 0, d2 = 0;
        if (!(a[7760] | 0)) {
          xo(9756);
          Ha(39, 9756, o | 0) | 0;
          d2 = 7760;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9756) | 0)) {
          b2 = 9756;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          xo(9756);
        }
        return 9756;
      }
      function po(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function qo(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = oo() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          ro(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          so(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function ro(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function so(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = to(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          uo(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          ro(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          vo(a2, i2);
          wo(i2);
          l = k2;
          return;
        }
      }
      function to(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function uo(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function vo(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function wo(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function xo(a2) {
        a2 = a2 | 0;
        Ao(a2);
        return;
      }
      function yo(a2) {
        a2 = a2 | 0;
        zo(a2 + 24 | 0);
        return;
      }
      function zo(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function Ao(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 8, b2, Bo() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Bo() {
        return 1292;
      }
      function Co(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = Do(a2) | 0;
        a2 = c[h2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = a2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Eo(b2, f2, d2);
        l = e2;
        return;
      }
      function Do(a2) {
        a2 = a2 | 0;
        return (c[(oo() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Eo(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        var e2 = 0, f2 = 0, g2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2;
        e2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
        rj(f2, d2);
        d2 = +sj(f2, d2);
        lb[e2 & 31](a2, d2);
        l = g2;
        return;
      }
      function Fo(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Go(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function Go(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = Ho() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = Io(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Jo(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function Ho() {
        var b2 = 0, d2 = 0;
        if (!(a[7768] | 0)) {
          Qo(9792);
          Ha(40, 9792, o | 0) | 0;
          d2 = 7768;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9792) | 0)) {
          b2 = 9792;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Qo(9792);
        }
        return 9792;
      }
      function Io(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Jo(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = Ho() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Ko(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Lo(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Ko(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Lo(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = Mo(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          No(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Ko(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          Oo(a2, i2);
          Po(i2);
          l = k2;
          return;
        }
      }
      function Mo(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function No(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function Oo(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Po(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Qo(a2) {
        a2 = a2 | 0;
        To(a2);
        return;
      }
      function Ro(a2) {
        a2 = a2 | 0;
        So(a2 + 24 | 0);
        return;
      }
      function So(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function To(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 1, b2, Uo() | 0, 2);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Uo() {
        return 1300;
      }
      function Vo(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = +e2;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        f2 = l;
        l = l + 16 | 0;
        g2 = f2 + 8 | 0;
        h2 = f2;
        i2 = Wo(a2) | 0;
        a2 = c[i2 + 4 >> 2] | 0;
        c[h2 >> 2] = c[i2 >> 2];
        c[h2 + 4 >> 2] = a2;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = c[h2 + 4 >> 2];
        Xo(b2, g2, d2, e2);
        l = f2;
        return;
      }
      function Wo(a2) {
        a2 = a2 | 0;
        return (c[(Ho() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Xo(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = +e2;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        i2 = l;
        l = l + 16 | 0;
        g2 = i2 + 1 | 0;
        h2 = i2;
        f2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          f2 = c[(c[a2 >> 2] | 0) + f2 >> 2] | 0;
        tj(g2, d2);
        g2 = uj(g2, d2) | 0;
        rj(h2, e2);
        e2 = +sj(h2, e2);
        Gb[f2 & 15](a2, g2, e2);
        l = i2;
        return;
      }
      function Yo(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Zo(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function Zo(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = _o() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = $o(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, ap(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function _o() {
        var b2 = 0, d2 = 0;
        if (!(a[7776] | 0)) {
          hp(9828);
          Ha(41, 9828, o | 0) | 0;
          d2 = 7776;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9828) | 0)) {
          b2 = 9828;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          hp(9828);
        }
        return 9828;
      }
      function $o(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function ap(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = _o() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          bp(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          cp(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function bp(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function cp(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = dp(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          ep(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          bp(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          fp(a2, i2);
          gp(i2);
          l = k2;
          return;
        }
      }
      function dp(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function ep(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function fp(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function gp(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function hp(a2) {
        a2 = a2 | 0;
        kp(a2);
        return;
      }
      function ip(a2) {
        a2 = a2 | 0;
        jp(a2 + 24 | 0);
        return;
      }
      function jp(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function kp(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 7, b2, lp() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function lp() {
        return 1312;
      }
      function mp(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = np(a2) | 0;
        a2 = c[h2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = a2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        op(b2, f2, d2);
        l = e2;
        return;
      }
      function np(a2) {
        a2 = a2 | 0;
        return (c[(_o() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function op(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2;
        e2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
        tj(f2, d2);
        f2 = uj(f2, d2) | 0;
        ob[e2 & 31](a2, f2);
        l = g2;
        return;
      }
      function pp(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        qp(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function qp(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = rp() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = sp(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, tp(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function rp() {
        var b2 = 0, d2 = 0;
        if (!(a[7784] | 0)) {
          Ap(9864);
          Ha(42, 9864, o | 0) | 0;
          d2 = 7784;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9864) | 0)) {
          b2 = 9864;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Ap(9864);
        }
        return 9864;
      }
      function sp(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function tp(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = rp() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          up(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          vp(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function up(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function vp(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = wp(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          xp(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          up(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          yp(a2, i2);
          zp(i2);
          l = k2;
          return;
        }
      }
      function wp(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function xp(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function yp(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function zp(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Ap(a2) {
        a2 = a2 | 0;
        Dp(a2);
        return;
      }
      function Bp(a2) {
        a2 = a2 | 0;
        Cp(a2 + 24 | 0);
        return;
      }
      function Cp(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function Dp(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 8, b2, Ep() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Ep() {
        return 1320;
      }
      function Fp(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = Gp(a2) | 0;
        a2 = c[h2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = a2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Hp(b2, f2, d2);
        l = e2;
        return;
      }
      function Gp(a2) {
        a2 = a2 | 0;
        return (c[(rp() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Hp(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2;
        e2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
        Ip(f2, d2);
        f2 = Jp(f2, d2) | 0;
        ob[e2 & 31](a2, f2);
        l = g2;
        return;
      }
      function Ip(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return;
      }
      function Jp(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return Kp(b2) | 0;
      }
      function Kp(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Lp(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Mp(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function Mp(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = Np() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = Op(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Pp(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function Np() {
        var b2 = 0, d2 = 0;
        if (!(a[7792] | 0)) {
          Wp(9900);
          Ha(43, 9900, o | 0) | 0;
          d2 = 7792;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9900) | 0)) {
          b2 = 9900;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Wp(9900);
        }
        return 9900;
      }
      function Op(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Pp(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = Np() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Qp(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Rp(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Qp(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Rp(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = Sp(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          Tp(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Qp(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          Up(a2, i2);
          Vp(i2);
          l = k2;
          return;
        }
      }
      function Sp(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function Tp(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function Up(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Vp(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Wp(a2) {
        a2 = a2 | 0;
        Zp(a2);
        return;
      }
      function Xp(a2) {
        a2 = a2 | 0;
        Yp(a2 + 24 | 0);
        return;
      }
      function Yp(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function Zp(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 22, b2, _p() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function _p() {
        return 1344;
      }
      function $p(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2 + 8 | 0;
        f2 = d2;
        g2 = aq(a2) | 0;
        a2 = c[g2 + 4 >> 2] | 0;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = a2;
        c[e2 >> 2] = c[f2 >> 2];
        c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
        bq(b2, e2);
        l = d2;
        return;
      }
      function aq(a2) {
        a2 = a2 | 0;
        return (c[(Np() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function bq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
        nb[d2 & 127](a2);
        return;
      }
      function cq(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = c[a2 >> 2] | 0;
        f2 = dq() | 0;
        a2 = eq(d2) | 0;
        fi(g2, b2, f2, a2, fq(d2, e2) | 0, e2);
        return;
      }
      function dq() {
        var b2 = 0, d2 = 0;
        if (!(a[7800] | 0)) {
          mq(9936);
          Ha(44, 9936, o | 0) | 0;
          d2 = 7800;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9936) | 0)) {
          b2 = 9936;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          mq(9936);
        }
        return 9936;
      }
      function eq(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function fq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = dq() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          gq(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          hq(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function gq(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function hq(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = iq(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          jq(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          gq(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          kq(a2, f2);
          lq(f2);
          l = i2;
          return;
        }
      }
      function iq(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function jq(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function kq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function lq(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function mq(a2) {
        a2 = a2 | 0;
        pq(a2);
        return;
      }
      function nq(a2) {
        a2 = a2 | 0;
        oq(a2 + 24 | 0);
        return;
      }
      function oq(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function pq(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 23, b2, Kl() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function qq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        sq(c[(rq(a2) | 0) >> 2] | 0, b2);
        return;
      }
      function rq(a2) {
        a2 = a2 | 0;
        return (c[(dq() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function sq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c2 = 0, d2 = 0;
        c2 = l;
        l = l + 16 | 0;
        d2 = c2;
        Ol(d2, b2);
        b2 = Pl(d2, b2) | 0;
        nb[a2 & 127](b2);
        l = c2;
        return;
      }
      function tq(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = c[a2 >> 2] | 0;
        f2 = uq() | 0;
        a2 = vq(d2) | 0;
        fi(g2, b2, f2, a2, wq(d2, e2) | 0, e2);
        return;
      }
      function uq() {
        var b2 = 0, d2 = 0;
        if (!(a[7808] | 0)) {
          Dq(9972);
          Ha(45, 9972, o | 0) | 0;
          d2 = 7808;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(9972) | 0)) {
          b2 = 9972;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Dq(9972);
        }
        return 9972;
      }
      function vq(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function wq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = uq() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          xq(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          yq(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function xq(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function yq(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = zq(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          Aq(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          xq(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          Bq(a2, f2);
          Cq(f2);
          l = i2;
          return;
        }
      }
      function zq(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function Aq(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function Bq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Cq(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Dq(a2) {
        a2 = a2 | 0;
        Gq(a2);
        return;
      }
      function Eq(a2) {
        a2 = a2 | 0;
        Fq(a2 + 24 | 0);
        return;
      }
      function Fq(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function Gq(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 9, b2, Hq() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Hq() {
        return 1348;
      }
      function Iq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return Kq(c[(Jq(a2) | 0) >> 2] | 0, b2) | 0;
      }
      function Jq(a2) {
        a2 = a2 | 0;
        return (c[(uq() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function Kq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c2 = 0, d2 = 0;
        c2 = l;
        l = l + 16 | 0;
        d2 = c2;
        Lq(d2, b2);
        b2 = Mq(d2, b2) | 0;
        b2 = Ik(pb[a2 & 31](b2) | 0) | 0;
        l = c2;
        return b2 | 0;
      }
      function Lq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return;
      }
      function Mq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return Nq(b2) | 0;
      }
      function Nq(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Oq(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = c[a2 >> 2] | 0;
        f2 = Pq() | 0;
        a2 = Qq(d2) | 0;
        fi(g2, b2, f2, a2, Rq(d2, e2) | 0, e2);
        return;
      }
      function Pq() {
        var b2 = 0, d2 = 0;
        if (!(a[7816] | 0)) {
          Yq(10008);
          Ha(46, 10008, o | 0) | 0;
          d2 = 7816;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10008) | 0)) {
          b2 = 10008;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Yq(10008);
        }
        return 10008;
      }
      function Qq(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Rq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = Pq() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          Sq(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          Tq(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function Sq(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function Tq(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = Uq(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          Vq(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          Sq(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          Wq(a2, f2);
          Xq(f2);
          l = i2;
          return;
        }
      }
      function Uq(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function Vq(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function Wq(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Xq(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Yq(a2) {
        a2 = a2 | 0;
        $q(a2);
        return;
      }
      function Zq(a2) {
        a2 = a2 | 0;
        _q(a2 + 24 | 0);
        return;
      }
      function _q(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function $q(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 15, b2, Zk() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function ar(a2) {
        a2 = a2 | 0;
        return cr(c[(br(a2) | 0) >> 2] | 0) | 0;
      }
      function br(a2) {
        a2 = a2 | 0;
        return (c[(Pq() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function cr(a2) {
        a2 = a2 | 0;
        return Ik(Ab[a2 & 7]() | 0) | 0;
      }
      function dr() {
        var b2 = 0;
        if (!(a[7832] | 0)) {
          nr(10052);
          Ha(25, 10052, o | 0) | 0;
          b2 = 7832;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10052;
      }
      function er(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = fr() | 0;
        c[a2 + 4 >> 2] = gr() | 0;
        c[a2 + 12 >> 2] = b2;
        c[a2 + 8 >> 2] = hr() | 0;
        c[a2 + 32 >> 2] = 2;
        return;
      }
      function fr() {
        return 11709;
      }
      function gr() {
        return 1188;
      }
      function hr() {
        return lr() | 0;
      }
      function ir(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        if ((jr(d2, 896) | 0) == 512) {
          if (c2 | 0) {
            kr(c2);
            sC(c2);
          }
        } else if (b2 | 0) {
          uf(b2);
          sC(b2);
        }
        return;
      }
      function jr(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return b2 & a2 | 0;
      }
      function kr(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 4 >> 2] | 0;
        if (a2 | 0)
          oC(a2);
        return;
      }
      function lr() {
        var b2 = 0;
        if (!(a[7824] | 0)) {
          c[2511] = mr() | 0;
          c[2512] = 0;
          b2 = 7824;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10044;
      }
      function mr() {
        return 0;
      }
      function nr(a2) {
        a2 = a2 | 0;
        Zi(a2);
        return;
      }
      function or(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0;
        b2 = l;
        l = l + 32 | 0;
        d2 = b2 + 24 | 0;
        g2 = b2 + 16 | 0;
        f2 = b2 + 8 | 0;
        e2 = b2;
        pr(a2, 4827);
        qr(a2, 4834, 3) | 0;
        rr(a2, 3682, 47) | 0;
        c[g2 >> 2] = 9;
        c[g2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[g2 >> 2];
        c[d2 + 4 >> 2] = c[g2 + 4 >> 2];
        sr(a2, 4841, d2) | 0;
        c[f2 >> 2] = 1;
        c[f2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[f2 >> 2];
        c[d2 + 4 >> 2] = c[f2 + 4 >> 2];
        tr(a2, 4871, d2) | 0;
        c[e2 >> 2] = 10;
        c[e2 + 4 >> 2] = 0;
        c[d2 >> 2] = c[e2 >> 2];
        c[d2 + 4 >> 2] = c[e2 + 4 >> 2];
        ur(a2, 4891, d2) | 0;
        l = b2;
        return;
      }
      function pr(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = nt() | 0;
        c[a2 >> 2] = d2;
        ot(d2, b2);
        Hv(c[a2 >> 2] | 0);
        return;
      }
      function qr(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        Ws(a2, ai(b2) | 0, c2, 0);
        return a2 | 0;
      }
      function rr(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        Es(a2, ai(b2) | 0, c2, 0);
        return a2 | 0;
      }
      function sr(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        is(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function tr(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Or(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function ur(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = c[d2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[d2 >> 2];
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        vr(a2, b2, f2);
        l = e2;
        return a2 | 0;
      }
      function vr(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        wr(a2, d2, f2, 1);
        l = e2;
        return;
      }
      function wr(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = xr() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = yr(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, zr(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function xr() {
        var b2 = 0, d2 = 0;
        if (!(a[7840] | 0)) {
          Gr(10100);
          Ha(48, 10100, o | 0) | 0;
          d2 = 7840;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10100) | 0)) {
          b2 = 10100;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Gr(10100);
        }
        return 10100;
      }
      function yr(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function zr(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = xr() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Ar(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Br(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Ar(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Br(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = Cr(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          Dr(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Ar(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          Er(a2, i2);
          Fr(i2);
          l = k2;
          return;
        }
      }
      function Cr(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function Dr(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function Er(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Fr(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Gr(a2) {
        a2 = a2 | 0;
        Jr(a2);
        return;
      }
      function Hr(a2) {
        a2 = a2 | 0;
        Ir(a2 + 24 | 0);
        return;
      }
      function Ir(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function Jr(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 6, b2, Kr() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Kr() {
        return 1364;
      }
      function Lr(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = Mr(a2) | 0;
        a2 = c[h2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = a2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        d2 = Nr(b2, f2, d2) | 0;
        l = e2;
        return d2 | 0;
      }
      function Mr(a2) {
        a2 = a2 | 0;
        return (c[(xr() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function Nr(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2;
        e2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
        tj(f2, d2);
        f2 = uj(f2, d2) | 0;
        f2 = Qj(wb[e2 & 15](a2, f2) | 0) | 0;
        l = g2;
        return f2 | 0;
      }
      function Or(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        Pr(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function Pr(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = Qr() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = Rr(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, Sr(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function Qr() {
        var b2 = 0, d2 = 0;
        if (!(a[7848] | 0)) {
          Zr(10136);
          Ha(49, 10136, o | 0) | 0;
          d2 = 7848;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10136) | 0)) {
          b2 = 10136;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Zr(10136);
        }
        return 10136;
      }
      function Rr(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function Sr(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = Qr() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          Tr(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          Ur(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function Tr(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function Ur(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = Vr(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          Wr(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          Tr(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          Xr(a2, i2);
          Yr(i2);
          l = k2;
          return;
        }
      }
      function Vr(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function Wr(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function Xr(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Yr(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Zr(a2) {
        a2 = a2 | 0;
        as(a2);
        return;
      }
      function _r(a2) {
        a2 = a2 | 0;
        $r(a2 + 24 | 0);
        return;
      }
      function $r(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function as(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 9, b2, bs() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function bs() {
        return 1372;
      }
      function cs(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        h2 = ds(a2) | 0;
        a2 = c[h2 + 4 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = a2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        es(b2, f2, d2);
        l = e2;
        return;
      }
      function ds(a2) {
        a2 = a2 | 0;
        return (c[(Qr() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function es(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        var e2 = 0, f2 = 0, g2 = 0, h2 = ib;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2;
        e2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
        fs2(f2, d2);
        h2 = T(gs(f2, d2));
        kb[e2 & 1](a2, h2);
        l = g2;
        return;
      }
      function fs2(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        return;
      }
      function gs(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        return T(hs(b2));
      }
      function hs(a2) {
        a2 = +a2;
        return T(a2);
      }
      function is(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2 + 8 | 0;
        g2 = e2;
        i2 = c[d2 >> 2] | 0;
        h2 = c[d2 + 4 >> 2] | 0;
        d2 = ai(b2) | 0;
        c[g2 >> 2] = i2;
        c[g2 + 4 >> 2] = h2;
        c[f2 >> 2] = c[g2 >> 2];
        c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
        js(a2, d2, f2, 0);
        l = e2;
        return;
      }
      function js(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2 + 16 | 0;
        m2 = f2 + 8 | 0;
        i2 = f2;
        k2 = c[d2 >> 2] | 0;
        j2 = c[d2 + 4 >> 2] | 0;
        h2 = c[a2 >> 2] | 0;
        a2 = ks() | 0;
        c[m2 >> 2] = k2;
        c[m2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[m2 >> 2];
        c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
        d2 = ls(g2) | 0;
        c[i2 >> 2] = k2;
        c[i2 + 4 >> 2] = j2;
        c[g2 >> 2] = c[i2 >> 2];
        c[g2 + 4 >> 2] = c[i2 + 4 >> 2];
        fi(h2, b2, a2, d2, ms(g2, e2) | 0, e2);
        l = f2;
        return;
      }
      function ks() {
        var b2 = 0, d2 = 0;
        if (!(a[7856] | 0)) {
          ts(10172);
          Ha(50, 10172, o | 0) | 0;
          d2 = 7856;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10172) | 0)) {
          b2 = 10172;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          ts(10172);
        }
        return 10172;
      }
      function ls(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function ms(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        m2 = l;
        l = l + 32 | 0;
        f2 = m2 + 24 | 0;
        h2 = m2 + 16 | 0;
        i2 = m2;
        j2 = m2 + 8 | 0;
        g2 = c[a2 >> 2] | 0;
        e2 = c[a2 + 4 >> 2] | 0;
        c[i2 >> 2] = g2;
        c[i2 + 4 >> 2] = e2;
        n2 = ks() | 0;
        k2 = n2 + 24 | 0;
        a2 = ji(b2, 4) | 0;
        c[j2 >> 2] = a2;
        b2 = n2 + 28 | 0;
        d2 = c[b2 >> 2] | 0;
        if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
          c[h2 >> 2] = g2;
          c[h2 + 4 >> 2] = e2;
          c[f2 >> 2] = c[h2 >> 2];
          c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
          ns(d2, f2, a2);
          a2 = (c[b2 >> 2] | 0) + 12 | 0;
          c[b2 >> 2] = a2;
        } else {
          os(k2, i2, j2);
          a2 = c[b2 >> 2] | 0;
        }
        l = m2;
        return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
      }
      function ns(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        e2 = c[b2 + 4 >> 2] | 0;
        c[a2 >> 2] = c[b2 >> 2];
        c[a2 + 4 >> 2] = e2;
        c[a2 + 8 >> 2] = d2;
        return;
      }
      function os(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
        k2 = l;
        l = l + 48 | 0;
        e2 = k2 + 32 | 0;
        h2 = k2 + 24 | 0;
        i2 = k2;
        j2 = a2 + 4 | 0;
        f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
        g2 = ps(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          m2 = c[a2 >> 2] | 0;
          o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
          n2 = o2 << 1;
          qs2(i2, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
          j2 = i2 + 8 | 0;
          g2 = c[j2 >> 2] | 0;
          f2 = c[b2 + 4 >> 2] | 0;
          d2 = c[d2 >> 2] | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[h2 + 4 >> 2] = f2;
          c[e2 >> 2] = c[h2 >> 2];
          c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
          ns(g2, e2, d2);
          c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
          rs(a2, i2);
          ss(i2);
          l = k2;
          return;
        }
      }
      function ps(a2) {
        a2 = a2 | 0;
        return 357913941;
      }
      function qs2(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 357913941)
              Ta();
            else {
              f2 = qC(b2 * 12 | 0) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 * 12 | 0) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
        return;
      }
      function rs(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function ss(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function ts(a2) {
        a2 = a2 | 0;
        ws(a2);
        return;
      }
      function us(a2) {
        a2 = a2 | 0;
        vs(a2 + 24 | 0);
        return;
      }
      function vs(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          sC(d2);
        }
        return;
      }
      function ws(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 2, 3, b2, xs() | 0, 2);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function xs() {
        return 1380;
      }
      function ys(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        f2 = l;
        l = l + 16 | 0;
        g2 = f2 + 8 | 0;
        h2 = f2;
        i2 = zs(a2) | 0;
        a2 = c[i2 + 4 >> 2] | 0;
        c[h2 >> 2] = c[i2 >> 2];
        c[h2 + 4 >> 2] = a2;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = c[h2 + 4 >> 2];
        As(b2, g2, d2, e2);
        l = f2;
        return;
      }
      function zs(a2) {
        a2 = a2 | 0;
        return (c[(ks() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
      }
      function As(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        i2 = l;
        l = l + 16 | 0;
        g2 = i2 + 1 | 0;
        h2 = i2;
        f2 = c[b2 >> 2] | 0;
        b2 = c[b2 + 4 >> 2] | 0;
        a2 = a2 + (b2 >> 1) | 0;
        if (b2 & 1)
          f2 = c[(c[a2 >> 2] | 0) + f2 >> 2] | 0;
        tj(g2, d2);
        g2 = uj(g2, d2) | 0;
        Bs(h2, e2);
        h2 = Cs(h2, e2) | 0;
        Eb[f2 & 15](a2, g2, h2);
        l = i2;
        return;
      }
      function Bs(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return;
      }
      function Cs(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return Ds(b2) | 0;
      }
      function Ds(a2) {
        a2 = a2 | 0;
        return (a2 | 0) != 0 | 0;
      }
      function Es(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = c[a2 >> 2] | 0;
        f2 = Fs() | 0;
        a2 = Gs(d2) | 0;
        fi(g2, b2, f2, a2, Hs(d2, e2) | 0, e2);
        return;
      }
      function Fs() {
        var b2 = 0, d2 = 0;
        if (!(a[7864] | 0)) {
          Os(10208);
          Ha(51, 10208, o | 0) | 0;
          d2 = 7864;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10208) | 0)) {
          b2 = 10208;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Os(10208);
        }
        return 10208;
      }
      function Gs(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Hs(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = Fs() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          Is(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          Js(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function Is(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function Js(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = Ks(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          Ls(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          Is(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          Ms(a2, f2);
          Ns(f2);
          l = i2;
          return;
        }
      }
      function Ks(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function Ls(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function Ms(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Ns(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Os(a2) {
        a2 = a2 | 0;
        Rs(a2);
        return;
      }
      function Ps(a2) {
        a2 = a2 | 0;
        Qs(a2 + 24 | 0);
        return;
      }
      function Qs(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function Rs(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 24, b2, Ss() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Ss() {
        return 1392;
      }
      function Ts(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        Vs(c[(Us(a2) | 0) >> 2] | 0, b2);
        return;
      }
      function Us(a2) {
        a2 = a2 | 0;
        return (c[(Fs() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function Vs(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c2 = 0, d2 = 0;
        c2 = l;
        l = l + 16 | 0;
        d2 = c2;
        Lq(d2, b2);
        b2 = Mq(d2, b2) | 0;
        nb[a2 & 127](b2);
        l = c2;
        return;
      }
      function Ws(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = c[a2 >> 2] | 0;
        f2 = Xs() | 0;
        a2 = Ys(d2) | 0;
        fi(g2, b2, f2, a2, Zs(d2, e2) | 0, e2);
        return;
      }
      function Xs() {
        var b2 = 0, d2 = 0;
        if (!(a[7872] | 0)) {
          et(10244);
          Ha(52, 10244, o | 0) | 0;
          d2 = 7872;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10244) | 0)) {
          b2 = 10244;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          et(10244);
        }
        return 10244;
      }
      function Ys(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Zs(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = Xs() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          _s(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          $s(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function _s(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function $s(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = at(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          bt(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          _s(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          ct(a2, f2);
          dt(f2);
          l = i2;
          return;
        }
      }
      function at(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function bt(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function ct(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function dt(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function et(a2) {
        a2 = a2 | 0;
        ht(a2);
        return;
      }
      function ft(a2) {
        a2 = a2 | 0;
        gt(a2 + 24 | 0);
        return;
      }
      function gt(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function ht(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 16, b2, it() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function it() {
        return 1400;
      }
      function jt(a2) {
        a2 = a2 | 0;
        return lt(c[(kt(a2) | 0) >> 2] | 0) | 0;
      }
      function kt(a2) {
        a2 = a2 | 0;
        return (c[(Xs() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function lt(a2) {
        a2 = a2 | 0;
        return mt(Ab[a2 & 7]() | 0) | 0;
      }
      function mt(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function nt() {
        var b2 = 0;
        if (!(a[7880] | 0)) {
          ut(10280);
          Ha(25, 10280, o | 0) | 0;
          b2 = 7880;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10280;
      }
      function ot(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = pt() | 0;
        c[a2 + 4 >> 2] = qt() | 0;
        c[a2 + 12 >> 2] = b2;
        c[a2 + 8 >> 2] = rt() | 0;
        c[a2 + 32 >> 2] = 4;
        return;
      }
      function pt() {
        return 11711;
      }
      function qt() {
        return 1356;
      }
      function rt() {
        return lr() | 0;
      }
      function st(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        if ((jr(d2, 896) | 0) == 512) {
          if (c2 | 0) {
            tt(c2);
            sC(c2);
          }
        } else if (b2 | 0) {
          mf(b2);
          sC(b2);
        }
        return;
      }
      function tt(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 4 >> 2] | 0;
        if (a2 | 0)
          oC(a2);
        return;
      }
      function ut(a2) {
        a2 = a2 | 0;
        Zi(a2);
        return;
      }
      function vt(a2) {
        a2 = a2 | 0;
        wt(a2, 4920);
        xt(a2) | 0;
        yt(a2) | 0;
        return;
      }
      function wt(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = nn() | 0;
        c[a2 >> 2] = d2;
        Yt(d2, b2);
        Hv(c[a2 >> 2] | 0);
        return;
      }
      function xt(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = c[a2 >> 2] | 0;
        At(b2, Mt() | 0);
        return a2 | 0;
      }
      function yt(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = c[a2 >> 2] | 0;
        At(b2, zt() | 0);
        return a2 | 0;
      }
      function zt() {
        var b2 = 0;
        if (!(a[7888] | 0)) {
          Bt(10328);
          Ha(53, 10328, o | 0) | 0;
          b2 = 7888;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        if (!(si(10328) | 0))
          Bt(10328);
        return 10328;
      }
      function At(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        fi(a2, 0, b2, 0, 0, 0);
        return;
      }
      function Bt(a2) {
        a2 = a2 | 0;
        Et(a2);
        Gt(a2, 10);
        return;
      }
      function Ct(a2) {
        a2 = a2 | 0;
        Dt(a2 + 24 | 0);
        return;
      }
      function Dt(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function Et(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 5, 1, b2, Jt() | 0, 2);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Ft(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = +c2;
        Ht(a2, b2, c2);
        return;
      }
      function Gt(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 + 20 >> 2] = b2;
        return;
      }
      function Ht(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = +d2;
        var e2 = 0, f2 = 0, g2 = 0, i2 = 0, j2 = 0;
        e2 = l;
        l = l + 16 | 0;
        g2 = e2 + 8 | 0;
        j2 = e2 + 13 | 0;
        f2 = e2;
        i2 = e2 + 12 | 0;
        tj(j2, b2);
        c[g2 >> 2] = uj(j2, b2) | 0;
        rj(i2, d2);
        h[f2 >> 3] = +sj(i2, d2);
        It(a2, g2, f2);
        l = e2;
        return;
      }
      function It(b2, d2, e2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        mg(b2 + 8 | 0, c[d2 >> 2] | 0, +h[e2 >> 3]);
        a[b2 + 24 >> 0] = 1;
        return;
      }
      function Jt() {
        return 1404;
      }
      function Kt(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        return Lt(a2, b2) | 0;
      }
      function Lt(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        e2 = l;
        l = l + 16 | 0;
        g2 = e2 + 4 | 0;
        h2 = e2 + 8 | 0;
        i2 = e2;
        f2 = jy(8) | 0;
        d2 = f2;
        j2 = qC(16) | 0;
        tj(g2, a2);
        a2 = uj(g2, a2) | 0;
        rj(h2, b2);
        mg(j2, a2, +sj(h2, b2));
        h2 = d2 + 4 | 0;
        c[h2 >> 2] = j2;
        a2 = qC(8) | 0;
        h2 = c[h2 >> 2] | 0;
        c[i2 >> 2] = 0;
        c[g2 >> 2] = c[i2 >> 2];
        qn(a2, h2, g2);
        c[f2 >> 2] = a2;
        l = e2;
        return d2 | 0;
      }
      function Mt() {
        var b2 = 0;
        if (!(a[7896] | 0)) {
          Nt(10364);
          Ha(54, 10364, o | 0) | 0;
          b2 = 7896;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        if (!(si(10364) | 0))
          Nt(10364);
        return 10364;
      }
      function Nt(a2) {
        a2 = a2 | 0;
        Qt(a2);
        Gt(a2, 55);
        return;
      }
      function Ot(a2) {
        a2 = a2 | 0;
        Pt(a2 + 24 | 0);
        return;
      }
      function Pt(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function Qt(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 5, 4, b2, Vt() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Rt(a2) {
        a2 = a2 | 0;
        St(a2);
        return;
      }
      function St(a2) {
        a2 = a2 | 0;
        Tt(a2);
        return;
      }
      function Tt(b2) {
        b2 = b2 | 0;
        Ut(b2 + 8 | 0);
        a[b2 + 24 >> 0] = 1;
        return;
      }
      function Ut(a2) {
        a2 = a2 | 0;
        c[a2 >> 2] = 0;
        h[a2 + 8 >> 3] = 0;
        return;
      }
      function Vt() {
        return 1424;
      }
      function Wt() {
        return Xt() | 0;
      }
      function Xt() {
        var a2 = 0, b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        b2 = l;
        l = l + 16 | 0;
        f2 = b2 + 4 | 0;
        h2 = b2;
        d2 = jy(8) | 0;
        a2 = d2;
        e2 = qC(16) | 0;
        Ut(e2);
        g2 = a2 + 4 | 0;
        c[g2 >> 2] = e2;
        e2 = qC(8) | 0;
        g2 = c[g2 >> 2] | 0;
        c[h2 >> 2] = 0;
        c[f2 >> 2] = c[h2 >> 2];
        qn(e2, g2, f2);
        c[d2 >> 2] = e2;
        l = b2;
        return a2 | 0;
      }
      function Yt(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = Zt() | 0;
        c[a2 + 4 >> 2] = _t() | 0;
        c[a2 + 12 >> 2] = b2;
        c[a2 + 8 >> 2] = $t() | 0;
        c[a2 + 32 >> 2] = 5;
        return;
      }
      function Zt() {
        return 11710;
      }
      function _t() {
        return 1416;
      }
      function $t() {
        return cu() | 0;
      }
      function au(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        if ((jr(d2, 896) | 0) == 512) {
          if (c2 | 0) {
            bu(c2);
            sC(c2);
          }
        } else if (b2 | 0)
          sC(b2);
        return;
      }
      function bu(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 4 >> 2] | 0;
        if (a2 | 0)
          oC(a2);
        return;
      }
      function cu() {
        var b2 = 0;
        if (!(a[7904] | 0)) {
          c[2600] = du() | 0;
          c[2601] = 0;
          b2 = 7904;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10400;
      }
      function du() {
        return c[357] | 0;
      }
      function eu(a2) {
        a2 = a2 | 0;
        fu(a2, 4926);
        gu(a2) | 0;
        return;
      }
      function fu(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = Ci() | 0;
        c[a2 >> 2] = d2;
        su(d2, b2);
        Hv(c[a2 >> 2] | 0);
        return;
      }
      function gu(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = c[a2 >> 2] | 0;
        At(b2, hu() | 0);
        return a2 | 0;
      }
      function hu() {
        var b2 = 0;
        if (!(a[7912] | 0)) {
          iu(10412);
          Ha(56, 10412, o | 0) | 0;
          b2 = 7912;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        if (!(si(10412) | 0))
          iu(10412);
        return 10412;
      }
      function iu(a2) {
        a2 = a2 | 0;
        lu(a2);
        Gt(a2, 57);
        return;
      }
      function ju(a2) {
        a2 = a2 | 0;
        ku(a2 + 24 | 0);
        return;
      }
      function ku(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function lu(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 5, 5, b2, pu() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function mu(a2) {
        a2 = a2 | 0;
        nu(a2);
        return;
      }
      function nu(a2) {
        a2 = a2 | 0;
        ou(a2);
        return;
      }
      function ou(b2) {
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = b2 + 8 | 0;
        e2 = d2 + 48 | 0;
        do {
          c[d2 >> 2] = 0;
          d2 = d2 + 4 | 0;
        } while ((d2 | 0) < (e2 | 0));
        a[b2 + 56 >> 0] = 1;
        return;
      }
      function pu() {
        return 1432;
      }
      function qu() {
        return ru() | 0;
      }
      function ru() {
        var a2 = 0, b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        h2 = l;
        l = l + 16 | 0;
        a2 = h2 + 4 | 0;
        b2 = h2;
        d2 = jy(8) | 0;
        e2 = d2;
        f2 = qC(48) | 0;
        g2 = f2;
        i2 = g2 + 48 | 0;
        do {
          c[g2 >> 2] = 0;
          g2 = g2 + 4 | 0;
        } while ((g2 | 0) < (i2 | 0));
        g2 = e2 + 4 | 0;
        c[g2 >> 2] = f2;
        i2 = qC(8) | 0;
        g2 = c[g2 >> 2] | 0;
        c[b2 >> 2] = 0;
        c[a2 >> 2] = c[b2 >> 2];
        Ji(i2, g2, a2);
        c[d2 >> 2] = i2;
        l = h2;
        return e2 | 0;
      }
      function su(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = tu() | 0;
        c[a2 + 4 >> 2] = uu() | 0;
        c[a2 + 12 >> 2] = b2;
        c[a2 + 8 >> 2] = vu() | 0;
        c[a2 + 32 >> 2] = 6;
        return;
      }
      function tu() {
        return 11704;
      }
      function uu() {
        return 1436;
      }
      function vu() {
        return cu() | 0;
      }
      function wu(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        if ((jr(d2, 896) | 0) == 512) {
          if (c2 | 0) {
            xu(c2);
            sC(c2);
          }
        } else if (b2 | 0)
          sC(b2);
        return;
      }
      function xu(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 4 >> 2] | 0;
        if (a2 | 0)
          oC(a2);
        return;
      }
      function yu(a2) {
        a2 = a2 | 0;
        zu(a2, 4933);
        Au(a2) | 0;
        Bu(a2) | 0;
        return;
      }
      function zu(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = cv() | 0;
        c[a2 >> 2] = d2;
        dv(d2, b2);
        Hv(c[a2 >> 2] | 0);
        return;
      }
      function Au(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = c[a2 >> 2] | 0;
        At(b2, Su() | 0);
        return a2 | 0;
      }
      function Bu(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = c[a2 >> 2] | 0;
        At(b2, Cu() | 0);
        return a2 | 0;
      }
      function Cu() {
        var b2 = 0;
        if (!(a[7920] | 0)) {
          Du(10452);
          Ha(58, 10452, o | 0) | 0;
          b2 = 7920;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        if (!(si(10452) | 0))
          Du(10452);
        return 10452;
      }
      function Du(a2) {
        a2 = a2 | 0;
        Gu(a2);
        Gt(a2, 1);
        return;
      }
      function Eu(a2) {
        a2 = a2 | 0;
        Fu(a2 + 24 | 0);
        return;
      }
      function Fu(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function Gu(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 5, 1, b2, Lu() | 0, 2);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Hu(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = +b2;
        c2 = +c2;
        Iu(a2, b2, c2);
        return;
      }
      function Iu(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = +b2;
        c2 = +c2;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, i2 = 0;
        d2 = l;
        l = l + 32 | 0;
        f2 = d2 + 8 | 0;
        i2 = d2 + 17 | 0;
        e2 = d2;
        g2 = d2 + 16 | 0;
        rj(i2, b2);
        h[f2 >> 3] = +sj(i2, b2);
        rj(g2, c2);
        h[e2 >> 3] = +sj(g2, c2);
        Ju(a2, f2, e2);
        l = d2;
        return;
      }
      function Ju(b2, c2, d2) {
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        Ku(b2 + 8 | 0, +h[c2 >> 3], +h[d2 >> 3]);
        a[b2 + 24 >> 0] = 1;
        return;
      }
      function Ku(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = +b2;
        c2 = +c2;
        h[a2 >> 3] = b2;
        h[a2 + 8 >> 3] = c2;
        return;
      }
      function Lu() {
        return 1472;
      }
      function Mu(a2, b2) {
        a2 = +a2;
        b2 = +b2;
        return Nu(a2, b2) | 0;
      }
      function Nu(a2, b2) {
        a2 = +a2;
        b2 = +b2;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        e2 = l;
        l = l + 16 | 0;
        h2 = e2 + 4 | 0;
        i2 = e2 + 8 | 0;
        j2 = e2;
        f2 = jy(8) | 0;
        d2 = f2;
        g2 = qC(16) | 0;
        rj(h2, a2);
        a2 = +sj(h2, a2);
        rj(i2, b2);
        Ku(g2, a2, +sj(i2, b2));
        i2 = d2 + 4 | 0;
        c[i2 >> 2] = g2;
        g2 = qC(8) | 0;
        i2 = c[i2 >> 2] | 0;
        c[j2 >> 2] = 0;
        c[h2 >> 2] = c[j2 >> 2];
        Ou(g2, i2, h2);
        c[f2 >> 2] = g2;
        l = e2;
        return d2 | 0;
      }
      function Ou(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        d2 = qC(16) | 0;
        c[d2 + 4 >> 2] = 0;
        c[d2 + 8 >> 2] = 0;
        c[d2 >> 2] = 1452;
        c[d2 + 12 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function Pu(a2) {
        a2 = a2 | 0;
        kC(a2);
        sC(a2);
        return;
      }
      function Qu(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 12 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Ru(a2) {
        a2 = a2 | 0;
        sC(a2);
        return;
      }
      function Su() {
        var b2 = 0;
        if (!(a[7928] | 0)) {
          Tu(10488);
          Ha(59, 10488, o | 0) | 0;
          b2 = 7928;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        if (!(si(10488) | 0))
          Tu(10488);
        return 10488;
      }
      function Tu(a2) {
        a2 = a2 | 0;
        Wu(a2);
        Gt(a2, 60);
        return;
      }
      function Uu(a2) {
        a2 = a2 | 0;
        Vu(a2 + 24 | 0);
        return;
      }
      function Vu(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function Wu(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 5, 6, b2, $u() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Xu(a2) {
        a2 = a2 | 0;
        Yu(a2);
        return;
      }
      function Yu(a2) {
        a2 = a2 | 0;
        Zu(a2);
        return;
      }
      function Zu(b2) {
        b2 = b2 | 0;
        _u(b2 + 8 | 0);
        a[b2 + 24 >> 0] = 1;
        return;
      }
      function _u(a2) {
        a2 = a2 | 0;
        c[a2 >> 2] = 0;
        c[a2 + 4 >> 2] = 0;
        c[a2 + 8 >> 2] = 0;
        c[a2 + 12 >> 2] = 0;
        return;
      }
      function $u() {
        return 1492;
      }
      function av() {
        return bv() | 0;
      }
      function bv() {
        var a2 = 0, b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        b2 = l;
        l = l + 16 | 0;
        f2 = b2 + 4 | 0;
        h2 = b2;
        d2 = jy(8) | 0;
        a2 = d2;
        e2 = qC(16) | 0;
        _u(e2);
        g2 = a2 + 4 | 0;
        c[g2 >> 2] = e2;
        e2 = qC(8) | 0;
        g2 = c[g2 >> 2] | 0;
        c[h2 >> 2] = 0;
        c[f2 >> 2] = c[h2 >> 2];
        Ou(e2, g2, f2);
        c[d2 >> 2] = e2;
        l = b2;
        return a2 | 0;
      }
      function cv() {
        var b2 = 0;
        if (!(a[7936] | 0)) {
          jv(10524);
          Ha(25, 10524, o | 0) | 0;
          b2 = 7936;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10524;
      }
      function dv(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = ev() | 0;
        c[a2 + 4 >> 2] = fv() | 0;
        c[a2 + 12 >> 2] = b2;
        c[a2 + 8 >> 2] = gv() | 0;
        c[a2 + 32 >> 2] = 7;
        return;
      }
      function ev() {
        return 11700;
      }
      function fv() {
        return 1484;
      }
      function gv() {
        return cu() | 0;
      }
      function hv(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        if ((jr(d2, 896) | 0) == 512) {
          if (c2 | 0) {
            iv(c2);
            sC(c2);
          }
        } else if (b2 | 0)
          sC(b2);
        return;
      }
      function iv(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 4 >> 2] | 0;
        if (a2 | 0)
          oC(a2);
        return;
      }
      function jv(a2) {
        a2 = a2 | 0;
        Zi(a2);
        return;
      }
      function kv(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        a2 = ai(b2) | 0;
        b2 = lv(c2) | 0;
        c2 = mv(c2, 0) | 0;
        Zv(a2, b2, c2, nv() | 0, 0);
        return;
      }
      function lv(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function mv(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = nv() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          vv(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          wv(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function nv() {
        var b2 = 0, d2 = 0;
        if (!(a[7944] | 0)) {
          ov(10568);
          Ha(61, 10568, o | 0) | 0;
          d2 = 7944;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10568) | 0)) {
          b2 = 10568;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          ov(10568);
        }
        return 10568;
      }
      function ov(a2) {
        a2 = a2 | 0;
        rv(a2);
        return;
      }
      function pv(a2) {
        a2 = a2 | 0;
        qv(a2 + 24 | 0);
        return;
      }
      function qv(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function rv(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 17, b2, ql() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function sv(a2) {
        a2 = a2 | 0;
        return uv(c[(tv(a2) | 0) >> 2] | 0) | 0;
      }
      function tv(a2) {
        a2 = a2 | 0;
        return (c[(nv() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function uv(a2) {
        a2 = a2 | 0;
        return ul(Ab[a2 & 7]() | 0) | 0;
      }
      function vv(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function wv(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = xv(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          yv(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          vv(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          zv(a2, f2);
          Av(f2);
          l = i2;
          return;
        }
      }
      function xv(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function yv(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function zv(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Av(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Bv() {
        Cv();
        return;
      }
      function Cv() {
        Dv(10604);
        return;
      }
      function Dv(a2) {
        a2 = a2 | 0;
        Ev(a2, 4955);
        return;
      }
      function Ev(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = Fv() | 0;
        c[a2 >> 2] = d2;
        Gv(d2, b2);
        Hv(c[a2 >> 2] | 0);
        return;
      }
      function Fv() {
        var b2 = 0;
        if (!(a[7952] | 0)) {
          Rv(10612);
          Ha(25, 10612, o | 0) | 0;
          b2 = 7952;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10612;
      }
      function Gv(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = Mv() | 0;
        c[a2 + 4 >> 2] = Nv() | 0;
        c[a2 + 12 >> 2] = b2;
        c[a2 + 8 >> 2] = Ov() | 0;
        c[a2 + 32 >> 2] = 8;
        return;
      }
      function Hv(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0;
        b2 = l;
        l = l + 16 | 0;
        d2 = b2;
        Iv() | 0;
        c[d2 >> 2] = a2;
        Jv(10608, d2);
        l = b2;
        return;
      }
      function Iv() {
        if (!(a[11714] | 0)) {
          c[2652] = 0;
          Ha(62, 10608, o | 0) | 0;
          a[11714] = 1;
        }
        return 10608;
      }
      function Jv(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = qC(8) | 0;
        c[d2 + 4 >> 2] = c[b2 >> 2];
        c[d2 >> 2] = c[a2 >> 2];
        c[a2 >> 2] = d2;
        return;
      }
      function Kv(a2) {
        a2 = a2 | 0;
        Lv(a2);
        return;
      }
      function Lv(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0;
        b2 = c[a2 >> 2] | 0;
        if (b2 | 0)
          do {
            d2 = b2;
            b2 = c[b2 >> 2] | 0;
            sC(d2);
          } while ((b2 | 0) != 0);
        c[a2 >> 2] = 0;
        return;
      }
      function Mv() {
        return 11715;
      }
      function Nv() {
        return 1496;
      }
      function Ov() {
        return lr() | 0;
      }
      function Pv(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        if ((jr(d2, 896) | 0) == 512) {
          if (c2 | 0) {
            Qv(c2);
            sC(c2);
          }
        } else if (b2 | 0)
          sC(b2);
        return;
      }
      function Qv(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 4 >> 2] | 0;
        if (a2 | 0)
          oC(a2);
        return;
      }
      function Rv(a2) {
        a2 = a2 | 0;
        Zi(a2);
        return;
      }
      function Sv(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        Iv() | 0;
        d2 = c[2652] | 0;
        a:
          do
            if (d2 | 0) {
              while (1) {
                e2 = c[d2 + 4 >> 2] | 0;
                if (e2 | 0 ? (AB(Tv(e2) | 0, a2) | 0) == 0 : 0)
                  break;
                d2 = c[d2 >> 2] | 0;
                if (!d2)
                  break a;
              }
              Uv(e2, b2);
            }
          while (0);
        return;
      }
      function Tv(a2) {
        a2 = a2 | 0;
        return c[a2 + 12 >> 2] | 0;
      }
      function Uv(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        a2 = a2 + 36 | 0;
        d2 = c[a2 >> 2] | 0;
        if (d2 | 0) {
          vf(d2);
          sC(d2);
        }
        d2 = qC(4) | 0;
        Og(d2, b2);
        c[a2 >> 2] = d2;
        return;
      }
      function Vv() {
        if (!(a[11716] | 0)) {
          c[2664] = 0;
          Ha(63, 10656, o | 0) | 0;
          a[11716] = 1;
        }
        return 10656;
      }
      function Wv() {
        var b2 = 0;
        if (!(a[11717] | 0)) {
          Xv();
          c[2665] = 1504;
          a[11717] = 1;
          b2 = 1504;
        } else
          b2 = c[2665] | 0;
        return b2 | 0;
      }
      function Xv() {
        if (!(a[11740] | 0)) {
          a[11718] = ji(ji(8, 0) | 0, 0) | 0;
          a[11719] = ji(ji(0, 0) | 0, 0) | 0;
          a[11720] = ji(ji(0, 16) | 0, 0) | 0;
          a[11721] = ji(ji(8, 0) | 0, 0) | 0;
          a[11722] = ji(ji(0, 0) | 0, 0) | 0;
          a[11723] = ji(ji(8, 0) | 0, 0) | 0;
          a[11724] = ji(ji(0, 0) | 0, 0) | 0;
          a[11725] = ji(ji(8, 0) | 0, 0) | 0;
          a[11726] = ji(ji(0, 0) | 0, 0) | 0;
          a[11727] = ji(ji(8, 0) | 0, 0) | 0;
          a[11728] = ji(ji(0, 0) | 0, 0) | 0;
          a[11729] = ji(ji(0, 0) | 0, 32) | 0;
          a[11730] = ji(ji(0, 0) | 0, 32) | 0;
          a[11740] = 1;
        }
        return;
      }
      function Yv() {
        return 1572;
      }
      function Zv(a2, b2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        var g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        g2 = l;
        l = l + 32 | 0;
        m2 = g2 + 16 | 0;
        k2 = g2 + 12 | 0;
        j2 = g2 + 8 | 0;
        i2 = g2 + 4 | 0;
        h2 = g2;
        c[m2 >> 2] = a2;
        c[k2 >> 2] = b2;
        c[j2 >> 2] = d2;
        c[i2 >> 2] = e2;
        c[h2 >> 2] = f2;
        Vv() | 0;
        _v(10656, m2, k2, j2, i2, h2);
        l = g2;
        return;
      }
      function _v(a2, b2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h2 = 0;
        h2 = qC(24) | 0;
        ii(h2 + 4 | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0, c[e2 >> 2] | 0, c[f2 >> 2] | 0, c[g2 >> 2] | 0);
        c[h2 >> 2] = c[a2 >> 2];
        c[a2 >> 2] = h2;
        return;
      }
      function $v(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = 0;
        u2 = l;
        l = l + 32 | 0;
        q2 = u2 + 20 | 0;
        r2 = u2 + 8 | 0;
        s2 = u2 + 4 | 0;
        t2 = u2;
        b2 = c[b2 >> 2] | 0;
        if (b2 | 0) {
          p2 = q2 + 4 | 0;
          j2 = q2 + 8 | 0;
          k2 = r2 + 4 | 0;
          m2 = r2 + 8 | 0;
          n2 = r2 + 8 | 0;
          o2 = q2 + 8 | 0;
          do {
            h2 = b2 + 4 | 0;
            i2 = aw(h2) | 0;
            if (i2 | 0) {
              f2 = bw(i2) | 0;
              c[q2 >> 2] = 0;
              c[p2 >> 2] = 0;
              c[j2 >> 2] = 0;
              e2 = (cw(i2) | 0) + 1 | 0;
              dw(q2, e2);
              if (e2 | 0)
                while (1) {
                  e2 = e2 + -1 | 0;
                  OA(r2, c[f2 >> 2] | 0);
                  g2 = c[p2 >> 2] | 0;
                  if (g2 >>> 0 < (c[o2 >> 2] | 0) >>> 0) {
                    c[g2 >> 2] = c[r2 >> 2];
                    c[p2 >> 2] = (c[p2 >> 2] | 0) + 4;
                  } else
                    ew(q2, r2);
                  if (!e2)
                    break;
                  else
                    f2 = f2 + 4 | 0;
                }
              e2 = fw(i2) | 0;
              c[r2 >> 2] = 0;
              c[k2 >> 2] = 0;
              c[m2 >> 2] = 0;
              a:
                do
                  if (c[e2 >> 2] | 0) {
                    f2 = 0;
                    g2 = 0;
                    while (1) {
                      if ((f2 | 0) == (g2 | 0))
                        gw(r2, e2);
                      else {
                        c[f2 >> 2] = c[e2 >> 2];
                        c[k2 >> 2] = (c[k2 >> 2] | 0) + 4;
                      }
                      e2 = e2 + 4 | 0;
                      if (!(c[e2 >> 2] | 0))
                        break a;
                      f2 = c[k2 >> 2] | 0;
                      g2 = c[n2 >> 2] | 0;
                    }
                  }
                while (0);
              c[s2 >> 2] = hw(h2) | 0;
              c[t2 >> 2] = si(i2) | 0;
              iw(d2, a2, s2, t2, q2, r2);
              jw(r2);
              kw(q2);
            }
            b2 = c[b2 >> 2] | 0;
          } while ((b2 | 0) != 0);
        }
        l = u2;
        return;
      }
      function aw(a2) {
        a2 = a2 | 0;
        return c[a2 + 12 >> 2] | 0;
      }
      function bw(a2) {
        a2 = a2 | 0;
        return c[a2 + 12 >> 2] | 0;
      }
      function cw(a2) {
        a2 = a2 | 0;
        return c[a2 + 16 >> 2] | 0;
      }
      function dw(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        f2 = l;
        l = l + 32 | 0;
        d2 = f2;
        e2 = c[a2 >> 2] | 0;
        if ((c[a2 + 8 >> 2] | 0) - e2 >> 2 >>> 0 < b2 >>> 0) {
          Rw(d2, b2, (c[a2 + 4 >> 2] | 0) - e2 >> 2, a2 + 8 | 0);
          Sw(a2, d2);
          Tw(d2);
        }
        l = f2;
        return;
      }
      function ew(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        h2 = l;
        l = l + 32 | 0;
        d2 = h2;
        e2 = a2 + 4 | 0;
        f2 = ((c[e2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 2) + 1 | 0;
        g2 = Nw(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          i2 = c[a2 >> 2] | 0;
          k2 = (c[a2 + 8 >> 2] | 0) - i2 | 0;
          j2 = k2 >> 1;
          Rw(d2, k2 >> 2 >>> 0 < g2 >>> 1 >>> 0 ? j2 >>> 0 < f2 >>> 0 ? f2 : j2 : g2, (c[e2 >> 2] | 0) - i2 >> 2, a2 + 8 | 0);
          g2 = d2 + 8 | 0;
          c[c[g2 >> 2] >> 2] = c[b2 >> 2];
          c[g2 >> 2] = (c[g2 >> 2] | 0) + 4;
          Sw(a2, d2);
          Tw(d2);
          l = h2;
          return;
        }
      }
      function fw(a2) {
        a2 = a2 | 0;
        return c[a2 + 8 >> 2] | 0;
      }
      function gw(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        h2 = l;
        l = l + 32 | 0;
        d2 = h2;
        e2 = a2 + 4 | 0;
        f2 = ((c[e2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 2) + 1 | 0;
        g2 = Kw(a2) | 0;
        if (g2 >>> 0 < f2 >>> 0)
          jC(a2);
        else {
          i2 = c[a2 >> 2] | 0;
          k2 = (c[a2 + 8 >> 2] | 0) - i2 | 0;
          j2 = k2 >> 1;
          Ow(d2, k2 >> 2 >>> 0 < g2 >>> 1 >>> 0 ? j2 >>> 0 < f2 >>> 0 ? f2 : j2 : g2, (c[e2 >> 2] | 0) - i2 >> 2, a2 + 8 | 0);
          g2 = d2 + 8 | 0;
          c[c[g2 >> 2] >> 2] = c[b2 >> 2];
          c[g2 >> 2] = (c[g2 >> 2] | 0) + 4;
          Pw(a2, d2);
          Qw(d2);
          l = h2;
          return;
        }
      }
      function hw(a2) {
        a2 = a2 | 0;
        return c[a2 >> 2] | 0;
      }
      function iw(a2, b2, c2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        lw(a2, b2, c2, d2, e2, f2);
        return;
      }
      function jw(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -4 - e2 | 0) >>> 2) << 2);
          sC(d2);
        }
        return;
      }
      function kw(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -4 - e2 | 0) >>> 2) << 2);
          sC(d2);
        }
        return;
      }
      function lw(a2, b2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        h2 = l;
        l = l + 48 | 0;
        m2 = h2 + 40 | 0;
        i2 = h2 + 32 | 0;
        n2 = h2 + 24 | 0;
        j2 = h2 + 12 | 0;
        k2 = h2;
        UA(i2);
        a2 = Sg(a2) | 0;
        c[n2 >> 2] = c[b2 >> 2];
        d2 = c[d2 >> 2] | 0;
        e2 = c[e2 >> 2] | 0;
        mw(j2, f2);
        nw(k2, g2);
        c[m2 >> 2] = c[n2 >> 2];
        ow(a2, m2, d2, e2, j2, k2);
        jw(k2);
        kw(j2);
        WA(i2);
        l = h2;
        return;
      }
      function mw(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        c[a2 >> 2] = 0;
        c[a2 + 4 >> 2] = 0;
        c[a2 + 8 >> 2] = 0;
        d2 = b2 + 4 | 0;
        e2 = (c[d2 >> 2] | 0) - (c[b2 >> 2] | 0) >> 2;
        if (e2 | 0) {
          Lw(a2, e2);
          Mw(a2, c[b2 >> 2] | 0, c[d2 >> 2] | 0, e2);
        }
        return;
      }
      function nw(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        c[a2 >> 2] = 0;
        c[a2 + 4 >> 2] = 0;
        c[a2 + 8 >> 2] = 0;
        d2 = b2 + 4 | 0;
        e2 = (c[d2 >> 2] | 0) - (c[b2 >> 2] | 0) >> 2;
        if (e2 | 0) {
          Iw(a2, e2);
          Jw(a2, c[b2 >> 2] | 0, c[d2 >> 2] | 0, e2);
        }
        return;
      }
      function ow(a2, b2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
        h2 = l;
        l = l + 32 | 0;
        m2 = h2 + 28 | 0;
        n2 = h2 + 24 | 0;
        i2 = h2 + 12 | 0;
        j2 = h2;
        k2 = Vg(pw() | 0) | 0;
        c[n2 >> 2] = c[b2 >> 2];
        c[m2 >> 2] = c[n2 >> 2];
        b2 = qw(m2) | 0;
        d2 = rw(d2) | 0;
        e2 = sw(e2) | 0;
        c[i2 >> 2] = c[f2 >> 2];
        m2 = f2 + 4 | 0;
        c[i2 + 4 >> 2] = c[m2 >> 2];
        n2 = f2 + 8 | 0;
        c[i2 + 8 >> 2] = c[n2 >> 2];
        c[n2 >> 2] = 0;
        c[m2 >> 2] = 0;
        c[f2 >> 2] = 0;
        f2 = tw(i2) | 0;
        c[j2 >> 2] = c[g2 >> 2];
        m2 = g2 + 4 | 0;
        c[j2 + 4 >> 2] = c[m2 >> 2];
        n2 = g2 + 8 | 0;
        c[j2 + 8 >> 2] = c[n2 >> 2];
        c[n2 >> 2] = 0;
        c[m2 >> 2] = 0;
        c[g2 >> 2] = 0;
        Ba(0, k2 | 0, a2 | 0, b2 | 0, d2 | 0, e2 | 0, f2 | 0, uw(j2) | 0) | 0;
        jw(j2);
        kw(i2);
        l = h2;
        return;
      }
      function pw() {
        var b2 = 0;
        if (!(a[7968] | 0)) {
          Gw(10708);
          b2 = 7968;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10708;
      }
      function qw(a2) {
        a2 = a2 | 0;
        return yw(a2) | 0;
      }
      function rw(a2) {
        a2 = a2 | 0;
        return ww(a2) | 0;
      }
      function sw(a2) {
        a2 = a2 | 0;
        return ul(a2) | 0;
      }
      function tw(a2) {
        a2 = a2 | 0;
        return xw(a2) | 0;
      }
      function uw(a2) {
        a2 = a2 | 0;
        return vw(a2) | 0;
      }
      function vw(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        e2 = (c[a2 + 4 >> 2] | 0) - (c[a2 >> 2] | 0) | 0;
        d2 = e2 >> 2;
        e2 = jy(e2 + 4 | 0) | 0;
        c[e2 >> 2] = d2;
        if (d2 | 0) {
          b2 = 0;
          do {
            c[e2 + 4 + (b2 << 2) >> 2] = ww(c[(c[a2 >> 2] | 0) + (b2 << 2) >> 2] | 0) | 0;
            b2 = b2 + 1 | 0;
          } while ((b2 | 0) != (d2 | 0));
        }
        return e2 | 0;
      }
      function ww(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function xw(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        e2 = (c[a2 + 4 >> 2] | 0) - (c[a2 >> 2] | 0) | 0;
        d2 = e2 >> 2;
        e2 = jy(e2 + 4 | 0) | 0;
        c[e2 >> 2] = d2;
        if (d2 | 0) {
          b2 = 0;
          do {
            c[e2 + 4 + (b2 << 2) >> 2] = yw((c[a2 >> 2] | 0) + (b2 << 2) | 0) | 0;
            b2 = b2 + 1 | 0;
          } while ((b2 | 0) != (d2 | 0));
        }
        return e2 | 0;
      }
      function yw(a2) {
        a2 = a2 | 0;
        var b2 = 0, c2 = 0, d2 = 0, e2 = 0;
        e2 = l;
        l = l + 32 | 0;
        b2 = e2 + 12 | 0;
        c2 = e2;
        d2 = Di(zw() | 0) | 0;
        if (!d2)
          a2 = Aw(a2) | 0;
        else {
          Ei(b2, d2);
          Fi(c2, b2);
          RA(a2, c2);
          a2 = Hi(b2) | 0;
        }
        l = e2;
        return a2 | 0;
      }
      function zw() {
        var b2 = 0;
        if (!(a[7960] | 0)) {
          Fw(10664);
          Ha(25, 10664, o | 0) | 0;
          b2 = 7960;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10664;
      }
      function Aw(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        d2 = l;
        l = l + 16 | 0;
        f2 = d2 + 4 | 0;
        h2 = d2;
        e2 = jy(8) | 0;
        b2 = e2;
        i2 = qC(4) | 0;
        c[i2 >> 2] = c[a2 >> 2];
        g2 = b2 + 4 | 0;
        c[g2 >> 2] = i2;
        a2 = qC(8) | 0;
        g2 = c[g2 >> 2] | 0;
        c[h2 >> 2] = 0;
        c[f2 >> 2] = c[h2 >> 2];
        Bw(a2, g2, f2);
        c[e2 >> 2] = a2;
        l = d2;
        return b2 | 0;
      }
      function Bw(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        d2 = qC(16) | 0;
        c[d2 + 4 >> 2] = 0;
        c[d2 + 8 >> 2] = 0;
        c[d2 >> 2] = 1656;
        c[d2 + 12 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function Cw(a2) {
        a2 = a2 | 0;
        kC(a2);
        sC(a2);
        return;
      }
      function Dw(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 12 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Ew(a2) {
        a2 = a2 | 0;
        sC(a2);
        return;
      }
      function Fw(a2) {
        a2 = a2 | 0;
        Zi(a2);
        return;
      }
      function Gw(a2) {
        a2 = a2 | 0;
        fh(a2, Hw() | 0, 5);
        return;
      }
      function Hw() {
        return 1676;
      }
      function Iw(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        if ((Kw(a2) | 0) >>> 0 < b2 >>> 0)
          jC(a2);
        if (b2 >>> 0 > 1073741823)
          Ta();
        else {
          d2 = qC(b2 << 2) | 0;
          c[a2 + 4 >> 2] = d2;
          c[a2 >> 2] = d2;
          c[a2 + 8 >> 2] = d2 + (b2 << 2);
          return;
        }
      }
      function Jw(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        e2 = a2 + 4 | 0;
        a2 = d2 - b2 | 0;
        if ((a2 | 0) > 0) {
          BC(c[e2 >> 2] | 0, b2 | 0, a2 | 0) | 0;
          c[e2 >> 2] = (c[e2 >> 2] | 0) + (a2 >>> 2 << 2);
        }
        return;
      }
      function Kw(a2) {
        a2 = a2 | 0;
        return 1073741823;
      }
      function Lw(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        if ((Nw(a2) | 0) >>> 0 < b2 >>> 0)
          jC(a2);
        if (b2 >>> 0 > 1073741823)
          Ta();
        else {
          d2 = qC(b2 << 2) | 0;
          c[a2 + 4 >> 2] = d2;
          c[a2 >> 2] = d2;
          c[a2 + 8 >> 2] = d2 + (b2 << 2);
          return;
        }
      }
      function Mw(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        e2 = a2 + 4 | 0;
        a2 = d2 - b2 | 0;
        if ((a2 | 0) > 0) {
          BC(c[e2 >> 2] | 0, b2 | 0, a2 | 0) | 0;
          c[e2 >> 2] = (c[e2 >> 2] | 0) + (a2 >>> 2 << 2);
        }
        return;
      }
      function Nw(a2) {
        a2 = a2 | 0;
        return 1073741823;
      }
      function Ow(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 1073741823)
              Ta();
            else {
              f2 = qC(b2 << 2) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 2) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 2);
        return;
      }
      function Pw(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 2) << 2) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Qw(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -4 - b2 | 0) >>> 2) << 2);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Rw(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 1073741823)
              Ta();
            else {
              f2 = qC(b2 << 2) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 2) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 2);
        return;
      }
      function Sw(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 2) << 2) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Tw(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -4 - b2 | 0) >>> 2) << 2);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Uw(a2, b2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        var g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0;
        r2 = l;
        l = l + 32 | 0;
        m2 = r2 + 20 | 0;
        n2 = r2 + 12 | 0;
        k2 = r2 + 16 | 0;
        o2 = r2 + 4 | 0;
        p2 = r2;
        q2 = r2 + 8 | 0;
        i2 = Wv() | 0;
        g2 = c[i2 >> 2] | 0;
        h2 = c[g2 >> 2] | 0;
        if (h2 | 0) {
          j2 = c[i2 + 8 >> 2] | 0;
          i2 = c[i2 + 4 >> 2] | 0;
          while (1) {
            OA(m2, h2);
            Vw(a2, m2, i2, j2);
            g2 = g2 + 4 | 0;
            h2 = c[g2 >> 2] | 0;
            if (!h2)
              break;
            else {
              j2 = j2 + 1 | 0;
              i2 = i2 + 1 | 0;
            }
          }
        }
        g2 = Yv() | 0;
        h2 = c[g2 >> 2] | 0;
        if (h2 | 0)
          do {
            OA(m2, h2);
            c[n2 >> 2] = c[g2 + 4 >> 2];
            Ww(b2, m2, n2);
            g2 = g2 + 8 | 0;
            h2 = c[g2 >> 2] | 0;
          } while ((h2 | 0) != 0);
        g2 = c[(Iv() | 0) >> 2] | 0;
        if (g2 | 0)
          do {
            b2 = c[g2 + 4 >> 2] | 0;
            OA(m2, c[(Xw(b2) | 0) >> 2] | 0);
            c[n2 >> 2] = Tv(b2) | 0;
            Yw(d2, m2, n2);
            g2 = c[g2 >> 2] | 0;
          } while ((g2 | 0) != 0);
        OA(k2, 0);
        g2 = Vv() | 0;
        c[m2 >> 2] = c[k2 >> 2];
        $v(m2, g2, f2);
        g2 = c[(Iv() | 0) >> 2] | 0;
        if (g2 | 0) {
          a2 = m2 + 4 | 0;
          b2 = m2 + 8 | 0;
          d2 = m2 + 8 | 0;
          do {
            j2 = c[g2 + 4 >> 2] | 0;
            OA(n2, c[(Xw(j2) | 0) >> 2] | 0);
            _w(o2, Zw(j2) | 0);
            h2 = c[o2 >> 2] | 0;
            if (h2 | 0) {
              c[m2 >> 2] = 0;
              c[a2 >> 2] = 0;
              c[b2 >> 2] = 0;
              do {
                OA(p2, c[(Xw(c[h2 + 4 >> 2] | 0) | 0) >> 2] | 0);
                i2 = c[a2 >> 2] | 0;
                if (i2 >>> 0 < (c[d2 >> 2] | 0) >>> 0) {
                  c[i2 >> 2] = c[p2 >> 2];
                  c[a2 >> 2] = (c[a2 >> 2] | 0) + 4;
                } else
                  ew(m2, p2);
                h2 = c[h2 >> 2] | 0;
              } while ((h2 | 0) != 0);
              $w(e2, n2, m2);
              kw(m2);
            }
            c[q2 >> 2] = c[n2 >> 2];
            k2 = ax(j2) | 0;
            c[m2 >> 2] = c[q2 >> 2];
            $v(m2, k2, f2);
            Wi(o2);
            g2 = c[g2 >> 2] | 0;
          } while ((g2 | 0) != 0);
        }
        l = r2;
        return;
      }
      function Vw(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        ox(a2, b2, c2, d2);
        return;
      }
      function Ww(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        nx(a2, b2, c2);
        return;
      }
      function Xw(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Yw(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        ix(a2, b2, c2);
        return;
      }
      function Zw(a2) {
        a2 = a2 | 0;
        return a2 + 16 | 0;
      }
      function _w(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2 + 8 | 0;
        d2 = g2;
        c[a2 >> 2] = 0;
        e2 = c[b2 >> 2] | 0;
        c[f2 >> 2] = e2;
        c[d2 >> 2] = a2;
        d2 = gx(d2) | 0;
        if (e2 | 0) {
          e2 = qC(12) | 0;
          h2 = (hx(f2) | 0) + 4 | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          b2 = e2 + 4 | 0;
          c[b2 >> 2] = c[h2 >> 2];
          c[b2 + 4 >> 2] = a2;
          b2 = c[c[f2 >> 2] >> 2] | 0;
          c[f2 >> 2] = b2;
          if (!b2)
            a2 = e2;
          else {
            b2 = e2;
            while (1) {
              a2 = qC(12) | 0;
              j2 = (hx(f2) | 0) + 4 | 0;
              i2 = c[j2 + 4 >> 2] | 0;
              h2 = a2 + 4 | 0;
              c[h2 >> 2] = c[j2 >> 2];
              c[h2 + 4 >> 2] = i2;
              c[b2 >> 2] = a2;
              h2 = c[c[f2 >> 2] >> 2] | 0;
              c[f2 >> 2] = h2;
              if (!h2)
                break;
              else
                b2 = a2;
            }
          }
          c[a2 >> 2] = c[d2 >> 2];
          c[d2 >> 2] = e2;
        }
        l = g2;
        return;
      }
      function $w(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        bx(a2, b2, c2);
        return;
      }
      function ax(a2) {
        a2 = a2 | 0;
        return a2 + 24 | 0;
      }
      function bx(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 32 | 0;
        h2 = e2 + 24 | 0;
        f2 = e2 + 16 | 0;
        i2 = e2 + 12 | 0;
        g2 = e2;
        UA(f2);
        a2 = Sg(a2) | 0;
        c[i2 >> 2] = c[b2 >> 2];
        mw(g2, d2);
        c[h2 >> 2] = c[i2 >> 2];
        cx(a2, h2, g2);
        kw(g2);
        WA(f2);
        l = e2;
        return;
      }
      function cx(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        e2 = l;
        l = l + 32 | 0;
        h2 = e2 + 16 | 0;
        i2 = e2 + 12 | 0;
        f2 = e2;
        g2 = Vg(dx() | 0) | 0;
        c[i2 >> 2] = c[b2 >> 2];
        c[h2 >> 2] = c[i2 >> 2];
        b2 = qw(h2) | 0;
        c[f2 >> 2] = c[d2 >> 2];
        h2 = d2 + 4 | 0;
        c[f2 + 4 >> 2] = c[h2 >> 2];
        i2 = d2 + 8 | 0;
        c[f2 + 8 >> 2] = c[i2 >> 2];
        c[i2 >> 2] = 0;
        c[h2 >> 2] = 0;
        c[d2 >> 2] = 0;
        xa(0, g2 | 0, a2 | 0, b2 | 0, tw(f2) | 0) | 0;
        kw(f2);
        l = e2;
        return;
      }
      function dx() {
        var b2 = 0;
        if (!(a[7976] | 0)) {
          ex(10720);
          b2 = 7976;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10720;
      }
      function ex(a2) {
        a2 = a2 | 0;
        fh(a2, fx() | 0, 2);
        return;
      }
      function fx() {
        return 1732;
      }
      function gx(a2) {
        a2 = a2 | 0;
        return c[a2 >> 2] | 0;
      }
      function hx(a2) {
        a2 = a2 | 0;
        return c[a2 >> 2] | 0;
      }
      function ix(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 32 | 0;
        g2 = e2 + 16 | 0;
        f2 = e2 + 8 | 0;
        h2 = e2;
        UA(f2);
        a2 = Sg(a2) | 0;
        c[h2 >> 2] = c[b2 >> 2];
        d2 = c[d2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        jx(a2, g2, d2);
        WA(f2);
        l = e2;
        return;
      }
      function jx(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 16 | 0;
        g2 = e2 + 4 | 0;
        h2 = e2;
        f2 = Vg(kx() | 0) | 0;
        c[h2 >> 2] = c[b2 >> 2];
        c[g2 >> 2] = c[h2 >> 2];
        b2 = qw(g2) | 0;
        xa(0, f2 | 0, a2 | 0, b2 | 0, rw(d2) | 0) | 0;
        l = e2;
        return;
      }
      function kx() {
        var b2 = 0;
        if (!(a[7984] | 0)) {
          lx(10732);
          b2 = 7984;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10732;
      }
      function lx(a2) {
        a2 = a2 | 0;
        fh(a2, mx() | 0, 2);
        return;
      }
      function mx() {
        return 1744;
      }
      function nx(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = l;
        l = l + 32 | 0;
        g2 = e2 + 16 | 0;
        f2 = e2 + 8 | 0;
        h2 = e2;
        UA(f2);
        a2 = Sg(a2) | 0;
        c[h2 >> 2] = c[b2 >> 2];
        d2 = c[d2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        jx(a2, g2, d2);
        WA(f2);
        l = e2;
        return;
      }
      function ox(b2, d2, e2, f2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        var g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        g2 = l;
        l = l + 32 | 0;
        i2 = g2 + 16 | 0;
        h2 = g2 + 8 | 0;
        j2 = g2;
        UA(h2);
        b2 = Sg(b2) | 0;
        c[j2 >> 2] = c[d2 >> 2];
        e2 = a[e2 >> 0] | 0;
        f2 = a[f2 >> 0] | 0;
        c[i2 >> 2] = c[j2 >> 2];
        px(b2, i2, e2, f2);
        WA(h2);
        l = g2;
        return;
      }
      function px(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        f2 = l;
        l = l + 16 | 0;
        h2 = f2 + 4 | 0;
        i2 = f2;
        g2 = Vg(qx() | 0) | 0;
        c[i2 >> 2] = c[b2 >> 2];
        c[h2 >> 2] = c[i2 >> 2];
        b2 = qw(h2) | 0;
        d2 = rx(d2) | 0;
        $a(0, g2 | 0, a2 | 0, b2 | 0, d2 | 0, rx(e2) | 0) | 0;
        l = f2;
        return;
      }
      function qx() {
        var b2 = 0;
        if (!(a[7992] | 0)) {
          tx(10744);
          b2 = 7992;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10744;
      }
      function rx(a2) {
        a2 = a2 | 0;
        return sx(a2) | 0;
      }
      function sx(a2) {
        a2 = a2 | 0;
        return a2 & 255 | 0;
      }
      function tx(a2) {
        a2 = a2 | 0;
        fh(a2, ux() | 0, 3);
        return;
      }
      function ux() {
        return 1756;
      }
      function vx(b2, d2, e2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0;
        p2 = l;
        l = l + 32 | 0;
        j2 = p2 + 8 | 0;
        k2 = p2 + 4 | 0;
        m2 = p2 + 20 | 0;
        n2 = p2;
        mk(b2, 0);
        f2 = QA(d2) | 0;
        c[j2 >> 2] = 0;
        o2 = j2 + 4 | 0;
        c[o2 >> 2] = 0;
        c[j2 + 8 >> 2] = 0;
        switch (f2 << 24 >> 24) {
          case 0: {
            a[m2 >> 0] = 0;
            wx(k2, e2, m2);
            xx(b2, k2) | 0;
            wf(k2);
            break;
          }
          case 8: {
            o2 = PA(d2) | 0;
            a[m2 >> 0] = 8;
            OA(n2, c[o2 + 4 >> 2] | 0);
            yx(k2, e2, m2, n2, o2 + 8 | 0);
            xx(b2, k2) | 0;
            wf(k2);
            break;
          }
          case 9: {
            h2 = PA(d2) | 0;
            d2 = c[h2 + 4 >> 2] | 0;
            if (d2 | 0) {
              i2 = j2 + 8 | 0;
              g2 = h2 + 12 | 0;
              while (1) {
                d2 = d2 + -1 | 0;
                OA(k2, c[g2 >> 2] | 0);
                f2 = c[o2 >> 2] | 0;
                if (f2 >>> 0 < (c[i2 >> 2] | 0) >>> 0) {
                  c[f2 >> 2] = c[k2 >> 2];
                  c[o2 >> 2] = (c[o2 >> 2] | 0) + 4;
                } else
                  ew(j2, k2);
                if (!d2)
                  break;
                else
                  g2 = g2 + 4 | 0;
              }
            }
            a[m2 >> 0] = 9;
            OA(n2, c[h2 + 8 >> 2] | 0);
            zx(k2, e2, m2, n2, j2);
            xx(b2, k2) | 0;
            wf(k2);
            break;
          }
          default: {
            o2 = PA(d2) | 0;
            a[m2 >> 0] = f2;
            OA(n2, c[o2 + 4 >> 2] | 0);
            Ax(k2, e2, m2, n2);
            xx(b2, k2) | 0;
            wf(k2);
          }
        }
        kw(j2);
        l = p2;
        return;
      }
      function wx(b2, c2, d2) {
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0;
        e2 = l;
        l = l + 16 | 0;
        f2 = e2;
        UA(f2);
        c2 = Sg(c2) | 0;
        Ox(b2, c2, a[d2 >> 0] | 0);
        WA(f2);
        l = e2;
        return;
      }
      function xx(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = c[a2 >> 2] | 0;
        if (d2 | 0)
          ab(d2 | 0);
        c[a2 >> 2] = c[b2 >> 2];
        c[b2 >> 2] = 0;
        return a2 | 0;
      }
      function yx(b2, d2, e2, f2, g2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        h2 = l;
        l = l + 32 | 0;
        j2 = h2 + 16 | 0;
        i2 = h2 + 8 | 0;
        k2 = h2;
        UA(i2);
        d2 = Sg(d2) | 0;
        e2 = a[e2 >> 0] | 0;
        c[k2 >> 2] = c[f2 >> 2];
        g2 = c[g2 >> 2] | 0;
        c[j2 >> 2] = c[k2 >> 2];
        Kx(b2, d2, e2, j2, g2);
        WA(i2);
        l = h2;
        return;
      }
      function zx(b2, d2, e2, f2, g2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        h2 = l;
        l = l + 32 | 0;
        k2 = h2 + 24 | 0;
        i2 = h2 + 16 | 0;
        m2 = h2 + 12 | 0;
        j2 = h2;
        UA(i2);
        d2 = Sg(d2) | 0;
        e2 = a[e2 >> 0] | 0;
        c[m2 >> 2] = c[f2 >> 2];
        mw(j2, g2);
        c[k2 >> 2] = c[m2 >> 2];
        Gx(b2, d2, e2, k2, j2);
        kw(j2);
        WA(i2);
        l = h2;
        return;
      }
      function Ax(b2, d2, e2, f2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        var g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        g2 = l;
        l = l + 32 | 0;
        i2 = g2 + 16 | 0;
        h2 = g2 + 8 | 0;
        j2 = g2;
        UA(h2);
        d2 = Sg(d2) | 0;
        e2 = a[e2 >> 0] | 0;
        c[j2 >> 2] = c[f2 >> 2];
        c[i2 >> 2] = c[j2 >> 2];
        Bx(b2, d2, e2, i2);
        WA(h2);
        l = g2;
        return;
      }
      function Bx(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        f2 = l;
        l = l + 16 | 0;
        g2 = f2 + 4 | 0;
        i2 = f2;
        h2 = Vg(Cx() | 0) | 0;
        d2 = rx(d2) | 0;
        c[i2 >> 2] = c[e2 >> 2];
        c[g2 >> 2] = c[i2 >> 2];
        Dx(a2, xa(0, h2 | 0, b2 | 0, d2 | 0, qw(g2) | 0) | 0);
        l = f2;
        return;
      }
      function Cx() {
        var b2 = 0;
        if (!(a[8e3] | 0)) {
          Ex(10756);
          b2 = 8e3;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10756;
      }
      function Dx(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        mk(a2, b2);
        return;
      }
      function Ex(a2) {
        a2 = a2 | 0;
        fh(a2, Fx() | 0, 2);
        return;
      }
      function Fx() {
        return 1772;
      }
      function Gx(a2, b2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        var g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        g2 = l;
        l = l + 32 | 0;
        j2 = g2 + 16 | 0;
        k2 = g2 + 12 | 0;
        h2 = g2;
        i2 = Vg(Hx() | 0) | 0;
        d2 = rx(d2) | 0;
        c[k2 >> 2] = c[e2 >> 2];
        c[j2 >> 2] = c[k2 >> 2];
        e2 = qw(j2) | 0;
        c[h2 >> 2] = c[f2 >> 2];
        j2 = f2 + 4 | 0;
        c[h2 + 4 >> 2] = c[j2 >> 2];
        k2 = f2 + 8 | 0;
        c[h2 + 8 >> 2] = c[k2 >> 2];
        c[k2 >> 2] = 0;
        c[j2 >> 2] = 0;
        c[f2 >> 2] = 0;
        Dx(a2, $a(0, i2 | 0, b2 | 0, d2 | 0, e2 | 0, tw(h2) | 0) | 0);
        kw(h2);
        l = g2;
        return;
      }
      function Hx() {
        var b2 = 0;
        if (!(a[8008] | 0)) {
          Ix(10768);
          b2 = 8008;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10768;
      }
      function Ix(a2) {
        a2 = a2 | 0;
        fh(a2, Jx() | 0, 3);
        return;
      }
      function Jx() {
        return 1784;
      }
      function Kx(a2, b2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        var g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        g2 = l;
        l = l + 16 | 0;
        i2 = g2 + 4 | 0;
        j2 = g2;
        h2 = Vg(Lx() | 0) | 0;
        d2 = rx(d2) | 0;
        c[j2 >> 2] = c[e2 >> 2];
        c[i2 >> 2] = c[j2 >> 2];
        e2 = qw(i2) | 0;
        Dx(a2, $a(0, h2 | 0, b2 | 0, d2 | 0, e2 | 0, sw(f2) | 0) | 0);
        l = g2;
        return;
      }
      function Lx() {
        var b2 = 0;
        if (!(a[8016] | 0)) {
          Mx(10780);
          b2 = 8016;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10780;
      }
      function Mx(a2) {
        a2 = a2 | 0;
        fh(a2, Nx() | 0, 3);
        return;
      }
      function Nx() {
        return 1800;
      }
      function Ox(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        var d2 = 0;
        d2 = Vg(Px() | 0) | 0;
        Dx(a2, bb(0, d2 | 0, b2 | 0, rx(c2) | 0) | 0);
        return;
      }
      function Px() {
        var b2 = 0;
        if (!(a[8024] | 0)) {
          Qx(10792);
          b2 = 8024;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 10792;
      }
      function Qx(a2) {
        a2 = a2 | 0;
        fh(a2, Rx() | 0, 1);
        return;
      }
      function Rx() {
        return 1816;
      }
      function Sx() {
        Tx();
        Ux();
        Vx();
        return;
      }
      function Tx() {
        c[2702] = rC(65536) | 0;
        return;
      }
      function Ux() {
        qy(10856);
        return;
      }
      function Vx() {
        Wx(10816);
        return;
      }
      function Wx(a2) {
        a2 = a2 | 0;
        Xx(a2, 5044);
        Yx(a2) | 0;
        return;
      }
      function Xx(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = zw() | 0;
        c[a2 >> 2] = d2;
        ky(d2, b2);
        Hv(c[a2 >> 2] | 0);
        return;
      }
      function Yx(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = c[a2 >> 2] | 0;
        At(b2, Zx() | 0);
        return a2 | 0;
      }
      function Zx() {
        var b2 = 0;
        if (!(a[8032] | 0)) {
          _x(10820);
          Ha(64, 10820, o | 0) | 0;
          b2 = 8032;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        if (!(si(10820) | 0))
          _x(10820);
        return 10820;
      }
      function _x(a2) {
        a2 = a2 | 0;
        by(a2);
        Gt(a2, 25);
        return;
      }
      function $x(a2) {
        a2 = a2 | 0;
        ay(a2 + 24 | 0);
        return;
      }
      function ay(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function by(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 5, 18, b2, gy() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function cy(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        dy(a2, b2);
        return;
      }
      function dy(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2;
        f2 = d2 + 4 | 0;
        Gk(f2, b2);
        c[e2 >> 2] = Hk(f2, b2) | 0;
        ey(a2, e2);
        l = d2;
        return;
      }
      function ey(b2, d2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        fy(b2 + 4 | 0, c[d2 >> 2] | 0);
        a[b2 + 8 >> 0] = 1;
        return;
      }
      function fy(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = b2;
        return;
      }
      function gy() {
        return 1824;
      }
      function hy(a2) {
        a2 = a2 | 0;
        return iy(a2) | 0;
      }
      function iy(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        d2 = l;
        l = l + 16 | 0;
        f2 = d2 + 4 | 0;
        h2 = d2;
        e2 = jy(8) | 0;
        b2 = e2;
        i2 = qC(4) | 0;
        Gk(f2, a2);
        fy(i2, Hk(f2, a2) | 0);
        g2 = b2 + 4 | 0;
        c[g2 >> 2] = i2;
        a2 = qC(8) | 0;
        g2 = c[g2 >> 2] | 0;
        c[h2 >> 2] = 0;
        c[f2 >> 2] = c[h2 >> 2];
        Bw(a2, g2, f2);
        c[e2 >> 2] = a2;
        l = d2;
        return b2 | 0;
      }
      function jy(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0;
        a2 = a2 + 7 & -8;
        if (a2 >>> 0 <= 32768 ? (b2 = c[2701] | 0, a2 >>> 0 <= (65536 - b2 | 0) >>> 0) : 0) {
          d2 = (c[2702] | 0) + b2 | 0;
          c[2701] = b2 + a2;
          a2 = d2;
        } else {
          a2 = rC(a2 + 8 | 0) | 0;
          c[a2 >> 2] = c[2703];
          c[2703] = a2;
          a2 = a2 + 8 | 0;
        }
        return a2 | 0;
      }
      function ky(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = ly() | 0;
        c[a2 + 4 >> 2] = my() | 0;
        c[a2 + 12 >> 2] = b2;
        c[a2 + 8 >> 2] = ny() | 0;
        c[a2 + 32 >> 2] = 9;
        return;
      }
      function ly() {
        return 11744;
      }
      function my() {
        return 1832;
      }
      function ny() {
        return cu() | 0;
      }
      function oy(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        if ((jr(d2, 896) | 0) == 512) {
          if (c2 | 0) {
            py(c2);
            sC(c2);
          }
        } else if (b2 | 0)
          sC(b2);
        return;
      }
      function py(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 4 >> 2] | 0;
        if (a2 | 0)
          oC(a2);
        return;
      }
      function qy(a2) {
        a2 = a2 | 0;
        ry(a2, 5052);
        sy(a2) | 0;
        ty(a2, 5058, 26) | 0;
        uy(a2, 5069, 1) | 0;
        vy(a2, 5077, 10) | 0;
        wy(a2, 5087, 19) | 0;
        yy(a2, 5094, 27) | 0;
        return;
      }
      function ry(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = GA() | 0;
        c[a2 >> 2] = d2;
        HA(d2, b2);
        Hv(c[a2 >> 2] | 0);
        return;
      }
      function sy(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = c[a2 >> 2] | 0;
        At(b2, rA() | 0);
        return a2 | 0;
      }
      function ty(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        Yz(a2, ai(b2) | 0, c2, 0);
        return a2 | 0;
      }
      function uy(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        Gz(a2, ai(b2) | 0, c2, 0);
        return a2 | 0;
      }
      function vy(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        hz(a2, ai(b2) | 0, c2, 0);
        return a2 | 0;
      }
      function wy(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        Ry(a2, ai(b2) | 0, c2, 0);
        return a2 | 0;
      }
      function xy(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        a:
          while (1) {
            d2 = c[2703] | 0;
            while (1) {
              if ((d2 | 0) == (b2 | 0))
                break a;
              e2 = c[d2 >> 2] | 0;
              c[2703] = e2;
              if (!d2)
                d2 = e2;
              else
                break;
            }
            sC(d2);
          }
        c[2701] = a2;
        return;
      }
      function yy(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        zy(a2, ai(b2) | 0, c2, 0);
        return a2 | 0;
      }
      function zy(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = c[a2 >> 2] | 0;
        f2 = Ay() | 0;
        a2 = By(d2) | 0;
        fi(g2, b2, f2, a2, Cy(d2, e2) | 0, e2);
        return;
      }
      function Ay() {
        var b2 = 0, d2 = 0;
        if (!(a[8040] | 0)) {
          Jy(10860);
          Ha(65, 10860, o | 0) | 0;
          d2 = 8040;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10860) | 0)) {
          b2 = 10860;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Jy(10860);
        }
        return 10860;
      }
      function By(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Cy(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = Ay() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          Dy(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          Ey(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function Dy(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function Ey(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = Fy(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          Gy(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          Dy(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          Hy(a2, f2);
          Iy(f2);
          l = i2;
          return;
        }
      }
      function Fy(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function Gy(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function Hy(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Iy(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Jy(a2) {
        a2 = a2 | 0;
        My(a2);
        return;
      }
      function Ky(a2) {
        a2 = a2 | 0;
        Ly(a2 + 24 | 0);
        return;
      }
      function Ly(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function My(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 11, b2, Ny() | 0, 2);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Ny() {
        return 1840;
      }
      function Oy(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        Qy(c[(Py(a2) | 0) >> 2] | 0, b2, d2);
        return;
      }
      function Py(a2) {
        a2 = a2 | 0;
        return (c[(Ay() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function Qy(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        d2 = l;
        l = l + 16 | 0;
        f2 = d2 + 1 | 0;
        e2 = d2;
        Gk(f2, b2);
        b2 = Hk(f2, b2) | 0;
        Gk(e2, c2);
        c2 = Hk(e2, c2) | 0;
        ob[a2 & 31](b2, c2);
        l = d2;
        return;
      }
      function Ry(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = c[a2 >> 2] | 0;
        f2 = Sy() | 0;
        a2 = Ty(d2) | 0;
        fi(g2, b2, f2, a2, Uy(d2, e2) | 0, e2);
        return;
      }
      function Sy() {
        var b2 = 0, d2 = 0;
        if (!(a[8048] | 0)) {
          $y(10896);
          Ha(66, 10896, o | 0) | 0;
          d2 = 8048;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10896) | 0)) {
          b2 = 10896;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          $y(10896);
        }
        return 10896;
      }
      function Ty(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Uy(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = Sy() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          Vy(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          Wy(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function Vy(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function Wy(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = Xy(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          Yy(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          Vy(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          Zy(a2, f2);
          _y(f2);
          l = i2;
          return;
        }
      }
      function Xy(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function Yy(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function Zy(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function _y(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function $y(a2) {
        a2 = a2 | 0;
        cz(a2);
        return;
      }
      function az(a2) {
        a2 = a2 | 0;
        bz(a2 + 24 | 0);
        return;
      }
      function bz(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function cz(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 11, b2, dz() | 0, 1);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function dz() {
        return 1852;
      }
      function ez(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return gz(c[(fz(a2) | 0) >> 2] | 0, b2) | 0;
      }
      function fz(a2) {
        a2 = a2 | 0;
        return (c[(Sy() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function gz(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c2 = 0, d2 = 0;
        c2 = l;
        l = l + 16 | 0;
        d2 = c2;
        Gk(d2, b2);
        b2 = Hk(d2, b2) | 0;
        b2 = ul(pb[a2 & 31](b2) | 0) | 0;
        l = c2;
        return b2 | 0;
      }
      function hz(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = c[a2 >> 2] | 0;
        f2 = iz() | 0;
        a2 = jz(d2) | 0;
        fi(g2, b2, f2, a2, kz(d2, e2) | 0, e2);
        return;
      }
      function iz() {
        var b2 = 0, d2 = 0;
        if (!(a[8056] | 0)) {
          rz(10932);
          Ha(67, 10932, o | 0) | 0;
          d2 = 8056;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10932) | 0)) {
          b2 = 10932;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          rz(10932);
        }
        return 10932;
      }
      function jz(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function kz(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = iz() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          lz(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          mz(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function lz(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function mz(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = nz(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          oz(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          lz(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          pz(a2, f2);
          qz(f2);
          l = i2;
          return;
        }
      }
      function nz(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function oz(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function pz(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function qz(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function rz(a2) {
        a2 = a2 | 0;
        uz(a2);
        return;
      }
      function sz(a2) {
        a2 = a2 | 0;
        tz(a2 + 24 | 0);
        return;
      }
      function tz(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function uz(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 7, b2, vz() | 0, 2);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function vz() {
        return 1860;
      }
      function wz(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        return yz(c[(xz(a2) | 0) >> 2] | 0, b2, d2) | 0;
      }
      function xz(a2) {
        a2 = a2 | 0;
        return (c[(iz() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function yz(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        e2 = l;
        l = l + 32 | 0;
        h2 = e2 + 12 | 0;
        g2 = e2 + 8 | 0;
        i2 = e2;
        j2 = e2 + 16 | 0;
        f2 = e2 + 4 | 0;
        zz(j2, b2);
        Az(i2, j2, b2);
        ik(f2, d2);
        d2 = jk(f2, d2) | 0;
        c[h2 >> 2] = c[i2 >> 2];
        Eb[a2 & 15](g2, h2, d2);
        d2 = Bz(g2) | 0;
        wf(g2);
        kk(f2);
        l = e2;
        return d2 | 0;
      }
      function zz(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return;
      }
      function Az(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        Cz(a2, c2);
        return;
      }
      function Bz(a2) {
        a2 = a2 | 0;
        return Sg(a2) | 0;
      }
      function Cz(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        f2 = l;
        l = l + 16 | 0;
        d2 = f2;
        e2 = b2;
        if (!(e2 & 1))
          c[a2 >> 2] = c[b2 >> 2];
        else {
          Dz(d2, 0);
          Ja(e2 | 0, d2 | 0) | 0;
          Ez(a2, d2);
          Fz(d2);
        }
        l = f2;
        return;
      }
      function Dz(b2, d2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        ah(b2, d2);
        c[b2 + 4 >> 2] = 0;
        a[b2 + 8 >> 0] = 0;
        return;
      }
      function Ez(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = c[b2 + 4 >> 2];
        return;
      }
      function Fz(b2) {
        b2 = b2 | 0;
        a[b2 + 8 >> 0] = 0;
        return;
      }
      function Gz(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = c[a2 >> 2] | 0;
        f2 = Hz() | 0;
        a2 = Iz(d2) | 0;
        fi(g2, b2, f2, a2, Jz(d2, e2) | 0, e2);
        return;
      }
      function Hz() {
        var b2 = 0, d2 = 0;
        if (!(a[8064] | 0)) {
          Qz(10968);
          Ha(68, 10968, o | 0) | 0;
          d2 = 8064;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(10968) | 0)) {
          b2 = 10968;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          Qz(10968);
        }
        return 10968;
      }
      function Iz(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function Jz(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = Hz() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          Kz(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          Lz(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function Kz(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function Lz(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = Mz(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          Nz(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          Kz(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          Oz(a2, f2);
          Pz(f2);
          l = i2;
          return;
        }
      }
      function Mz(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function Nz(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function Oz(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function Pz(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function Qz(a2) {
        a2 = a2 | 0;
        Tz(a2);
        return;
      }
      function Rz(a2) {
        a2 = a2 | 0;
        Sz(a2 + 24 | 0);
        return;
      }
      function Sz(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function Tz(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 1, b2, Uz() | 0, 5);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function Uz() {
        return 1872;
      }
      function Vz(a2, b2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        Xz(c[(Wz(a2) | 0) >> 2] | 0, b2, d2, e2, f2, g2);
        return;
      }
      function Wz(a2) {
        a2 = a2 | 0;
        return (c[(Hz() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function Xz(a2, b2, c2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        var g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        g2 = l;
        l = l + 32 | 0;
        h2 = g2 + 16 | 0;
        i2 = g2 + 12 | 0;
        j2 = g2 + 8 | 0;
        k2 = g2 + 4 | 0;
        m2 = g2;
        ik(h2, b2);
        b2 = jk(h2, b2) | 0;
        ik(i2, c2);
        c2 = jk(i2, c2) | 0;
        ik(j2, d2);
        d2 = jk(j2, d2) | 0;
        ik(k2, e2);
        e2 = jk(k2, e2) | 0;
        ik(m2, f2);
        f2 = jk(m2, f2) | 0;
        jb[a2 & 1](b2, c2, d2, e2, f2);
        kk(m2);
        kk(k2);
        kk(j2);
        kk(i2);
        kk(h2);
        l = g2;
        return;
      }
      function Yz(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = c[a2 >> 2] | 0;
        f2 = Zz() | 0;
        a2 = _z(d2) | 0;
        fi(g2, b2, f2, a2, $z(d2, e2) | 0, e2);
        return;
      }
      function Zz() {
        var b2 = 0, d2 = 0;
        if (!(a[8072] | 0)) {
          gA(11004);
          Ha(69, 11004, o | 0) | 0;
          d2 = 8072;
          c[d2 >> 2] = 1;
          c[d2 + 4 >> 2] = 0;
        }
        if (!(si(11004) | 0)) {
          b2 = 11004;
          d2 = b2 + 36 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          gA(11004);
        }
        return 11004;
      }
      function _z(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function $z(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        i2 = l;
        l = l + 16 | 0;
        f2 = i2;
        g2 = i2 + 4 | 0;
        c[f2 >> 2] = a2;
        j2 = Zz() | 0;
        h2 = j2 + 24 | 0;
        b2 = ji(b2, 4) | 0;
        c[g2 >> 2] = b2;
        d2 = j2 + 28 | 0;
        e2 = c[d2 >> 2] | 0;
        if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
          aA(e2, a2, b2);
          b2 = (c[d2 >> 2] | 0) + 8 | 0;
          c[d2 >> 2] = b2;
        } else {
          bA(h2, f2, g2);
          b2 = c[d2 >> 2] | 0;
        }
        l = i2;
        return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
      }
      function aA(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function bA(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0;
        i2 = l;
        l = l + 32 | 0;
        f2 = i2;
        g2 = a2 + 4 | 0;
        h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
        e2 = cA(a2) | 0;
        if (e2 >>> 0 < h2 >>> 0)
          jC(a2);
        else {
          j2 = c[a2 >> 2] | 0;
          m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
          k2 = m2 >> 2;
          dA(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
          h2 = f2 + 8 | 0;
          aA(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
          c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
          eA(a2, f2);
          fA(f2);
          l = i2;
          return;
        }
      }
      function cA(a2) {
        a2 = a2 | 0;
        return 536870911;
      }
      function dA(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0;
        c[a2 + 12 >> 2] = 0;
        c[a2 + 16 >> 2] = e2;
        do
          if (b2) {
            if (b2 >>> 0 > 536870911)
              Ta();
            else {
              f2 = qC(b2 << 3) | 0;
              break;
            }
          } else
            f2 = 0;
        while (0);
        c[a2 >> 2] = f2;
        e2 = f2 + (d2 << 3) | 0;
        c[a2 + 8 >> 2] = e2;
        c[a2 + 4 >> 2] = e2;
        c[a2 + 12 >> 2] = f2 + (b2 << 3);
        return;
      }
      function eA(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        e2 = c[a2 >> 2] | 0;
        h2 = a2 + 4 | 0;
        g2 = b2 + 4 | 0;
        f2 = (c[h2 >> 2] | 0) - e2 | 0;
        d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
        c[g2 >> 2] = d2;
        if ((f2 | 0) > 0) {
          BC(d2 | 0, e2 | 0, f2 | 0) | 0;
          e2 = g2;
          d2 = c[g2 >> 2] | 0;
        } else
          e2 = g2;
        g2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = d2;
        c[e2 >> 2] = g2;
        g2 = b2 + 8 | 0;
        f2 = c[h2 >> 2] | 0;
        c[h2 >> 2] = c[g2 >> 2];
        c[g2 >> 2] = f2;
        g2 = a2 + 8 | 0;
        h2 = b2 + 12 | 0;
        a2 = c[g2 >> 2] | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[h2 >> 2] = a2;
        c[b2 >> 2] = c[e2 >> 2];
        return;
      }
      function fA(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        b2 = c[a2 + 4 >> 2] | 0;
        d2 = a2 + 8 | 0;
        e2 = c[d2 >> 2] | 0;
        if ((e2 | 0) != (b2 | 0))
          c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
        a2 = c[a2 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function gA(a2) {
        a2 = a2 | 0;
        jA(a2);
        return;
      }
      function hA(a2) {
        a2 = a2 | 0;
        iA(a2 + 24 | 0);
        return;
      }
      function iA(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function jA(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 1, 12, b2, kA() | 0, 2);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function kA() {
        return 1896;
      }
      function lA(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        nA(c[(mA(a2) | 0) >> 2] | 0, b2, d2);
        return;
      }
      function mA(a2) {
        a2 = a2 | 0;
        return (c[(Zz() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
      }
      function nA(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        d2 = l;
        l = l + 16 | 0;
        f2 = d2 + 4 | 0;
        e2 = d2;
        oA(f2, b2);
        b2 = pA(f2, b2) | 0;
        ik(e2, c2);
        c2 = jk(e2, c2) | 0;
        ob[a2 & 31](b2, c2);
        kk(e2);
        l = d2;
        return;
      }
      function oA(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return;
      }
      function pA(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return qA(b2) | 0;
      }
      function qA(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function rA() {
        var b2 = 0;
        if (!(a[8080] | 0)) {
          sA(11040);
          Ha(70, 11040, o | 0) | 0;
          b2 = 8080;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        if (!(si(11040) | 0))
          sA(11040);
        return 11040;
      }
      function sA(a2) {
        a2 = a2 | 0;
        vA(a2);
        Gt(a2, 71);
        return;
      }
      function tA(a2) {
        a2 = a2 | 0;
        uA(a2 + 24 | 0);
        return;
      }
      function uA(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0;
        d2 = c[a2 >> 2] | 0;
        e2 = d2;
        if (d2 | 0) {
          a2 = a2 + 4 | 0;
          b2 = c[a2 >> 2] | 0;
          if ((b2 | 0) != (d2 | 0))
            c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
          sC(d2);
        }
        return;
      }
      function vA(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = vi() | 0;
        yi(a2, 5, 7, b2, zA() | 0, 0);
        c[a2 + 24 >> 2] = 0;
        c[a2 + 28 >> 2] = 0;
        c[a2 + 32 >> 2] = 0;
        return;
      }
      function wA(a2) {
        a2 = a2 | 0;
        xA(a2);
        return;
      }
      function xA(a2) {
        a2 = a2 | 0;
        yA(a2);
        return;
      }
      function yA(b2) {
        b2 = b2 | 0;
        a[b2 + 8 >> 0] = 1;
        return;
      }
      function zA() {
        return 1936;
      }
      function AA() {
        return BA() | 0;
      }
      function BA() {
        var a2 = 0, b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
        b2 = l;
        l = l + 16 | 0;
        f2 = b2 + 4 | 0;
        h2 = b2;
        d2 = jy(8) | 0;
        a2 = d2;
        g2 = a2 + 4 | 0;
        c[g2 >> 2] = qC(1) | 0;
        e2 = qC(8) | 0;
        g2 = c[g2 >> 2] | 0;
        c[h2 >> 2] = 0;
        c[f2 >> 2] = c[h2 >> 2];
        CA(e2, g2, f2);
        c[d2 >> 2] = e2;
        l = b2;
        return a2 | 0;
      }
      function CA(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        c[a2 >> 2] = b2;
        d2 = qC(16) | 0;
        c[d2 + 4 >> 2] = 0;
        c[d2 + 8 >> 2] = 0;
        c[d2 >> 2] = 1916;
        c[d2 + 12 >> 2] = b2;
        c[a2 + 4 >> 2] = d2;
        return;
      }
      function DA(a2) {
        a2 = a2 | 0;
        kC(a2);
        sC(a2);
        return;
      }
      function EA(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 12 >> 2] | 0;
        if (a2 | 0)
          sC(a2);
        return;
      }
      function FA(a2) {
        a2 = a2 | 0;
        sC(a2);
        return;
      }
      function GA() {
        var b2 = 0;
        if (!(a[8088] | 0)) {
          NA(11076);
          Ha(25, 11076, o | 0) | 0;
          b2 = 8088;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 11076;
      }
      function HA(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = IA() | 0;
        c[a2 + 4 >> 2] = JA() | 0;
        c[a2 + 12 >> 2] = b2;
        c[a2 + 8 >> 2] = KA() | 0;
        c[a2 + 32 >> 2] = 10;
        return;
      }
      function IA() {
        return 11745;
      }
      function JA() {
        return 1940;
      }
      function KA() {
        return lr() | 0;
      }
      function LA(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        if ((jr(d2, 896) | 0) == 512) {
          if (c2 | 0) {
            MA(c2);
            sC(c2);
          }
        } else if (b2 | 0)
          sC(b2);
        return;
      }
      function MA(a2) {
        a2 = a2 | 0;
        a2 = c[a2 + 4 >> 2] | 0;
        if (a2 | 0)
          oC(a2);
        return;
      }
      function NA(a2) {
        a2 = a2 | 0;
        Zi(a2);
        return;
      }
      function OA(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c[a2 >> 2] = b2;
        return;
      }
      function PA(a2) {
        a2 = a2 | 0;
        return c[a2 >> 2] | 0;
      }
      function QA(b2) {
        b2 = b2 | 0;
        return a[c[b2 >> 2] >> 0] | 0;
      }
      function RA(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2;
        c[e2 >> 2] = c[a2 >> 2];
        SA(b2, e2) | 0;
        l = d2;
        return;
      }
      function SA(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0;
        d2 = TA(c[a2 >> 2] | 0, b2) | 0;
        b2 = a2 + 4 | 0;
        c[(c[b2 >> 2] | 0) + 8 >> 2] = d2;
        return c[(c[b2 >> 2] | 0) + 8 >> 2] | 0;
      }
      function TA(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = l;
        l = l + 16 | 0;
        e2 = d2;
        UA(e2);
        a2 = Sg(a2) | 0;
        b2 = VA(a2, c[b2 >> 2] | 0) | 0;
        WA(e2);
        l = d2;
        return b2 | 0;
      }
      function UA(a2) {
        a2 = a2 | 0;
        c[a2 >> 2] = c[2701];
        c[a2 + 4 >> 2] = c[2703];
        return;
      }
      function VA(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c2 = 0;
        c2 = Vg(XA() | 0) | 0;
        return bb(0, c2 | 0, a2 | 0, sw(b2) | 0) | 0;
      }
      function WA(a2) {
        a2 = a2 | 0;
        xy(c[a2 >> 2] | 0, c[a2 + 4 >> 2] | 0);
        return;
      }
      function XA() {
        var b2 = 0;
        if (!(a[8096] | 0)) {
          YA(11120);
          b2 = 8096;
          c[b2 >> 2] = 1;
          c[b2 + 4 >> 2] = 0;
        }
        return 11120;
      }
      function YA(a2) {
        a2 = a2 | 0;
        fh(a2, ZA() | 0, 1);
        return;
      }
      function ZA() {
        return 1948;
      }
      function _A() {
        $A();
        return;
      }
      function $A() {
        var b2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0;
        s2 = l;
        l = l + 16 | 0;
        o2 = s2 + 4 | 0;
        p2 = s2;
        Ea(65536, 10804, c[2702] | 0, 10812);
        f2 = Wv() | 0;
        e2 = c[f2 >> 2] | 0;
        b2 = c[e2 >> 2] | 0;
        if (b2 | 0) {
          g2 = c[f2 + 8 >> 2] | 0;
          f2 = c[f2 + 4 >> 2] | 0;
          while (1) {
            Ma(b2 | 0, d[f2 >> 0] | 0 | 0, a[g2 >> 0] | 0);
            e2 = e2 + 4 | 0;
            b2 = c[e2 >> 2] | 0;
            if (!b2)
              break;
            else {
              g2 = g2 + 1 | 0;
              f2 = f2 + 1 | 0;
            }
          }
        }
        b2 = Yv() | 0;
        e2 = c[b2 >> 2] | 0;
        if (e2 | 0)
          do {
            Na(e2 | 0, c[b2 + 4 >> 2] | 0);
            b2 = b2 + 8 | 0;
            e2 = c[b2 >> 2] | 0;
          } while ((e2 | 0) != 0);
        Na(aB() | 0, 5167);
        n2 = Iv() | 0;
        b2 = c[n2 >> 2] | 0;
        a:
          do
            if (b2 | 0) {
              do {
                bB(c[b2 + 4 >> 2] | 0);
                b2 = c[b2 >> 2] | 0;
              } while ((b2 | 0) != 0);
              b2 = c[n2 >> 2] | 0;
              if (b2 | 0) {
                m2 = n2;
                do {
                  while (1) {
                    h2 = b2;
                    b2 = c[b2 >> 2] | 0;
                    h2 = c[h2 + 4 >> 2] | 0;
                    if (!(cB(h2) | 0))
                      break;
                    c[p2 >> 2] = m2;
                    c[o2 >> 2] = c[p2 >> 2];
                    dB(n2, o2) | 0;
                    if (!b2)
                      break a;
                  }
                  eB(h2);
                  m2 = c[m2 >> 2] | 0;
                  e2 = fB(h2) | 0;
                  i2 = Va() | 0;
                  j2 = l;
                  l = l + ((1 * (e2 << 2) | 0) + 15 & -16) | 0;
                  k2 = l;
                  l = l + ((1 * (e2 << 2) | 0) + 15 & -16) | 0;
                  e2 = c[(Zw(h2) | 0) >> 2] | 0;
                  if (e2 | 0) {
                    f2 = j2;
                    g2 = k2;
                    while (1) {
                      c[f2 >> 2] = c[(Xw(c[e2 + 4 >> 2] | 0) | 0) >> 2];
                      c[g2 >> 2] = c[e2 + 8 >> 2];
                      e2 = c[e2 >> 2] | 0;
                      if (!e2)
                        break;
                      else {
                        f2 = f2 + 4 | 0;
                        g2 = g2 + 4 | 0;
                      }
                    }
                  }
                  t2 = Xw(h2) | 0;
                  e2 = gB(h2) | 0;
                  f2 = fB(h2) | 0;
                  g2 = hB(h2) | 0;
                  Ra(t2 | 0, e2 | 0, j2 | 0, k2 | 0, f2 | 0, g2 | 0, Tv(h2) | 0);
                  Ga(i2 | 0);
                } while ((b2 | 0) != 0);
              }
            }
          while (0);
        b2 = c[(Vv() | 0) >> 2] | 0;
        if (b2 | 0)
          do {
            t2 = b2 + 4 | 0;
            n2 = aw(t2) | 0;
            h2 = fw(n2) | 0;
            i2 = bw(n2) | 0;
            j2 = (cw(n2) | 0) + 1 | 0;
            k2 = iB(n2) | 0;
            m2 = jB(t2) | 0;
            n2 = si(n2) | 0;
            o2 = hw(t2) | 0;
            p2 = kB(t2) | 0;
            Pa(0, h2 | 0, i2 | 0, j2 | 0, k2 | 0, m2 | 0, n2 | 0, o2 | 0, p2 | 0, lB(t2) | 0);
            b2 = c[b2 >> 2] | 0;
          } while ((b2 | 0) != 0);
        b2 = c[(Iv() | 0) >> 2] | 0;
        b:
          do
            if (b2 | 0) {
              c:
                while (1) {
                  e2 = c[b2 + 4 >> 2] | 0;
                  if (e2 | 0 ? (q2 = c[(Xw(e2) | 0) >> 2] | 0, r2 = c[(ax(e2) | 0) >> 2] | 0, r2 | 0) : 0) {
                    f2 = r2;
                    do {
                      e2 = f2 + 4 | 0;
                      g2 = aw(e2) | 0;
                      d:
                        do
                          if (g2 | 0)
                            switch (si(g2) | 0) {
                              case 0:
                                break c;
                              case 4:
                              case 3:
                              case 2: {
                                k2 = fw(g2) | 0;
                                m2 = bw(g2) | 0;
                                n2 = (cw(g2) | 0) + 1 | 0;
                                o2 = iB(g2) | 0;
                                p2 = si(g2) | 0;
                                t2 = hw(e2) | 0;
                                Pa(q2 | 0, k2 | 0, m2 | 0, n2 | 0, o2 | 0, 0, p2 | 0, t2 | 0, kB(e2) | 0, lB(e2) | 0);
                                break d;
                              }
                              case 1: {
                                j2 = fw(g2) | 0;
                                k2 = bw(g2) | 0;
                                m2 = (cw(g2) | 0) + 1 | 0;
                                n2 = iB(g2) | 0;
                                o2 = jB(e2) | 0;
                                p2 = si(g2) | 0;
                                t2 = hw(e2) | 0;
                                Pa(q2 | 0, j2 | 0, k2 | 0, m2 | 0, n2 | 0, o2 | 0, p2 | 0, t2 | 0, kB(e2) | 0, lB(e2) | 0);
                                break d;
                              }
                              case 5: {
                                n2 = fw(g2) | 0;
                                o2 = bw(g2) | 0;
                                p2 = (cw(g2) | 0) + 1 | 0;
                                t2 = iB(g2) | 0;
                                Pa(q2 | 0, n2 | 0, o2 | 0, p2 | 0, t2 | 0, mB(g2) | 0, si(g2) | 0, 0, 0, 0);
                                break d;
                              }
                              default:
                                break d;
                            }
                        while (0);
                      f2 = c[f2 >> 2] | 0;
                    } while ((f2 | 0) != 0);
                  }
                  b2 = c[b2 >> 2] | 0;
                  if (!b2)
                    break b;
                }
              Ta();
            }
          while (0);
        Sa();
        l = s2;
        return;
      }
      function aB() {
        return 11703;
      }
      function bB(b2) {
        b2 = b2 | 0;
        a[b2 + 40 >> 0] = 0;
        return;
      }
      function cB(b2) {
        b2 = b2 | 0;
        return (a[b2 + 40 >> 0] | 0) != 0 | 0;
      }
      function dB(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        b2 = nB(b2) | 0;
        a2 = c[b2 >> 2] | 0;
        c[b2 >> 2] = c[a2 >> 2];
        sC(a2);
        return c[b2 >> 2] | 0;
      }
      function eB(b2) {
        b2 = b2 | 0;
        a[b2 + 40 >> 0] = 1;
        return;
      }
      function fB(a2) {
        a2 = a2 | 0;
        return c[a2 + 20 >> 2] | 0;
      }
      function gB(a2) {
        a2 = a2 | 0;
        return c[a2 + 8 >> 2] | 0;
      }
      function hB(a2) {
        a2 = a2 | 0;
        return c[a2 + 32 >> 2] | 0;
      }
      function iB(a2) {
        a2 = a2 | 0;
        return c[a2 + 4 >> 2] | 0;
      }
      function jB(a2) {
        a2 = a2 | 0;
        return c[a2 + 4 >> 2] | 0;
      }
      function kB(a2) {
        a2 = a2 | 0;
        return c[a2 + 8 >> 2] | 0;
      }
      function lB(a2) {
        a2 = a2 | 0;
        return c[a2 + 16 >> 2] | 0;
      }
      function mB(a2) {
        a2 = a2 | 0;
        return c[a2 + 20 >> 2] | 0;
      }
      function nB(a2) {
        a2 = a2 | 0;
        return c[a2 >> 2] | 0;
      }
      function oB(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = 0, v2 = 0, w2 = 0, x2 = 0;
        x2 = l;
        l = l + 16 | 0;
        o2 = x2;
        do
          if (a2 >>> 0 < 245) {
            k2 = a2 >>> 0 < 11 ? 16 : a2 + 11 & -8;
            a2 = k2 >>> 3;
            n2 = c[2783] | 0;
            d2 = n2 >>> a2;
            if (d2 & 3 | 0) {
              b2 = (d2 & 1 ^ 1) + a2 | 0;
              a2 = 11172 + (b2 << 1 << 2) | 0;
              d2 = a2 + 8 | 0;
              e2 = c[d2 >> 2] | 0;
              f2 = e2 + 8 | 0;
              g2 = c[f2 >> 2] | 0;
              if ((a2 | 0) == (g2 | 0))
                c[2783] = n2 & ~(1 << b2);
              else {
                c[g2 + 12 >> 2] = a2;
                c[d2 >> 2] = g2;
              }
              w2 = b2 << 3;
              c[e2 + 4 >> 2] = w2 | 3;
              w2 = e2 + w2 + 4 | 0;
              c[w2 >> 2] = c[w2 >> 2] | 1;
              w2 = f2;
              l = x2;
              return w2 | 0;
            }
            m2 = c[2785] | 0;
            if (k2 >>> 0 > m2 >>> 0) {
              if (d2 | 0) {
                b2 = 2 << a2;
                b2 = d2 << a2 & (b2 | 0 - b2);
                b2 = (b2 & 0 - b2) + -1 | 0;
                h2 = b2 >>> 12 & 16;
                b2 = b2 >>> h2;
                d2 = b2 >>> 5 & 8;
                b2 = b2 >>> d2;
                f2 = b2 >>> 2 & 4;
                b2 = b2 >>> f2;
                a2 = b2 >>> 1 & 2;
                b2 = b2 >>> a2;
                e2 = b2 >>> 1 & 1;
                e2 = (d2 | h2 | f2 | a2 | e2) + (b2 >>> e2) | 0;
                b2 = 11172 + (e2 << 1 << 2) | 0;
                a2 = b2 + 8 | 0;
                f2 = c[a2 >> 2] | 0;
                h2 = f2 + 8 | 0;
                d2 = c[h2 >> 2] | 0;
                if ((b2 | 0) == (d2 | 0)) {
                  a2 = n2 & ~(1 << e2);
                  c[2783] = a2;
                } else {
                  c[d2 + 12 >> 2] = b2;
                  c[a2 >> 2] = d2;
                  a2 = n2;
                }
                g2 = (e2 << 3) - k2 | 0;
                c[f2 + 4 >> 2] = k2 | 3;
                e2 = f2 + k2 | 0;
                c[e2 + 4 >> 2] = g2 | 1;
                c[e2 + g2 >> 2] = g2;
                if (m2 | 0) {
                  f2 = c[2788] | 0;
                  b2 = m2 >>> 3;
                  d2 = 11172 + (b2 << 1 << 2) | 0;
                  b2 = 1 << b2;
                  if (!(a2 & b2)) {
                    c[2783] = a2 | b2;
                    b2 = d2;
                    a2 = d2 + 8 | 0;
                  } else {
                    a2 = d2 + 8 | 0;
                    b2 = c[a2 >> 2] | 0;
                  }
                  c[a2 >> 2] = f2;
                  c[b2 + 12 >> 2] = f2;
                  c[f2 + 8 >> 2] = b2;
                  c[f2 + 12 >> 2] = d2;
                }
                c[2785] = g2;
                c[2788] = e2;
                w2 = h2;
                l = x2;
                return w2 | 0;
              }
              i2 = c[2784] | 0;
              if (i2) {
                d2 = (i2 & 0 - i2) + -1 | 0;
                h2 = d2 >>> 12 & 16;
                d2 = d2 >>> h2;
                g2 = d2 >>> 5 & 8;
                d2 = d2 >>> g2;
                j2 = d2 >>> 2 & 4;
                d2 = d2 >>> j2;
                e2 = d2 >>> 1 & 2;
                d2 = d2 >>> e2;
                a2 = d2 >>> 1 & 1;
                a2 = c[11436 + ((g2 | h2 | j2 | e2 | a2) + (d2 >>> a2) << 2) >> 2] | 0;
                d2 = (c[a2 + 4 >> 2] & -8) - k2 | 0;
                e2 = c[a2 + 16 + (((c[a2 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
                if (!e2) {
                  j2 = a2;
                  g2 = d2;
                } else {
                  do {
                    h2 = (c[e2 + 4 >> 2] & -8) - k2 | 0;
                    j2 = h2 >>> 0 < d2 >>> 0;
                    d2 = j2 ? h2 : d2;
                    a2 = j2 ? e2 : a2;
                    e2 = c[e2 + 16 + (((c[e2 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
                  } while ((e2 | 0) != 0);
                  j2 = a2;
                  g2 = d2;
                }
                h2 = j2 + k2 | 0;
                if (j2 >>> 0 < h2 >>> 0) {
                  f2 = c[j2 + 24 >> 2] | 0;
                  b2 = c[j2 + 12 >> 2] | 0;
                  do
                    if ((b2 | 0) == (j2 | 0)) {
                      a2 = j2 + 20 | 0;
                      b2 = c[a2 >> 2] | 0;
                      if (!b2) {
                        a2 = j2 + 16 | 0;
                        b2 = c[a2 >> 2] | 0;
                        if (!b2) {
                          d2 = 0;
                          break;
                        }
                      }
                      while (1) {
                        d2 = b2 + 20 | 0;
                        e2 = c[d2 >> 2] | 0;
                        if (e2 | 0) {
                          b2 = e2;
                          a2 = d2;
                          continue;
                        }
                        d2 = b2 + 16 | 0;
                        e2 = c[d2 >> 2] | 0;
                        if (!e2)
                          break;
                        else {
                          b2 = e2;
                          a2 = d2;
                        }
                      }
                      c[a2 >> 2] = 0;
                      d2 = b2;
                    } else {
                      d2 = c[j2 + 8 >> 2] | 0;
                      c[d2 + 12 >> 2] = b2;
                      c[b2 + 8 >> 2] = d2;
                      d2 = b2;
                    }
                  while (0);
                  do
                    if (f2 | 0) {
                      b2 = c[j2 + 28 >> 2] | 0;
                      a2 = 11436 + (b2 << 2) | 0;
                      if ((j2 | 0) == (c[a2 >> 2] | 0)) {
                        c[a2 >> 2] = d2;
                        if (!d2) {
                          c[2784] = i2 & ~(1 << b2);
                          break;
                        }
                      } else {
                        c[f2 + 16 + (((c[f2 + 16 >> 2] | 0) != (j2 | 0) & 1) << 2) >> 2] = d2;
                        if (!d2)
                          break;
                      }
                      c[d2 + 24 >> 2] = f2;
                      b2 = c[j2 + 16 >> 2] | 0;
                      if (b2 | 0) {
                        c[d2 + 16 >> 2] = b2;
                        c[b2 + 24 >> 2] = d2;
                      }
                      b2 = c[j2 + 20 >> 2] | 0;
                      if (b2 | 0) {
                        c[d2 + 20 >> 2] = b2;
                        c[b2 + 24 >> 2] = d2;
                      }
                    }
                  while (0);
                  if (g2 >>> 0 < 16) {
                    w2 = g2 + k2 | 0;
                    c[j2 + 4 >> 2] = w2 | 3;
                    w2 = j2 + w2 + 4 | 0;
                    c[w2 >> 2] = c[w2 >> 2] | 1;
                  } else {
                    c[j2 + 4 >> 2] = k2 | 3;
                    c[h2 + 4 >> 2] = g2 | 1;
                    c[h2 + g2 >> 2] = g2;
                    if (m2 | 0) {
                      e2 = c[2788] | 0;
                      b2 = m2 >>> 3;
                      d2 = 11172 + (b2 << 1 << 2) | 0;
                      b2 = 1 << b2;
                      if (!(n2 & b2)) {
                        c[2783] = n2 | b2;
                        b2 = d2;
                        a2 = d2 + 8 | 0;
                      } else {
                        a2 = d2 + 8 | 0;
                        b2 = c[a2 >> 2] | 0;
                      }
                      c[a2 >> 2] = e2;
                      c[b2 + 12 >> 2] = e2;
                      c[e2 + 8 >> 2] = b2;
                      c[e2 + 12 >> 2] = d2;
                    }
                    c[2785] = g2;
                    c[2788] = h2;
                  }
                  w2 = j2 + 8 | 0;
                  l = x2;
                  return w2 | 0;
                } else
                  n2 = k2;
              } else
                n2 = k2;
            } else
              n2 = k2;
          } else if (a2 >>> 0 <= 4294967231) {
            a2 = a2 + 11 | 0;
            k2 = a2 & -8;
            j2 = c[2784] | 0;
            if (j2) {
              e2 = 0 - k2 | 0;
              a2 = a2 >>> 8;
              if (a2) {
                if (k2 >>> 0 > 16777215)
                  i2 = 31;
                else {
                  n2 = (a2 + 1048320 | 0) >>> 16 & 8;
                  v2 = a2 << n2;
                  m2 = (v2 + 520192 | 0) >>> 16 & 4;
                  v2 = v2 << m2;
                  i2 = (v2 + 245760 | 0) >>> 16 & 2;
                  i2 = 14 - (m2 | n2 | i2) + (v2 << i2 >>> 15) | 0;
                  i2 = k2 >>> (i2 + 7 | 0) & 1 | i2 << 1;
                }
              } else
                i2 = 0;
              d2 = c[11436 + (i2 << 2) >> 2] | 0;
              a:
                do
                  if (!d2) {
                    d2 = 0;
                    a2 = 0;
                    v2 = 57;
                  } else {
                    a2 = 0;
                    h2 = k2 << ((i2 | 0) == 31 ? 0 : 25 - (i2 >>> 1) | 0);
                    g2 = 0;
                    while (1) {
                      f2 = (c[d2 + 4 >> 2] & -8) - k2 | 0;
                      if (f2 >>> 0 < e2 >>> 0)
                        if (!f2) {
                          a2 = d2;
                          e2 = 0;
                          f2 = d2;
                          v2 = 61;
                          break a;
                        } else {
                          a2 = d2;
                          e2 = f2;
                        }
                      f2 = c[d2 + 20 >> 2] | 0;
                      d2 = c[d2 + 16 + (h2 >>> 31 << 2) >> 2] | 0;
                      g2 = (f2 | 0) == 0 | (f2 | 0) == (d2 | 0) ? g2 : f2;
                      f2 = (d2 | 0) == 0;
                      if (f2) {
                        d2 = g2;
                        v2 = 57;
                        break;
                      } else
                        h2 = h2 << ((f2 ^ 1) & 1);
                    }
                  }
                while (0);
              if ((v2 | 0) == 57) {
                if ((d2 | 0) == 0 & (a2 | 0) == 0) {
                  a2 = 2 << i2;
                  a2 = j2 & (a2 | 0 - a2);
                  if (!a2) {
                    n2 = k2;
                    break;
                  }
                  n2 = (a2 & 0 - a2) + -1 | 0;
                  h2 = n2 >>> 12 & 16;
                  n2 = n2 >>> h2;
                  g2 = n2 >>> 5 & 8;
                  n2 = n2 >>> g2;
                  i2 = n2 >>> 2 & 4;
                  n2 = n2 >>> i2;
                  m2 = n2 >>> 1 & 2;
                  n2 = n2 >>> m2;
                  d2 = n2 >>> 1 & 1;
                  a2 = 0;
                  d2 = c[11436 + ((g2 | h2 | i2 | m2 | d2) + (n2 >>> d2) << 2) >> 2] | 0;
                }
                if (!d2) {
                  i2 = a2;
                  h2 = e2;
                } else {
                  f2 = d2;
                  v2 = 61;
                }
              }
              if ((v2 | 0) == 61)
                while (1) {
                  v2 = 0;
                  d2 = (c[f2 + 4 >> 2] & -8) - k2 | 0;
                  n2 = d2 >>> 0 < e2 >>> 0;
                  d2 = n2 ? d2 : e2;
                  a2 = n2 ? f2 : a2;
                  f2 = c[f2 + 16 + (((c[f2 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
                  if (!f2) {
                    i2 = a2;
                    h2 = d2;
                    break;
                  } else {
                    e2 = d2;
                    v2 = 61;
                  }
                }
              if ((i2 | 0) != 0 ? h2 >>> 0 < ((c[2785] | 0) - k2 | 0) >>> 0 : 0) {
                g2 = i2 + k2 | 0;
                if (i2 >>> 0 >= g2 >>> 0) {
                  w2 = 0;
                  l = x2;
                  return w2 | 0;
                }
                f2 = c[i2 + 24 >> 2] | 0;
                b2 = c[i2 + 12 >> 2] | 0;
                do
                  if ((b2 | 0) == (i2 | 0)) {
                    a2 = i2 + 20 | 0;
                    b2 = c[a2 >> 2] | 0;
                    if (!b2) {
                      a2 = i2 + 16 | 0;
                      b2 = c[a2 >> 2] | 0;
                      if (!b2) {
                        b2 = 0;
                        break;
                      }
                    }
                    while (1) {
                      d2 = b2 + 20 | 0;
                      e2 = c[d2 >> 2] | 0;
                      if (e2 | 0) {
                        b2 = e2;
                        a2 = d2;
                        continue;
                      }
                      d2 = b2 + 16 | 0;
                      e2 = c[d2 >> 2] | 0;
                      if (!e2)
                        break;
                      else {
                        b2 = e2;
                        a2 = d2;
                      }
                    }
                    c[a2 >> 2] = 0;
                  } else {
                    w2 = c[i2 + 8 >> 2] | 0;
                    c[w2 + 12 >> 2] = b2;
                    c[b2 + 8 >> 2] = w2;
                  }
                while (0);
                do
                  if (f2) {
                    a2 = c[i2 + 28 >> 2] | 0;
                    d2 = 11436 + (a2 << 2) | 0;
                    if ((i2 | 0) == (c[d2 >> 2] | 0)) {
                      c[d2 >> 2] = b2;
                      if (!b2) {
                        e2 = j2 & ~(1 << a2);
                        c[2784] = e2;
                        break;
                      }
                    } else {
                      c[f2 + 16 + (((c[f2 + 16 >> 2] | 0) != (i2 | 0) & 1) << 2) >> 2] = b2;
                      if (!b2) {
                        e2 = j2;
                        break;
                      }
                    }
                    c[b2 + 24 >> 2] = f2;
                    a2 = c[i2 + 16 >> 2] | 0;
                    if (a2 | 0) {
                      c[b2 + 16 >> 2] = a2;
                      c[a2 + 24 >> 2] = b2;
                    }
                    a2 = c[i2 + 20 >> 2] | 0;
                    if (a2) {
                      c[b2 + 20 >> 2] = a2;
                      c[a2 + 24 >> 2] = b2;
                      e2 = j2;
                    } else
                      e2 = j2;
                  } else
                    e2 = j2;
                while (0);
                do
                  if (h2 >>> 0 >= 16) {
                    c[i2 + 4 >> 2] = k2 | 3;
                    c[g2 + 4 >> 2] = h2 | 1;
                    c[g2 + h2 >> 2] = h2;
                    b2 = h2 >>> 3;
                    if (h2 >>> 0 < 256) {
                      d2 = 11172 + (b2 << 1 << 2) | 0;
                      a2 = c[2783] | 0;
                      b2 = 1 << b2;
                      if (!(a2 & b2)) {
                        c[2783] = a2 | b2;
                        b2 = d2;
                        a2 = d2 + 8 | 0;
                      } else {
                        a2 = d2 + 8 | 0;
                        b2 = c[a2 >> 2] | 0;
                      }
                      c[a2 >> 2] = g2;
                      c[b2 + 12 >> 2] = g2;
                      c[g2 + 8 >> 2] = b2;
                      c[g2 + 12 >> 2] = d2;
                      break;
                    }
                    b2 = h2 >>> 8;
                    if (b2) {
                      if (h2 >>> 0 > 16777215)
                        b2 = 31;
                      else {
                        v2 = (b2 + 1048320 | 0) >>> 16 & 8;
                        w2 = b2 << v2;
                        u2 = (w2 + 520192 | 0) >>> 16 & 4;
                        w2 = w2 << u2;
                        b2 = (w2 + 245760 | 0) >>> 16 & 2;
                        b2 = 14 - (u2 | v2 | b2) + (w2 << b2 >>> 15) | 0;
                        b2 = h2 >>> (b2 + 7 | 0) & 1 | b2 << 1;
                      }
                    } else
                      b2 = 0;
                    d2 = 11436 + (b2 << 2) | 0;
                    c[g2 + 28 >> 2] = b2;
                    a2 = g2 + 16 | 0;
                    c[a2 + 4 >> 2] = 0;
                    c[a2 >> 2] = 0;
                    a2 = 1 << b2;
                    if (!(e2 & a2)) {
                      c[2784] = e2 | a2;
                      c[d2 >> 2] = g2;
                      c[g2 + 24 >> 2] = d2;
                      c[g2 + 12 >> 2] = g2;
                      c[g2 + 8 >> 2] = g2;
                      break;
                    }
                    a2 = h2 << ((b2 | 0) == 31 ? 0 : 25 - (b2 >>> 1) | 0);
                    d2 = c[d2 >> 2] | 0;
                    while (1) {
                      if ((c[d2 + 4 >> 2] & -8 | 0) == (h2 | 0)) {
                        v2 = 97;
                        break;
                      }
                      e2 = d2 + 16 + (a2 >>> 31 << 2) | 0;
                      b2 = c[e2 >> 2] | 0;
                      if (!b2) {
                        v2 = 96;
                        break;
                      } else {
                        a2 = a2 << 1;
                        d2 = b2;
                      }
                    }
                    if ((v2 | 0) == 96) {
                      c[e2 >> 2] = g2;
                      c[g2 + 24 >> 2] = d2;
                      c[g2 + 12 >> 2] = g2;
                      c[g2 + 8 >> 2] = g2;
                      break;
                    } else if ((v2 | 0) == 97) {
                      v2 = d2 + 8 | 0;
                      w2 = c[v2 >> 2] | 0;
                      c[w2 + 12 >> 2] = g2;
                      c[v2 >> 2] = g2;
                      c[g2 + 8 >> 2] = w2;
                      c[g2 + 12 >> 2] = d2;
                      c[g2 + 24 >> 2] = 0;
                      break;
                    }
                  } else {
                    w2 = h2 + k2 | 0;
                    c[i2 + 4 >> 2] = w2 | 3;
                    w2 = i2 + w2 + 4 | 0;
                    c[w2 >> 2] = c[w2 >> 2] | 1;
                  }
                while (0);
                w2 = i2 + 8 | 0;
                l = x2;
                return w2 | 0;
              } else
                n2 = k2;
            } else
              n2 = k2;
          } else
            n2 = -1;
        while (0);
        d2 = c[2785] | 0;
        if (d2 >>> 0 >= n2 >>> 0) {
          b2 = d2 - n2 | 0;
          a2 = c[2788] | 0;
          if (b2 >>> 0 > 15) {
            w2 = a2 + n2 | 0;
            c[2788] = w2;
            c[2785] = b2;
            c[w2 + 4 >> 2] = b2 | 1;
            c[w2 + b2 >> 2] = b2;
            c[a2 + 4 >> 2] = n2 | 3;
          } else {
            c[2785] = 0;
            c[2788] = 0;
            c[a2 + 4 >> 2] = d2 | 3;
            w2 = a2 + d2 + 4 | 0;
            c[w2 >> 2] = c[w2 >> 2] | 1;
          }
          w2 = a2 + 8 | 0;
          l = x2;
          return w2 | 0;
        }
        h2 = c[2786] | 0;
        if (h2 >>> 0 > n2 >>> 0) {
          u2 = h2 - n2 | 0;
          c[2786] = u2;
          w2 = c[2789] | 0;
          v2 = w2 + n2 | 0;
          c[2789] = v2;
          c[v2 + 4 >> 2] = u2 | 1;
          c[w2 + 4 >> 2] = n2 | 3;
          w2 = w2 + 8 | 0;
          l = x2;
          return w2 | 0;
        }
        if (!(c[2901] | 0)) {
          c[2903] = 4096;
          c[2902] = 4096;
          c[2904] = -1;
          c[2905] = -1;
          c[2906] = 0;
          c[2894] = 0;
          a2 = o2 & -16 ^ 1431655768;
          c[o2 >> 2] = a2;
          c[2901] = a2;
          a2 = 4096;
        } else
          a2 = c[2903] | 0;
        i2 = n2 + 48 | 0;
        j2 = n2 + 47 | 0;
        g2 = a2 + j2 | 0;
        f2 = 0 - a2 | 0;
        k2 = g2 & f2;
        if (k2 >>> 0 <= n2 >>> 0) {
          w2 = 0;
          l = x2;
          return w2 | 0;
        }
        a2 = c[2893] | 0;
        if (a2 | 0 ? (m2 = c[2891] | 0, o2 = m2 + k2 | 0, o2 >>> 0 <= m2 >>> 0 | o2 >>> 0 > a2 >>> 0) : 0) {
          w2 = 0;
          l = x2;
          return w2 | 0;
        }
        b:
          do
            if (!(c[2894] & 4)) {
              d2 = c[2789] | 0;
              c:
                do
                  if (d2) {
                    e2 = 11580;
                    while (1) {
                      a2 = c[e2 >> 2] | 0;
                      if (a2 >>> 0 <= d2 >>> 0 ? (r2 = e2 + 4 | 0, (a2 + (c[r2 >> 2] | 0) | 0) >>> 0 > d2 >>> 0) : 0)
                        break;
                      a2 = c[e2 + 8 >> 2] | 0;
                      if (!a2) {
                        v2 = 118;
                        break c;
                      } else
                        e2 = a2;
                    }
                    b2 = g2 - h2 & f2;
                    if (b2 >>> 0 < 2147483647) {
                      a2 = FC(b2 | 0) | 0;
                      if ((a2 | 0) == ((c[e2 >> 2] | 0) + (c[r2 >> 2] | 0) | 0)) {
                        if ((a2 | 0) != (-1 | 0)) {
                          h2 = b2;
                          g2 = a2;
                          v2 = 135;
                          break b;
                        }
                      } else {
                        e2 = a2;
                        v2 = 126;
                      }
                    } else
                      b2 = 0;
                  } else
                    v2 = 118;
                while (0);
              do
                if ((v2 | 0) == 118) {
                  d2 = FC(0) | 0;
                  if ((d2 | 0) != (-1 | 0) ? (b2 = d2, p2 = c[2902] | 0, q2 = p2 + -1 | 0, b2 = ((q2 & b2 | 0) == 0 ? 0 : (q2 + b2 & 0 - p2) - b2 | 0) + k2 | 0, p2 = c[2891] | 0, q2 = b2 + p2 | 0, b2 >>> 0 > n2 >>> 0 & b2 >>> 0 < 2147483647) : 0) {
                    r2 = c[2893] | 0;
                    if (r2 | 0 ? q2 >>> 0 <= p2 >>> 0 | q2 >>> 0 > r2 >>> 0 : 0) {
                      b2 = 0;
                      break;
                    }
                    a2 = FC(b2 | 0) | 0;
                    if ((a2 | 0) == (d2 | 0)) {
                      h2 = b2;
                      g2 = d2;
                      v2 = 135;
                      break b;
                    } else {
                      e2 = a2;
                      v2 = 126;
                    }
                  } else
                    b2 = 0;
                }
              while (0);
              do
                if ((v2 | 0) == 126) {
                  d2 = 0 - b2 | 0;
                  if (!(i2 >>> 0 > b2 >>> 0 & (b2 >>> 0 < 2147483647 & (e2 | 0) != (-1 | 0))))
                    if ((e2 | 0) == (-1 | 0)) {
                      b2 = 0;
                      break;
                    } else {
                      h2 = b2;
                      g2 = e2;
                      v2 = 135;
                      break b;
                    }
                  a2 = c[2903] | 0;
                  a2 = j2 - b2 + a2 & 0 - a2;
                  if (a2 >>> 0 >= 2147483647) {
                    h2 = b2;
                    g2 = e2;
                    v2 = 135;
                    break b;
                  }
                  if ((FC(a2 | 0) | 0) == (-1 | 0)) {
                    FC(d2 | 0) | 0;
                    b2 = 0;
                    break;
                  } else {
                    h2 = a2 + b2 | 0;
                    g2 = e2;
                    v2 = 135;
                    break b;
                  }
                }
              while (0);
              c[2894] = c[2894] | 4;
              v2 = 133;
            } else {
              b2 = 0;
              v2 = 133;
            }
          while (0);
        if (((v2 | 0) == 133 ? k2 >>> 0 < 2147483647 : 0) ? (u2 = FC(k2 | 0) | 0, r2 = FC(0) | 0, s2 = r2 - u2 | 0, t2 = s2 >>> 0 > (n2 + 40 | 0) >>> 0, !((u2 | 0) == (-1 | 0) | t2 ^ 1 | u2 >>> 0 < r2 >>> 0 & ((u2 | 0) != (-1 | 0) & (r2 | 0) != (-1 | 0)) ^ 1)) : 0) {
          h2 = t2 ? s2 : b2;
          g2 = u2;
          v2 = 135;
        }
        if ((v2 | 0) == 135) {
          b2 = (c[2891] | 0) + h2 | 0;
          c[2891] = b2;
          if (b2 >>> 0 > (c[2892] | 0) >>> 0)
            c[2892] = b2;
          j2 = c[2789] | 0;
          do
            if (j2) {
              b2 = 11580;
              while (1) {
                a2 = c[b2 >> 2] | 0;
                d2 = b2 + 4 | 0;
                e2 = c[d2 >> 2] | 0;
                if ((g2 | 0) == (a2 + e2 | 0)) {
                  v2 = 145;
                  break;
                }
                f2 = c[b2 + 8 >> 2] | 0;
                if (!f2)
                  break;
                else
                  b2 = f2;
              }
              if (((v2 | 0) == 145 ? (c[b2 + 12 >> 2] & 8 | 0) == 0 : 0) ? j2 >>> 0 < g2 >>> 0 & j2 >>> 0 >= a2 >>> 0 : 0) {
                c[d2 >> 2] = e2 + h2;
                w2 = j2 + 8 | 0;
                w2 = (w2 & 7 | 0) == 0 ? 0 : 0 - w2 & 7;
                v2 = j2 + w2 | 0;
                w2 = (c[2786] | 0) + (h2 - w2) | 0;
                c[2789] = v2;
                c[2786] = w2;
                c[v2 + 4 >> 2] = w2 | 1;
                c[v2 + w2 + 4 >> 2] = 40;
                c[2790] = c[2905];
                break;
              }
              if (g2 >>> 0 < (c[2787] | 0) >>> 0)
                c[2787] = g2;
              d2 = g2 + h2 | 0;
              b2 = 11580;
              while (1) {
                if ((c[b2 >> 2] | 0) == (d2 | 0)) {
                  v2 = 153;
                  break;
                }
                a2 = c[b2 + 8 >> 2] | 0;
                if (!a2)
                  break;
                else
                  b2 = a2;
              }
              if ((v2 | 0) == 153 ? (c[b2 + 12 >> 2] & 8 | 0) == 0 : 0) {
                c[b2 >> 2] = g2;
                m2 = b2 + 4 | 0;
                c[m2 >> 2] = (c[m2 >> 2] | 0) + h2;
                m2 = g2 + 8 | 0;
                m2 = g2 + ((m2 & 7 | 0) == 0 ? 0 : 0 - m2 & 7) | 0;
                b2 = d2 + 8 | 0;
                b2 = d2 + ((b2 & 7 | 0) == 0 ? 0 : 0 - b2 & 7) | 0;
                k2 = m2 + n2 | 0;
                i2 = b2 - m2 - n2 | 0;
                c[m2 + 4 >> 2] = n2 | 3;
                do
                  if ((b2 | 0) != (j2 | 0)) {
                    if ((b2 | 0) == (c[2788] | 0)) {
                      w2 = (c[2785] | 0) + i2 | 0;
                      c[2785] = w2;
                      c[2788] = k2;
                      c[k2 + 4 >> 2] = w2 | 1;
                      c[k2 + w2 >> 2] = w2;
                      break;
                    }
                    a2 = c[b2 + 4 >> 2] | 0;
                    if ((a2 & 3 | 0) == 1) {
                      h2 = a2 & -8;
                      e2 = a2 >>> 3;
                      d:
                        do
                          if (a2 >>> 0 < 256) {
                            a2 = c[b2 + 8 >> 2] | 0;
                            d2 = c[b2 + 12 >> 2] | 0;
                            if ((d2 | 0) == (a2 | 0)) {
                              c[2783] = c[2783] & ~(1 << e2);
                              break;
                            } else {
                              c[a2 + 12 >> 2] = d2;
                              c[d2 + 8 >> 2] = a2;
                              break;
                            }
                          } else {
                            g2 = c[b2 + 24 >> 2] | 0;
                            a2 = c[b2 + 12 >> 2] | 0;
                            do
                              if ((a2 | 0) == (b2 | 0)) {
                                e2 = b2 + 16 | 0;
                                d2 = e2 + 4 | 0;
                                a2 = c[d2 >> 2] | 0;
                                if (!a2) {
                                  a2 = c[e2 >> 2] | 0;
                                  if (!a2) {
                                    a2 = 0;
                                    break;
                                  } else
                                    d2 = e2;
                                }
                                while (1) {
                                  e2 = a2 + 20 | 0;
                                  f2 = c[e2 >> 2] | 0;
                                  if (f2 | 0) {
                                    a2 = f2;
                                    d2 = e2;
                                    continue;
                                  }
                                  e2 = a2 + 16 | 0;
                                  f2 = c[e2 >> 2] | 0;
                                  if (!f2)
                                    break;
                                  else {
                                    a2 = f2;
                                    d2 = e2;
                                  }
                                }
                                c[d2 >> 2] = 0;
                              } else {
                                w2 = c[b2 + 8 >> 2] | 0;
                                c[w2 + 12 >> 2] = a2;
                                c[a2 + 8 >> 2] = w2;
                              }
                            while (0);
                            if (!g2)
                              break;
                            d2 = c[b2 + 28 >> 2] | 0;
                            e2 = 11436 + (d2 << 2) | 0;
                            do
                              if ((b2 | 0) != (c[e2 >> 2] | 0)) {
                                c[g2 + 16 + (((c[g2 + 16 >> 2] | 0) != (b2 | 0) & 1) << 2) >> 2] = a2;
                                if (!a2)
                                  break d;
                              } else {
                                c[e2 >> 2] = a2;
                                if (a2 | 0)
                                  break;
                                c[2784] = c[2784] & ~(1 << d2);
                                break d;
                              }
                            while (0);
                            c[a2 + 24 >> 2] = g2;
                            d2 = b2 + 16 | 0;
                            e2 = c[d2 >> 2] | 0;
                            if (e2 | 0) {
                              c[a2 + 16 >> 2] = e2;
                              c[e2 + 24 >> 2] = a2;
                            }
                            d2 = c[d2 + 4 >> 2] | 0;
                            if (!d2)
                              break;
                            c[a2 + 20 >> 2] = d2;
                            c[d2 + 24 >> 2] = a2;
                          }
                        while (0);
                      b2 = b2 + h2 | 0;
                      f2 = h2 + i2 | 0;
                    } else
                      f2 = i2;
                    b2 = b2 + 4 | 0;
                    c[b2 >> 2] = c[b2 >> 2] & -2;
                    c[k2 + 4 >> 2] = f2 | 1;
                    c[k2 + f2 >> 2] = f2;
                    b2 = f2 >>> 3;
                    if (f2 >>> 0 < 256) {
                      d2 = 11172 + (b2 << 1 << 2) | 0;
                      a2 = c[2783] | 0;
                      b2 = 1 << b2;
                      if (!(a2 & b2)) {
                        c[2783] = a2 | b2;
                        b2 = d2;
                        a2 = d2 + 8 | 0;
                      } else {
                        a2 = d2 + 8 | 0;
                        b2 = c[a2 >> 2] | 0;
                      }
                      c[a2 >> 2] = k2;
                      c[b2 + 12 >> 2] = k2;
                      c[k2 + 8 >> 2] = b2;
                      c[k2 + 12 >> 2] = d2;
                      break;
                    }
                    b2 = f2 >>> 8;
                    do
                      if (!b2)
                        b2 = 0;
                      else {
                        if (f2 >>> 0 > 16777215) {
                          b2 = 31;
                          break;
                        }
                        v2 = (b2 + 1048320 | 0) >>> 16 & 8;
                        w2 = b2 << v2;
                        u2 = (w2 + 520192 | 0) >>> 16 & 4;
                        w2 = w2 << u2;
                        b2 = (w2 + 245760 | 0) >>> 16 & 2;
                        b2 = 14 - (u2 | v2 | b2) + (w2 << b2 >>> 15) | 0;
                        b2 = f2 >>> (b2 + 7 | 0) & 1 | b2 << 1;
                      }
                    while (0);
                    e2 = 11436 + (b2 << 2) | 0;
                    c[k2 + 28 >> 2] = b2;
                    a2 = k2 + 16 | 0;
                    c[a2 + 4 >> 2] = 0;
                    c[a2 >> 2] = 0;
                    a2 = c[2784] | 0;
                    d2 = 1 << b2;
                    if (!(a2 & d2)) {
                      c[2784] = a2 | d2;
                      c[e2 >> 2] = k2;
                      c[k2 + 24 >> 2] = e2;
                      c[k2 + 12 >> 2] = k2;
                      c[k2 + 8 >> 2] = k2;
                      break;
                    }
                    a2 = f2 << ((b2 | 0) == 31 ? 0 : 25 - (b2 >>> 1) | 0);
                    d2 = c[e2 >> 2] | 0;
                    while (1) {
                      if ((c[d2 + 4 >> 2] & -8 | 0) == (f2 | 0)) {
                        v2 = 194;
                        break;
                      }
                      e2 = d2 + 16 + (a2 >>> 31 << 2) | 0;
                      b2 = c[e2 >> 2] | 0;
                      if (!b2) {
                        v2 = 193;
                        break;
                      } else {
                        a2 = a2 << 1;
                        d2 = b2;
                      }
                    }
                    if ((v2 | 0) == 193) {
                      c[e2 >> 2] = k2;
                      c[k2 + 24 >> 2] = d2;
                      c[k2 + 12 >> 2] = k2;
                      c[k2 + 8 >> 2] = k2;
                      break;
                    } else if ((v2 | 0) == 194) {
                      v2 = d2 + 8 | 0;
                      w2 = c[v2 >> 2] | 0;
                      c[w2 + 12 >> 2] = k2;
                      c[v2 >> 2] = k2;
                      c[k2 + 8 >> 2] = w2;
                      c[k2 + 12 >> 2] = d2;
                      c[k2 + 24 >> 2] = 0;
                      break;
                    }
                  } else {
                    w2 = (c[2786] | 0) + i2 | 0;
                    c[2786] = w2;
                    c[2789] = k2;
                    c[k2 + 4 >> 2] = w2 | 1;
                  }
                while (0);
                w2 = m2 + 8 | 0;
                l = x2;
                return w2 | 0;
              }
              b2 = 11580;
              while (1) {
                a2 = c[b2 >> 2] | 0;
                if (a2 >>> 0 <= j2 >>> 0 ? (w2 = a2 + (c[b2 + 4 >> 2] | 0) | 0, w2 >>> 0 > j2 >>> 0) : 0)
                  break;
                b2 = c[b2 + 8 >> 2] | 0;
              }
              f2 = w2 + -47 | 0;
              a2 = f2 + 8 | 0;
              a2 = f2 + ((a2 & 7 | 0) == 0 ? 0 : 0 - a2 & 7) | 0;
              f2 = j2 + 16 | 0;
              a2 = a2 >>> 0 < f2 >>> 0 ? j2 : a2;
              b2 = a2 + 8 | 0;
              d2 = g2 + 8 | 0;
              d2 = (d2 & 7 | 0) == 0 ? 0 : 0 - d2 & 7;
              v2 = g2 + d2 | 0;
              d2 = h2 + -40 - d2 | 0;
              c[2789] = v2;
              c[2786] = d2;
              c[v2 + 4 >> 2] = d2 | 1;
              c[v2 + d2 + 4 >> 2] = 40;
              c[2790] = c[2905];
              d2 = a2 + 4 | 0;
              c[d2 >> 2] = 27;
              c[b2 >> 2] = c[2895];
              c[b2 + 4 >> 2] = c[2896];
              c[b2 + 8 >> 2] = c[2897];
              c[b2 + 12 >> 2] = c[2898];
              c[2895] = g2;
              c[2896] = h2;
              c[2898] = 0;
              c[2897] = b2;
              b2 = a2 + 24 | 0;
              do {
                v2 = b2;
                b2 = b2 + 4 | 0;
                c[b2 >> 2] = 7;
              } while ((v2 + 8 | 0) >>> 0 < w2 >>> 0);
              if ((a2 | 0) != (j2 | 0)) {
                g2 = a2 - j2 | 0;
                c[d2 >> 2] = c[d2 >> 2] & -2;
                c[j2 + 4 >> 2] = g2 | 1;
                c[a2 >> 2] = g2;
                b2 = g2 >>> 3;
                if (g2 >>> 0 < 256) {
                  d2 = 11172 + (b2 << 1 << 2) | 0;
                  a2 = c[2783] | 0;
                  b2 = 1 << b2;
                  if (!(a2 & b2)) {
                    c[2783] = a2 | b2;
                    b2 = d2;
                    a2 = d2 + 8 | 0;
                  } else {
                    a2 = d2 + 8 | 0;
                    b2 = c[a2 >> 2] | 0;
                  }
                  c[a2 >> 2] = j2;
                  c[b2 + 12 >> 2] = j2;
                  c[j2 + 8 >> 2] = b2;
                  c[j2 + 12 >> 2] = d2;
                  break;
                }
                b2 = g2 >>> 8;
                if (b2) {
                  if (g2 >>> 0 > 16777215)
                    d2 = 31;
                  else {
                    v2 = (b2 + 1048320 | 0) >>> 16 & 8;
                    w2 = b2 << v2;
                    u2 = (w2 + 520192 | 0) >>> 16 & 4;
                    w2 = w2 << u2;
                    d2 = (w2 + 245760 | 0) >>> 16 & 2;
                    d2 = 14 - (u2 | v2 | d2) + (w2 << d2 >>> 15) | 0;
                    d2 = g2 >>> (d2 + 7 | 0) & 1 | d2 << 1;
                  }
                } else
                  d2 = 0;
                e2 = 11436 + (d2 << 2) | 0;
                c[j2 + 28 >> 2] = d2;
                c[j2 + 20 >> 2] = 0;
                c[f2 >> 2] = 0;
                b2 = c[2784] | 0;
                a2 = 1 << d2;
                if (!(b2 & a2)) {
                  c[2784] = b2 | a2;
                  c[e2 >> 2] = j2;
                  c[j2 + 24 >> 2] = e2;
                  c[j2 + 12 >> 2] = j2;
                  c[j2 + 8 >> 2] = j2;
                  break;
                }
                a2 = g2 << ((d2 | 0) == 31 ? 0 : 25 - (d2 >>> 1) | 0);
                d2 = c[e2 >> 2] | 0;
                while (1) {
                  if ((c[d2 + 4 >> 2] & -8 | 0) == (g2 | 0)) {
                    v2 = 216;
                    break;
                  }
                  e2 = d2 + 16 + (a2 >>> 31 << 2) | 0;
                  b2 = c[e2 >> 2] | 0;
                  if (!b2) {
                    v2 = 215;
                    break;
                  } else {
                    a2 = a2 << 1;
                    d2 = b2;
                  }
                }
                if ((v2 | 0) == 215) {
                  c[e2 >> 2] = j2;
                  c[j2 + 24 >> 2] = d2;
                  c[j2 + 12 >> 2] = j2;
                  c[j2 + 8 >> 2] = j2;
                  break;
                } else if ((v2 | 0) == 216) {
                  v2 = d2 + 8 | 0;
                  w2 = c[v2 >> 2] | 0;
                  c[w2 + 12 >> 2] = j2;
                  c[v2 >> 2] = j2;
                  c[j2 + 8 >> 2] = w2;
                  c[j2 + 12 >> 2] = d2;
                  c[j2 + 24 >> 2] = 0;
                  break;
                }
              }
            } else {
              w2 = c[2787] | 0;
              if ((w2 | 0) == 0 | g2 >>> 0 < w2 >>> 0)
                c[2787] = g2;
              c[2895] = g2;
              c[2896] = h2;
              c[2898] = 0;
              c[2792] = c[2901];
              c[2791] = -1;
              b2 = 0;
              do {
                w2 = 11172 + (b2 << 1 << 2) | 0;
                c[w2 + 12 >> 2] = w2;
                c[w2 + 8 >> 2] = w2;
                b2 = b2 + 1 | 0;
              } while ((b2 | 0) != 32);
              w2 = g2 + 8 | 0;
              w2 = (w2 & 7 | 0) == 0 ? 0 : 0 - w2 & 7;
              v2 = g2 + w2 | 0;
              w2 = h2 + -40 - w2 | 0;
              c[2789] = v2;
              c[2786] = w2;
              c[v2 + 4 >> 2] = w2 | 1;
              c[v2 + w2 + 4 >> 2] = 40;
              c[2790] = c[2905];
            }
          while (0);
          b2 = c[2786] | 0;
          if (b2 >>> 0 > n2 >>> 0) {
            u2 = b2 - n2 | 0;
            c[2786] = u2;
            w2 = c[2789] | 0;
            v2 = w2 + n2 | 0;
            c[2789] = v2;
            c[v2 + 4 >> 2] = u2 | 1;
            c[w2 + 4 >> 2] = n2 | 3;
            w2 = w2 + 8 | 0;
            l = x2;
            return w2 | 0;
          }
        }
        c[(vB() | 0) >> 2] = 12;
        w2 = 0;
        l = x2;
        return w2 | 0;
      }
      function pB(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        if (!a2)
          return;
        d2 = a2 + -8 | 0;
        f2 = c[2787] | 0;
        a2 = c[a2 + -4 >> 2] | 0;
        b2 = a2 & -8;
        j2 = d2 + b2 | 0;
        do
          if (!(a2 & 1)) {
            e2 = c[d2 >> 2] | 0;
            if (!(a2 & 3))
              return;
            h2 = d2 + (0 - e2) | 0;
            g2 = e2 + b2 | 0;
            if (h2 >>> 0 < f2 >>> 0)
              return;
            if ((h2 | 0) == (c[2788] | 0)) {
              a2 = j2 + 4 | 0;
              b2 = c[a2 >> 2] | 0;
              if ((b2 & 3 | 0) != 3) {
                i2 = h2;
                b2 = g2;
                break;
              }
              c[2785] = g2;
              c[a2 >> 2] = b2 & -2;
              c[h2 + 4 >> 2] = g2 | 1;
              c[h2 + g2 >> 2] = g2;
              return;
            }
            d2 = e2 >>> 3;
            if (e2 >>> 0 < 256) {
              a2 = c[h2 + 8 >> 2] | 0;
              b2 = c[h2 + 12 >> 2] | 0;
              if ((b2 | 0) == (a2 | 0)) {
                c[2783] = c[2783] & ~(1 << d2);
                i2 = h2;
                b2 = g2;
                break;
              } else {
                c[a2 + 12 >> 2] = b2;
                c[b2 + 8 >> 2] = a2;
                i2 = h2;
                b2 = g2;
                break;
              }
            }
            f2 = c[h2 + 24 >> 2] | 0;
            a2 = c[h2 + 12 >> 2] | 0;
            do
              if ((a2 | 0) == (h2 | 0)) {
                d2 = h2 + 16 | 0;
                b2 = d2 + 4 | 0;
                a2 = c[b2 >> 2] | 0;
                if (!a2) {
                  a2 = c[d2 >> 2] | 0;
                  if (!a2) {
                    a2 = 0;
                    break;
                  } else
                    b2 = d2;
                }
                while (1) {
                  d2 = a2 + 20 | 0;
                  e2 = c[d2 >> 2] | 0;
                  if (e2 | 0) {
                    a2 = e2;
                    b2 = d2;
                    continue;
                  }
                  d2 = a2 + 16 | 0;
                  e2 = c[d2 >> 2] | 0;
                  if (!e2)
                    break;
                  else {
                    a2 = e2;
                    b2 = d2;
                  }
                }
                c[b2 >> 2] = 0;
              } else {
                i2 = c[h2 + 8 >> 2] | 0;
                c[i2 + 12 >> 2] = a2;
                c[a2 + 8 >> 2] = i2;
              }
            while (0);
            if (f2) {
              b2 = c[h2 + 28 >> 2] | 0;
              d2 = 11436 + (b2 << 2) | 0;
              if ((h2 | 0) == (c[d2 >> 2] | 0)) {
                c[d2 >> 2] = a2;
                if (!a2) {
                  c[2784] = c[2784] & ~(1 << b2);
                  i2 = h2;
                  b2 = g2;
                  break;
                }
              } else {
                c[f2 + 16 + (((c[f2 + 16 >> 2] | 0) != (h2 | 0) & 1) << 2) >> 2] = a2;
                if (!a2) {
                  i2 = h2;
                  b2 = g2;
                  break;
                }
              }
              c[a2 + 24 >> 2] = f2;
              b2 = h2 + 16 | 0;
              d2 = c[b2 >> 2] | 0;
              if (d2 | 0) {
                c[a2 + 16 >> 2] = d2;
                c[d2 + 24 >> 2] = a2;
              }
              b2 = c[b2 + 4 >> 2] | 0;
              if (b2) {
                c[a2 + 20 >> 2] = b2;
                c[b2 + 24 >> 2] = a2;
                i2 = h2;
                b2 = g2;
              } else {
                i2 = h2;
                b2 = g2;
              }
            } else {
              i2 = h2;
              b2 = g2;
            }
          } else {
            i2 = d2;
            h2 = d2;
          }
        while (0);
        if (h2 >>> 0 >= j2 >>> 0)
          return;
        a2 = j2 + 4 | 0;
        e2 = c[a2 >> 2] | 0;
        if (!(e2 & 1))
          return;
        if (!(e2 & 2)) {
          a2 = c[2788] | 0;
          if ((j2 | 0) == (c[2789] | 0)) {
            j2 = (c[2786] | 0) + b2 | 0;
            c[2786] = j2;
            c[2789] = i2;
            c[i2 + 4 >> 2] = j2 | 1;
            if ((i2 | 0) != (a2 | 0))
              return;
            c[2788] = 0;
            c[2785] = 0;
            return;
          }
          if ((j2 | 0) == (a2 | 0)) {
            j2 = (c[2785] | 0) + b2 | 0;
            c[2785] = j2;
            c[2788] = h2;
            c[i2 + 4 >> 2] = j2 | 1;
            c[h2 + j2 >> 2] = j2;
            return;
          }
          f2 = (e2 & -8) + b2 | 0;
          d2 = e2 >>> 3;
          do
            if (e2 >>> 0 < 256) {
              b2 = c[j2 + 8 >> 2] | 0;
              a2 = c[j2 + 12 >> 2] | 0;
              if ((a2 | 0) == (b2 | 0)) {
                c[2783] = c[2783] & ~(1 << d2);
                break;
              } else {
                c[b2 + 12 >> 2] = a2;
                c[a2 + 8 >> 2] = b2;
                break;
              }
            } else {
              g2 = c[j2 + 24 >> 2] | 0;
              a2 = c[j2 + 12 >> 2] | 0;
              do
                if ((a2 | 0) == (j2 | 0)) {
                  d2 = j2 + 16 | 0;
                  b2 = d2 + 4 | 0;
                  a2 = c[b2 >> 2] | 0;
                  if (!a2) {
                    a2 = c[d2 >> 2] | 0;
                    if (!a2) {
                      d2 = 0;
                      break;
                    } else
                      b2 = d2;
                  }
                  while (1) {
                    d2 = a2 + 20 | 0;
                    e2 = c[d2 >> 2] | 0;
                    if (e2 | 0) {
                      a2 = e2;
                      b2 = d2;
                      continue;
                    }
                    d2 = a2 + 16 | 0;
                    e2 = c[d2 >> 2] | 0;
                    if (!e2)
                      break;
                    else {
                      a2 = e2;
                      b2 = d2;
                    }
                  }
                  c[b2 >> 2] = 0;
                  d2 = a2;
                } else {
                  d2 = c[j2 + 8 >> 2] | 0;
                  c[d2 + 12 >> 2] = a2;
                  c[a2 + 8 >> 2] = d2;
                  d2 = a2;
                }
              while (0);
              if (g2 | 0) {
                a2 = c[j2 + 28 >> 2] | 0;
                b2 = 11436 + (a2 << 2) | 0;
                if ((j2 | 0) == (c[b2 >> 2] | 0)) {
                  c[b2 >> 2] = d2;
                  if (!d2) {
                    c[2784] = c[2784] & ~(1 << a2);
                    break;
                  }
                } else {
                  c[g2 + 16 + (((c[g2 + 16 >> 2] | 0) != (j2 | 0) & 1) << 2) >> 2] = d2;
                  if (!d2)
                    break;
                }
                c[d2 + 24 >> 2] = g2;
                a2 = j2 + 16 | 0;
                b2 = c[a2 >> 2] | 0;
                if (b2 | 0) {
                  c[d2 + 16 >> 2] = b2;
                  c[b2 + 24 >> 2] = d2;
                }
                a2 = c[a2 + 4 >> 2] | 0;
                if (a2 | 0) {
                  c[d2 + 20 >> 2] = a2;
                  c[a2 + 24 >> 2] = d2;
                }
              }
            }
          while (0);
          c[i2 + 4 >> 2] = f2 | 1;
          c[h2 + f2 >> 2] = f2;
          if ((i2 | 0) == (c[2788] | 0)) {
            c[2785] = f2;
            return;
          }
        } else {
          c[a2 >> 2] = e2 & -2;
          c[i2 + 4 >> 2] = b2 | 1;
          c[h2 + b2 >> 2] = b2;
          f2 = b2;
        }
        a2 = f2 >>> 3;
        if (f2 >>> 0 < 256) {
          d2 = 11172 + (a2 << 1 << 2) | 0;
          b2 = c[2783] | 0;
          a2 = 1 << a2;
          if (!(b2 & a2)) {
            c[2783] = b2 | a2;
            a2 = d2;
            b2 = d2 + 8 | 0;
          } else {
            b2 = d2 + 8 | 0;
            a2 = c[b2 >> 2] | 0;
          }
          c[b2 >> 2] = i2;
          c[a2 + 12 >> 2] = i2;
          c[i2 + 8 >> 2] = a2;
          c[i2 + 12 >> 2] = d2;
          return;
        }
        a2 = f2 >>> 8;
        if (a2) {
          if (f2 >>> 0 > 16777215)
            a2 = 31;
          else {
            h2 = (a2 + 1048320 | 0) >>> 16 & 8;
            j2 = a2 << h2;
            g2 = (j2 + 520192 | 0) >>> 16 & 4;
            j2 = j2 << g2;
            a2 = (j2 + 245760 | 0) >>> 16 & 2;
            a2 = 14 - (g2 | h2 | a2) + (j2 << a2 >>> 15) | 0;
            a2 = f2 >>> (a2 + 7 | 0) & 1 | a2 << 1;
          }
        } else
          a2 = 0;
        e2 = 11436 + (a2 << 2) | 0;
        c[i2 + 28 >> 2] = a2;
        c[i2 + 20 >> 2] = 0;
        c[i2 + 16 >> 2] = 0;
        b2 = c[2784] | 0;
        d2 = 1 << a2;
        do
          if (b2 & d2) {
            b2 = f2 << ((a2 | 0) == 31 ? 0 : 25 - (a2 >>> 1) | 0);
            d2 = c[e2 >> 2] | 0;
            while (1) {
              if ((c[d2 + 4 >> 2] & -8 | 0) == (f2 | 0)) {
                a2 = 73;
                break;
              }
              e2 = d2 + 16 + (b2 >>> 31 << 2) | 0;
              a2 = c[e2 >> 2] | 0;
              if (!a2) {
                a2 = 72;
                break;
              } else {
                b2 = b2 << 1;
                d2 = a2;
              }
            }
            if ((a2 | 0) == 72) {
              c[e2 >> 2] = i2;
              c[i2 + 24 >> 2] = d2;
              c[i2 + 12 >> 2] = i2;
              c[i2 + 8 >> 2] = i2;
              break;
            } else if ((a2 | 0) == 73) {
              h2 = d2 + 8 | 0;
              j2 = c[h2 >> 2] | 0;
              c[j2 + 12 >> 2] = i2;
              c[h2 >> 2] = i2;
              c[i2 + 8 >> 2] = j2;
              c[i2 + 12 >> 2] = d2;
              c[i2 + 24 >> 2] = 0;
              break;
            }
          } else {
            c[2784] = b2 | d2;
            c[e2 >> 2] = i2;
            c[i2 + 24 >> 2] = e2;
            c[i2 + 12 >> 2] = i2;
            c[i2 + 8 >> 2] = i2;
          }
        while (0);
        j2 = (c[2791] | 0) + -1 | 0;
        c[2791] = j2;
        if (!j2)
          a2 = 11588;
        else
          return;
        while (1) {
          a2 = c[a2 >> 2] | 0;
          if (!a2)
            break;
          else
            a2 = a2 + 8 | 0;
        }
        c[2791] = -1;
        return;
      }
      function qB() {
        return 11628;
      }
      function rB(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0;
        b2 = l;
        l = l + 16 | 0;
        d2 = b2;
        c[d2 >> 2] = yB(c[a2 + 60 >> 2] | 0) | 0;
        a2 = uB(db(6, d2 | 0) | 0) | 0;
        l = b2;
        return a2 | 0;
      }
      function sB(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0;
        n2 = l;
        l = l + 48 | 0;
        k2 = n2 + 16 | 0;
        g2 = n2;
        f2 = n2 + 32 | 0;
        i2 = a2 + 28 | 0;
        e2 = c[i2 >> 2] | 0;
        c[f2 >> 2] = e2;
        j2 = a2 + 20 | 0;
        e2 = (c[j2 >> 2] | 0) - e2 | 0;
        c[f2 + 4 >> 2] = e2;
        c[f2 + 8 >> 2] = b2;
        c[f2 + 12 >> 2] = d2;
        e2 = e2 + d2 | 0;
        h2 = a2 + 60 | 0;
        c[g2 >> 2] = c[h2 >> 2];
        c[g2 + 4 >> 2] = f2;
        c[g2 + 8 >> 2] = 2;
        g2 = uB(gb(146, g2 | 0) | 0) | 0;
        a:
          do
            if ((e2 | 0) != (g2 | 0)) {
              b2 = 2;
              while (1) {
                if ((g2 | 0) < 0)
                  break;
                e2 = e2 - g2 | 0;
                p2 = c[f2 + 4 >> 2] | 0;
                o2 = g2 >>> 0 > p2 >>> 0;
                f2 = o2 ? f2 + 8 | 0 : f2;
                b2 = (o2 << 31 >> 31) + b2 | 0;
                p2 = g2 - (o2 ? p2 : 0) | 0;
                c[f2 >> 2] = (c[f2 >> 2] | 0) + p2;
                o2 = f2 + 4 | 0;
                c[o2 >> 2] = (c[o2 >> 2] | 0) - p2;
                c[k2 >> 2] = c[h2 >> 2];
                c[k2 + 4 >> 2] = f2;
                c[k2 + 8 >> 2] = b2;
                g2 = uB(gb(146, k2 | 0) | 0) | 0;
                if ((e2 | 0) == (g2 | 0)) {
                  m2 = 3;
                  break a;
                }
              }
              c[a2 + 16 >> 2] = 0;
              c[i2 >> 2] = 0;
              c[j2 >> 2] = 0;
              c[a2 >> 2] = c[a2 >> 2] | 32;
              if ((b2 | 0) == 2)
                d2 = 0;
              else
                d2 = d2 - (c[f2 + 4 >> 2] | 0) | 0;
            } else
              m2 = 3;
          while (0);
        if ((m2 | 0) == 3) {
          p2 = c[a2 + 44 >> 2] | 0;
          c[a2 + 16 >> 2] = p2 + (c[a2 + 48 >> 2] | 0);
          c[i2 >> 2] = p2;
          c[j2 >> 2] = p2;
        }
        l = n2;
        return d2 | 0;
      }
      function tB(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0;
        f2 = l;
        l = l + 32 | 0;
        g2 = f2;
        e2 = f2 + 20 | 0;
        c[g2 >> 2] = c[a2 + 60 >> 2];
        c[g2 + 4 >> 2] = 0;
        c[g2 + 8 >> 2] = b2;
        c[g2 + 12 >> 2] = e2;
        c[g2 + 16 >> 2] = d2;
        if ((uB(fb(140, g2 | 0) | 0) | 0) < 0) {
          c[e2 >> 2] = -1;
          a2 = -1;
        } else
          a2 = c[e2 >> 2] | 0;
        l = f2;
        return a2 | 0;
      }
      function uB(a2) {
        a2 = a2 | 0;
        if (a2 >>> 0 > 4294963200) {
          c[(vB() | 0) >> 2] = 0 - a2;
          a2 = -1;
        }
        return a2 | 0;
      }
      function vB() {
        return (wB() | 0) + 64 | 0;
      }
      function wB() {
        return xB() | 0;
      }
      function xB() {
        return 2084;
      }
      function yB(a2) {
        a2 = a2 | 0;
        return a2 | 0;
      }
      function zB(b2, d2, e2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = l;
        l = l + 32 | 0;
        f2 = g2;
        c[b2 + 36 >> 2] = 1;
        if ((c[b2 >> 2] & 64 | 0) == 0 ? (c[f2 >> 2] = c[b2 + 60 >> 2], c[f2 + 4 >> 2] = 21523, c[f2 + 8 >> 2] = g2 + 16, Wa(54, f2 | 0) | 0) : 0)
          a[b2 + 75 >> 0] = -1;
        f2 = sB(b2, d2, e2) | 0;
        l = g2;
        return f2 | 0;
      }
      function AB(b2, c2) {
        b2 = b2 | 0;
        c2 = c2 | 0;
        var d2 = 0, e2 = 0;
        d2 = a[b2 >> 0] | 0;
        e2 = a[c2 >> 0] | 0;
        if (d2 << 24 >> 24 == 0 ? 1 : d2 << 24 >> 24 != e2 << 24 >> 24)
          b2 = e2;
        else {
          do {
            b2 = b2 + 1 | 0;
            c2 = c2 + 1 | 0;
            d2 = a[b2 >> 0] | 0;
            e2 = a[c2 >> 0] | 0;
          } while (!(d2 << 24 >> 24 == 0 ? 1 : d2 << 24 >> 24 != e2 << 24 >> 24));
          b2 = e2;
        }
        return (d2 & 255) - (b2 & 255) | 0;
      }
      function BB(b2, c2, d2) {
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0;
        a:
          do
            if (!d2)
              b2 = 0;
            else {
              while (1) {
                e2 = a[b2 >> 0] | 0;
                f2 = a[c2 >> 0] | 0;
                if (e2 << 24 >> 24 != f2 << 24 >> 24)
                  break;
                d2 = d2 + -1 | 0;
                if (!d2) {
                  b2 = 0;
                  break a;
                } else {
                  b2 = b2 + 1 | 0;
                  c2 = c2 + 1 | 0;
                }
              }
              b2 = (e2 & 255) - (f2 & 255) | 0;
            }
          while (0);
        return b2 | 0;
      }
      function CB(b2, d2, e2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0;
        s2 = l;
        l = l + 224 | 0;
        n2 = s2 + 120 | 0;
        o2 = s2 + 80 | 0;
        q2 = s2;
        r2 = s2 + 136 | 0;
        f2 = o2;
        g2 = f2 + 40 | 0;
        do {
          c[f2 >> 2] = 0;
          f2 = f2 + 4 | 0;
        } while ((f2 | 0) < (g2 | 0));
        c[n2 >> 2] = c[e2 >> 2];
        if ((DB(0, d2, n2, q2, o2) | 0) < 0)
          e2 = -1;
        else {
          if ((c[b2 + 76 >> 2] | 0) > -1)
            p2 = EB(b2) | 0;
          else
            p2 = 0;
          e2 = c[b2 >> 2] | 0;
          m2 = e2 & 32;
          if ((a[b2 + 74 >> 0] | 0) < 1)
            c[b2 >> 2] = e2 & -33;
          f2 = b2 + 48 | 0;
          if (!(c[f2 >> 2] | 0)) {
            g2 = b2 + 44 | 0;
            h2 = c[g2 >> 2] | 0;
            c[g2 >> 2] = r2;
            i2 = b2 + 28 | 0;
            c[i2 >> 2] = r2;
            j2 = b2 + 20 | 0;
            c[j2 >> 2] = r2;
            c[f2 >> 2] = 80;
            k2 = b2 + 16 | 0;
            c[k2 >> 2] = r2 + 80;
            e2 = DB(b2, d2, n2, q2, o2) | 0;
            if (h2) {
              sb[c[b2 + 36 >> 2] & 7](b2, 0, 0) | 0;
              e2 = (c[j2 >> 2] | 0) == 0 ? -1 : e2;
              c[g2 >> 2] = h2;
              c[f2 >> 2] = 0;
              c[k2 >> 2] = 0;
              c[i2 >> 2] = 0;
              c[j2 >> 2] = 0;
            }
          } else
            e2 = DB(b2, d2, n2, q2, o2) | 0;
          f2 = c[b2 >> 2] | 0;
          c[b2 >> 2] = f2 | m2;
          if (p2 | 0)
            FB(b2);
          e2 = (f2 & 32 | 0) == 0 ? e2 : -1;
        }
        l = s2;
        return e2 | 0;
      }
      function DB(d2, e2, f2, g2, i2) {
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        i2 = i2 | 0;
        var j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = 0, v2 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, B2 = 0, C2 = 0, D2 = 0, E2 = 0, F2 = 0, G2 = 0, H2 = 0;
        H2 = l;
        l = l + 64 | 0;
        D2 = H2 + 16 | 0;
        E2 = H2;
        B2 = H2 + 24 | 0;
        F2 = H2 + 8 | 0;
        G2 = H2 + 20 | 0;
        c[D2 >> 2] = e2;
        x2 = (d2 | 0) != 0;
        y2 = B2 + 40 | 0;
        z2 = y2;
        B2 = B2 + 39 | 0;
        C2 = F2 + 4 | 0;
        k2 = 0;
        j2 = 0;
        p2 = 0;
        a:
          while (1) {
            do
              if ((j2 | 0) > -1)
                if ((k2 | 0) > (2147483647 - j2 | 0)) {
                  c[(vB() | 0) >> 2] = 75;
                  j2 = -1;
                  break;
                } else {
                  j2 = k2 + j2 | 0;
                  break;
                }
            while (0);
            k2 = a[e2 >> 0] | 0;
            if (!(k2 << 24 >> 24)) {
              w2 = 87;
              break;
            } else
              m2 = e2;
            b:
              while (1) {
                switch (k2 << 24 >> 24) {
                  case 37: {
                    k2 = m2;
                    w2 = 9;
                    break b;
                  }
                  case 0: {
                    k2 = m2;
                    break b;
                  }
                  default: {
                  }
                }
                v2 = m2 + 1 | 0;
                c[D2 >> 2] = v2;
                k2 = a[v2 >> 0] | 0;
                m2 = v2;
              }
            c:
              do
                if ((w2 | 0) == 9)
                  while (1) {
                    w2 = 0;
                    if ((a[m2 + 1 >> 0] | 0) != 37)
                      break c;
                    k2 = k2 + 1 | 0;
                    m2 = m2 + 2 | 0;
                    c[D2 >> 2] = m2;
                    if ((a[m2 >> 0] | 0) == 37)
                      w2 = 9;
                    else
                      break;
                  }
              while (0);
            k2 = k2 - e2 | 0;
            if (x2)
              GB(d2, e2, k2);
            if (k2 | 0) {
              e2 = m2;
              continue;
            }
            n2 = m2 + 1 | 0;
            k2 = (a[n2 >> 0] | 0) + -48 | 0;
            if (k2 >>> 0 < 10) {
              v2 = (a[m2 + 2 >> 0] | 0) == 36;
              u2 = v2 ? k2 : -1;
              p2 = v2 ? 1 : p2;
              n2 = v2 ? m2 + 3 | 0 : n2;
            } else
              u2 = -1;
            c[D2 >> 2] = n2;
            k2 = a[n2 >> 0] | 0;
            m2 = (k2 << 24 >> 24) + -32 | 0;
            d:
              do
                if (m2 >>> 0 < 32) {
                  o2 = 0;
                  q2 = k2;
                  while (1) {
                    k2 = 1 << m2;
                    if (!(k2 & 75913)) {
                      k2 = q2;
                      break d;
                    }
                    o2 = k2 | o2;
                    n2 = n2 + 1 | 0;
                    c[D2 >> 2] = n2;
                    k2 = a[n2 >> 0] | 0;
                    m2 = (k2 << 24 >> 24) + -32 | 0;
                    if (m2 >>> 0 >= 32)
                      break;
                    else
                      q2 = k2;
                  }
                } else
                  o2 = 0;
              while (0);
            if (k2 << 24 >> 24 == 42) {
              m2 = n2 + 1 | 0;
              k2 = (a[m2 >> 0] | 0) + -48 | 0;
              if (k2 >>> 0 < 10 ? (a[n2 + 2 >> 0] | 0) == 36 : 0) {
                c[i2 + (k2 << 2) >> 2] = 10;
                k2 = c[g2 + ((a[m2 >> 0] | 0) + -48 << 3) >> 2] | 0;
                p2 = 1;
                n2 = n2 + 3 | 0;
              } else {
                if (p2 | 0) {
                  j2 = -1;
                  break;
                }
                if (x2) {
                  p2 = (c[f2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                  k2 = c[p2 >> 2] | 0;
                  c[f2 >> 2] = p2 + 4;
                  p2 = 0;
                  n2 = m2;
                } else {
                  k2 = 0;
                  p2 = 0;
                  n2 = m2;
                }
              }
              c[D2 >> 2] = n2;
              v2 = (k2 | 0) < 0;
              k2 = v2 ? 0 - k2 | 0 : k2;
              o2 = v2 ? o2 | 8192 : o2;
            } else {
              k2 = HB(D2) | 0;
              if ((k2 | 0) < 0) {
                j2 = -1;
                break;
              }
              n2 = c[D2 >> 2] | 0;
            }
            do
              if ((a[n2 >> 0] | 0) == 46) {
                if ((a[n2 + 1 >> 0] | 0) != 42) {
                  c[D2 >> 2] = n2 + 1;
                  m2 = HB(D2) | 0;
                  n2 = c[D2 >> 2] | 0;
                  break;
                }
                q2 = n2 + 2 | 0;
                m2 = (a[q2 >> 0] | 0) + -48 | 0;
                if (m2 >>> 0 < 10 ? (a[n2 + 3 >> 0] | 0) == 36 : 0) {
                  c[i2 + (m2 << 2) >> 2] = 10;
                  m2 = c[g2 + ((a[q2 >> 0] | 0) + -48 << 3) >> 2] | 0;
                  n2 = n2 + 4 | 0;
                  c[D2 >> 2] = n2;
                  break;
                }
                if (p2 | 0) {
                  j2 = -1;
                  break a;
                }
                if (x2) {
                  v2 = (c[f2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                  m2 = c[v2 >> 2] | 0;
                  c[f2 >> 2] = v2 + 4;
                } else
                  m2 = 0;
                c[D2 >> 2] = q2;
                n2 = q2;
              } else
                m2 = -1;
            while (0);
            t2 = 0;
            while (1) {
              if (((a[n2 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
                j2 = -1;
                break a;
              }
              v2 = n2 + 1 | 0;
              c[D2 >> 2] = v2;
              q2 = a[(a[n2 >> 0] | 0) + -65 + (5178 + (t2 * 58 | 0)) >> 0] | 0;
              r2 = q2 & 255;
              if ((r2 + -1 | 0) >>> 0 < 8) {
                t2 = r2;
                n2 = v2;
              } else
                break;
            }
            if (!(q2 << 24 >> 24)) {
              j2 = -1;
              break;
            }
            s2 = (u2 | 0) > -1;
            do
              if (q2 << 24 >> 24 == 19) {
                if (s2) {
                  j2 = -1;
                  break a;
                } else
                  w2 = 49;
              } else {
                if (s2) {
                  c[i2 + (u2 << 2) >> 2] = r2;
                  s2 = g2 + (u2 << 3) | 0;
                  u2 = c[s2 + 4 >> 2] | 0;
                  w2 = E2;
                  c[w2 >> 2] = c[s2 >> 2];
                  c[w2 + 4 >> 2] = u2;
                  w2 = 49;
                  break;
                }
                if (!x2) {
                  j2 = 0;
                  break a;
                }
                IB(E2, r2, f2);
              }
            while (0);
            if ((w2 | 0) == 49 ? (w2 = 0, !x2) : 0) {
              k2 = 0;
              e2 = v2;
              continue;
            }
            n2 = a[n2 >> 0] | 0;
            n2 = (t2 | 0) != 0 & (n2 & 15 | 0) == 3 ? n2 & -33 : n2;
            s2 = o2 & -65537;
            u2 = (o2 & 8192 | 0) == 0 ? o2 : s2;
            e:
              do
                switch (n2 | 0) {
                  case 110:
                    switch ((t2 & 255) << 24 >> 24) {
                      case 0: {
                        c[c[E2 >> 2] >> 2] = j2;
                        k2 = 0;
                        e2 = v2;
                        continue a;
                      }
                      case 1: {
                        c[c[E2 >> 2] >> 2] = j2;
                        k2 = 0;
                        e2 = v2;
                        continue a;
                      }
                      case 2: {
                        k2 = c[E2 >> 2] | 0;
                        c[k2 >> 2] = j2;
                        c[k2 + 4 >> 2] = ((j2 | 0) < 0) << 31 >> 31;
                        k2 = 0;
                        e2 = v2;
                        continue a;
                      }
                      case 3: {
                        b[c[E2 >> 2] >> 1] = j2;
                        k2 = 0;
                        e2 = v2;
                        continue a;
                      }
                      case 4: {
                        a[c[E2 >> 2] >> 0] = j2;
                        k2 = 0;
                        e2 = v2;
                        continue a;
                      }
                      case 6: {
                        c[c[E2 >> 2] >> 2] = j2;
                        k2 = 0;
                        e2 = v2;
                        continue a;
                      }
                      case 7: {
                        k2 = c[E2 >> 2] | 0;
                        c[k2 >> 2] = j2;
                        c[k2 + 4 >> 2] = ((j2 | 0) < 0) << 31 >> 31;
                        k2 = 0;
                        e2 = v2;
                        continue a;
                      }
                      default: {
                        k2 = 0;
                        e2 = v2;
                        continue a;
                      }
                    }
                  case 112: {
                    n2 = 120;
                    m2 = m2 >>> 0 > 8 ? m2 : 8;
                    e2 = u2 | 8;
                    w2 = 61;
                    break;
                  }
                  case 88:
                  case 120: {
                    e2 = u2;
                    w2 = 61;
                    break;
                  }
                  case 111: {
                    n2 = E2;
                    e2 = c[n2 >> 2] | 0;
                    n2 = c[n2 + 4 >> 2] | 0;
                    r2 = KB(e2, n2, y2) | 0;
                    s2 = z2 - r2 | 0;
                    o2 = 0;
                    q2 = 5642;
                    m2 = (u2 & 8 | 0) == 0 | (m2 | 0) > (s2 | 0) ? m2 : s2 + 1 | 0;
                    s2 = u2;
                    w2 = 67;
                    break;
                  }
                  case 105:
                  case 100: {
                    n2 = E2;
                    e2 = c[n2 >> 2] | 0;
                    n2 = c[n2 + 4 >> 2] | 0;
                    if ((n2 | 0) < 0) {
                      e2 = wC(0, 0, e2 | 0, n2 | 0) | 0;
                      n2 = A;
                      o2 = E2;
                      c[o2 >> 2] = e2;
                      c[o2 + 4 >> 2] = n2;
                      o2 = 1;
                      q2 = 5642;
                      w2 = 66;
                      break e;
                    } else {
                      o2 = (u2 & 2049 | 0) != 0 & 1;
                      q2 = (u2 & 2048 | 0) == 0 ? (u2 & 1 | 0) == 0 ? 5642 : 5644 : 5643;
                      w2 = 66;
                      break e;
                    }
                  }
                  case 117: {
                    n2 = E2;
                    o2 = 0;
                    q2 = 5642;
                    e2 = c[n2 >> 2] | 0;
                    n2 = c[n2 + 4 >> 2] | 0;
                    w2 = 66;
                    break;
                  }
                  case 99: {
                    a[B2 >> 0] = c[E2 >> 2];
                    e2 = B2;
                    o2 = 0;
                    q2 = 5642;
                    r2 = y2;
                    n2 = 1;
                    m2 = s2;
                    break;
                  }
                  case 109: {
                    n2 = MB(c[(vB() | 0) >> 2] | 0) | 0;
                    w2 = 71;
                    break;
                  }
                  case 115: {
                    n2 = c[E2 >> 2] | 0;
                    n2 = n2 | 0 ? n2 : 5652;
                    w2 = 71;
                    break;
                  }
                  case 67: {
                    c[F2 >> 2] = c[E2 >> 2];
                    c[C2 >> 2] = 0;
                    c[E2 >> 2] = F2;
                    r2 = -1;
                    n2 = F2;
                    w2 = 75;
                    break;
                  }
                  case 83: {
                    e2 = c[E2 >> 2] | 0;
                    if (!m2) {
                      OB(d2, 32, k2, 0, u2);
                      e2 = 0;
                      w2 = 84;
                    } else {
                      r2 = m2;
                      n2 = e2;
                      w2 = 75;
                    }
                    break;
                  }
                  case 65:
                  case 71:
                  case 70:
                  case 69:
                  case 97:
                  case 103:
                  case 102:
                  case 101: {
                    k2 = QB(d2, +h[E2 >> 3], k2, m2, u2, n2) | 0;
                    e2 = v2;
                    continue a;
                  }
                  default: {
                    o2 = 0;
                    q2 = 5642;
                    r2 = y2;
                    n2 = m2;
                    m2 = u2;
                  }
                }
              while (0);
            f:
              do
                if ((w2 | 0) == 61) {
                  u2 = E2;
                  t2 = c[u2 >> 2] | 0;
                  u2 = c[u2 + 4 >> 2] | 0;
                  r2 = JB(t2, u2, y2, n2 & 32) | 0;
                  q2 = (e2 & 8 | 0) == 0 | (t2 | 0) == 0 & (u2 | 0) == 0;
                  o2 = q2 ? 0 : 2;
                  q2 = q2 ? 5642 : 5642 + (n2 >> 4) | 0;
                  s2 = e2;
                  e2 = t2;
                  n2 = u2;
                  w2 = 67;
                } else if ((w2 | 0) == 66) {
                  r2 = LB(e2, n2, y2) | 0;
                  s2 = u2;
                  w2 = 67;
                } else if ((w2 | 0) == 71) {
                  w2 = 0;
                  u2 = NB(n2, 0, m2) | 0;
                  t2 = (u2 | 0) == 0;
                  e2 = n2;
                  o2 = 0;
                  q2 = 5642;
                  r2 = t2 ? n2 + m2 | 0 : u2;
                  n2 = t2 ? m2 : u2 - n2 | 0;
                  m2 = s2;
                } else if ((w2 | 0) == 75) {
                  w2 = 0;
                  q2 = n2;
                  e2 = 0;
                  m2 = 0;
                  while (1) {
                    o2 = c[q2 >> 2] | 0;
                    if (!o2)
                      break;
                    m2 = PB(G2, o2) | 0;
                    if ((m2 | 0) < 0 | m2 >>> 0 > (r2 - e2 | 0) >>> 0)
                      break;
                    e2 = m2 + e2 | 0;
                    if (r2 >>> 0 > e2 >>> 0)
                      q2 = q2 + 4 | 0;
                    else
                      break;
                  }
                  if ((m2 | 0) < 0) {
                    j2 = -1;
                    break a;
                  }
                  OB(d2, 32, k2, e2, u2);
                  if (!e2) {
                    e2 = 0;
                    w2 = 84;
                  } else {
                    o2 = 0;
                    while (1) {
                      m2 = c[n2 >> 2] | 0;
                      if (!m2) {
                        w2 = 84;
                        break f;
                      }
                      m2 = PB(G2, m2) | 0;
                      o2 = m2 + o2 | 0;
                      if ((o2 | 0) > (e2 | 0)) {
                        w2 = 84;
                        break f;
                      }
                      GB(d2, G2, m2);
                      if (o2 >>> 0 >= e2 >>> 0) {
                        w2 = 84;
                        break;
                      } else
                        n2 = n2 + 4 | 0;
                    }
                  }
                }
              while (0);
            if ((w2 | 0) == 67) {
              w2 = 0;
              n2 = (e2 | 0) != 0 | (n2 | 0) != 0;
              u2 = (m2 | 0) != 0 | n2;
              n2 = ((n2 ^ 1) & 1) + (z2 - r2) | 0;
              e2 = u2 ? r2 : y2;
              r2 = y2;
              n2 = u2 ? (m2 | 0) > (n2 | 0) ? m2 : n2 : m2;
              m2 = (m2 | 0) > -1 ? s2 & -65537 : s2;
            } else if ((w2 | 0) == 84) {
              w2 = 0;
              OB(d2, 32, k2, e2, u2 ^ 8192);
              k2 = (k2 | 0) > (e2 | 0) ? k2 : e2;
              e2 = v2;
              continue;
            }
            t2 = r2 - e2 | 0;
            s2 = (n2 | 0) < (t2 | 0) ? t2 : n2;
            u2 = s2 + o2 | 0;
            k2 = (k2 | 0) < (u2 | 0) ? u2 : k2;
            OB(d2, 32, k2, u2, m2);
            GB(d2, q2, o2);
            OB(d2, 48, k2, u2, m2 ^ 65536);
            OB(d2, 48, s2, t2, 0);
            GB(d2, e2, t2);
            OB(d2, 32, k2, u2, m2 ^ 8192);
            e2 = v2;
          }
        g:
          do
            if ((w2 | 0) == 87) {
              if (!d2)
                if (!p2)
                  j2 = 0;
                else {
                  j2 = 1;
                  while (1) {
                    e2 = c[i2 + (j2 << 2) >> 2] | 0;
                    if (!e2)
                      break;
                    IB(g2 + (j2 << 3) | 0, e2, f2);
                    j2 = j2 + 1 | 0;
                    if ((j2 | 0) >= 10) {
                      j2 = 1;
                      break g;
                    }
                  }
                  while (1) {
                    if (c[i2 + (j2 << 2) >> 2] | 0) {
                      j2 = -1;
                      break g;
                    }
                    j2 = j2 + 1 | 0;
                    if ((j2 | 0) >= 10) {
                      j2 = 1;
                      break;
                    }
                  }
                }
            }
          while (0);
        l = H2;
        return j2 | 0;
      }
      function EB(a2) {
        a2 = a2 | 0;
        return 0;
      }
      function FB(a2) {
        a2 = a2 | 0;
        return;
      }
      function GB(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        if (!(c[a2 >> 2] & 32))
          aC(b2, d2, a2) | 0;
        return;
      }
      function HB(b2) {
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        e2 = c[b2 >> 2] | 0;
        f2 = (a[e2 >> 0] | 0) + -48 | 0;
        if (f2 >>> 0 < 10) {
          d2 = 0;
          do {
            d2 = f2 + (d2 * 10 | 0) | 0;
            e2 = e2 + 1 | 0;
            c[b2 >> 2] = e2;
            f2 = (a[e2 >> 0] | 0) + -48 | 0;
          } while (f2 >>> 0 < 10);
        } else
          d2 = 0;
        return d2 | 0;
      }
      function IB(a2, b2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        var e2 = 0, f2 = 0, g2 = 0;
        a:
          do
            if (b2 >>> 0 <= 20)
              do
                switch (b2 | 0) {
                  case 9: {
                    e2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    b2 = c[e2 >> 2] | 0;
                    c[d2 >> 2] = e2 + 4;
                    c[a2 >> 2] = b2;
                    break a;
                  }
                  case 10: {
                    e2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    b2 = c[e2 >> 2] | 0;
                    c[d2 >> 2] = e2 + 4;
                    e2 = a2;
                    c[e2 >> 2] = b2;
                    c[e2 + 4 >> 2] = ((b2 | 0) < 0) << 31 >> 31;
                    break a;
                  }
                  case 11: {
                    e2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    b2 = c[e2 >> 2] | 0;
                    c[d2 >> 2] = e2 + 4;
                    e2 = a2;
                    c[e2 >> 2] = b2;
                    c[e2 + 4 >> 2] = 0;
                    break a;
                  }
                  case 12: {
                    e2 = (c[d2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
                    b2 = e2;
                    f2 = c[b2 >> 2] | 0;
                    b2 = c[b2 + 4 >> 2] | 0;
                    c[d2 >> 2] = e2 + 8;
                    e2 = a2;
                    c[e2 >> 2] = f2;
                    c[e2 + 4 >> 2] = b2;
                    break a;
                  }
                  case 13: {
                    f2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    e2 = c[f2 >> 2] | 0;
                    c[d2 >> 2] = f2 + 4;
                    e2 = (e2 & 65535) << 16 >> 16;
                    f2 = a2;
                    c[f2 >> 2] = e2;
                    c[f2 + 4 >> 2] = ((e2 | 0) < 0) << 31 >> 31;
                    break a;
                  }
                  case 14: {
                    f2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    e2 = c[f2 >> 2] | 0;
                    c[d2 >> 2] = f2 + 4;
                    f2 = a2;
                    c[f2 >> 2] = e2 & 65535;
                    c[f2 + 4 >> 2] = 0;
                    break a;
                  }
                  case 15: {
                    f2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    e2 = c[f2 >> 2] | 0;
                    c[d2 >> 2] = f2 + 4;
                    e2 = (e2 & 255) << 24 >> 24;
                    f2 = a2;
                    c[f2 >> 2] = e2;
                    c[f2 + 4 >> 2] = ((e2 | 0) < 0) << 31 >> 31;
                    break a;
                  }
                  case 16: {
                    f2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    e2 = c[f2 >> 2] | 0;
                    c[d2 >> 2] = f2 + 4;
                    f2 = a2;
                    c[f2 >> 2] = e2 & 255;
                    c[f2 + 4 >> 2] = 0;
                    break a;
                  }
                  case 17: {
                    f2 = (c[d2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
                    g2 = +h[f2 >> 3];
                    c[d2 >> 2] = f2 + 8;
                    h[a2 >> 3] = g2;
                    break a;
                  }
                  case 18: {
                    f2 = (c[d2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
                    g2 = +h[f2 >> 3];
                    c[d2 >> 2] = f2 + 8;
                    h[a2 >> 3] = g2;
                    break a;
                  }
                  default:
                    break a;
                }
              while (0);
          while (0);
        return;
      }
      function JB(b2, c2, e2, f2) {
        b2 = b2 | 0;
        c2 = c2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        if (!((b2 | 0) == 0 & (c2 | 0) == 0))
          do {
            e2 = e2 + -1 | 0;
            a[e2 >> 0] = d[5694 + (b2 & 15) >> 0] | 0 | f2;
            b2 = AC(b2 | 0, c2 | 0, 4) | 0;
            c2 = A;
          } while (!((b2 | 0) == 0 & (c2 | 0) == 0));
        return e2 | 0;
      }
      function KB(b2, c2, d2) {
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        if (!((b2 | 0) == 0 & (c2 | 0) == 0))
          do {
            d2 = d2 + -1 | 0;
            a[d2 >> 0] = b2 & 7 | 48;
            b2 = AC(b2 | 0, c2 | 0, 3) | 0;
            c2 = A;
          } while (!((b2 | 0) == 0 & (c2 | 0) == 0));
        return d2 | 0;
      }
      function LB(b2, c2, d2) {
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        if (c2 >>> 0 > 0 | (c2 | 0) == 0 & b2 >>> 0 > 4294967295) {
          while (1) {
            e2 = HC(b2 | 0, c2 | 0, 10, 0) | 0;
            d2 = d2 + -1 | 0;
            a[d2 >> 0] = e2 & 255 | 48;
            e2 = b2;
            b2 = EC(b2 | 0, c2 | 0, 10, 0) | 0;
            if (!(c2 >>> 0 > 9 | (c2 | 0) == 9 & e2 >>> 0 > 4294967295))
              break;
            else
              c2 = A;
          }
          c2 = b2;
        } else
          c2 = b2;
        if (c2)
          while (1) {
            d2 = d2 + -1 | 0;
            a[d2 >> 0] = (c2 >>> 0) % 10 | 0 | 48;
            if (c2 >>> 0 < 10)
              break;
            else
              c2 = (c2 >>> 0) / 10 | 0;
          }
        return d2 | 0;
      }
      function MB(a2) {
        a2 = a2 | 0;
        return XB(a2, c[(WB() | 0) + 188 >> 2] | 0) | 0;
      }
      function NB(b2, d2, e2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        h2 = d2 & 255;
        f2 = (e2 | 0) != 0;
        a:
          do
            if (f2 & (b2 & 3 | 0) != 0) {
              g2 = d2 & 255;
              while (1) {
                if ((a[b2 >> 0] | 0) == g2 << 24 >> 24) {
                  i2 = 6;
                  break a;
                }
                b2 = b2 + 1 | 0;
                e2 = e2 + -1 | 0;
                f2 = (e2 | 0) != 0;
                if (!(f2 & (b2 & 3 | 0) != 0)) {
                  i2 = 5;
                  break;
                }
              }
            } else
              i2 = 5;
          while (0);
        if ((i2 | 0) == 5)
          if (f2)
            i2 = 6;
          else
            e2 = 0;
        b:
          do
            if ((i2 | 0) == 6) {
              g2 = d2 & 255;
              if ((a[b2 >> 0] | 0) != g2 << 24 >> 24) {
                f2 = P(h2, 16843009) | 0;
                c:
                  do
                    if (e2 >>> 0 > 3)
                      while (1) {
                        h2 = c[b2 >> 2] ^ f2;
                        if ((h2 & -2139062144 ^ -2139062144) & h2 + -16843009 | 0)
                          break;
                        b2 = b2 + 4 | 0;
                        e2 = e2 + -4 | 0;
                        if (e2 >>> 0 <= 3) {
                          i2 = 11;
                          break c;
                        }
                      }
                    else
                      i2 = 11;
                  while (0);
                if ((i2 | 0) == 11) {
                  if (!e2) {
                    e2 = 0;
                    break;
                  }
                }
                while (1) {
                  if ((a[b2 >> 0] | 0) == g2 << 24 >> 24)
                    break b;
                  b2 = b2 + 1 | 0;
                  e2 = e2 + -1 | 0;
                  if (!e2) {
                    e2 = 0;
                    break;
                  }
                }
              }
            }
          while (0);
        return (e2 | 0 ? b2 : 0) | 0;
      }
      function OB(a2, b2, c2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = l;
        l = l + 256 | 0;
        f2 = g2;
        if ((c2 | 0) > (d2 | 0) & (e2 & 73728 | 0) == 0) {
          e2 = c2 - d2 | 0;
          yC(f2 | 0, b2 | 0, (e2 >>> 0 < 256 ? e2 : 256) | 0) | 0;
          if (e2 >>> 0 > 255) {
            b2 = c2 - d2 | 0;
            do {
              GB(a2, f2, 256);
              e2 = e2 + -256 | 0;
            } while (e2 >>> 0 > 255);
            e2 = b2 & 255;
          }
          GB(a2, f2, e2);
        }
        l = g2;
        return;
      }
      function PB(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (!a2)
          a2 = 0;
        else
          a2 = UB(a2, b2, 0) | 0;
        return a2 | 0;
      }
      function QB(b2, e2, f2, g2, h2, i2) {
        b2 = b2 | 0;
        e2 = +e2;
        f2 = f2 | 0;
        g2 = g2 | 0;
        h2 = h2 | 0;
        i2 = i2 | 0;
        var j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = 0, v2 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, B2 = 0, C2 = 0, D2 = 0, E2 = 0, F2 = 0, G2 = 0, H2 = 0;
        H2 = l;
        l = l + 560 | 0;
        m2 = H2 + 8 | 0;
        u2 = H2;
        G2 = H2 + 524 | 0;
        F2 = G2;
        n2 = H2 + 512 | 0;
        c[u2 >> 2] = 0;
        E2 = n2 + 12 | 0;
        RB(e2) | 0;
        if ((A | 0) < 0) {
          e2 = -e2;
          C2 = 1;
          B2 = 5659;
        } else {
          C2 = (h2 & 2049 | 0) != 0 & 1;
          B2 = (h2 & 2048 | 0) == 0 ? (h2 & 1 | 0) == 0 ? 5660 : 5665 : 5662;
        }
        RB(e2) | 0;
        D2 = A & 2146435072;
        do
          if (D2 >>> 0 < 2146435072 | (D2 | 0) == 2146435072 & 0 < 0) {
            r2 = +SB(e2, u2) * 2;
            j2 = r2 != 0;
            if (j2)
              c[u2 >> 2] = (c[u2 >> 2] | 0) + -1;
            w2 = i2 | 32;
            if ((w2 | 0) == 97) {
              s2 = i2 & 32;
              q2 = (s2 | 0) == 0 ? B2 : B2 + 9 | 0;
              p2 = C2 | 2;
              j2 = 12 - g2 | 0;
              do
                if (!(g2 >>> 0 > 11 | (j2 | 0) == 0)) {
                  e2 = 8;
                  do {
                    j2 = j2 + -1 | 0;
                    e2 = e2 * 16;
                  } while ((j2 | 0) != 0);
                  if ((a[q2 >> 0] | 0) == 45) {
                    e2 = -(e2 + (-r2 - e2));
                    break;
                  } else {
                    e2 = r2 + e2 - e2;
                    break;
                  }
                } else
                  e2 = r2;
              while (0);
              k2 = c[u2 >> 2] | 0;
              j2 = (k2 | 0) < 0 ? 0 - k2 | 0 : k2;
              j2 = LB(j2, ((j2 | 0) < 0) << 31 >> 31, E2) | 0;
              if ((j2 | 0) == (E2 | 0)) {
                j2 = n2 + 11 | 0;
                a[j2 >> 0] = 48;
              }
              a[j2 + -1 >> 0] = (k2 >> 31 & 2) + 43;
              o2 = j2 + -2 | 0;
              a[o2 >> 0] = i2 + 15;
              n2 = (g2 | 0) < 1;
              m2 = (h2 & 8 | 0) == 0;
              j2 = G2;
              do {
                D2 = ~~e2;
                k2 = j2 + 1 | 0;
                a[j2 >> 0] = d[5694 + D2 >> 0] | s2;
                e2 = (e2 - +(D2 | 0)) * 16;
                if ((k2 - F2 | 0) == 1 ? !(m2 & (n2 & e2 == 0)) : 0) {
                  a[k2 >> 0] = 46;
                  j2 = j2 + 2 | 0;
                } else
                  j2 = k2;
              } while (e2 != 0);
              D2 = j2 - F2 | 0;
              F2 = E2 - o2 | 0;
              E2 = (g2 | 0) != 0 & (D2 + -2 | 0) < (g2 | 0) ? g2 + 2 | 0 : D2;
              j2 = F2 + p2 + E2 | 0;
              OB(b2, 32, f2, j2, h2);
              GB(b2, q2, p2);
              OB(b2, 48, f2, j2, h2 ^ 65536);
              GB(b2, G2, D2);
              OB(b2, 48, E2 - D2 | 0, 0, 0);
              GB(b2, o2, F2);
              OB(b2, 32, f2, j2, h2 ^ 8192);
              break;
            }
            k2 = (g2 | 0) < 0 ? 6 : g2;
            if (j2) {
              j2 = (c[u2 >> 2] | 0) + -28 | 0;
              c[u2 >> 2] = j2;
              e2 = r2 * 268435456;
            } else {
              e2 = r2;
              j2 = c[u2 >> 2] | 0;
            }
            D2 = (j2 | 0) < 0 ? m2 : m2 + 288 | 0;
            m2 = D2;
            do {
              y2 = ~~e2 >>> 0;
              c[m2 >> 2] = y2;
              m2 = m2 + 4 | 0;
              e2 = (e2 - +(y2 >>> 0)) * 1e9;
            } while (e2 != 0);
            if ((j2 | 0) > 0) {
              n2 = D2;
              p2 = m2;
              while (1) {
                o2 = (j2 | 0) < 29 ? j2 : 29;
                j2 = p2 + -4 | 0;
                if (j2 >>> 0 >= n2 >>> 0) {
                  m2 = 0;
                  do {
                    x2 = zC(c[j2 >> 2] | 0, 0, o2 | 0) | 0;
                    x2 = xC(x2 | 0, A | 0, m2 | 0, 0) | 0;
                    y2 = A;
                    v2 = HC(x2 | 0, y2 | 0, 1e9, 0) | 0;
                    c[j2 >> 2] = v2;
                    m2 = EC(x2 | 0, y2 | 0, 1e9, 0) | 0;
                    j2 = j2 + -4 | 0;
                  } while (j2 >>> 0 >= n2 >>> 0);
                  if (m2) {
                    n2 = n2 + -4 | 0;
                    c[n2 >> 2] = m2;
                  }
                }
                m2 = p2;
                while (1) {
                  if (m2 >>> 0 <= n2 >>> 0)
                    break;
                  j2 = m2 + -4 | 0;
                  if (!(c[j2 >> 2] | 0))
                    m2 = j2;
                  else
                    break;
                }
                j2 = (c[u2 >> 2] | 0) - o2 | 0;
                c[u2 >> 2] = j2;
                if ((j2 | 0) > 0)
                  p2 = m2;
                else
                  break;
              }
            } else
              n2 = D2;
            if ((j2 | 0) < 0) {
              g2 = ((k2 + 25 | 0) / 9 | 0) + 1 | 0;
              t2 = (w2 | 0) == 102;
              do {
                s2 = 0 - j2 | 0;
                s2 = (s2 | 0) < 9 ? s2 : 9;
                if (n2 >>> 0 < m2 >>> 0) {
                  o2 = (1 << s2) + -1 | 0;
                  p2 = 1e9 >>> s2;
                  q2 = 0;
                  j2 = n2;
                  do {
                    y2 = c[j2 >> 2] | 0;
                    c[j2 >> 2] = (y2 >>> s2) + q2;
                    q2 = P(y2 & o2, p2) | 0;
                    j2 = j2 + 4 | 0;
                  } while (j2 >>> 0 < m2 >>> 0);
                  j2 = (c[n2 >> 2] | 0) == 0 ? n2 + 4 | 0 : n2;
                  if (!q2) {
                    n2 = j2;
                    j2 = m2;
                  } else {
                    c[m2 >> 2] = q2;
                    n2 = j2;
                    j2 = m2 + 4 | 0;
                  }
                } else {
                  n2 = (c[n2 >> 2] | 0) == 0 ? n2 + 4 | 0 : n2;
                  j2 = m2;
                }
                m2 = t2 ? D2 : n2;
                m2 = (j2 - m2 >> 2 | 0) > (g2 | 0) ? m2 + (g2 << 2) | 0 : j2;
                j2 = (c[u2 >> 2] | 0) + s2 | 0;
                c[u2 >> 2] = j2;
              } while ((j2 | 0) < 0);
              j2 = n2;
              g2 = m2;
            } else {
              j2 = n2;
              g2 = m2;
            }
            y2 = D2;
            if (j2 >>> 0 < g2 >>> 0) {
              m2 = (y2 - j2 >> 2) * 9 | 0;
              o2 = c[j2 >> 2] | 0;
              if (o2 >>> 0 >= 10) {
                n2 = 10;
                do {
                  n2 = n2 * 10 | 0;
                  m2 = m2 + 1 | 0;
                } while (o2 >>> 0 >= n2 >>> 0);
              }
            } else
              m2 = 0;
            t2 = (w2 | 0) == 103;
            v2 = (k2 | 0) != 0;
            n2 = k2 - ((w2 | 0) != 102 ? m2 : 0) + ((v2 & t2) << 31 >> 31) | 0;
            if ((n2 | 0) < (((g2 - y2 >> 2) * 9 | 0) + -9 | 0)) {
              n2 = n2 + 9216 | 0;
              s2 = D2 + 4 + (((n2 | 0) / 9 | 0) + -1024 << 2) | 0;
              n2 = ((n2 | 0) % 9 | 0) + 1 | 0;
              if ((n2 | 0) < 9) {
                o2 = 10;
                do {
                  o2 = o2 * 10 | 0;
                  n2 = n2 + 1 | 0;
                } while ((n2 | 0) != 9);
              } else
                o2 = 10;
              p2 = c[s2 >> 2] | 0;
              q2 = (p2 >>> 0) % (o2 >>> 0) | 0;
              n2 = (s2 + 4 | 0) == (g2 | 0);
              if (!(n2 & (q2 | 0) == 0)) {
                r2 = (((p2 >>> 0) / (o2 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992 : 9007199254740994;
                x2 = (o2 | 0) / 2 | 0;
                e2 = q2 >>> 0 < x2 >>> 0 ? 0.5 : n2 & (q2 | 0) == (x2 | 0) ? 1 : 1.5;
                if (C2) {
                  x2 = (a[B2 >> 0] | 0) == 45;
                  e2 = x2 ? -e2 : e2;
                  r2 = x2 ? -r2 : r2;
                }
                n2 = p2 - q2 | 0;
                c[s2 >> 2] = n2;
                if (r2 + e2 != r2) {
                  x2 = n2 + o2 | 0;
                  c[s2 >> 2] = x2;
                  if (x2 >>> 0 > 999999999) {
                    m2 = s2;
                    while (1) {
                      n2 = m2 + -4 | 0;
                      c[m2 >> 2] = 0;
                      if (n2 >>> 0 < j2 >>> 0) {
                        j2 = j2 + -4 | 0;
                        c[j2 >> 2] = 0;
                      }
                      x2 = (c[n2 >> 2] | 0) + 1 | 0;
                      c[n2 >> 2] = x2;
                      if (x2 >>> 0 > 999999999)
                        m2 = n2;
                      else
                        break;
                    }
                  } else
                    n2 = s2;
                  m2 = (y2 - j2 >> 2) * 9 | 0;
                  p2 = c[j2 >> 2] | 0;
                  if (p2 >>> 0 >= 10) {
                    o2 = 10;
                    do {
                      o2 = o2 * 10 | 0;
                      m2 = m2 + 1 | 0;
                    } while (p2 >>> 0 >= o2 >>> 0);
                  }
                } else
                  n2 = s2;
              } else
                n2 = s2;
              n2 = n2 + 4 | 0;
              n2 = g2 >>> 0 > n2 >>> 0 ? n2 : g2;
              x2 = j2;
            } else {
              n2 = g2;
              x2 = j2;
            }
            w2 = n2;
            while (1) {
              if (w2 >>> 0 <= x2 >>> 0) {
                u2 = 0;
                break;
              }
              j2 = w2 + -4 | 0;
              if (!(c[j2 >> 2] | 0))
                w2 = j2;
              else {
                u2 = 1;
                break;
              }
            }
            g2 = 0 - m2 | 0;
            do
              if (t2) {
                j2 = ((v2 ^ 1) & 1) + k2 | 0;
                if ((j2 | 0) > (m2 | 0) & (m2 | 0) > -5) {
                  o2 = i2 + -1 | 0;
                  k2 = j2 + -1 - m2 | 0;
                } else {
                  o2 = i2 + -2 | 0;
                  k2 = j2 + -1 | 0;
                }
                j2 = h2 & 8;
                if (!j2) {
                  if (u2 ? (z2 = c[w2 + -4 >> 2] | 0, (z2 | 0) != 0) : 0) {
                    if (!((z2 >>> 0) % 10 | 0)) {
                      n2 = 0;
                      j2 = 10;
                      do {
                        j2 = j2 * 10 | 0;
                        n2 = n2 + 1 | 0;
                      } while (!((z2 >>> 0) % (j2 >>> 0) | 0 | 0));
                    } else
                      n2 = 0;
                  } else
                    n2 = 9;
                  j2 = ((w2 - y2 >> 2) * 9 | 0) + -9 | 0;
                  if ((o2 | 32 | 0) == 102) {
                    s2 = j2 - n2 | 0;
                    s2 = (s2 | 0) > 0 ? s2 : 0;
                    k2 = (k2 | 0) < (s2 | 0) ? k2 : s2;
                    s2 = 0;
                    break;
                  } else {
                    s2 = j2 + m2 - n2 | 0;
                    s2 = (s2 | 0) > 0 ? s2 : 0;
                    k2 = (k2 | 0) < (s2 | 0) ? k2 : s2;
                    s2 = 0;
                    break;
                  }
                } else
                  s2 = j2;
              } else {
                o2 = i2;
                s2 = h2 & 8;
              }
            while (0);
            t2 = k2 | s2;
            p2 = (t2 | 0) != 0 & 1;
            q2 = (o2 | 32 | 0) == 102;
            if (q2) {
              v2 = 0;
              j2 = (m2 | 0) > 0 ? m2 : 0;
            } else {
              j2 = (m2 | 0) < 0 ? g2 : m2;
              j2 = LB(j2, ((j2 | 0) < 0) << 31 >> 31, E2) | 0;
              n2 = E2;
              if ((n2 - j2 | 0) < 2)
                do {
                  j2 = j2 + -1 | 0;
                  a[j2 >> 0] = 48;
                } while ((n2 - j2 | 0) < 2);
              a[j2 + -1 >> 0] = (m2 >> 31 & 2) + 43;
              j2 = j2 + -2 | 0;
              a[j2 >> 0] = o2;
              v2 = j2;
              j2 = n2 - j2 | 0;
            }
            j2 = C2 + 1 + k2 + p2 + j2 | 0;
            OB(b2, 32, f2, j2, h2);
            GB(b2, B2, C2);
            OB(b2, 48, f2, j2, h2 ^ 65536);
            if (q2) {
              o2 = x2 >>> 0 > D2 >>> 0 ? D2 : x2;
              s2 = G2 + 9 | 0;
              p2 = s2;
              q2 = G2 + 8 | 0;
              n2 = o2;
              do {
                m2 = LB(c[n2 >> 2] | 0, 0, s2) | 0;
                if ((n2 | 0) == (o2 | 0)) {
                  if ((m2 | 0) == (s2 | 0)) {
                    a[q2 >> 0] = 48;
                    m2 = q2;
                  }
                } else if (m2 >>> 0 > G2 >>> 0) {
                  yC(G2 | 0, 48, m2 - F2 | 0) | 0;
                  do
                    m2 = m2 + -1 | 0;
                  while (m2 >>> 0 > G2 >>> 0);
                }
                GB(b2, m2, p2 - m2 | 0);
                n2 = n2 + 4 | 0;
              } while (n2 >>> 0 <= D2 >>> 0);
              if (t2 | 0)
                GB(b2, 5710, 1);
              if (n2 >>> 0 < w2 >>> 0 & (k2 | 0) > 0)
                while (1) {
                  m2 = LB(c[n2 >> 2] | 0, 0, s2) | 0;
                  if (m2 >>> 0 > G2 >>> 0) {
                    yC(G2 | 0, 48, m2 - F2 | 0) | 0;
                    do
                      m2 = m2 + -1 | 0;
                    while (m2 >>> 0 > G2 >>> 0);
                  }
                  GB(b2, m2, (k2 | 0) < 9 ? k2 : 9);
                  n2 = n2 + 4 | 0;
                  m2 = k2 + -9 | 0;
                  if (!(n2 >>> 0 < w2 >>> 0 & (k2 | 0) > 9)) {
                    k2 = m2;
                    break;
                  } else
                    k2 = m2;
                }
              OB(b2, 48, k2 + 9 | 0, 9, 0);
            } else {
              t2 = u2 ? w2 : x2 + 4 | 0;
              if ((k2 | 0) > -1) {
                u2 = G2 + 9 | 0;
                s2 = (s2 | 0) == 0;
                g2 = u2;
                p2 = 0 - F2 | 0;
                q2 = G2 + 8 | 0;
                o2 = x2;
                do {
                  m2 = LB(c[o2 >> 2] | 0, 0, u2) | 0;
                  if ((m2 | 0) == (u2 | 0)) {
                    a[q2 >> 0] = 48;
                    m2 = q2;
                  }
                  do
                    if ((o2 | 0) == (x2 | 0)) {
                      n2 = m2 + 1 | 0;
                      GB(b2, m2, 1);
                      if (s2 & (k2 | 0) < 1) {
                        m2 = n2;
                        break;
                      }
                      GB(b2, 5710, 1);
                      m2 = n2;
                    } else {
                      if (m2 >>> 0 <= G2 >>> 0)
                        break;
                      yC(G2 | 0, 48, m2 + p2 | 0) | 0;
                      do
                        m2 = m2 + -1 | 0;
                      while (m2 >>> 0 > G2 >>> 0);
                    }
                  while (0);
                  F2 = g2 - m2 | 0;
                  GB(b2, m2, (k2 | 0) > (F2 | 0) ? F2 : k2);
                  k2 = k2 - F2 | 0;
                  o2 = o2 + 4 | 0;
                } while (o2 >>> 0 < t2 >>> 0 & (k2 | 0) > -1);
              }
              OB(b2, 48, k2 + 18 | 0, 18, 0);
              GB(b2, v2, E2 - v2 | 0);
            }
            OB(b2, 32, f2, j2, h2 ^ 8192);
          } else {
            G2 = (i2 & 32 | 0) != 0;
            j2 = C2 + 3 | 0;
            OB(b2, 32, f2, j2, h2 & -65537);
            GB(b2, B2, C2);
            GB(b2, e2 != e2 | false ? G2 ? 5686 : 5690 : G2 ? 5678 : 5682, 3);
            OB(b2, 32, f2, j2, h2 ^ 8192);
          }
        while (0);
        l = H2;
        return ((j2 | 0) < (f2 | 0) ? f2 : j2) | 0;
      }
      function RB(a2) {
        a2 = +a2;
        var b2 = 0;
        h[j >> 3] = a2;
        b2 = c[j >> 2] | 0;
        A = c[j + 4 >> 2] | 0;
        return b2 | 0;
      }
      function SB(a2, b2) {
        a2 = +a2;
        b2 = b2 | 0;
        return + +TB(a2, b2);
      }
      function TB(a2, b2) {
        a2 = +a2;
        b2 = b2 | 0;
        var d2 = 0, e2 = 0, f2 = 0;
        h[j >> 3] = a2;
        d2 = c[j >> 2] | 0;
        e2 = c[j + 4 >> 2] | 0;
        f2 = AC(d2 | 0, e2 | 0, 52) | 0;
        switch (f2 & 2047) {
          case 0: {
            if (a2 != 0) {
              a2 = +TB(a2 * 18446744073709552e3, b2);
              d2 = (c[b2 >> 2] | 0) + -64 | 0;
            } else
              d2 = 0;
            c[b2 >> 2] = d2;
            break;
          }
          case 2047:
            break;
          default: {
            c[b2 >> 2] = (f2 & 2047) + -1022;
            c[j >> 2] = d2;
            c[j + 4 >> 2] = e2 & -2146435073 | 1071644672;
            a2 = +h[j >> 3];
          }
        }
        return +a2;
      }
      function UB(b2, d2, e2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        do
          if (b2) {
            if (d2 >>> 0 < 128) {
              a[b2 >> 0] = d2;
              b2 = 1;
              break;
            }
            if (!(c[c[(VB() | 0) + 188 >> 2] >> 2] | 0))
              if ((d2 & -128 | 0) == 57216) {
                a[b2 >> 0] = d2;
                b2 = 1;
                break;
              } else {
                c[(vB() | 0) >> 2] = 84;
                b2 = -1;
                break;
              }
            if (d2 >>> 0 < 2048) {
              a[b2 >> 0] = d2 >>> 6 | 192;
              a[b2 + 1 >> 0] = d2 & 63 | 128;
              b2 = 2;
              break;
            }
            if (d2 >>> 0 < 55296 | (d2 & -8192 | 0) == 57344) {
              a[b2 >> 0] = d2 >>> 12 | 224;
              a[b2 + 1 >> 0] = d2 >>> 6 & 63 | 128;
              a[b2 + 2 >> 0] = d2 & 63 | 128;
              b2 = 3;
              break;
            }
            if ((d2 + -65536 | 0) >>> 0 < 1048576) {
              a[b2 >> 0] = d2 >>> 18 | 240;
              a[b2 + 1 >> 0] = d2 >>> 12 & 63 | 128;
              a[b2 + 2 >> 0] = d2 >>> 6 & 63 | 128;
              a[b2 + 3 >> 0] = d2 & 63 | 128;
              b2 = 4;
              break;
            } else {
              c[(vB() | 0) >> 2] = 84;
              b2 = -1;
              break;
            }
          } else
            b2 = 1;
        while (0);
        return b2 | 0;
      }
      function VB() {
        return xB() | 0;
      }
      function WB() {
        return xB() | 0;
      }
      function XB(b2, e2) {
        b2 = b2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = 0;
        while (1) {
          if ((d[5712 + g2 >> 0] | 0) == (b2 | 0)) {
            b2 = 2;
            break;
          }
          f2 = g2 + 1 | 0;
          if ((f2 | 0) == 87) {
            f2 = 5800;
            g2 = 87;
            b2 = 5;
            break;
          } else
            g2 = f2;
        }
        if ((b2 | 0) == 2)
          if (!g2)
            f2 = 5800;
          else {
            f2 = 5800;
            b2 = 5;
          }
        if ((b2 | 0) == 5)
          while (1) {
            do {
              b2 = f2;
              f2 = f2 + 1 | 0;
            } while ((a[b2 >> 0] | 0) != 0);
            g2 = g2 + -1 | 0;
            if (!g2)
              break;
            else
              b2 = 5;
          }
        return YB(f2, c[e2 + 20 >> 2] | 0) | 0;
      }
      function YB(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return ZB(a2, b2) | 0;
      }
      function ZB(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (!b2)
          b2 = 0;
        else
          b2 = _B(c[b2 >> 2] | 0, c[b2 + 4 >> 2] | 0, a2) | 0;
        return (b2 | 0 ? b2 : a2) | 0;
      }
      function _B(b2, d2, e2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0;
        o2 = (c[b2 >> 2] | 0) + 1794895138 | 0;
        h2 = $B(c[b2 + 8 >> 2] | 0, o2) | 0;
        f2 = $B(c[b2 + 12 >> 2] | 0, o2) | 0;
        g2 = $B(c[b2 + 16 >> 2] | 0, o2) | 0;
        a:
          do
            if ((h2 >>> 0 < d2 >>> 2 >>> 0 ? (n2 = d2 - (h2 << 2) | 0, f2 >>> 0 < n2 >>> 0 & g2 >>> 0 < n2 >>> 0) : 0) ? ((g2 | f2) & 3 | 0) == 0 : 0) {
              n2 = f2 >>> 2;
              m2 = g2 >>> 2;
              l2 = 0;
              while (1) {
                j2 = h2 >>> 1;
                k2 = l2 + j2 | 0;
                i2 = k2 << 1;
                g2 = i2 + n2 | 0;
                f2 = $B(c[b2 + (g2 << 2) >> 2] | 0, o2) | 0;
                g2 = $B(c[b2 + (g2 + 1 << 2) >> 2] | 0, o2) | 0;
                if (!(g2 >>> 0 < d2 >>> 0 & f2 >>> 0 < (d2 - g2 | 0) >>> 0)) {
                  f2 = 0;
                  break a;
                }
                if (a[b2 + (g2 + f2) >> 0] | 0) {
                  f2 = 0;
                  break a;
                }
                f2 = AB(e2, b2 + g2 | 0) | 0;
                if (!f2)
                  break;
                f2 = (f2 | 0) < 0;
                if ((h2 | 0) == 1) {
                  f2 = 0;
                  break a;
                } else {
                  l2 = f2 ? l2 : k2;
                  h2 = f2 ? j2 : h2 - j2 | 0;
                }
              }
              f2 = i2 + m2 | 0;
              g2 = $B(c[b2 + (f2 << 2) >> 2] | 0, o2) | 0;
              f2 = $B(c[b2 + (f2 + 1 << 2) >> 2] | 0, o2) | 0;
              if (f2 >>> 0 < d2 >>> 0 & g2 >>> 0 < (d2 - f2 | 0) >>> 0)
                f2 = (a[b2 + (f2 + g2) >> 0] | 0) == 0 ? b2 + f2 | 0 : 0;
              else
                f2 = 0;
            } else
              f2 = 0;
          while (0);
        return f2 | 0;
      }
      function $B(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c2 = 0;
        c2 = IC(a2 | 0) | 0;
        return ((b2 | 0) == 0 ? a2 : c2) | 0;
      }
      function aC(b2, d2, e2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0, j2 = 0;
        f2 = e2 + 16 | 0;
        g2 = c[f2 >> 2] | 0;
        if (!g2) {
          if (!(bC(e2) | 0)) {
            g2 = c[f2 >> 2] | 0;
            h2 = 5;
          } else
            f2 = 0;
        } else
          h2 = 5;
        a:
          do
            if ((h2 | 0) == 5) {
              j2 = e2 + 20 | 0;
              i2 = c[j2 >> 2] | 0;
              f2 = i2;
              if ((g2 - i2 | 0) >>> 0 < d2 >>> 0) {
                f2 = sb[c[e2 + 36 >> 2] & 7](e2, b2, d2) | 0;
                break;
              }
              b:
                do
                  if ((a[e2 + 75 >> 0] | 0) > -1) {
                    i2 = d2;
                    while (1) {
                      if (!i2) {
                        h2 = 0;
                        g2 = b2;
                        break b;
                      }
                      g2 = i2 + -1 | 0;
                      if ((a[b2 + g2 >> 0] | 0) == 10)
                        break;
                      else
                        i2 = g2;
                    }
                    f2 = sb[c[e2 + 36 >> 2] & 7](e2, b2, i2) | 0;
                    if (f2 >>> 0 < i2 >>> 0)
                      break a;
                    h2 = i2;
                    g2 = b2 + i2 | 0;
                    d2 = d2 - i2 | 0;
                    f2 = c[j2 >> 2] | 0;
                  } else {
                    h2 = 0;
                    g2 = b2;
                  }
                while (0);
              BC(f2 | 0, g2 | 0, d2 | 0) | 0;
              c[j2 >> 2] = (c[j2 >> 2] | 0) + d2;
              f2 = h2 + d2 | 0;
            }
          while (0);
        return f2 | 0;
      }
      function bC(b2) {
        b2 = b2 | 0;
        var d2 = 0, e2 = 0;
        d2 = b2 + 74 | 0;
        e2 = a[d2 >> 0] | 0;
        a[d2 >> 0] = e2 + 255 | e2;
        d2 = c[b2 >> 2] | 0;
        if (!(d2 & 8)) {
          c[b2 + 8 >> 2] = 0;
          c[b2 + 4 >> 2] = 0;
          e2 = c[b2 + 44 >> 2] | 0;
          c[b2 + 28 >> 2] = e2;
          c[b2 + 20 >> 2] = e2;
          c[b2 + 16 >> 2] = e2 + (c[b2 + 48 >> 2] | 0);
          b2 = 0;
        } else {
          c[b2 >> 2] = d2 | 32;
          b2 = -1;
        }
        return b2 | 0;
      }
      function cC(a2, b2) {
        a2 = T(a2);
        b2 = T(b2);
        var c2 = 0, d2 = 0;
        c2 = dC(a2) | 0;
        do
          if ((c2 & 2147483647) >>> 0 <= 2139095040) {
            d2 = dC(b2) | 0;
            if ((d2 & 2147483647) >>> 0 <= 2139095040)
              if ((d2 ^ c2 | 0) < 0) {
                a2 = (c2 | 0) < 0 ? b2 : a2;
                break;
              } else {
                a2 = a2 < b2 ? b2 : a2;
                break;
              }
          } else
            a2 = b2;
        while (0);
        return T(a2);
      }
      function dC(a2) {
        a2 = T(a2);
        return (g[j >> 2] = a2, c[j >> 2] | 0) | 0;
      }
      function eC(a2, b2) {
        a2 = T(a2);
        b2 = T(b2);
        var c2 = 0, d2 = 0;
        c2 = fC(a2) | 0;
        do
          if ((c2 & 2147483647) >>> 0 <= 2139095040) {
            d2 = fC(b2) | 0;
            if ((d2 & 2147483647) >>> 0 <= 2139095040)
              if ((d2 ^ c2 | 0) < 0) {
                a2 = (c2 | 0) < 0 ? a2 : b2;
                break;
              } else {
                a2 = a2 < b2 ? a2 : b2;
                break;
              }
          } else
            a2 = b2;
        while (0);
        return T(a2);
      }
      function fC(a2) {
        a2 = T(a2);
        return (g[j >> 2] = a2, c[j >> 2] | 0) | 0;
      }
      function gC(a2, b2) {
        a2 = T(a2);
        b2 = T(b2);
        var d2 = 0, e2 = 0, f2 = 0, h2 = 0, i2 = 0, k2 = 0, l2 = 0, m2 = 0;
        h2 = (g[j >> 2] = a2, c[j >> 2] | 0);
        k2 = (g[j >> 2] = b2, c[j >> 2] | 0);
        d2 = h2 >>> 23 & 255;
        i2 = k2 >>> 23 & 255;
        l2 = h2 & -2147483648;
        f2 = k2 << 1;
        a:
          do
            if ((f2 | 0) != 0 ? !((d2 | 0) == 255 | ((hC(b2) | 0) & 2147483647) >>> 0 > 2139095040) : 0) {
              e2 = h2 << 1;
              if (e2 >>> 0 <= f2 >>> 0) {
                b2 = T(a2 * T(0));
                return T((e2 | 0) == (f2 | 0) ? b2 : a2);
              }
              if (!d2) {
                d2 = h2 << 9;
                if ((d2 | 0) > -1) {
                  e2 = d2;
                  d2 = 0;
                  do {
                    d2 = d2 + -1 | 0;
                    e2 = e2 << 1;
                  } while ((e2 | 0) > -1);
                } else
                  d2 = 0;
                e2 = h2 << 1 - d2;
              } else
                e2 = h2 & 8388607 | 8388608;
              if (!i2) {
                h2 = k2 << 9;
                if ((h2 | 0) > -1) {
                  f2 = 0;
                  do {
                    f2 = f2 + -1 | 0;
                    h2 = h2 << 1;
                  } while ((h2 | 0) > -1);
                } else
                  f2 = 0;
                i2 = f2;
                k2 = k2 << 1 - f2;
              } else
                k2 = k2 & 8388607 | 8388608;
              f2 = e2 - k2 | 0;
              h2 = (f2 | 0) > -1;
              b:
                do
                  if ((d2 | 0) > (i2 | 0)) {
                    while (1) {
                      if (h2)
                        if (!f2)
                          break;
                        else
                          e2 = f2;
                      e2 = e2 << 1;
                      d2 = d2 + -1 | 0;
                      f2 = e2 - k2 | 0;
                      h2 = (f2 | 0) > -1;
                      if ((d2 | 0) <= (i2 | 0))
                        break b;
                    }
                    b2 = T(a2 * T(0));
                    break a;
                  }
                while (0);
              if (h2)
                if (!f2) {
                  b2 = T(a2 * T(0));
                  break;
                } else
                  e2 = f2;
              if (e2 >>> 0 < 8388608)
                do {
                  e2 = e2 << 1;
                  d2 = d2 + -1 | 0;
                } while (e2 >>> 0 < 8388608);
              if ((d2 | 0) > 0)
                d2 = e2 + -8388608 | d2 << 23;
              else
                d2 = e2 >>> (1 - d2 | 0);
              b2 = (c[j >> 2] = d2 | l2, T(g[j >> 2]));
            } else
              m2 = 3;
          while (0);
        if ((m2 | 0) == 3) {
          b2 = T(a2 * b2);
          b2 = T(b2 / b2);
        }
        return T(b2);
      }
      function hC(a2) {
        a2 = T(a2);
        return (g[j >> 2] = a2, c[j >> 2] | 0) | 0;
      }
      function iC(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return CB(c[582] | 0, a2, b2) | 0;
      }
      function jC(a2) {
        a2 = a2 | 0;
        Ta();
      }
      function kC(a2) {
        a2 = a2 | 0;
        return;
      }
      function lC(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return 0;
      }
      function mC(a2) {
        a2 = a2 | 0;
        if ((nC(a2 + 4 | 0) | 0) == -1) {
          nb[c[(c[a2 >> 2] | 0) + 8 >> 2] & 127](a2);
          a2 = 1;
        } else
          a2 = 0;
        return a2 | 0;
      }
      function nC(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = c[a2 >> 2] | 0;
        c[a2 >> 2] = b2 + -1;
        return b2 + -1 | 0;
      }
      function oC(a2) {
        a2 = a2 | 0;
        if (mC(a2) | 0)
          pC(a2);
        return;
      }
      function pC(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = a2 + 8 | 0;
        if (!((c[b2 >> 2] | 0) != 0 ? (nC(b2) | 0) != -1 : 0))
          nb[c[(c[a2 >> 2] | 0) + 16 >> 2] & 127](a2);
        return;
      }
      function qC(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = (a2 | 0) == 0 ? 1 : a2;
        while (1) {
          a2 = oB(b2) | 0;
          if (a2 | 0)
            break;
          a2 = uC() | 0;
          if (!a2) {
            a2 = 0;
            break;
          }
          Fb[a2 & 0]();
        }
        return a2 | 0;
      }
      function rC(a2) {
        a2 = a2 | 0;
        return qC(a2) | 0;
      }
      function sC(a2) {
        a2 = a2 | 0;
        pB(a2);
        return;
      }
      function tC(b2) {
        b2 = b2 | 0;
        if ((a[b2 + 11 >> 0] | 0) < 0)
          sC(c[b2 >> 2] | 0);
        return;
      }
      function uC() {
        var a2 = 0;
        a2 = c[2923] | 0;
        c[2923] = a2 + 0;
        return a2 | 0;
      }
      function vC() {
      }
      function wC(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        d2 = b2 - d2 - (c2 >>> 0 > a2 >>> 0 | 0) >>> 0;
        return (A = d2, a2 - c2 >>> 0 | 0) | 0;
      }
      function xC(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        c2 = a2 + c2 >>> 0;
        return (A = b2 + d2 + (c2 >>> 0 < a2 >>> 0 | 0) >>> 0, c2 | 0) | 0;
      }
      function yC(b2, d2, e2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0, i2 = 0;
        h2 = b2 + e2 | 0;
        d2 = d2 & 255;
        if ((e2 | 0) >= 67) {
          while (b2 & 3) {
            a[b2 >> 0] = d2;
            b2 = b2 + 1 | 0;
          }
          f2 = h2 & -4 | 0;
          g2 = f2 - 64 | 0;
          i2 = d2 | d2 << 8 | d2 << 16 | d2 << 24;
          while ((b2 | 0) <= (g2 | 0)) {
            c[b2 >> 2] = i2;
            c[b2 + 4 >> 2] = i2;
            c[b2 + 8 >> 2] = i2;
            c[b2 + 12 >> 2] = i2;
            c[b2 + 16 >> 2] = i2;
            c[b2 + 20 >> 2] = i2;
            c[b2 + 24 >> 2] = i2;
            c[b2 + 28 >> 2] = i2;
            c[b2 + 32 >> 2] = i2;
            c[b2 + 36 >> 2] = i2;
            c[b2 + 40 >> 2] = i2;
            c[b2 + 44 >> 2] = i2;
            c[b2 + 48 >> 2] = i2;
            c[b2 + 52 >> 2] = i2;
            c[b2 + 56 >> 2] = i2;
            c[b2 + 60 >> 2] = i2;
            b2 = b2 + 64 | 0;
          }
          while ((b2 | 0) < (f2 | 0)) {
            c[b2 >> 2] = i2;
            b2 = b2 + 4 | 0;
          }
        }
        while ((b2 | 0) < (h2 | 0)) {
          a[b2 >> 0] = d2;
          b2 = b2 + 1 | 0;
        }
        return h2 - e2 | 0;
      }
      function zC(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        if ((c2 | 0) < 32) {
          A = b2 << c2 | (a2 & (1 << c2) - 1 << 32 - c2) >>> 32 - c2;
          return a2 << c2;
        }
        A = a2 << c2 - 32;
        return 0;
      }
      function AC(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        if ((c2 | 0) < 32) {
          A = b2 >>> c2;
          return a2 >>> c2 | (b2 & (1 << c2) - 1) << 32 - c2;
        }
        A = 0;
        return b2 >>> c2 - 32 | 0;
      }
      function BC(b2, d2, e2) {
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0, h2 = 0;
        if ((e2 | 0) >= 8192)
          return Oa(b2 | 0, d2 | 0, e2 | 0) | 0;
        h2 = b2 | 0;
        g2 = b2 + e2 | 0;
        if ((b2 & 3) == (d2 & 3)) {
          while (b2 & 3) {
            if (!e2)
              return h2 | 0;
            a[b2 >> 0] = a[d2 >> 0] | 0;
            b2 = b2 + 1 | 0;
            d2 = d2 + 1 | 0;
            e2 = e2 - 1 | 0;
          }
          e2 = g2 & -4 | 0;
          f2 = e2 - 64 | 0;
          while ((b2 | 0) <= (f2 | 0)) {
            c[b2 >> 2] = c[d2 >> 2];
            c[b2 + 4 >> 2] = c[d2 + 4 >> 2];
            c[b2 + 8 >> 2] = c[d2 + 8 >> 2];
            c[b2 + 12 >> 2] = c[d2 + 12 >> 2];
            c[b2 + 16 >> 2] = c[d2 + 16 >> 2];
            c[b2 + 20 >> 2] = c[d2 + 20 >> 2];
            c[b2 + 24 >> 2] = c[d2 + 24 >> 2];
            c[b2 + 28 >> 2] = c[d2 + 28 >> 2];
            c[b2 + 32 >> 2] = c[d2 + 32 >> 2];
            c[b2 + 36 >> 2] = c[d2 + 36 >> 2];
            c[b2 + 40 >> 2] = c[d2 + 40 >> 2];
            c[b2 + 44 >> 2] = c[d2 + 44 >> 2];
            c[b2 + 48 >> 2] = c[d2 + 48 >> 2];
            c[b2 + 52 >> 2] = c[d2 + 52 >> 2];
            c[b2 + 56 >> 2] = c[d2 + 56 >> 2];
            c[b2 + 60 >> 2] = c[d2 + 60 >> 2];
            b2 = b2 + 64 | 0;
            d2 = d2 + 64 | 0;
          }
          while ((b2 | 0) < (e2 | 0)) {
            c[b2 >> 2] = c[d2 >> 2];
            b2 = b2 + 4 | 0;
            d2 = d2 + 4 | 0;
          }
        } else {
          e2 = g2 - 4 | 0;
          while ((b2 | 0) < (e2 | 0)) {
            a[b2 >> 0] = a[d2 >> 0] | 0;
            a[b2 + 1 >> 0] = a[d2 + 1 >> 0] | 0;
            a[b2 + 2 >> 0] = a[d2 + 2 >> 0] | 0;
            a[b2 + 3 >> 0] = a[d2 + 3 >> 0] | 0;
            b2 = b2 + 4 | 0;
            d2 = d2 + 4 | 0;
          }
        }
        while ((b2 | 0) < (g2 | 0)) {
          a[b2 >> 0] = a[d2 >> 0] | 0;
          b2 = b2 + 1 | 0;
          d2 = d2 + 1 | 0;
        }
        return h2 | 0;
      }
      function CC(b2) {
        b2 = b2 | 0;
        var c2 = 0;
        c2 = a[n + (b2 & 255) >> 0] | 0;
        if ((c2 | 0) < 8)
          return c2 | 0;
        c2 = a[n + (b2 >> 8 & 255) >> 0] | 0;
        if ((c2 | 0) < 8)
          return c2 + 8 | 0;
        c2 = a[n + (b2 >> 16 & 255) >> 0] | 0;
        if ((c2 | 0) < 8)
          return c2 + 16 | 0;
        return (a[n + (b2 >>> 24) >> 0] | 0) + 24 | 0;
      }
      function DC(a2, b2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        var g2 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0;
        l2 = a2;
        j2 = b2;
        k2 = j2;
        h2 = d2;
        n2 = e2;
        i2 = n2;
        if (!k2) {
          g2 = (f2 | 0) != 0;
          if (!i2) {
            if (g2) {
              c[f2 >> 2] = (l2 >>> 0) % (h2 >>> 0);
              c[f2 + 4 >> 2] = 0;
            }
            n2 = 0;
            f2 = (l2 >>> 0) / (h2 >>> 0) >>> 0;
            return (A = n2, f2) | 0;
          } else {
            if (!g2) {
              n2 = 0;
              f2 = 0;
              return (A = n2, f2) | 0;
            }
            c[f2 >> 2] = a2 | 0;
            c[f2 + 4 >> 2] = b2 & 0;
            n2 = 0;
            f2 = 0;
            return (A = n2, f2) | 0;
          }
        }
        g2 = (i2 | 0) == 0;
        do
          if (h2) {
            if (!g2) {
              g2 = (S(i2 | 0) | 0) - (S(k2 | 0) | 0) | 0;
              if (g2 >>> 0 <= 31) {
                m2 = g2 + 1 | 0;
                i2 = 31 - g2 | 0;
                b2 = g2 - 31 >> 31;
                h2 = m2;
                a2 = l2 >>> (m2 >>> 0) & b2 | k2 << i2;
                b2 = k2 >>> (m2 >>> 0) & b2;
                g2 = 0;
                i2 = l2 << i2;
                break;
              }
              if (!f2) {
                n2 = 0;
                f2 = 0;
                return (A = n2, f2) | 0;
              }
              c[f2 >> 2] = a2 | 0;
              c[f2 + 4 >> 2] = j2 | b2 & 0;
              n2 = 0;
              f2 = 0;
              return (A = n2, f2) | 0;
            }
            g2 = h2 - 1 | 0;
            if (g2 & h2 | 0) {
              i2 = (S(h2 | 0) | 0) + 33 - (S(k2 | 0) | 0) | 0;
              p2 = 64 - i2 | 0;
              m2 = 32 - i2 | 0;
              j2 = m2 >> 31;
              o2 = i2 - 32 | 0;
              b2 = o2 >> 31;
              h2 = i2;
              a2 = m2 - 1 >> 31 & k2 >>> (o2 >>> 0) | (k2 << m2 | l2 >>> (i2 >>> 0)) & b2;
              b2 = b2 & k2 >>> (i2 >>> 0);
              g2 = l2 << p2 & j2;
              i2 = (k2 << p2 | l2 >>> (o2 >>> 0)) & j2 | l2 << m2 & i2 - 33 >> 31;
              break;
            }
            if (f2 | 0) {
              c[f2 >> 2] = g2 & l2;
              c[f2 + 4 >> 2] = 0;
            }
            if ((h2 | 0) == 1) {
              o2 = j2 | b2 & 0;
              p2 = a2 | 0 | 0;
              return (A = o2, p2) | 0;
            } else {
              p2 = CC(h2 | 0) | 0;
              o2 = k2 >>> (p2 >>> 0) | 0;
              p2 = k2 << 32 - p2 | l2 >>> (p2 >>> 0) | 0;
              return (A = o2, p2) | 0;
            }
          } else {
            if (g2) {
              if (f2 | 0) {
                c[f2 >> 2] = (k2 >>> 0) % (h2 >>> 0);
                c[f2 + 4 >> 2] = 0;
              }
              o2 = 0;
              p2 = (k2 >>> 0) / (h2 >>> 0) >>> 0;
              return (A = o2, p2) | 0;
            }
            if (!l2) {
              if (f2 | 0) {
                c[f2 >> 2] = 0;
                c[f2 + 4 >> 2] = (k2 >>> 0) % (i2 >>> 0);
              }
              o2 = 0;
              p2 = (k2 >>> 0) / (i2 >>> 0) >>> 0;
              return (A = o2, p2) | 0;
            }
            g2 = i2 - 1 | 0;
            if (!(g2 & i2)) {
              if (f2 | 0) {
                c[f2 >> 2] = a2 | 0;
                c[f2 + 4 >> 2] = g2 & k2 | b2 & 0;
              }
              o2 = 0;
              p2 = k2 >>> ((CC(i2 | 0) | 0) >>> 0);
              return (A = o2, p2) | 0;
            }
            g2 = (S(i2 | 0) | 0) - (S(k2 | 0) | 0) | 0;
            if (g2 >>> 0 <= 30) {
              b2 = g2 + 1 | 0;
              i2 = 31 - g2 | 0;
              h2 = b2;
              a2 = k2 << i2 | l2 >>> (b2 >>> 0);
              b2 = k2 >>> (b2 >>> 0);
              g2 = 0;
              i2 = l2 << i2;
              break;
            }
            if (!f2) {
              o2 = 0;
              p2 = 0;
              return (A = o2, p2) | 0;
            }
            c[f2 >> 2] = a2 | 0;
            c[f2 + 4 >> 2] = j2 | b2 & 0;
            o2 = 0;
            p2 = 0;
            return (A = o2, p2) | 0;
          }
        while (0);
        if (!h2) {
          k2 = i2;
          j2 = 0;
          i2 = 0;
        } else {
          m2 = d2 | 0 | 0;
          l2 = n2 | e2 & 0;
          k2 = xC(m2 | 0, l2 | 0, -1, -1) | 0;
          d2 = A;
          j2 = i2;
          i2 = 0;
          do {
            e2 = j2;
            j2 = g2 >>> 31 | j2 << 1;
            g2 = i2 | g2 << 1;
            e2 = a2 << 1 | e2 >>> 31 | 0;
            n2 = a2 >>> 31 | b2 << 1 | 0;
            wC(k2 | 0, d2 | 0, e2 | 0, n2 | 0) | 0;
            p2 = A;
            o2 = p2 >> 31 | ((p2 | 0) < 0 ? -1 : 0) << 1;
            i2 = o2 & 1;
            a2 = wC(e2 | 0, n2 | 0, o2 & m2 | 0, (((p2 | 0) < 0 ? -1 : 0) >> 31 | ((p2 | 0) < 0 ? -1 : 0) << 1) & l2 | 0) | 0;
            b2 = A;
            h2 = h2 - 1 | 0;
          } while ((h2 | 0) != 0);
          k2 = j2;
          j2 = 0;
        }
        h2 = 0;
        if (f2 | 0) {
          c[f2 >> 2] = a2;
          c[f2 + 4 >> 2] = b2;
        }
        o2 = (g2 | 0) >>> 31 | (k2 | h2) << 1 | (h2 << 1 | g2 >>> 31) & 0 | j2;
        p2 = (g2 << 1 | 0 >>> 31) & -2 | i2;
        return (A = o2, p2) | 0;
      }
      function EC(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        return DC(a2, b2, c2, d2, 0) | 0;
      }
      function FC(a2) {
        a2 = a2 | 0;
        var b2 = 0, d2 = 0;
        d2 = a2 + 15 & -16 | 0;
        b2 = c[i >> 2] | 0;
        a2 = b2 + d2 | 0;
        if ((d2 | 0) > 0 & (a2 | 0) < (b2 | 0) | (a2 | 0) < 0) {
          Y() | 0;
          Qa(12);
          return -1;
        }
        c[i >> 2] = a2;
        if ((a2 | 0) > (X() | 0) ? (W() | 0) == 0 : 0) {
          c[i >> 2] = b2;
          Qa(12);
          return -1;
        }
        return b2 | 0;
      }
      function GC(b2, c2, d2) {
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        var e2 = 0;
        if ((c2 | 0) < (b2 | 0) & (b2 | 0) < (c2 + d2 | 0)) {
          e2 = b2;
          c2 = c2 + d2 | 0;
          b2 = b2 + d2 | 0;
          while ((d2 | 0) > 0) {
            b2 = b2 - 1 | 0;
            c2 = c2 - 1 | 0;
            d2 = d2 - 1 | 0;
            a[b2 >> 0] = a[c2 >> 0] | 0;
          }
          b2 = e2;
        } else
          BC(b2, c2, d2) | 0;
        return b2 | 0;
      }
      function HC(a2, b2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        var f2 = 0, g2 = 0;
        g2 = l;
        l = l + 16 | 0;
        f2 = g2 | 0;
        DC(a2, b2, d2, e2, f2) | 0;
        l = g2;
        return (A = c[f2 + 4 >> 2] | 0, c[f2 >> 2] | 0) | 0;
      }
      function IC(a2) {
        a2 = a2 | 0;
        return (a2 & 255) << 24 | (a2 >> 8 & 255) << 16 | (a2 >> 16 & 255) << 8 | a2 >>> 24 | 0;
      }
      function JC(a2, b2, c2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        jb[a2 & 1](b2 | 0, c2 | 0, d2 | 0, e2 | 0, f2 | 0);
      }
      function KC(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        kb[a2 & 1](b2 | 0, T(c2));
      }
      function LC(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = +c2;
        lb[a2 & 31](b2 | 0, +c2);
      }
      function MC(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        d2 = T(d2);
        return T(mb[a2 & 0](b2 | 0, T(c2), T(d2)));
      }
      function NC(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        nb[a2 & 127](b2 | 0);
      }
      function OC(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        ob[a2 & 31](b2 | 0, c2 | 0);
      }
      function PC(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return pb[a2 & 31](b2 | 0) | 0;
      }
      function QC(a2, b2, c2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = +c2;
        d2 = +d2;
        e2 = e2 | 0;
        qb[a2 & 1](b2 | 0, +c2, +d2, e2 | 0);
      }
      function RC(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = +c2;
        d2 = +d2;
        rb[a2 & 1](b2 | 0, +c2, +d2);
      }
      function SC(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        return sb[a2 & 7](b2 | 0, c2 | 0, d2 | 0) | 0;
      }
      function TC(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        return +tb[a2 & 1](b2 | 0, c2 | 0, d2 | 0);
      }
      function UC(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        return +ub[a2 & 15](b2 | 0);
      }
      function VC(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = +c2;
        return vb[a2 & 1](b2 | 0, +c2) | 0;
      }
      function WC(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        return wb[a2 & 15](b2 | 0, c2 | 0) | 0;
      }
      function XC(a2, b2, c2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = +d2;
        e2 = +e2;
        f2 = f2 | 0;
        xb[a2 & 1](b2 | 0, c2 | 0, +d2, +e2, f2 | 0);
      }
      function YC(a2, b2, c2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        yb[a2 & 1](b2 | 0, c2 | 0, d2 | 0, e2 | 0, f2 | 0, g2 | 0);
      }
      function ZC(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        return +zb[a2 & 7](b2 | 0, c2 | 0);
      }
      function _C(a2) {
        a2 = a2 | 0;
        return Ab[a2 & 7]() | 0;
      }
      function $C(a2, b2, c2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        return Bb[a2 & 1](b2 | 0, c2 | 0, d2 | 0, e2 | 0, f2 | 0) | 0;
      }
      function aD(a2, b2, c2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = +e2;
        Cb[a2 & 1](b2 | 0, c2 | 0, d2 | 0, +e2);
      }
      function bD(a2, b2, c2, d2, e2, f2, g2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = T(d2);
        e2 = e2 | 0;
        f2 = T(f2);
        g2 = g2 | 0;
        Db[a2 & 1](b2 | 0, c2 | 0, T(d2), e2 | 0, T(f2), g2 | 0);
      }
      function cD(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        Eb[a2 & 15](b2 | 0, c2 | 0, d2 | 0);
      }
      function dD(a2) {
        a2 = a2 | 0;
        Fb[a2 & 0]();
      }
      function eD(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = +d2;
        Gb[a2 & 15](b2 | 0, c2 | 0, +d2);
      }
      function fD(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = +b2;
        c2 = +c2;
        return Hb[a2 & 1](+b2, +c2) | 0;
      }
      function gD(a2, b2, c2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        Ib[a2 & 15](b2 | 0, c2 | 0, d2 | 0, e2 | 0);
      }
      function hD(a2, b2, c2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        U(0);
      }
      function iD(a2, b2) {
        a2 = a2 | 0;
        b2 = T(b2);
        U(1);
      }
      function jD(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        U(2);
      }
      function kD(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = T(b2);
        c2 = T(c2);
        U(3);
        return ib;
      }
      function lD(a2) {
        a2 = a2 | 0;
        U(4);
      }
      function mD(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        U(5);
      }
      function nD(a2) {
        a2 = a2 | 0;
        U(6);
        return 0;
      }
      function oD(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = +b2;
        c2 = +c2;
        d2 = d2 | 0;
        U(7);
      }
      function pD(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = +b2;
        c2 = +c2;
        U(8);
      }
      function qD(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        U(9);
        return 0;
      }
      function rD(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        U(10);
        return 0;
      }
      function sD(a2) {
        a2 = a2 | 0;
        U(11);
        return 0;
      }
      function tD(a2, b2) {
        a2 = a2 | 0;
        b2 = +b2;
        U(12);
        return 0;
      }
      function uD(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        U(13);
        return 0;
      }
      function vD(a2, b2, c2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = +c2;
        d2 = +d2;
        e2 = e2 | 0;
        U(14);
      }
      function wD(a2, b2, c2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        f2 = f2 | 0;
        U(15);
      }
      function xD(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        U(16);
        return 0;
      }
      function yD() {
        U(17);
        return 0;
      }
      function zD(a2, b2, c2, d2, e2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        e2 = e2 | 0;
        U(18);
        return 0;
      }
      function AD(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = +d2;
        U(19);
      }
      function BD(a2, b2, c2, d2, e2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = T(c2);
        d2 = d2 | 0;
        e2 = T(e2);
        f2 = f2 | 0;
        U(20);
      }
      function CD(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        U(21);
      }
      function DD() {
        U(22);
      }
      function ED(a2, b2, c2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = +c2;
        U(23);
      }
      function FD(a2, b2) {
        a2 = +a2;
        b2 = +b2;
        U(24);
        return 0;
      }
      function GD(a2, b2, c2, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c2 = c2 | 0;
        d2 = d2 | 0;
        U(25);
      }
      var jb = [hD, Uw];
      var kb = [iD, of];
      var lb = [jD, Of, Pf, Qf, Rf, Sf, Tf, Uf, Wf, Xf, Zf, _f, $f, ag, bg, cg, dg, eg, fg, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD];
      var mb = [kD];
      var nb = [lD, kC, Ki, Li, Mi, rn, sn, tn, Pu, Qu, Ru, Cw, Dw, Ew, DA, EA, FA, Rb, tf, yf, Vf, Yf, hh, ih, ri, Ui, kj, Jj, bk, zk, Wk, nl, Hl, bm, um, Nm, en, Nn, fo, yo, Ro, ip, Bp, Xp, nq, Eq, Zq, lf, Hr, _r, us, Ps, ft, Ct, Ot, Rt, ju, mu, Eu, Uu, Xu, pv, Kv, Vi, $x, Ky, az, sz, Rz, hA, tA, wA, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD];
      var ob = [mD, zf, Af, Df, Ef, Ff, Gf, Hf, If, Lf, Mf, Nf, wg, zg, Ag, Bg, Cg, Dg, Eg, Jg, Ng, rh, $p, qq, Ts, cy, Sv, xy, mD, mD, mD, mD];
      var pb = [nD, rB, sf, jg, ng, og, pg, qg, rg, sg, ug, vg, Kg, Lg, jh, ar, jt, sv, hy, jy, nD, nD, nD, nD, nD, nD, nD, nD, nD, nD, nD, nD];
      var qb = [oD, kh];
      var rb = [pD, Hu];
      var sb = [qD, sB, tB, zB, Dk, Rn, Lr, wz];
      var tb = [rD, ym];
      var ub = [sD, xg, yg, Fg, lh, mh, nh, oh, ph, qh, sD, sD, sD, sD, sD, sD];
      var vb = [tD, Kt];
      var wb = [uD, lC, Mg, xi, Nj, _k, rl, jn, jo, Iq, pf, ez, uD, uD, uD, uD];
      var xb = [vD, oj];
      var yb = [wD, Vz];
      var zb = [xD, Gg, sh, th, uh, Rm, xD, xD];
      var Ab = [yD, vh, qf, jf, Wt, qu, av, AA];
      var Bb = [zD, ee];
      var Cb = [AD, Vo];
      var Db = [BD, Pg];
      var Eb = [CD, kg, tg, Hg, Ig, fk, Ll, mp, Fp, nf, vx, Oy, lA, CD, CD, CD];
      var Fb = [DD];
      var Gb = [ED, Bf, Cf, Jf, Kf, gg, hg, ig, Co, cs, Ft, ED, ED, ED, ED, ED];
      var Hb = [FD, Mu];
      var Ib = [GD, fm, ir, ys, st, au, wu, hv, Pv, oy, LA, GD, GD, GD, GD, GD];
      return {_llvm_bswap_i32: IC, dynCall_idd: fD, dynCall_i: _C, _i64Subtract: wC, ___udivdi3: EC, dynCall_vif: KC, setThrew: Nb, dynCall_viii: cD, _bitshift64Lshr: AC, _bitshift64Shl: zC, dynCall_vi: NC, dynCall_viiddi: XC, dynCall_diii: TC, dynCall_iii: WC, _memset: yC, _sbrk: FC, _memcpy: BC, __GLOBAL__sub_I_Yoga_cpp: hf, dynCall_vii: OC, ___uremdi3: HC, dynCall_vid: LC, stackAlloc: Jb, _nbind_init: _A, getTempRet0: Pb, dynCall_di: UC, dynCall_iid: VC, setTempRet0: Ob, _i64Add: xC, dynCall_fiff: MC, dynCall_iiii: SC, _emscripten_get_global_libc: qB, dynCall_viid: eD, dynCall_viiid: aD, dynCall_viififi: bD, dynCall_ii: PC, __GLOBAL__sub_I_Binding_cc: Sx, dynCall_viiii: gD, dynCall_iiiiii: $C, stackSave: Kb, dynCall_viiiii: JC, __GLOBAL__sub_I_nbind_cc: wh, dynCall_vidd: RC, _free: pB, runPostSets: vC, dynCall_viiiiii: YC, establishStackSpace: Mb, _memmove: GC, stackRestore: Lb, _malloc: oB, __GLOBAL__sub_I_common_cc: Bv, dynCall_viddi: QC, dynCall_dii: ZC, dynCall_v: dD};
    }(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
    var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
    var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
    var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
    var setThrew = Module["setThrew"] = asm["setThrew"];
    var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
    var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
    var _memset = Module["_memset"] = asm["_memset"];
    var _sbrk = Module["_sbrk"] = asm["_sbrk"];
    var _memcpy = Module["_memcpy"] = asm["_memcpy"];
    var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
    var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
    var _nbind_init = Module["_nbind_init"] = asm["_nbind_init"];
    var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
    var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
    var _i64Add = Module["_i64Add"] = asm["_i64Add"];
    var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
    var __GLOBAL__sub_I_Yoga_cpp = Module["__GLOBAL__sub_I_Yoga_cpp"] = asm["__GLOBAL__sub_I_Yoga_cpp"];
    var __GLOBAL__sub_I_Binding_cc = Module["__GLOBAL__sub_I_Binding_cc"] = asm["__GLOBAL__sub_I_Binding_cc"];
    var stackSave = Module["stackSave"] = asm["stackSave"];
    var __GLOBAL__sub_I_nbind_cc = Module["__GLOBAL__sub_I_nbind_cc"] = asm["__GLOBAL__sub_I_nbind_cc"];
    var _free = Module["_free"] = asm["_free"];
    var runPostSets = Module["runPostSets"] = asm["runPostSets"];
    var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
    var _memmove = Module["_memmove"] = asm["_memmove"];
    var stackRestore = Module["stackRestore"] = asm["stackRestore"];
    var _malloc = Module["_malloc"] = asm["_malloc"];
    var __GLOBAL__sub_I_common_cc = Module["__GLOBAL__sub_I_common_cc"] = asm["__GLOBAL__sub_I_common_cc"];
    var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
    var dynCall_vif = Module["dynCall_vif"] = asm["dynCall_vif"];
    var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
    var dynCall_fiff = Module["dynCall_fiff"] = asm["dynCall_fiff"];
    var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
    var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
    var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
    var dynCall_viddi = Module["dynCall_viddi"] = asm["dynCall_viddi"];
    var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
    var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
    var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
    var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
    var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
    var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
    var dynCall_viiddi = Module["dynCall_viiddi"] = asm["dynCall_viiddi"];
    var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
    var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
    var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
    var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
    var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
    var dynCall_viififi = Module["dynCall_viififi"] = asm["dynCall_viififi"];
    var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
    var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
    var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
    var dynCall_idd = Module["dynCall_idd"] = asm["dynCall_idd"];
    var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
    Runtime.stackAlloc = Module["stackAlloc"];
    Runtime.stackSave = Module["stackSave"];
    Runtime.stackRestore = Module["stackRestore"];
    Runtime.establishStackSpace = Module["establishStackSpace"];
    Runtime.setTempRet0 = Module["setTempRet0"];
    Runtime.getTempRet0 = Module["getTempRet0"];
    Module["asm"] = asm;
    function ExitStatus(status) {
      this.name = "ExitStatus";
      this.message = "Program terminated with exit(" + status + ")";
      this.status = status;
    }
    ExitStatus.prototype = new Error();
    ExitStatus.prototype.constructor = ExitStatus;
    var initialStackTop;
    var preloadStartTime = null;
    var calledMain = false;
    dependenciesFulfilled = function runCaller() {
      if (!Module["calledRun"])
        run();
      if (!Module["calledRun"])
        dependenciesFulfilled = runCaller;
    };
    Module["callMain"] = Module.callMain = function callMain(args) {
      args = args || [];
      ensureInitRuntime();
      var argc = args.length + 1;
      function pad() {
        for (var i2 = 0; i2 < 4 - 1; i2++) {
          argv.push(0);
        }
      }
      var argv = [allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL)];
      pad();
      for (var i = 0; i < argc - 1; i = i + 1) {
        argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
        pad();
      }
      argv.push(0);
      argv = allocate(argv, "i32", ALLOC_NORMAL);
      try {
        var ret = Module["_main"](argc, argv, 0);
        exit(ret, true);
      } catch (e) {
        if (e instanceof ExitStatus) {
          return;
        } else if (e == "SimulateInfiniteLoop") {
          Module["noExitRuntime"] = true;
          return;
        } else {
          var toLog = e;
          if (e && typeof e === "object" && e.stack) {
            toLog = [e, e.stack];
          }
          Module.printErr("exception thrown: " + toLog);
          Module["quit"](1, e);
        }
      } finally {
        calledMain = true;
      }
    };
    function run(args) {
      args = args || Module["arguments"];
      if (preloadStartTime === null)
        preloadStartTime = Date.now();
      if (runDependencies > 0) {
        return;
      }
      preRun();
      if (runDependencies > 0)
        return;
      if (Module["calledRun"])
        return;
      function doRun() {
        if (Module["calledRun"])
          return;
        Module["calledRun"] = true;
        if (ABORT)
          return;
        ensureInitRuntime();
        preMain();
        if (Module["onRuntimeInitialized"])
          Module["onRuntimeInitialized"]();
        if (Module["_main"] && shouldRunNow)
          Module["callMain"](args);
        postRun();
      }
      if (Module["setStatus"]) {
        Module["setStatus"]("Running...");
        setTimeout(function() {
          setTimeout(function() {
            Module["setStatus"]("");
          }, 1);
          doRun();
        }, 1);
      } else {
        doRun();
      }
    }
    Module["run"] = Module.run = run;
    function exit(status, implicit) {
      if (implicit && Module["noExitRuntime"]) {
        return;
      }
      if (Module["noExitRuntime"]) {
      } else {
        ABORT = true;
        EXITSTATUS = status;
        STACKTOP = initialStackTop;
        exitRuntime();
        if (Module["onExit"])
          Module["onExit"](status);
      }
      if (ENVIRONMENT_IS_NODE) {
        process["exit"](status);
      }
      Module["quit"](status, new ExitStatus(status));
    }
    Module["exit"] = Module.exit = exit;
    var abortDecorators = [];
    function abort(what) {
      if (Module["onAbort"]) {
        Module["onAbort"](what);
      }
      if (what !== void 0) {
        Module.print(what);
        Module.printErr(what);
        what = JSON.stringify(what);
      } else {
        what = "";
      }
      ABORT = true;
      EXITSTATUS = 1;
      var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
      var output = "abort(" + what + ") at " + stackTrace() + extra;
      if (abortDecorators) {
        abortDecorators.forEach(function(decorator) {
          output = decorator(output, what);
        });
      }
      throw output;
    }
    Module["abort"] = Module.abort = abort;
    if (Module["preInit"]) {
      if (typeof Module["preInit"] == "function")
        Module["preInit"] = [Module["preInit"]];
      while (Module["preInit"].length > 0) {
        Module["preInit"].pop()();
      }
    }
    var shouldRunNow = true;
    if (Module["noInitialRun"]) {
      shouldRunNow = false;
    }
    run();
  });
});

// node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/dist/entry-browser.js
var require_entry_browser = __commonJS((exports2, module2) => {
  "use strict";
  var Yoga = require_entry_common();
  var nbind = require_nbind();
  var ran = false;
  var ret = null;
  nbind({}, function(err, result) {
    if (ran) {
      return;
    }
    ran = true;
    if (err) {
      throw err;
    }
    ret = result;
  });
  if (!ran) {
    throw new Error("Failed to load the yoga module - it needed to be loaded synchronously, but didn't");
  }
  module2.exports = Yoga(ret.bind, ret.lib);
});

// node_modules/.pnpm/ansi-regex@5.0.0/node_modules/ansi-regex/index.js
var require_ansi_regex = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = ({onlyFirst = false} = {}) => {
    const pattern = [
      "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
      "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
    ].join("|");
    return new RegExp(pattern, onlyFirst ? void 0 : "g");
  };
});

// node_modules/.pnpm/strip-ansi@6.0.0/node_modules/strip-ansi/index.js
var require_strip_ansi = __commonJS((exports2, module2) => {
  "use strict";
  var ansiRegex = require_ansi_regex();
  module2.exports = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
});

// node_modules/.pnpm/is-fullwidth-code-point@3.0.0/node_modules/is-fullwidth-code-point/index.js
var require_is_fullwidth_code_point = __commonJS((exports2, module2) => {
  "use strict";
  var isFullwidthCodePoint = (codePoint) => {
    if (Number.isNaN(codePoint)) {
      return false;
    }
    if (codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141)) {
      return true;
    }
    return false;
  };
  module2.exports = isFullwidthCodePoint;
  module2.exports.default = isFullwidthCodePoint;
});

// node_modules/.pnpm/emoji-regex@8.0.0/node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function() {
    return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
  };
});

// node_modules/.pnpm/string-width@4.2.0/node_modules/string-width/index.js
var require_string_width = __commonJS((exports2, module2) => {
  "use strict";
  var stripAnsi = require_strip_ansi();
  var isFullwidthCodePoint = require_is_fullwidth_code_point();
  var emojiRegex = require_emoji_regex();
  var stringWidth = (string) => {
    string = string.replace(emojiRegex(), "  ");
    if (typeof string !== "string" || string.length === 0) {
      return 0;
    }
    string = stripAnsi(string);
    let width = 0;
    for (let i = 0; i < string.length; i++) {
      const code = string.codePointAt(i);
      if (code <= 31 || code >= 127 && code <= 159) {
        continue;
      }
      if (code >= 768 && code <= 879) {
        continue;
      }
      if (code > 65535) {
        i++;
      }
      width += isFullwidthCodePoint(code) ? 2 : 1;
    }
    return width;
  };
  module2.exports = stringWidth;
  module2.exports.default = stringWidth;
});

// node_modules/.pnpm/widest-line@3.1.0/node_modules/widest-line/index.js
var require_widest_line = __commonJS((exports2, module2) => {
  "use strict";
  var stringWidth = require_string_width();
  var widestLine = (input) => {
    let max = 0;
    for (const line of input.split("\n")) {
      max = Math.max(max, stringWidth(line));
    }
    return max;
  };
  module2.exports = widestLine;
  module2.exports.default = widestLine;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/measure-text.js
var require_measure_text = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var widest_line_1 = __importDefault(require_widest_line());
  var cache = {};
  exports2.default = (text) => {
    if (text.length === 0) {
      return {
        width: 0,
        height: 0
      };
    }
    if (cache[text]) {
      return cache[text];
    }
    const width = widest_line_1.default(text);
    const height = text.split("\n").length;
    cache[text] = {width, height};
    return {width, height};
  };
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/styles.js
var require_styles = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
  var applyPositionStyles = (node, style) => {
    if ("position" in style) {
      node.setPositionType(style.position === "absolute" ? yoga_layout_prebuilt_1.default.POSITION_TYPE_ABSOLUTE : yoga_layout_prebuilt_1.default.POSITION_TYPE_RELATIVE);
    }
  };
  var applyMarginStyles = (node, style) => {
    if ("marginLeft" in style) {
      node.setMargin(yoga_layout_prebuilt_1.default.EDGE_START, style.marginLeft || 0);
    }
    if ("marginRight" in style) {
      node.setMargin(yoga_layout_prebuilt_1.default.EDGE_END, style.marginRight || 0);
    }
    if ("marginTop" in style) {
      node.setMargin(yoga_layout_prebuilt_1.default.EDGE_TOP, style.marginTop || 0);
    }
    if ("marginBottom" in style) {
      node.setMargin(yoga_layout_prebuilt_1.default.EDGE_BOTTOM, style.marginBottom || 0);
    }
  };
  var applyPaddingStyles = (node, style) => {
    if ("paddingLeft" in style) {
      node.setPadding(yoga_layout_prebuilt_1.default.EDGE_LEFT, style.paddingLeft || 0);
    }
    if ("paddingRight" in style) {
      node.setPadding(yoga_layout_prebuilt_1.default.EDGE_RIGHT, style.paddingRight || 0);
    }
    if ("paddingTop" in style) {
      node.setPadding(yoga_layout_prebuilt_1.default.EDGE_TOP, style.paddingTop || 0);
    }
    if ("paddingBottom" in style) {
      node.setPadding(yoga_layout_prebuilt_1.default.EDGE_BOTTOM, style.paddingBottom || 0);
    }
  };
  var applyFlexStyles = (node, style) => {
    var _a2;
    if ("flexGrow" in style) {
      node.setFlexGrow((_a2 = style.flexGrow) !== null && _a2 !== void 0 ? _a2 : 0);
    }
    if ("flexShrink" in style) {
      node.setFlexShrink(typeof style.flexShrink === "number" ? style.flexShrink : 1);
    }
    if ("flexDirection" in style) {
      if (style.flexDirection === "row") {
        node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_ROW);
      }
      if (style.flexDirection === "row-reverse") {
        node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_ROW_REVERSE);
      }
      if (style.flexDirection === "column") {
        node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_COLUMN);
      }
      if (style.flexDirection === "column-reverse") {
        node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_COLUMN_REVERSE);
      }
    }
    if ("flexBasis" in style) {
      if (typeof style.flexBasis === "number") {
        node.setFlexBasis(style.flexBasis);
      } else if (typeof style.flexBasis === "string") {
        node.setFlexBasisPercent(Number.parseInt(style.flexBasis, 10));
      } else {
        node.setFlexBasis(NaN);
      }
    }
    if ("alignItems" in style) {
      if (style.alignItems === "stretch" || !style.alignItems) {
        node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_STRETCH);
      }
      if (style.alignItems === "flex-start") {
        node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_FLEX_START);
      }
      if (style.alignItems === "center") {
        node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_CENTER);
      }
      if (style.alignItems === "flex-end") {
        node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_FLEX_END);
      }
    }
    if ("alignSelf" in style) {
      if (style.alignSelf === "auto" || !style.alignSelf) {
        node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_AUTO);
      }
      if (style.alignSelf === "flex-start") {
        node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_FLEX_START);
      }
      if (style.alignSelf === "center") {
        node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_CENTER);
      }
      if (style.alignSelf === "flex-end") {
        node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_FLEX_END);
      }
    }
    if ("justifyContent" in style) {
      if (style.justifyContent === "flex-start" || !style.justifyContent) {
        node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_FLEX_START);
      }
      if (style.justifyContent === "center") {
        node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_CENTER);
      }
      if (style.justifyContent === "flex-end") {
        node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_FLEX_END);
      }
      if (style.justifyContent === "space-between") {
        node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_SPACE_BETWEEN);
      }
      if (style.justifyContent === "space-around") {
        node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_SPACE_AROUND);
      }
    }
  };
  var applyDimensionStyles = (node, style) => {
    var _a2, _b;
    if ("width" in style) {
      if (typeof style.width === "number") {
        node.setWidth(style.width);
      } else if (typeof style.width === "string") {
        node.setWidthPercent(Number.parseInt(style.width, 10));
      } else {
        node.setWidthAuto();
      }
    }
    if ("height" in style) {
      if (typeof style.height === "number") {
        node.setHeight(style.height);
      } else if (typeof style.height === "string") {
        node.setHeightPercent(Number.parseInt(style.height, 10));
      } else {
        node.setHeightAuto();
      }
    }
    if ("minWidth" in style) {
      if (typeof style.minWidth === "string") {
        node.setMinWidthPercent(Number.parseInt(style.minWidth, 10));
      } else {
        node.setMinWidth((_a2 = style.minWidth) !== null && _a2 !== void 0 ? _a2 : 0);
      }
    }
    if ("minHeight" in style) {
      if (typeof style.minHeight === "string") {
        node.setMinHeightPercent(Number.parseInt(style.minHeight, 10));
      } else {
        node.setMinHeight((_b = style.minHeight) !== null && _b !== void 0 ? _b : 0);
      }
    }
  };
  var applyDisplayStyles = (node, style) => {
    if ("display" in style) {
      node.setDisplay(style.display === "flex" ? yoga_layout_prebuilt_1.default.DISPLAY_FLEX : yoga_layout_prebuilt_1.default.DISPLAY_NONE);
    }
  };
  var applyBorderStyles = (node, style) => {
    if ("borderStyle" in style) {
      const borderWidth = typeof style.borderStyle === "string" ? 1 : 0;
      node.setBorder(yoga_layout_prebuilt_1.default.EDGE_TOP, borderWidth);
      node.setBorder(yoga_layout_prebuilt_1.default.EDGE_BOTTOM, borderWidth);
      node.setBorder(yoga_layout_prebuilt_1.default.EDGE_LEFT, borderWidth);
      node.setBorder(yoga_layout_prebuilt_1.default.EDGE_RIGHT, borderWidth);
    }
  };
  exports2.default = (node, style = {}) => {
    applyPositionStyles(node, style);
    applyMarginStyles(node, style);
    applyPaddingStyles(node, style);
    applyFlexStyles(node, style);
    applyDimensionStyles(node, style);
    applyDisplayStyles(node, style);
    applyBorderStyles(node, style);
  };
});

// node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js
var require_color_name2 = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 134, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 250, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 221],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [112, 128, 144],
    slategrey: [112, 128, 144],
    snow: [255, 250, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 50]
  };
});

// node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js
var require_conversions2 = __commonJS((exports2, module2) => {
  var cssKeywords = require_color_name2();
  var reverseKeywords = {};
  for (const key of Object.keys(cssKeywords)) {
    reverseKeywords[cssKeywords[key]] = key;
  }
  var convert = {
    rgb: {channels: 3, labels: "rgb"},
    hsl: {channels: 3, labels: "hsl"},
    hsv: {channels: 3, labels: "hsv"},
    hwb: {channels: 3, labels: "hwb"},
    cmyk: {channels: 4, labels: "cmyk"},
    xyz: {channels: 3, labels: "xyz"},
    lab: {channels: 3, labels: "lab"},
    lch: {channels: 3, labels: "lch"},
    hex: {channels: 1, labels: ["hex"]},
    keyword: {channels: 1, labels: ["keyword"]},
    ansi16: {channels: 1, labels: ["ansi16"]},
    ansi256: {channels: 1, labels: ["ansi256"]},
    hcg: {channels: 3, labels: ["h", "c", "g"]},
    apple: {channels: 3, labels: ["r16", "g16", "b16"]},
    gray: {channels: 1, labels: ["gray"]}
  };
  module2.exports = convert;
  for (const model of Object.keys(convert)) {
    if (!("channels" in convert[model])) {
      throw new Error("missing channels property: " + model);
    }
    if (!("labels" in convert[model])) {
      throw new Error("missing channel labels property: " + model);
    }
    if (convert[model].labels.length !== convert[model].channels) {
      throw new Error("channel and label counts mismatch: " + model);
    }
    const {channels, labels} = convert[model];
    delete convert[model].channels;
    delete convert[model].labels;
    Object.defineProperty(convert[model], "channels", {value: channels});
    Object.defineProperty(convert[model], "labels", {value: labels});
  }
  convert.rgb.hsl = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const min = Math.min(r, g, b);
    const max = Math.max(r, g, b);
    const delta = max - min;
    let h;
    let s;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    const l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert.rgb.hsv = function(rgb) {
    let rdif;
    let gdif;
    let bdif;
    let h;
    let s;
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const v = Math.max(r, g, b);
    const diff = v - Math.min(r, g, b);
    const diffc = function(c) {
      return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
      h = 0;
      s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert.rgb.hwb = function(rgb) {
    const r = rgb[0];
    const g = rgb[1];
    let b = rgb[2];
    const h = convert.rgb.hsl(rgb)[0];
    const w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert.rgb.cmyk = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const k = Math.min(1 - r, 1 - g, 1 - b);
    const c = (1 - r - k) / (1 - k) || 0;
    const m = (1 - g - k) / (1 - k) || 0;
    const y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };
  function comparativeDistance(x, y) {
    return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
  }
  convert.rgb.keyword = function(rgb) {
    const reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    let currentClosestDistance = Infinity;
    let currentClosestKeyword;
    for (const keyword of Object.keys(cssKeywords)) {
      const value = cssKeywords[keyword];
      const distance = comparativeDistance(rgb, value);
      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
  };
  convert.rgb.xyz = function(rgb) {
    let r = rgb[0] / 255;
    let g = rgb[1] / 255;
    let b = rgb[2] / 255;
    r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
    g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
    b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
    const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };
  convert.rgb.lab = function(rgb) {
    const xyz = convert.rgb.xyz(rgb);
    let x = xyz[0];
    let y = xyz[1];
    let z = xyz[2];
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * y - 16;
    const a = 500 * (x - y);
    const b = 200 * (y - z);
    return [l, a, b];
  };
  convert.hsl.rgb = function(hsl) {
    const h = hsl[0] / 360;
    const s = hsl[1] / 100;
    const l = hsl[2] / 100;
    let t2;
    let t3;
    let val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    const t1 = 2 * l - t2;
    const rgb = [0, 0, 0];
    for (let i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function(hsl) {
    const h = hsl[0];
    let s = hsl[1] / 100;
    let l = hsl[2] / 100;
    let smin = s;
    const lmin = Math.max(l, 0.01);
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    const v = (l + s) / 2;
    const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert.hsv.rgb = function(hsv) {
    const h = hsv[0] / 60;
    const s = hsv[1] / 100;
    let v = hsv[2] / 100;
    const hi = Math.floor(h) % 6;
    const f = h - Math.floor(h);
    const p = 255 * v * (1 - s);
    const q = 255 * v * (1 - s * f);
    const t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert.hsv.hsl = function(hsv) {
    const h = hsv[0];
    const s = hsv[1] / 100;
    const v = hsv[2] / 100;
    const vmin = Math.max(v, 0.01);
    let sl;
    let l;
    l = (2 - s) * v;
    const lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert.hwb.rgb = function(hwb) {
    const h = hwb[0] / 360;
    let wh = hwb[1] / 100;
    let bl = hwb[2] / 100;
    const ratio = wh + bl;
    let f;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    const i = Math.floor(6 * h);
    const v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    const n = wh + f * (v - wh);
    let r;
    let g;
    let b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert.cmyk.rgb = function(cmyk) {
    const c = cmyk[0] / 100;
    const m = cmyk[1] / 100;
    const y = cmyk[2] / 100;
    const k = cmyk[3] / 100;
    const r = 1 - Math.min(1, c * (1 - k) + k);
    const g = 1 - Math.min(1, m * (1 - k) + k);
    const b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.rgb = function(xyz) {
    const x = xyz[0] / 100;
    const y = xyz[1] / 100;
    const z = xyz[2] / 100;
    let r;
    let g;
    let b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.lab = function(xyz) {
    let x = xyz[0];
    let y = xyz[1];
    let z = xyz[2];
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * y - 16;
    const a = 500 * (x - y);
    const b = 200 * (y - z);
    return [l, a, b];
  };
  convert.lab.xyz = function(lab) {
    const l = lab[0];
    const a = lab[1];
    const b = lab[2];
    let x;
    let y;
    let z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    const y2 = y ** 3;
    const x2 = x ** 3;
    const z2 = z ** 3;
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };
  convert.lab.lch = function(lab) {
    const l = lab[0];
    const a = lab[1];
    const b = lab[2];
    let h;
    const hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    const c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };
  convert.lch.lab = function(lch) {
    const l = lch[0];
    const c = lch[1];
    const h = lch[2];
    const hr = h / 360 * 2 * Math.PI;
    const a = c * Math.cos(hr);
    const b = c * Math.sin(hr);
    return [l, a, b];
  };
  convert.rgb.ansi16 = function(args, saturation = null) {
    const [r, g, b] = args;
    let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert.hsv.ansi16 = function(args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };
  convert.rgb.ansi256 = function(args) {
    const r = args[0];
    const g = args[1];
    const b = args[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };
  convert.ansi16.rgb = function(args) {
    let color = args % 10;
    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    const mult = (~~(args > 50) + 1) * 0.5;
    const r = (color & 1) * mult * 255;
    const g = (color >> 1 & 1) * mult * 255;
    const b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert.ansi256.rgb = function(args) {
    if (args >= 232) {
      const c = (args - 232) * 10 + 8;
      return [c, c, c];
    }
    args -= 16;
    let rem;
    const r = Math.floor(args / 36) / 5 * 255;
    const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    const b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert.rgb.hex = function(args) {
    const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    const string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.hex.rgb = function(args) {
    const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    let colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map((char) => {
        return char + char;
      }).join("");
    }
    const integer = parseInt(colorString, 16);
    const r = integer >> 16 & 255;
    const g = integer >> 8 & 255;
    const b = integer & 255;
    return [r, g, b];
  };
  convert.rgb.hcg = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const max = Math.max(Math.max(r, g), b);
    const min = Math.min(Math.min(r, g), b);
    const chroma = max - min;
    let grayscale;
    let hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function(hsl) {
    const s = hsl[1] / 100;
    const l = hsl[2] / 100;
    const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
    let f = 0;
    if (c < 1) {
      f = (l - 0.5 * c) / (1 - c);
    }
    return [hsl[0], c * 100, f * 100];
  };
  convert.hsv.hcg = function(hsv) {
    const s = hsv[1] / 100;
    const v = hsv[2] / 100;
    const c = s * v;
    let f = 0;
    if (c < 1) {
      f = (v - c) / (1 - c);
    }
    return [hsv[0], c * 100, f * 100];
  };
  convert.hcg.rgb = function(hcg) {
    const h = hcg[0] / 360;
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    if (c === 0) {
      return [g * 255, g * 255, g * 255];
    }
    const pure = [0, 0, 0];
    const hi = h % 1 * 6;
    const v = hi % 1;
    const w = 1 - v;
    let mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c) * g;
    return [
      (c * pure[0] + mg) * 255,
      (c * pure[1] + mg) * 255,
      (c * pure[2] + mg) * 255
    ];
  };
  convert.hcg.hsv = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c + g * (1 - c);
    let f = 0;
    if (v > 0) {
      f = c / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert.hcg.hsl = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const l = g * (1 - c) + 0.5 * c;
    let s = 0;
    if (l > 0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert.hcg.hwb = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c + g * (1 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };
  convert.hwb.hcg = function(hwb) {
    const w = hwb[1] / 100;
    const b = hwb[2] / 100;
    const v = 1 - b;
    const c = v - w;
    let g = 0;
    if (c < 1) {
      g = (v - c) / (1 - c);
    }
    return [hwb[0], c * 100, g * 100];
  };
  convert.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert.gray.hsl = function(args) {
    return [0, 0, args[0]];
  };
  convert.gray.hsv = convert.gray.hsl;
  convert.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function(gray) {
    const val = Math.round(gray[0] / 100 * 255) & 255;
    const integer = (val << 16) + (val << 8) + val;
    const string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.rgb.gray = function(rgb) {
    const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
});

// node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js
var require_route2 = __commonJS((exports2, module2) => {
  var conversions = require_conversions2();
  function buildGraph() {
    const graph = {};
    const models = Object.keys(conversions);
    for (let len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    const graph = buildGraph();
    const queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      const current = queue.pop();
      const adjacents = Object.keys(conversions[current]);
      for (let len = adjacents.length, i = 0; i < len; i++) {
        const adjacent = adjacents[i];
        const node = graph[adjacent];
        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function(args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    const path2 = [graph[toModel].parent, toModel];
    let fn = conversions[graph[toModel].parent][toModel];
    let cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path2.unshift(graph[cur].parent);
      fn = link(conversions[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }
    fn.conversion = path2;
    return fn;
  }
  module2.exports = function(fromModel) {
    const graph = deriveBFS(fromModel);
    const conversion = {};
    const models = Object.keys(graph);
    for (let len = models.length, i = 0; i < len; i++) {
      const toModel = models[i];
      const node = graph[toModel];
      if (node.parent === null) {
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
  };
});

// node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js
var require_color_convert2 = __commonJS((exports2, module2) => {
  var conversions = require_conversions2();
  var route = require_route2();
  var convert = {};
  var models = Object.keys(conversions);
  function wrapRaw(fn) {
    const wrappedFn = function(...args) {
      const arg0 = args[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args = arg0;
      }
      return fn(args);
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    const wrappedFn = function(...args) {
      const arg0 = args[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args = arg0;
      }
      const result = fn(args);
      if (typeof result === "object") {
        for (let len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach((fromModel) => {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", {value: conversions[fromModel].channels});
    Object.defineProperty(convert[fromModel], "labels", {value: conversions[fromModel].labels});
    const routes = route(fromModel);
    const routeModels = Object.keys(routes);
    routeModels.forEach((toModel) => {
      const fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  module2.exports = convert;
});

// node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js
var require_ansi_styles2 = __commonJS((exports2, module2) => {
  "use strict";
  var wrapAnsi16 = (fn, offset) => (...args) => {
    const code = fn(...args);
    return `[${code + offset}m`;
  };
  var wrapAnsi256 = (fn, offset) => (...args) => {
    const code = fn(...args);
    return `[${38 + offset};5;${code}m`;
  };
  var wrapAnsi16m = (fn, offset) => (...args) => {
    const rgb = fn(...args);
    return `[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  var ansi2ansi = (n) => n;
  var rgb2rgb = (r, g, b) => [r, g, b];
  var setLazyProperty = (object, property, get) => {
    Object.defineProperty(object, property, {
      get: () => {
        const value = get();
        Object.defineProperty(object, property, {
          value,
          enumerable: true,
          configurable: true
        });
        return value;
      },
      enumerable: true,
      configurable: true
    });
  };
  var colorConvert;
  var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
    if (colorConvert === void 0) {
      colorConvert = require_color_convert2();
    }
    const offset = isBackground ? 10 : 0;
    const styles = {};
    for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
      const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
      if (sourceSpace === targetSpace) {
        styles[name] = wrap(identity, offset);
      } else if (typeof suite === "object") {
        styles[name] = wrap(suite[targetSpace], offset);
      }
    }
    return styles;
  };
  function assembleStyles() {
    const codes = new Map();
    const styles = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles.color.gray = styles.color.blackBright;
    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
    styles.color.grey = styles.color.blackBright;
    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
    for (const [groupName, group] of Object.entries(styles)) {
      for (const [styleName, style] of Object.entries(group)) {
        styles[styleName] = {
          open: `[${style[0]}m`,
          close: `[${style[1]}m`
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
    }
    Object.defineProperty(styles, "codes", {
      value: codes,
      enumerable: false
    });
    styles.color.close = "[39m";
    styles.bgColor.close = "[49m";
    setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
    setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
    setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
    setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
    setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
    setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
    return styles;
  }
  Object.defineProperty(module2, "exports", {
    enumerable: true,
    get: assembleStyles
  });
});

// node_modules/.pnpm/wrap-ansi@6.2.0/node_modules/wrap-ansi/index.js
var require_wrap_ansi = __commonJS((exports2, module2) => {
  "use strict";
  var stringWidth = require_string_width();
  var stripAnsi = require_strip_ansi();
  var ansiStyles = require_ansi_styles2();
  var ESCAPES = new Set([
    "",
    "\x9B"
  ]);
  var END_CODE = 39;
  var wrapAnsi = (code) => `${ESCAPES.values().next().value}[${code}m`;
  var wordLengths = (string) => string.split(" ").map((character) => stringWidth(character));
  var wrapWord = (rows, word, columns) => {
    const characters = [...word];
    let isInsideEscape = false;
    let visible = stringWidth(stripAnsi(rows[rows.length - 1]));
    for (const [index, character] of characters.entries()) {
      const characterLength = stringWidth(character);
      if (visible + characterLength <= columns) {
        rows[rows.length - 1] += character;
      } else {
        rows.push(character);
        visible = 0;
      }
      if (ESCAPES.has(character)) {
        isInsideEscape = true;
      } else if (isInsideEscape && character === "m") {
        isInsideEscape = false;
        continue;
      }
      if (isInsideEscape) {
        continue;
      }
      visible += characterLength;
      if (visible === columns && index < characters.length - 1) {
        rows.push("");
        visible = 0;
      }
    }
    if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {
      rows[rows.length - 2] += rows.pop();
    }
  };
  var stringVisibleTrimSpacesRight = (str) => {
    const words = str.split(" ");
    let last = words.length;
    while (last > 0) {
      if (stringWidth(words[last - 1]) > 0) {
        break;
      }
      last--;
    }
    if (last === words.length) {
      return str;
    }
    return words.slice(0, last).join(" ") + words.slice(last).join("");
  };
  var exec = (string, columns, options = {}) => {
    if (options.trim !== false && string.trim() === "") {
      return "";
    }
    let pre = "";
    let ret = "";
    let escapeCode;
    const lengths = wordLengths(string);
    let rows = [""];
    for (const [index, word] of string.split(" ").entries()) {
      if (options.trim !== false) {
        rows[rows.length - 1] = rows[rows.length - 1].trimLeft();
      }
      let rowLength = stringWidth(rows[rows.length - 1]);
      if (index !== 0) {
        if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
          rows.push("");
          rowLength = 0;
        }
        if (rowLength > 0 || options.trim === false) {
          rows[rows.length - 1] += " ";
          rowLength++;
        }
      }
      if (options.hard && lengths[index] > columns) {
        const remainingColumns = columns - rowLength;
        const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
        const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
        if (breaksStartingNextLine < breaksStartingThisLine) {
          rows.push("");
        }
        wrapWord(rows, word, columns);
        continue;
      }
      if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
        if (options.wordWrap === false && rowLength < columns) {
          wrapWord(rows, word, columns);
          continue;
        }
        rows.push("");
      }
      if (rowLength + lengths[index] > columns && options.wordWrap === false) {
        wrapWord(rows, word, columns);
        continue;
      }
      rows[rows.length - 1] += word;
    }
    if (options.trim !== false) {
      rows = rows.map(stringVisibleTrimSpacesRight);
    }
    pre = rows.join("\n");
    for (const [index, character] of [...pre].entries()) {
      ret += character;
      if (ESCAPES.has(character)) {
        const code2 = parseFloat(/\d[^m]*/.exec(pre.slice(index, index + 4)));
        escapeCode = code2 === END_CODE ? null : code2;
      }
      const code = ansiStyles.codes.get(Number(escapeCode));
      if (escapeCode && code) {
        if (pre[index + 1] === "\n") {
          ret += wrapAnsi(code);
        } else if (character === "\n") {
          ret += wrapAnsi(escapeCode);
        }
      }
    }
    return ret;
  };
  module2.exports = (string, columns, options) => {
    return String(string).normalize().replace(/\r\n/g, "\n").split("\n").map((line) => exec(line, columns, options)).join("\n");
  };
});

// node_modules/.pnpm/astral-regex@2.0.0/node_modules/astral-regex/index.js
var require_astral_regex = __commonJS((exports2, module2) => {
  "use strict";
  var regex = "[\uD800-\uDBFF][\uDC00-\uDFFF]";
  var astralRegex = (options) => options && options.exact ? new RegExp(`^${regex}$`) : new RegExp(regex, "g");
  module2.exports = astralRegex;
});

// node_modules/.pnpm/slice-ansi@3.0.0/node_modules/slice-ansi/index.js
var require_slice_ansi = __commonJS((exports2, module2) => {
  "use strict";
  var isFullwidthCodePoint = require_is_fullwidth_code_point();
  var astralRegex = require_astral_regex();
  var ansiStyles = require_ansi_styles2();
  var ESCAPES = [
    "",
    "\x9B"
  ];
  var wrapAnsi = (code) => `${ESCAPES[0]}[${code}m`;
  var checkAnsi = (ansiCodes, isEscapes, endAnsiCode) => {
    let output = [];
    ansiCodes = [...ansiCodes];
    for (let ansiCode of ansiCodes) {
      const ansiCodeOrigin = ansiCode;
      if (ansiCode.match(";")) {
        ansiCode = ansiCode.split(";")[0][0] + "0";
      }
      const item = ansiStyles.codes.get(parseInt(ansiCode, 10));
      if (item) {
        const indexEscape = ansiCodes.indexOf(item.toString());
        if (indexEscape >= 0) {
          ansiCodes.splice(indexEscape, 1);
        } else {
          output.push(wrapAnsi(isEscapes ? item : ansiCodeOrigin));
        }
      } else if (isEscapes) {
        output.push(wrapAnsi(0));
        break;
      } else {
        output.push(wrapAnsi(ansiCodeOrigin));
      }
    }
    if (isEscapes) {
      output = output.filter((element, index) => output.indexOf(element) === index);
      if (endAnsiCode !== void 0) {
        const fistEscapeCode = wrapAnsi(ansiStyles.codes.get(parseInt(endAnsiCode, 10)));
        output = output.reduce((current, next) => next === fistEscapeCode ? [next, ...current] : [...current, next], []);
      }
    }
    return output.join("");
  };
  module2.exports = (string, begin, end) => {
    const characters = [...string.normalize()];
    const ansiCodes = [];
    end = typeof end === "number" ? end : characters.length;
    let isInsideEscape = false;
    let ansiCode;
    let visible = 0;
    let output = "";
    for (const [index, character] of characters.entries()) {
      let leftEscape = false;
      if (ESCAPES.includes(character)) {
        const code = /\d[^m]*/.exec(string.slice(index, index + 18));
        ansiCode = code && code.length > 0 ? code[0] : void 0;
        if (visible < end) {
          isInsideEscape = true;
          if (ansiCode !== void 0) {
            ansiCodes.push(ansiCode);
          }
        }
      } else if (isInsideEscape && character === "m") {
        isInsideEscape = false;
        leftEscape = true;
      }
      if (!isInsideEscape && !leftEscape) {
        ++visible;
      }
      if (!astralRegex({exact: true}).test(character) && isFullwidthCodePoint(character.codePointAt())) {
        ++visible;
      }
      if (visible > begin && visible <= end) {
        output += character;
      } else if (visible === begin && !isInsideEscape && ansiCode !== void 0) {
        output = checkAnsi(ansiCodes);
      } else if (visible >= end) {
        output += checkAnsi(ansiCodes, true, ansiCode);
        break;
      }
    }
    return output;
  };
});

// node_modules/.pnpm/cli-truncate@2.1.0/node_modules/cli-truncate/index.js
var require_cli_truncate = __commonJS((exports2, module2) => {
  "use strict";
  var sliceAnsi = require_slice_ansi();
  var stringWidth = require_string_width();
  function getIndexOfNearestSpace(string, index, shouldSearchRight) {
    if (string.charAt(index) === " ") {
      return index;
    }
    for (let i = 1; i <= 3; i++) {
      if (shouldSearchRight) {
        if (string.charAt(index + i) === " ") {
          return index + i;
        }
      } else if (string.charAt(index - i) === " ") {
        return index - i;
      }
    }
    return index;
  }
  module2.exports = (text, columns, options) => {
    options = {
      position: "end",
      preferTruncationOnSpace: false,
      ...options
    };
    const {position, space, preferTruncationOnSpace} = options;
    let ellipsis = "\u2026";
    let ellipsisWidth = 1;
    if (typeof text !== "string") {
      throw new TypeError(`Expected \`input\` to be a string, got ${typeof text}`);
    }
    if (typeof columns !== "number") {
      throw new TypeError(`Expected \`columns\` to be a number, got ${typeof columns}`);
    }
    if (columns < 1) {
      return "";
    }
    if (columns === 1) {
      return ellipsis;
    }
    const length = stringWidth(text);
    if (length <= columns) {
      return text;
    }
    if (position === "start") {
      if (preferTruncationOnSpace) {
        const nearestSpace = getIndexOfNearestSpace(text, length - columns + 1, true);
        return ellipsis + sliceAnsi(text, nearestSpace, length).trim();
      }
      if (space === true) {
        ellipsis += " ";
        ellipsisWidth = 2;
      }
      return ellipsis + sliceAnsi(text, length - columns + ellipsisWidth, length);
    }
    if (position === "middle") {
      if (space === true) {
        ellipsis = " " + ellipsis + " ";
        ellipsisWidth = 3;
      }
      const half = Math.floor(columns / 2);
      if (preferTruncationOnSpace) {
        const spaceNearFirstBreakPoint = getIndexOfNearestSpace(text, half);
        const spaceNearSecondBreakPoint = getIndexOfNearestSpace(text, length - (columns - half) + 1, true);
        return sliceAnsi(text, 0, spaceNearFirstBreakPoint) + ellipsis + sliceAnsi(text, spaceNearSecondBreakPoint, length).trim();
      }
      return sliceAnsi(text, 0, half) + ellipsis + sliceAnsi(text, length - (columns - half) + ellipsisWidth, length);
    }
    if (position === "end") {
      if (preferTruncationOnSpace) {
        const nearestSpace = getIndexOfNearestSpace(text, columns - 1);
        return sliceAnsi(text, 0, nearestSpace) + ellipsis;
      }
      if (space === true) {
        ellipsis = " " + ellipsis;
        ellipsisWidth = 2;
      }
      return sliceAnsi(text, 0, columns - ellipsisWidth) + ellipsis;
    }
    throw new Error(`Expected \`options.position\` to be either \`start\`, \`middle\` or \`end\`, got ${position}`);
  };
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/wrap-text.js
var require_wrap_text = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var wrap_ansi_1 = __importDefault(require_wrap_ansi());
  var cli_truncate_1 = __importDefault(require_cli_truncate());
  var cache = {};
  exports2.default = (text, maxWidth, wrapType) => {
    const cacheKey = text + String(maxWidth) + String(wrapType);
    if (cache[cacheKey]) {
      return cache[cacheKey];
    }
    let wrappedText = text;
    if (wrapType === "wrap") {
      wrappedText = wrap_ansi_1.default(text, maxWidth, {
        trim: false,
        hard: true
      });
    }
    if (wrapType.startsWith("truncate")) {
      let position = "end";
      if (wrapType === "truncate-middle") {
        position = "middle";
      }
      if (wrapType === "truncate-start") {
        position = "start";
      }
      wrappedText = cli_truncate_1.default(text, maxWidth, {position});
    }
    cache[cacheKey] = wrappedText;
    return wrappedText;
  };
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/squash-text-nodes.js
var require_squash_text_nodes = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var squashTextNodes = (node) => {
    let text = "";
    if (node.childNodes.length > 0) {
      for (const childNode of node.childNodes) {
        let nodeText = "";
        if (childNode.nodeName === "#text") {
          nodeText = childNode.nodeValue;
        } else {
          if (childNode.nodeName === "ink-text" || childNode.nodeName === "ink-virtual-text") {
            nodeText = squashTextNodes(childNode);
          }
          if (nodeText.length > 0 && typeof childNode.internal_transform === "function") {
            nodeText = childNode.internal_transform(nodeText);
          }
        }
        text += nodeText;
      }
    }
    return text;
  };
  exports2.default = squashTextNodes;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/dom.js
var require_dom = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.setTextNodeValue = exports2.createTextNode = exports2.setStyle = exports2.setAttribute = exports2.removeChildNode = exports2.insertBeforeNode = exports2.appendChildNode = exports2.createNode = exports2.TEXT_NAME = void 0;
  var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
  var measure_text_1 = __importDefault(require_measure_text());
  var styles_1 = __importDefault(require_styles());
  var wrap_text_1 = __importDefault(require_wrap_text());
  var squash_text_nodes_1 = __importDefault(require_squash_text_nodes());
  exports2.TEXT_NAME = "#text";
  exports2.createNode = (nodeName) => {
    var _a2;
    const node = {
      nodeName,
      style: {},
      attributes: {},
      childNodes: [],
      parentNode: null,
      yogaNode: nodeName === "ink-virtual-text" ? void 0 : yoga_layout_prebuilt_1.default.Node.create()
    };
    if (nodeName === "ink-text") {
      (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.setMeasureFunc(measureTextNode.bind(null, node));
    }
    return node;
  };
  exports2.appendChildNode = (node, childNode) => {
    var _a2;
    if (childNode.parentNode) {
      exports2.removeChildNode(childNode.parentNode, childNode);
    }
    childNode.parentNode = node;
    node.childNodes.push(childNode);
    if (childNode.yogaNode) {
      (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.insertChild(childNode.yogaNode, node.yogaNode.getChildCount());
    }
    if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
      markNodeAsDirty(node);
    }
  };
  exports2.insertBeforeNode = (node, newChildNode, beforeChildNode) => {
    var _a2, _b;
    if (newChildNode.parentNode) {
      exports2.removeChildNode(newChildNode.parentNode, newChildNode);
    }
    newChildNode.parentNode = node;
    const index = node.childNodes.indexOf(beforeChildNode);
    if (index >= 0) {
      node.childNodes.splice(index, 0, newChildNode);
      if (newChildNode.yogaNode) {
        (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.insertChild(newChildNode.yogaNode, index);
      }
      return;
    }
    node.childNodes.push(newChildNode);
    if (newChildNode.yogaNode) {
      (_b = node.yogaNode) === null || _b === void 0 ? void 0 : _b.insertChild(newChildNode.yogaNode, node.yogaNode.getChildCount());
    }
    if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
      markNodeAsDirty(node);
    }
  };
  exports2.removeChildNode = (node, removeNode) => {
    var _a2, _b;
    if (removeNode.yogaNode) {
      (_b = (_a2 = removeNode.parentNode) === null || _a2 === void 0 ? void 0 : _a2.yogaNode) === null || _b === void 0 ? void 0 : _b.removeChild(removeNode.yogaNode);
    }
    removeNode.parentNode = null;
    const index = node.childNodes.indexOf(removeNode);
    if (index >= 0) {
      node.childNodes.splice(index, 1);
    }
    if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
      markNodeAsDirty(node);
    }
  };
  exports2.setAttribute = (node, key, value) => {
    node.attributes[key] = value;
  };
  exports2.setStyle = (node, style) => {
    node.style = style;
    if (node.yogaNode) {
      styles_1.default(node.yogaNode, style);
    }
  };
  exports2.createTextNode = (text) => {
    const node = {
      nodeName: "#text",
      nodeValue: text,
      yogaNode: void 0,
      parentNode: null,
      style: {}
    };
    exports2.setTextNodeValue(node, text);
    return node;
  };
  var measureTextNode = function(node, width) {
    var _a2, _b;
    const text = node.nodeName === "#text" ? node.nodeValue : squash_text_nodes_1.default(node);
    const dimensions = measure_text_1.default(text);
    if (dimensions.width <= width) {
      return dimensions;
    }
    if (dimensions.width >= 1 && width > 0 && width < 1) {
      return dimensions;
    }
    const textWrap = (_b = (_a2 = node.style) === null || _a2 === void 0 ? void 0 : _a2.textWrap) !== null && _b !== void 0 ? _b : "wrap";
    const wrappedText = wrap_text_1.default(text, width, textWrap);
    return measure_text_1.default(wrappedText);
  };
  var findClosestYogaNode = (node) => {
    var _a2;
    if (!node || !node.parentNode) {
      return void 0;
    }
    return (_a2 = node.yogaNode) !== null && _a2 !== void 0 ? _a2 : findClosestYogaNode(node.parentNode);
  };
  var markNodeAsDirty = (node) => {
    const yogaNode = findClosestYogaNode(node);
    yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.markDirty();
  };
  exports2.setTextNodeValue = (node, text) => {
    if (typeof text !== "string") {
      text = String(text);
    }
    node.nodeValue = text;
    markNodeAsDirty(node);
  };
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/constants.js
var require_constants2 = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = {
    BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"],
    GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
    kStatusCode: Symbol("status-code"),
    kWebSocket: Symbol("websocket"),
    EMPTY_BUFFER: Buffer.alloc(0),
    NOOP: () => {
    }
  };
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/buffer-util.js
var require_buffer_util = __commonJS((exports2, module2) => {
  "use strict";
  var {EMPTY_BUFFER} = require_constants2();
  function concat(list, totalLength) {
    if (list.length === 0)
      return EMPTY_BUFFER;
    if (list.length === 1)
      return list[0];
    const target = Buffer.allocUnsafe(totalLength);
    let offset = 0;
    for (let i = 0; i < list.length; i++) {
      const buf = list[i];
      target.set(buf, offset);
      offset += buf.length;
    }
    if (offset < totalLength)
      return target.slice(0, offset);
    return target;
  }
  function _mask(source, mask, output, offset, length) {
    for (let i = 0; i < length; i++) {
      output[offset + i] = source[i] ^ mask[i & 3];
    }
  }
  function _unmask(buffer, mask) {
    const length = buffer.length;
    for (let i = 0; i < length; i++) {
      buffer[i] ^= mask[i & 3];
    }
  }
  function toArrayBuffer(buf) {
    if (buf.byteLength === buf.buffer.byteLength) {
      return buf.buffer;
    }
    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  }
  function toBuffer(data) {
    toBuffer.readOnly = true;
    if (Buffer.isBuffer(data))
      return data;
    let buf;
    if (data instanceof ArrayBuffer) {
      buf = Buffer.from(data);
    } else if (ArrayBuffer.isView(data)) {
      buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
    } else {
      buf = Buffer.from(data);
      toBuffer.readOnly = false;
    }
    return buf;
  }
  try {
    const bufferUtil = require("bufferutil");
    const bu = bufferUtil.BufferUtil || bufferUtil;
    module2.exports = {
      concat,
      mask(source, mask, output, offset, length) {
        if (length < 48)
          _mask(source, mask, output, offset, length);
        else
          bu.mask(source, mask, output, offset, length);
      },
      toArrayBuffer,
      toBuffer,
      unmask(buffer, mask) {
        if (buffer.length < 32)
          _unmask(buffer, mask);
        else
          bu.unmask(buffer, mask);
      }
    };
  } catch (e) {
    module2.exports = {
      concat,
      mask: _mask,
      toArrayBuffer,
      toBuffer,
      unmask: _unmask
    };
  }
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/limiter.js
var require_limiter = __commonJS((exports2, module2) => {
  "use strict";
  var kDone = Symbol("kDone");
  var kRun = Symbol("kRun");
  var Limiter = class {
    constructor(concurrency) {
      this[kDone] = () => {
        this.pending--;
        this[kRun]();
      };
      this.concurrency = concurrency || Infinity;
      this.jobs = [];
      this.pending = 0;
    }
    add(job) {
      this.jobs.push(job);
      this[kRun]();
    }
    [kRun]() {
      if (this.pending === this.concurrency)
        return;
      if (this.jobs.length) {
        const job = this.jobs.shift();
        this.pending++;
        job(this[kDone]);
      }
    }
  };
  module2.exports = Limiter;
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/permessage-deflate.js
var require_permessage_deflate = __commonJS((exports2, module2) => {
  "use strict";
  var zlib = require("zlib");
  var bufferUtil = require_buffer_util();
  var Limiter = require_limiter();
  var {kStatusCode, NOOP} = require_constants2();
  var TRAILER = Buffer.from([0, 0, 255, 255]);
  var kPerMessageDeflate = Symbol("permessage-deflate");
  var kTotalLength = Symbol("total-length");
  var kCallback = Symbol("callback");
  var kBuffers = Symbol("buffers");
  var kError = Symbol("error");
  var zlibLimiter;
  var PerMessageDeflate = class {
    constructor(options, isServer, maxPayload) {
      this._maxPayload = maxPayload | 0;
      this._options = options || {};
      this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024;
      this._isServer = !!isServer;
      this._deflate = null;
      this._inflate = null;
      this.params = null;
      if (!zlibLimiter) {
        const concurrency = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
        zlibLimiter = new Limiter(concurrency);
      }
    }
    static get extensionName() {
      return "permessage-deflate";
    }
    offer() {
      const params = {};
      if (this._options.serverNoContextTakeover) {
        params.server_no_context_takeover = true;
      }
      if (this._options.clientNoContextTakeover) {
        params.client_no_context_takeover = true;
      }
      if (this._options.serverMaxWindowBits) {
        params.server_max_window_bits = this._options.serverMaxWindowBits;
      }
      if (this._options.clientMaxWindowBits) {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      } else if (this._options.clientMaxWindowBits == null) {
        params.client_max_window_bits = true;
      }
      return params;
    }
    accept(configurations) {
      configurations = this.normalizeParams(configurations);
      this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
      return this.params;
    }
    cleanup() {
      if (this._inflate) {
        this._inflate.close();
        this._inflate = null;
      }
      if (this._deflate) {
        const callback = this._deflate[kCallback];
        this._deflate.close();
        this._deflate = null;
        if (callback) {
          callback(new Error("The deflate stream was closed while data was being processed"));
        }
      }
    }
    acceptAsServer(offers) {
      const opts = this._options;
      const accepted = offers.find((params) => {
        if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === "number" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === "number" && !params.client_max_window_bits) {
          return false;
        }
        return true;
      });
      if (!accepted) {
        throw new Error("None of the extension offers can be accepted");
      }
      if (opts.serverNoContextTakeover) {
        accepted.server_no_context_takeover = true;
      }
      if (opts.clientNoContextTakeover) {
        accepted.client_no_context_takeover = true;
      }
      if (typeof opts.serverMaxWindowBits === "number") {
        accepted.server_max_window_bits = opts.serverMaxWindowBits;
      }
      if (typeof opts.clientMaxWindowBits === "number") {
        accepted.client_max_window_bits = opts.clientMaxWindowBits;
      } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
        delete accepted.client_max_window_bits;
      }
      return accepted;
    }
    acceptAsClient(response) {
      const params = response[0];
      if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
        throw new Error('Unexpected parameter "client_no_context_takeover"');
      }
      if (!params.client_max_window_bits) {
        if (typeof this._options.clientMaxWindowBits === "number") {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        }
      } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === "number" && params.client_max_window_bits > this._options.clientMaxWindowBits) {
        throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
      }
      return params;
    }
    normalizeParams(configurations) {
      configurations.forEach((params) => {
        Object.keys(params).forEach((key) => {
          let value = params[key];
          if (value.length > 1) {
            throw new Error(`Parameter "${key}" must have only a single value`);
          }
          value = value[0];
          if (key === "client_max_window_bits") {
            if (value !== true) {
              const num = +value;
              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
              }
              value = num;
            } else if (!this._isServer) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
          } else if (key === "server_max_window_bits") {
            const num = +value;
            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
            value = num;
          } else if (key === "client_no_context_takeover" || key === "server_no_context_takeover") {
            if (value !== true) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
          } else {
            throw new Error(`Unknown parameter "${key}"`);
          }
          params[key] = value;
        });
      });
      return configurations;
    }
    decompress(data, fin, callback) {
      zlibLimiter.add((done) => {
        this._decompress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }
    compress(data, fin, callback) {
      zlibLimiter.add((done) => {
        this._compress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }
    _decompress(data, fin, callback) {
      const endpoint = this._isServer ? "client" : "server";
      if (!this._inflate) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
        this._inflate = zlib.createInflateRaw({
          ...this._options.zlibInflateOptions,
          windowBits
        });
        this._inflate[kPerMessageDeflate] = this;
        this._inflate[kTotalLength] = 0;
        this._inflate[kBuffers] = [];
        this._inflate.on("error", inflateOnError);
        this._inflate.on("data", inflateOnData);
      }
      this._inflate[kCallback] = callback;
      this._inflate.write(data);
      if (fin)
        this._inflate.write(TRAILER);
      this._inflate.flush(() => {
        const err = this._inflate[kError];
        if (err) {
          this._inflate.close();
          this._inflate = null;
          callback(err);
          return;
        }
        const data2 = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);
        this._inflate[kTotalLength] = 0;
        this._inflate[kBuffers] = [];
        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._inflate.reset();
        }
        callback(null, data2);
      });
    }
    _compress(data, fin, callback) {
      const endpoint = this._isServer ? "server" : "client";
      if (!this._deflate) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
        this._deflate = zlib.createDeflateRaw({
          ...this._options.zlibDeflateOptions,
          windowBits
        });
        this._deflate[kTotalLength] = 0;
        this._deflate[kBuffers] = [];
        this._deflate.on("error", NOOP);
        this._deflate.on("data", deflateOnData);
      }
      this._deflate[kCallback] = callback;
      this._deflate.write(data);
      this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
        if (!this._deflate) {
          return;
        }
        let data2 = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);
        if (fin)
          data2 = data2.slice(0, data2.length - 4);
        this._deflate[kCallback] = null;
        this._deflate[kTotalLength] = 0;
        this._deflate[kBuffers] = [];
        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._deflate.reset();
        }
        callback(null, data2);
      });
    }
  };
  module2.exports = PerMessageDeflate;
  function deflateOnData(chunk) {
    this[kBuffers].push(chunk);
    this[kTotalLength] += chunk.length;
  }
  function inflateOnData(chunk) {
    this[kTotalLength] += chunk.length;
    if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
      this[kBuffers].push(chunk);
      return;
    }
    this[kError] = new RangeError("Max payload size exceeded");
    this[kError][kStatusCode] = 1009;
    this.removeListener("data", inflateOnData);
    this.reset();
  }
  function inflateOnError(err) {
    this[kPerMessageDeflate]._inflate = null;
    err[kStatusCode] = 1007;
    this[kCallback](err);
  }
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/validation.js
var require_validation = __commonJS((exports2) => {
  "use strict";
  try {
    const isValidUTF8 = require("utf-8-validate");
    exports2.isValidUTF8 = typeof isValidUTF8 === "object" ? isValidUTF8.Validation.isValidUTF8 : isValidUTF8;
  } catch (e) {
    exports2.isValidUTF8 = () => true;
  }
  exports2.isValidStatusCode = (code) => {
    return code >= 1e3 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3e3 && code <= 4999;
  };
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/receiver.js
var require_receiver = __commonJS((exports2, module2) => {
  "use strict";
  var {Writable} = require("stream");
  var PerMessageDeflate = require_permessage_deflate();
  var {
    BINARY_TYPES,
    EMPTY_BUFFER,
    kStatusCode,
    kWebSocket
  } = require_constants2();
  var {concat, toArrayBuffer, unmask} = require_buffer_util();
  var {isValidStatusCode, isValidUTF8} = require_validation();
  var GET_INFO = 0;
  var GET_PAYLOAD_LENGTH_16 = 1;
  var GET_PAYLOAD_LENGTH_64 = 2;
  var GET_MASK = 3;
  var GET_DATA = 4;
  var INFLATING = 5;
  var Receiver = class extends Writable {
    constructor(binaryType, extensions, isServer, maxPayload) {
      super();
      this._binaryType = binaryType || BINARY_TYPES[0];
      this[kWebSocket] = void 0;
      this._extensions = extensions || {};
      this._isServer = !!isServer;
      this._maxPayload = maxPayload | 0;
      this._bufferedBytes = 0;
      this._buffers = [];
      this._compressed = false;
      this._payloadLength = 0;
      this._mask = void 0;
      this._fragmented = 0;
      this._masked = false;
      this._fin = false;
      this._opcode = 0;
      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragments = [];
      this._state = GET_INFO;
      this._loop = false;
    }
    _write(chunk, encoding, cb) {
      if (this._opcode === 8 && this._state == GET_INFO)
        return cb();
      this._bufferedBytes += chunk.length;
      this._buffers.push(chunk);
      this.startLoop(cb);
    }
    consume(n) {
      this._bufferedBytes -= n;
      if (n === this._buffers[0].length)
        return this._buffers.shift();
      if (n < this._buffers[0].length) {
        const buf = this._buffers[0];
        this._buffers[0] = buf.slice(n);
        return buf.slice(0, n);
      }
      const dst = Buffer.allocUnsafe(n);
      do {
        const buf = this._buffers[0];
        const offset = dst.length - n;
        if (n >= buf.length) {
          dst.set(this._buffers.shift(), offset);
        } else {
          dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
          this._buffers[0] = buf.slice(n);
        }
        n -= buf.length;
      } while (n > 0);
      return dst;
    }
    startLoop(cb) {
      let err;
      this._loop = true;
      do {
        switch (this._state) {
          case GET_INFO:
            err = this.getInfo();
            break;
          case GET_PAYLOAD_LENGTH_16:
            err = this.getPayloadLength16();
            break;
          case GET_PAYLOAD_LENGTH_64:
            err = this.getPayloadLength64();
            break;
          case GET_MASK:
            this.getMask();
            break;
          case GET_DATA:
            err = this.getData(cb);
            break;
          default:
            this._loop = false;
            return;
        }
      } while (this._loop);
      cb(err);
    }
    getInfo() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }
      const buf = this.consume(2);
      if ((buf[0] & 48) !== 0) {
        this._loop = false;
        return error(RangeError, "RSV2 and RSV3 must be clear", true, 1002);
      }
      const compressed = (buf[0] & 64) === 64;
      if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
        this._loop = false;
        return error(RangeError, "RSV1 must be clear", true, 1002);
      }
      this._fin = (buf[0] & 128) === 128;
      this._opcode = buf[0] & 15;
      this._payloadLength = buf[1] & 127;
      if (this._opcode === 0) {
        if (compressed) {
          this._loop = false;
          return error(RangeError, "RSV1 must be clear", true, 1002);
        }
        if (!this._fragmented) {
          this._loop = false;
          return error(RangeError, "invalid opcode 0", true, 1002);
        }
        this._opcode = this._fragmented;
      } else if (this._opcode === 1 || this._opcode === 2) {
        if (this._fragmented) {
          this._loop = false;
          return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
        }
        this._compressed = compressed;
      } else if (this._opcode > 7 && this._opcode < 11) {
        if (!this._fin) {
          this._loop = false;
          return error(RangeError, "FIN must be set", true, 1002);
        }
        if (compressed) {
          this._loop = false;
          return error(RangeError, "RSV1 must be clear", true, 1002);
        }
        if (this._payloadLength > 125) {
          this._loop = false;
          return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002);
        }
      } else {
        this._loop = false;
        return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
      }
      if (!this._fin && !this._fragmented)
        this._fragmented = this._opcode;
      this._masked = (buf[1] & 128) === 128;
      if (this._isServer) {
        if (!this._masked) {
          this._loop = false;
          return error(RangeError, "MASK must be set", true, 1002);
        }
      } else if (this._masked) {
        this._loop = false;
        return error(RangeError, "MASK must be clear", true, 1002);
      }
      if (this._payloadLength === 126)
        this._state = GET_PAYLOAD_LENGTH_16;
      else if (this._payloadLength === 127)
        this._state = GET_PAYLOAD_LENGTH_64;
      else
        return this.haveLength();
    }
    getPayloadLength16() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }
      this._payloadLength = this.consume(2).readUInt16BE(0);
      return this.haveLength();
    }
    getPayloadLength64() {
      if (this._bufferedBytes < 8) {
        this._loop = false;
        return;
      }
      const buf = this.consume(8);
      const num = buf.readUInt32BE(0);
      if (num > Math.pow(2, 53 - 32) - 1) {
        this._loop = false;
        return error(RangeError, "Unsupported WebSocket frame: payload length > 2^53 - 1", false, 1009);
      }
      this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
      return this.haveLength();
    }
    haveLength() {
      if (this._payloadLength && this._opcode < 8) {
        this._totalPayloadLength += this._payloadLength;
        if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
          this._loop = false;
          return error(RangeError, "Max payload size exceeded", false, 1009);
        }
      }
      if (this._masked)
        this._state = GET_MASK;
      else
        this._state = GET_DATA;
    }
    getMask() {
      if (this._bufferedBytes < 4) {
        this._loop = false;
        return;
      }
      this._mask = this.consume(4);
      this._state = GET_DATA;
    }
    getData(cb) {
      let data = EMPTY_BUFFER;
      if (this._payloadLength) {
        if (this._bufferedBytes < this._payloadLength) {
          this._loop = false;
          return;
        }
        data = this.consume(this._payloadLength);
        if (this._masked)
          unmask(data, this._mask);
      }
      if (this._opcode > 7)
        return this.controlMessage(data);
      if (this._compressed) {
        this._state = INFLATING;
        this.decompress(data, cb);
        return;
      }
      if (data.length) {
        this._messageLength = this._totalPayloadLength;
        this._fragments.push(data);
      }
      return this.dataMessage();
    }
    decompress(data, cb) {
      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
      perMessageDeflate.decompress(data, this._fin, (err, buf) => {
        if (err)
          return cb(err);
        if (buf.length) {
          this._messageLength += buf.length;
          if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
            return cb(error(RangeError, "Max payload size exceeded", false, 1009));
          }
          this._fragments.push(buf);
        }
        const er = this.dataMessage();
        if (er)
          return cb(er);
        this.startLoop(cb);
      });
    }
    dataMessage() {
      if (this._fin) {
        const messageLength = this._messageLength;
        const fragments = this._fragments;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragmented = 0;
        this._fragments = [];
        if (this._opcode === 2) {
          let data;
          if (this._binaryType === "nodebuffer") {
            data = concat(fragments, messageLength);
          } else if (this._binaryType === "arraybuffer") {
            data = toArrayBuffer(concat(fragments, messageLength));
          } else {
            data = fragments;
          }
          this.emit("message", data);
        } else {
          const buf = concat(fragments, messageLength);
          if (!isValidUTF8(buf)) {
            this._loop = false;
            return error(Error, "invalid UTF-8 sequence", true, 1007);
          }
          this.emit("message", buf.toString());
        }
      }
      this._state = GET_INFO;
    }
    controlMessage(data) {
      if (this._opcode === 8) {
        this._loop = false;
        if (data.length === 0) {
          this.emit("conclude", 1005, "");
          this.end();
        } else if (data.length === 1) {
          return error(RangeError, "invalid payload length 1", true, 1002);
        } else {
          const code = data.readUInt16BE(0);
          if (!isValidStatusCode(code)) {
            return error(RangeError, `invalid status code ${code}`, true, 1002);
          }
          const buf = data.slice(2);
          if (!isValidUTF8(buf)) {
            return error(Error, "invalid UTF-8 sequence", true, 1007);
          }
          this.emit("conclude", code, buf.toString());
          this.end();
        }
      } else if (this._opcode === 9) {
        this.emit("ping", data);
      } else {
        this.emit("pong", data);
      }
      this._state = GET_INFO;
    }
  };
  module2.exports = Receiver;
  function error(ErrorCtor, message, prefix, statusCode) {
    const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);
    Error.captureStackTrace(err, error);
    err[kStatusCode] = statusCode;
    return err;
  }
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/sender.js
var require_sender = __commonJS((exports2, module2) => {
  "use strict";
  var {randomFillSync} = require("crypto");
  var PerMessageDeflate = require_permessage_deflate();
  var {EMPTY_BUFFER} = require_constants2();
  var {isValidStatusCode} = require_validation();
  var {mask: applyMask, toBuffer} = require_buffer_util();
  var mask = Buffer.alloc(4);
  var Sender = class {
    constructor(socket, extensions) {
      this._extensions = extensions || {};
      this._socket = socket;
      this._firstFragment = true;
      this._compress = false;
      this._bufferedBytes = 0;
      this._deflating = false;
      this._queue = [];
    }
    static frame(data, options) {
      const merge = options.mask && options.readOnly;
      let offset = options.mask ? 6 : 2;
      let payloadLength = data.length;
      if (data.length >= 65536) {
        offset += 8;
        payloadLength = 127;
      } else if (data.length > 125) {
        offset += 2;
        payloadLength = 126;
      }
      const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);
      target[0] = options.fin ? options.opcode | 128 : options.opcode;
      if (options.rsv1)
        target[0] |= 64;
      target[1] = payloadLength;
      if (payloadLength === 126) {
        target.writeUInt16BE(data.length, 2);
      } else if (payloadLength === 127) {
        target.writeUInt32BE(0, 2);
        target.writeUInt32BE(data.length, 6);
      }
      if (!options.mask)
        return [target, data];
      randomFillSync(mask, 0, 4);
      target[1] |= 128;
      target[offset - 4] = mask[0];
      target[offset - 3] = mask[1];
      target[offset - 2] = mask[2];
      target[offset - 1] = mask[3];
      if (merge) {
        applyMask(data, mask, target, offset, data.length);
        return [target];
      }
      applyMask(data, mask, data, 0, data.length);
      return [target, data];
    }
    close(code, data, mask2, cb) {
      let buf;
      if (code === void 0) {
        buf = EMPTY_BUFFER;
      } else if (typeof code !== "number" || !isValidStatusCode(code)) {
        throw new TypeError("First argument must be a valid error code number");
      } else if (data === void 0 || data === "") {
        buf = Buffer.allocUnsafe(2);
        buf.writeUInt16BE(code, 0);
      } else {
        const length = Buffer.byteLength(data);
        if (length > 123) {
          throw new RangeError("The message must not be greater than 123 bytes");
        }
        buf = Buffer.allocUnsafe(2 + length);
        buf.writeUInt16BE(code, 0);
        buf.write(data, 2);
      }
      if (this._deflating) {
        this.enqueue([this.doClose, buf, mask2, cb]);
      } else {
        this.doClose(buf, mask2, cb);
      }
    }
    doClose(data, mask2, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 8,
        mask: mask2,
        readOnly: false
      }), cb);
    }
    ping(data, mask2, cb) {
      const buf = toBuffer(data);
      if (buf.length > 125) {
        throw new RangeError("The data size must not be greater than 125 bytes");
      }
      if (this._deflating) {
        this.enqueue([this.doPing, buf, mask2, toBuffer.readOnly, cb]);
      } else {
        this.doPing(buf, mask2, toBuffer.readOnly, cb);
      }
    }
    doPing(data, mask2, readOnly, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 9,
        mask: mask2,
        readOnly
      }), cb);
    }
    pong(data, mask2, cb) {
      const buf = toBuffer(data);
      if (buf.length > 125) {
        throw new RangeError("The data size must not be greater than 125 bytes");
      }
      if (this._deflating) {
        this.enqueue([this.doPong, buf, mask2, toBuffer.readOnly, cb]);
      } else {
        this.doPong(buf, mask2, toBuffer.readOnly, cb);
      }
    }
    doPong(data, mask2, readOnly, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 10,
        mask: mask2,
        readOnly
      }), cb);
    }
    send(data, options, cb) {
      const buf = toBuffer(data);
      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
      let opcode = options.binary ? 2 : 1;
      let rsv1 = options.compress;
      if (this._firstFragment) {
        this._firstFragment = false;
        if (rsv1 && perMessageDeflate) {
          rsv1 = buf.length >= perMessageDeflate._threshold;
        }
        this._compress = rsv1;
      } else {
        rsv1 = false;
        opcode = 0;
      }
      if (options.fin)
        this._firstFragment = true;
      if (perMessageDeflate) {
        const opts = {
          fin: options.fin,
          rsv1,
          opcode,
          mask: options.mask,
          readOnly: toBuffer.readOnly
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, buf, this._compress, opts, cb]);
        } else {
          this.dispatch(buf, this._compress, opts, cb);
        }
      } else {
        this.sendFrame(Sender.frame(buf, {
          fin: options.fin,
          rsv1: false,
          opcode,
          mask: options.mask,
          readOnly: toBuffer.readOnly
        }), cb);
      }
    }
    dispatch(data, compress, options, cb) {
      if (!compress) {
        this.sendFrame(Sender.frame(data, options), cb);
        return;
      }
      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
      this._bufferedBytes += data.length;
      this._deflating = true;
      perMessageDeflate.compress(data, options.fin, (_, buf) => {
        if (this._socket.destroyed) {
          const err = new Error("The socket was closed while data was being compressed");
          if (typeof cb === "function")
            cb(err);
          for (let i = 0; i < this._queue.length; i++) {
            const callback = this._queue[i][4];
            if (typeof callback === "function")
              callback(err);
          }
          return;
        }
        this._bufferedBytes -= data.length;
        this._deflating = false;
        options.readOnly = false;
        this.sendFrame(Sender.frame(buf, options), cb);
        this.dequeue();
      });
    }
    dequeue() {
      while (!this._deflating && this._queue.length) {
        const params = this._queue.shift();
        this._bufferedBytes -= params[1].length;
        Reflect.apply(params[0], this, params.slice(1));
      }
    }
    enqueue(params) {
      this._bufferedBytes += params[1].length;
      this._queue.push(params);
    }
    sendFrame(list, cb) {
      if (list.length === 2) {
        this._socket.cork();
        this._socket.write(list[0]);
        this._socket.write(list[1], cb);
        this._socket.uncork();
      } else {
        this._socket.write(list[0], cb);
      }
    }
  };
  module2.exports = Sender;
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/event-target.js
var require_event_target = __commonJS((exports2, module2) => {
  "use strict";
  var Event = class {
    constructor(type, target) {
      this.target = target;
      this.type = type;
    }
  };
  var MessageEvent = class extends Event {
    constructor(data, target) {
      super("message", target);
      this.data = data;
    }
  };
  var CloseEvent = class extends Event {
    constructor(code, reason, target) {
      super("close", target);
      this.wasClean = target._closeFrameReceived && target._closeFrameSent;
      this.reason = reason;
      this.code = code;
    }
  };
  var OpenEvent = class extends Event {
    constructor(target) {
      super("open", target);
    }
  };
  var ErrorEvent = class extends Event {
    constructor(error, target) {
      super("error", target);
      this.message = error.message;
      this.error = error;
    }
  };
  var EventTarget = {
    addEventListener(type, listener, options) {
      if (typeof listener !== "function")
        return;
      function onMessage(data) {
        listener.call(this, new MessageEvent(data, this));
      }
      function onClose(code, message) {
        listener.call(this, new CloseEvent(code, message, this));
      }
      function onError(error) {
        listener.call(this, new ErrorEvent(error, this));
      }
      function onOpen() {
        listener.call(this, new OpenEvent(this));
      }
      const method = options && options.once ? "once" : "on";
      if (type === "message") {
        onMessage._listener = listener;
        this[method](type, onMessage);
      } else if (type === "close") {
        onClose._listener = listener;
        this[method](type, onClose);
      } else if (type === "error") {
        onError._listener = listener;
        this[method](type, onError);
      } else if (type === "open") {
        onOpen._listener = listener;
        this[method](type, onOpen);
      } else {
        this[method](type, listener);
      }
    },
    removeEventListener(type, listener) {
      const listeners = this.listeners(type);
      for (let i = 0; i < listeners.length; i++) {
        if (listeners[i] === listener || listeners[i]._listener === listener) {
          this.removeListener(type, listeners[i]);
        }
      }
    }
  };
  module2.exports = EventTarget;
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/extension.js
var require_extension = __commonJS((exports2, module2) => {
  "use strict";
  var tokenChars = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    1,
    0
  ];
  function push(dest, name, elem) {
    if (dest[name] === void 0)
      dest[name] = [elem];
    else
      dest[name].push(elem);
  }
  function parse2(header) {
    const offers = Object.create(null);
    if (header === void 0 || header === "")
      return offers;
    let params = Object.create(null);
    let mustUnescape = false;
    let isEscaping = false;
    let inQuotes = false;
    let extensionName;
    let paramName;
    let start = -1;
    let end = -1;
    let i = 0;
    for (; i < header.length; i++) {
      const code = header.charCodeAt(i);
      if (extensionName === void 0) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1)
            start = i;
        } else if (code === 32 || code === 9) {
          if (end === -1 && start !== -1)
            end = i;
        } else if (code === 59 || code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (end === -1)
            end = i;
          const name = header.slice(start, end);
          if (code === 44) {
            push(offers, name, params);
            params = Object.create(null);
          } else {
            extensionName = name;
          }
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (paramName === void 0) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1)
            start = i;
        } else if (code === 32 || code === 9) {
          if (end === -1 && start !== -1)
            end = i;
        } else if (code === 59 || code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (end === -1)
            end = i;
          push(params, header.slice(start, end), true);
          if (code === 44) {
            push(offers, extensionName, params);
            params = Object.create(null);
            extensionName = void 0;
          }
          start = end = -1;
        } else if (code === 61 && start !== -1 && end === -1) {
          paramName = header.slice(start, i);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else {
        if (isEscaping) {
          if (tokenChars[code] !== 1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (start === -1)
            start = i;
          else if (!mustUnescape)
            mustUnescape = true;
          isEscaping = false;
        } else if (inQuotes) {
          if (tokenChars[code] === 1) {
            if (start === -1)
              start = i;
          } else if (code === 34 && start !== -1) {
            inQuotes = false;
            end = i;
          } else if (code === 92) {
            isEscaping = true;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (code === 34 && header.charCodeAt(i - 1) === 61) {
          inQuotes = true;
        } else if (end === -1 && tokenChars[code] === 1) {
          if (start === -1)
            start = i;
        } else if (start !== -1 && (code === 32 || code === 9)) {
          if (end === -1)
            end = i;
        } else if (code === 59 || code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (end === -1)
            end = i;
          let value = header.slice(start, end);
          if (mustUnescape) {
            value = value.replace(/\\/g, "");
            mustUnescape = false;
          }
          push(params, paramName, value);
          if (code === 44) {
            push(offers, extensionName, params);
            params = Object.create(null);
            extensionName = void 0;
          }
          paramName = void 0;
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      }
    }
    if (start === -1 || inQuotes) {
      throw new SyntaxError("Unexpected end of input");
    }
    if (end === -1)
      end = i;
    const token = header.slice(start, end);
    if (extensionName === void 0) {
      push(offers, token, params);
    } else {
      if (paramName === void 0) {
        push(params, token, true);
      } else if (mustUnescape) {
        push(params, paramName, token.replace(/\\/g, ""));
      } else {
        push(params, paramName, token);
      }
      push(offers, extensionName, params);
    }
    return offers;
  }
  function format(extensions) {
    return Object.keys(extensions).map((extension) => {
      let configurations = extensions[extension];
      if (!Array.isArray(configurations))
        configurations = [configurations];
      return configurations.map((params) => {
        return [extension].concat(Object.keys(params).map((k) => {
          let values = params[k];
          if (!Array.isArray(values))
            values = [values];
          return values.map((v) => v === true ? k : `${k}=${v}`).join("; ");
        })).join("; ");
      }).join(", ");
    }).join(", ");
  }
  module2.exports = {format, parse: parse2};
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/websocket.js
var require_websocket = __commonJS((exports2, module2) => {
  "use strict";
  var EventEmitter = require("events");
  var https = require("https");
  var http = require("http");
  var net = require("net");
  var tls = require("tls");
  var {randomBytes, createHash} = require("crypto");
  var {URL: URL2} = require("url");
  var PerMessageDeflate = require_permessage_deflate();
  var Receiver = require_receiver();
  var Sender = require_sender();
  var {
    BINARY_TYPES,
    EMPTY_BUFFER,
    GUID,
    kStatusCode,
    kWebSocket,
    NOOP
  } = require_constants2();
  var {addEventListener, removeEventListener} = require_event_target();
  var {format, parse: parse2} = require_extension();
  var {toBuffer} = require_buffer_util();
  var readyStates = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
  var protocolVersions = [8, 13];
  var closeTimeout = 30 * 1e3;
  var WebSocket = class extends EventEmitter {
    constructor(address, protocols, options) {
      super();
      this._binaryType = BINARY_TYPES[0];
      this._closeCode = 1006;
      this._closeFrameReceived = false;
      this._closeFrameSent = false;
      this._closeMessage = "";
      this._closeTimer = null;
      this._extensions = {};
      this._protocol = "";
      this._readyState = WebSocket.CONNECTING;
      this._receiver = null;
      this._sender = null;
      this._socket = null;
      if (address !== null) {
        this._bufferedAmount = 0;
        this._isServer = false;
        this._redirects = 0;
        if (Array.isArray(protocols)) {
          protocols = protocols.join(", ");
        } else if (typeof protocols === "object" && protocols !== null) {
          options = protocols;
          protocols = void 0;
        }
        initAsClient(this, address, protocols, options);
      } else {
        this._isServer = true;
      }
    }
    get binaryType() {
      return this._binaryType;
    }
    set binaryType(type) {
      if (!BINARY_TYPES.includes(type))
        return;
      this._binaryType = type;
      if (this._receiver)
        this._receiver._binaryType = type;
    }
    get bufferedAmount() {
      if (!this._socket)
        return this._bufferedAmount;
      return this._socket._writableState.length + this._sender._bufferedBytes;
    }
    get extensions() {
      return Object.keys(this._extensions).join();
    }
    get protocol() {
      return this._protocol;
    }
    get readyState() {
      return this._readyState;
    }
    get url() {
      return this._url;
    }
    setSocket(socket, head, maxPayload) {
      const receiver = new Receiver(this.binaryType, this._extensions, this._isServer, maxPayload);
      this._sender = new Sender(socket, this._extensions);
      this._receiver = receiver;
      this._socket = socket;
      receiver[kWebSocket] = this;
      socket[kWebSocket] = this;
      receiver.on("conclude", receiverOnConclude);
      receiver.on("drain", receiverOnDrain);
      receiver.on("error", receiverOnError);
      receiver.on("message", receiverOnMessage);
      receiver.on("ping", receiverOnPing);
      receiver.on("pong", receiverOnPong);
      socket.setTimeout(0);
      socket.setNoDelay();
      if (head.length > 0)
        socket.unshift(head);
      socket.on("close", socketOnClose);
      socket.on("data", socketOnData);
      socket.on("end", socketOnEnd);
      socket.on("error", socketOnError);
      this._readyState = WebSocket.OPEN;
      this.emit("open");
    }
    emitClose() {
      if (!this._socket) {
        this._readyState = WebSocket.CLOSED;
        this.emit("close", this._closeCode, this._closeMessage);
        return;
      }
      if (this._extensions[PerMessageDeflate.extensionName]) {
        this._extensions[PerMessageDeflate.extensionName].cleanup();
      }
      this._receiver.removeAllListeners();
      this._readyState = WebSocket.CLOSED;
      this.emit("close", this._closeCode, this._closeMessage);
    }
    close(code, data) {
      if (this.readyState === WebSocket.CLOSED)
        return;
      if (this.readyState === WebSocket.CONNECTING) {
        const msg = "WebSocket was closed before the connection was established";
        return abortHandshake(this, this._req, msg);
      }
      if (this.readyState === WebSocket.CLOSING) {
        if (this._closeFrameSent && this._closeFrameReceived)
          this._socket.end();
        return;
      }
      this._readyState = WebSocket.CLOSING;
      this._sender.close(code, data, !this._isServer, (err) => {
        if (err)
          return;
        this._closeFrameSent = true;
        if (this._closeFrameReceived)
          this._socket.end();
      });
      this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);
    }
    ping(data, mask, cb) {
      if (this.readyState === WebSocket.CONNECTING) {
        throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
      }
      if (typeof data === "function") {
        cb = data;
        data = mask = void 0;
      } else if (typeof mask === "function") {
        cb = mask;
        mask = void 0;
      }
      if (typeof data === "number")
        data = data.toString();
      if (this.readyState !== WebSocket.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }
      if (mask === void 0)
        mask = !this._isServer;
      this._sender.ping(data || EMPTY_BUFFER, mask, cb);
    }
    pong(data, mask, cb) {
      if (this.readyState === WebSocket.CONNECTING) {
        throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
      }
      if (typeof data === "function") {
        cb = data;
        data = mask = void 0;
      } else if (typeof mask === "function") {
        cb = mask;
        mask = void 0;
      }
      if (typeof data === "number")
        data = data.toString();
      if (this.readyState !== WebSocket.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }
      if (mask === void 0)
        mask = !this._isServer;
      this._sender.pong(data || EMPTY_BUFFER, mask, cb);
    }
    send(data, options, cb) {
      if (this.readyState === WebSocket.CONNECTING) {
        throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
      }
      if (typeof options === "function") {
        cb = options;
        options = {};
      }
      if (typeof data === "number")
        data = data.toString();
      if (this.readyState !== WebSocket.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }
      const opts = {
        binary: typeof data !== "string",
        mask: !this._isServer,
        compress: true,
        fin: true,
        ...options
      };
      if (!this._extensions[PerMessageDeflate.extensionName]) {
        opts.compress = false;
      }
      this._sender.send(data || EMPTY_BUFFER, opts, cb);
    }
    terminate() {
      if (this.readyState === WebSocket.CLOSED)
        return;
      if (this.readyState === WebSocket.CONNECTING) {
        const msg = "WebSocket was closed before the connection was established";
        return abortHandshake(this, this._req, msg);
      }
      if (this._socket) {
        this._readyState = WebSocket.CLOSING;
        this._socket.destroy();
      }
    }
  };
  readyStates.forEach((readyState, i) => {
    const descriptor = {enumerable: true, value: i};
    Object.defineProperty(WebSocket.prototype, readyState, descriptor);
    Object.defineProperty(WebSocket, readyState, descriptor);
  });
  [
    "binaryType",
    "bufferedAmount",
    "extensions",
    "protocol",
    "readyState",
    "url"
  ].forEach((property) => {
    Object.defineProperty(WebSocket.prototype, property, {enumerable: true});
  });
  ["open", "error", "close", "message"].forEach((method) => {
    Object.defineProperty(WebSocket.prototype, `on${method}`, {
      configurable: true,
      enumerable: true,
      get() {
        const listeners = this.listeners(method);
        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener)
            return listeners[i]._listener;
        }
        return void 0;
      },
      set(listener) {
        const listeners = this.listeners(method);
        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener)
            this.removeListener(method, listeners[i]);
        }
        this.addEventListener(method, listener);
      }
    });
  });
  WebSocket.prototype.addEventListener = addEventListener;
  WebSocket.prototype.removeEventListener = removeEventListener;
  module2.exports = WebSocket;
  function initAsClient(websocket, address, protocols, options) {
    const opts = {
      protocolVersion: protocolVersions[1],
      maxPayload: 100 * 1024 * 1024,
      perMessageDeflate: true,
      followRedirects: false,
      maxRedirects: 10,
      ...options,
      createConnection: void 0,
      socketPath: void 0,
      hostname: void 0,
      protocol: void 0,
      timeout: void 0,
      method: void 0,
      host: void 0,
      path: void 0,
      port: void 0
    };
    if (!protocolVersions.includes(opts.protocolVersion)) {
      throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} (supported versions: ${protocolVersions.join(", ")})`);
    }
    let parsedUrl;
    if (address instanceof URL2) {
      parsedUrl = address;
      websocket._url = address.href;
    } else {
      parsedUrl = new URL2(address);
      websocket._url = address;
    }
    const isUnixSocket = parsedUrl.protocol === "ws+unix:";
    if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
      throw new Error(`Invalid URL: ${websocket.url}`);
    }
    const isSecure = parsedUrl.protocol === "wss:" || parsedUrl.protocol === "https:";
    const defaultPort = isSecure ? 443 : 80;
    const key = randomBytes(16).toString("base64");
    const get = isSecure ? https.get : http.get;
    let perMessageDeflate;
    opts.createConnection = isSecure ? tlsConnect : netConnect;
    opts.defaultPort = opts.defaultPort || defaultPort;
    opts.port = parsedUrl.port || defaultPort;
    opts.host = parsedUrl.hostname.startsWith("[") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
    opts.headers = {
      "Sec-WebSocket-Version": opts.protocolVersion,
      "Sec-WebSocket-Key": key,
      Connection: "Upgrade",
      Upgrade: "websocket",
      ...opts.headers
    };
    opts.path = parsedUrl.pathname + parsedUrl.search;
    opts.timeout = opts.handshakeTimeout;
    if (opts.perMessageDeflate) {
      perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);
      opts.headers["Sec-WebSocket-Extensions"] = format({
        [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
      });
    }
    if (protocols) {
      opts.headers["Sec-WebSocket-Protocol"] = protocols;
    }
    if (opts.origin) {
      if (opts.protocolVersion < 13) {
        opts.headers["Sec-WebSocket-Origin"] = opts.origin;
      } else {
        opts.headers.Origin = opts.origin;
      }
    }
    if (parsedUrl.username || parsedUrl.password) {
      opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
    }
    if (isUnixSocket) {
      const parts = opts.path.split(":");
      opts.socketPath = parts[0];
      opts.path = parts[1];
    }
    let req = websocket._req = get(opts);
    if (opts.timeout) {
      req.on("timeout", () => {
        abortHandshake(websocket, req, "Opening handshake has timed out");
      });
    }
    req.on("error", (err) => {
      if (req === null || req.aborted)
        return;
      req = websocket._req = null;
      websocket._readyState = WebSocket.CLOSING;
      websocket.emit("error", err);
      websocket.emitClose();
    });
    req.on("response", (res) => {
      const location = res.headers.location;
      const statusCode = res.statusCode;
      if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
        if (++websocket._redirects > opts.maxRedirects) {
          abortHandshake(websocket, req, "Maximum redirects exceeded");
          return;
        }
        req.abort();
        const addr = new URL2(location, address);
        initAsClient(websocket, addr, protocols, options);
      } else if (!websocket.emit("unexpected-response", req, res)) {
        abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);
      }
    });
    req.on("upgrade", (res, socket, head) => {
      websocket.emit("upgrade", res);
      if (websocket.readyState !== WebSocket.CONNECTING)
        return;
      req = websocket._req = null;
      const digest = createHash("sha1").update(key + GUID).digest("base64");
      if (res.headers["sec-websocket-accept"] !== digest) {
        abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Accept header");
        return;
      }
      const serverProt = res.headers["sec-websocket-protocol"];
      const protList = (protocols || "").split(/, */);
      let protError;
      if (!protocols && serverProt) {
        protError = "Server sent a subprotocol but none was requested";
      } else if (protocols && !serverProt) {
        protError = "Server sent no subprotocol";
      } else if (serverProt && !protList.includes(serverProt)) {
        protError = "Server sent an invalid subprotocol";
      }
      if (protError) {
        abortHandshake(websocket, socket, protError);
        return;
      }
      if (serverProt)
        websocket._protocol = serverProt;
      if (perMessageDeflate) {
        try {
          const extensions = parse2(res.headers["sec-websocket-extensions"]);
          if (extensions[PerMessageDeflate.extensionName]) {
            perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
            websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
          }
        } catch (err) {
          abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Extensions header");
          return;
        }
      }
      websocket.setSocket(socket, head, opts.maxPayload);
    });
  }
  function netConnect(options) {
    options.path = options.socketPath;
    return net.connect(options);
  }
  function tlsConnect(options) {
    options.path = void 0;
    if (!options.servername && options.servername !== "") {
      options.servername = net.isIP(options.host) ? "" : options.host;
    }
    return tls.connect(options);
  }
  function abortHandshake(websocket, stream, message) {
    websocket._readyState = WebSocket.CLOSING;
    const err = new Error(message);
    Error.captureStackTrace(err, abortHandshake);
    if (stream.setHeader) {
      stream.abort();
      stream.once("abort", websocket.emitClose.bind(websocket));
      websocket.emit("error", err);
    } else {
      stream.destroy(err);
      stream.once("error", websocket.emit.bind(websocket, "error"));
      stream.once("close", websocket.emitClose.bind(websocket));
    }
  }
  function sendAfterClose(websocket, data, cb) {
    if (data) {
      const length = toBuffer(data).length;
      if (websocket._socket)
        websocket._sender._bufferedBytes += length;
      else
        websocket._bufferedAmount += length;
    }
    if (cb) {
      const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} (${readyStates[websocket.readyState]})`);
      cb(err);
    }
  }
  function receiverOnConclude(code, reason) {
    const websocket = this[kWebSocket];
    websocket._socket.removeListener("data", socketOnData);
    websocket._socket.resume();
    websocket._closeFrameReceived = true;
    websocket._closeMessage = reason;
    websocket._closeCode = code;
    if (code === 1005)
      websocket.close();
    else
      websocket.close(code, reason);
  }
  function receiverOnDrain() {
    this[kWebSocket]._socket.resume();
  }
  function receiverOnError(err) {
    const websocket = this[kWebSocket];
    websocket._socket.removeListener("data", socketOnData);
    websocket._readyState = WebSocket.CLOSING;
    websocket._closeCode = err[kStatusCode];
    websocket.emit("error", err);
    websocket._socket.destroy();
  }
  function receiverOnFinish() {
    this[kWebSocket].emitClose();
  }
  function receiverOnMessage(data) {
    this[kWebSocket].emit("message", data);
  }
  function receiverOnPing(data) {
    const websocket = this[kWebSocket];
    websocket.pong(data, !websocket._isServer, NOOP);
    websocket.emit("ping", data);
  }
  function receiverOnPong(data) {
    this[kWebSocket].emit("pong", data);
  }
  function socketOnClose() {
    const websocket = this[kWebSocket];
    this.removeListener("close", socketOnClose);
    this.removeListener("end", socketOnEnd);
    websocket._readyState = WebSocket.CLOSING;
    websocket._socket.read();
    websocket._receiver.end();
    this.removeListener("data", socketOnData);
    this[kWebSocket] = void 0;
    clearTimeout(websocket._closeTimer);
    if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
      websocket.emitClose();
    } else {
      websocket._receiver.on("error", receiverOnFinish);
      websocket._receiver.on("finish", receiverOnFinish);
    }
  }
  function socketOnData(chunk) {
    if (!this[kWebSocket]._receiver.write(chunk)) {
      this.pause();
    }
  }
  function socketOnEnd() {
    const websocket = this[kWebSocket];
    websocket._readyState = WebSocket.CLOSING;
    websocket._receiver.end();
    this.end();
  }
  function socketOnError() {
    const websocket = this[kWebSocket];
    this.removeListener("error", socketOnError);
    this.on("error", NOOP);
    if (websocket) {
      websocket._readyState = WebSocket.CLOSING;
      this.destroy();
    }
  }
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/stream.js
var require_stream = __commonJS((exports2, module2) => {
  "use strict";
  var {Duplex} = require("stream");
  function emitClose(stream) {
    stream.emit("close");
  }
  function duplexOnEnd() {
    if (!this.destroyed && this._writableState.finished) {
      this.destroy();
    }
  }
  function duplexOnError(err) {
    this.removeListener("error", duplexOnError);
    this.destroy();
    if (this.listenerCount("error") === 0) {
      this.emit("error", err);
    }
  }
  function createWebSocketStream(ws, options) {
    let resumeOnReceiverDrain = true;
    function receiverOnDrain() {
      if (resumeOnReceiverDrain)
        ws._socket.resume();
    }
    if (ws.readyState === ws.CONNECTING) {
      ws.once("open", function open() {
        ws._receiver.removeAllListeners("drain");
        ws._receiver.on("drain", receiverOnDrain);
      });
    } else {
      ws._receiver.removeAllListeners("drain");
      ws._receiver.on("drain", receiverOnDrain);
    }
    const duplex = new Duplex({
      ...options,
      autoDestroy: false,
      emitClose: false,
      objectMode: false,
      writableObjectMode: false
    });
    ws.on("message", function message(msg) {
      if (!duplex.push(msg)) {
        resumeOnReceiverDrain = false;
        ws._socket.pause();
      }
    });
    ws.once("error", function error(err) {
      if (duplex.destroyed)
        return;
      duplex.destroy(err);
    });
    ws.once("close", function close() {
      if (duplex.destroyed)
        return;
      duplex.push(null);
    });
    duplex._destroy = function(err, callback) {
      if (ws.readyState === ws.CLOSED) {
        callback(err);
        process.nextTick(emitClose, duplex);
        return;
      }
      let called = false;
      ws.once("error", function error(err2) {
        called = true;
        callback(err2);
      });
      ws.once("close", function close() {
        if (!called)
          callback(err);
        process.nextTick(emitClose, duplex);
      });
      ws.terminate();
    };
    duplex._final = function(callback) {
      if (ws.readyState === ws.CONNECTING) {
        ws.once("open", function open() {
          duplex._final(callback);
        });
        return;
      }
      if (ws._socket === null)
        return;
      if (ws._socket._writableState.finished) {
        callback();
        if (duplex._readableState.endEmitted)
          duplex.destroy();
      } else {
        ws._socket.once("finish", function finish() {
          callback();
        });
        ws.close();
      }
    };
    duplex._read = function() {
      if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {
        resumeOnReceiverDrain = true;
        if (!ws._receiver._writableState.needDrain)
          ws._socket.resume();
      }
    };
    duplex._write = function(chunk, encoding, callback) {
      if (ws.readyState === ws.CONNECTING) {
        ws.once("open", function open() {
          duplex._write(chunk, encoding, callback);
        });
        return;
      }
      ws.send(chunk, callback);
    };
    duplex.on("end", duplexOnEnd);
    duplex.on("error", duplexOnError);
    return duplex;
  }
  module2.exports = createWebSocketStream;
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/lib/websocket-server.js
var require_websocket_server = __commonJS((exports2, module2) => {
  "use strict";
  var EventEmitter = require("events");
  var {createHash} = require("crypto");
  var {createServer, STATUS_CODES} = require("http");
  var PerMessageDeflate = require_permessage_deflate();
  var WebSocket = require_websocket();
  var {format, parse: parse2} = require_extension();
  var {GUID, kWebSocket} = require_constants2();
  var keyRegex = /^[+/0-9A-Za-z]{22}==$/;
  var WebSocketServer = class extends EventEmitter {
    constructor(options, callback) {
      super();
      options = {
        maxPayload: 100 * 1024 * 1024,
        perMessageDeflate: false,
        handleProtocols: null,
        clientTracking: true,
        verifyClient: null,
        noServer: false,
        backlog: null,
        server: null,
        host: null,
        path: null,
        port: null,
        ...options
      };
      if (options.port == null && !options.server && !options.noServer) {
        throw new TypeError('One of the "port", "server", or "noServer" options must be specified');
      }
      if (options.port != null) {
        this._server = createServer((req, res) => {
          const body = STATUS_CODES[426];
          res.writeHead(426, {
            "Content-Length": body.length,
            "Content-Type": "text/plain"
          });
          res.end(body);
        });
        this._server.listen(options.port, options.host, options.backlog, callback);
      } else if (options.server) {
        this._server = options.server;
      }
      if (this._server) {
        const emitConnection = this.emit.bind(this, "connection");
        this._removeListeners = addListeners(this._server, {
          listening: this.emit.bind(this, "listening"),
          error: this.emit.bind(this, "error"),
          upgrade: (req, socket, head) => {
            this.handleUpgrade(req, socket, head, emitConnection);
          }
        });
      }
      if (options.perMessageDeflate === true)
        options.perMessageDeflate = {};
      if (options.clientTracking)
        this.clients = new Set();
      this.options = options;
    }
    address() {
      if (this.options.noServer) {
        throw new Error('The server is operating in "noServer" mode');
      }
      if (!this._server)
        return null;
      return this._server.address();
    }
    close(cb) {
      if (cb)
        this.once("close", cb);
      if (this.clients) {
        for (const client of this.clients)
          client.terminate();
      }
      const server = this._server;
      if (server) {
        this._removeListeners();
        this._removeListeners = this._server = null;
        if (this.options.port != null) {
          server.close(() => this.emit("close"));
          return;
        }
      }
      process.nextTick(emitClose, this);
    }
    shouldHandle(req) {
      if (this.options.path) {
        const index = req.url.indexOf("?");
        const pathname = index !== -1 ? req.url.slice(0, index) : req.url;
        if (pathname !== this.options.path)
          return false;
      }
      return true;
    }
    handleUpgrade(req, socket, head, cb) {
      socket.on("error", socketOnError);
      const key = req.headers["sec-websocket-key"] !== void 0 ? req.headers["sec-websocket-key"].trim() : false;
      const version = +req.headers["sec-websocket-version"];
      const extensions = {};
      if (req.method !== "GET" || req.headers.upgrade.toLowerCase() !== "websocket" || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {
        return abortHandshake(socket, 400);
      }
      if (this.options.perMessageDeflate) {
        const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);
        try {
          const offers = parse2(req.headers["sec-websocket-extensions"]);
          if (offers[PerMessageDeflate.extensionName]) {
            perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
            extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
          }
        } catch (err) {
          return abortHandshake(socket, 400);
        }
      }
      if (this.options.verifyClient) {
        const info = {
          origin: req.headers[`${version === 8 ? "sec-websocket-origin" : "origin"}`],
          secure: !!(req.socket.authorized || req.socket.encrypted),
          req
        };
        if (this.options.verifyClient.length === 2) {
          this.options.verifyClient(info, (verified, code, message, headers) => {
            if (!verified) {
              return abortHandshake(socket, code || 401, message, headers);
            }
            this.completeUpgrade(key, extensions, req, socket, head, cb);
          });
          return;
        }
        if (!this.options.verifyClient(info))
          return abortHandshake(socket, 401);
      }
      this.completeUpgrade(key, extensions, req, socket, head, cb);
    }
    completeUpgrade(key, extensions, req, socket, head, cb) {
      if (!socket.readable || !socket.writable)
        return socket.destroy();
      if (socket[kWebSocket]) {
        throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");
      }
      const digest = createHash("sha1").update(key + GUID).digest("base64");
      const headers = [
        "HTTP/1.1 101 Switching Protocols",
        "Upgrade: websocket",
        "Connection: Upgrade",
        `Sec-WebSocket-Accept: ${digest}`
      ];
      const ws = new WebSocket(null);
      let protocol = req.headers["sec-websocket-protocol"];
      if (protocol) {
        protocol = protocol.trim().split(/ *, */);
        if (this.options.handleProtocols) {
          protocol = this.options.handleProtocols(protocol, req);
        } else {
          protocol = protocol[0];
        }
        if (protocol) {
          headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
          ws._protocol = protocol;
        }
      }
      if (extensions[PerMessageDeflate.extensionName]) {
        const params = extensions[PerMessageDeflate.extensionName].params;
        const value = format({
          [PerMessageDeflate.extensionName]: [params]
        });
        headers.push(`Sec-WebSocket-Extensions: ${value}`);
        ws._extensions = extensions;
      }
      this.emit("headers", headers, req);
      socket.write(headers.concat("\r\n").join("\r\n"));
      socket.removeListener("error", socketOnError);
      ws.setSocket(socket, head, this.options.maxPayload);
      if (this.clients) {
        this.clients.add(ws);
        ws.on("close", () => this.clients.delete(ws));
      }
      cb(ws, req);
    }
  };
  module2.exports = WebSocketServer;
  function addListeners(server, map) {
    for (const event of Object.keys(map))
      server.on(event, map[event]);
    return function removeListeners() {
      for (const event of Object.keys(map)) {
        server.removeListener(event, map[event]);
      }
    };
  }
  function emitClose(server) {
    server.emit("close");
  }
  function socketOnError() {
    this.destroy();
  }
  function abortHandshake(socket, code, message, headers) {
    if (socket.writable) {
      message = message || STATUS_CODES[code];
      headers = {
        Connection: "close",
        "Content-Type": "text/html",
        "Content-Length": Buffer.byteLength(message),
        ...headers
      };
      socket.write(`HTTP/1.1 ${code} ${STATUS_CODES[code]}\r
` + Object.keys(headers).map((h) => `${h}: ${headers[h]}`).join("\r\n") + "\r\n\r\n" + message);
    }
    socket.removeListener("error", socketOnError);
    socket.destroy();
  }
});

// node_modules/.pnpm/ws@7.4.3/node_modules/ws/index.js
var require_ws = __commonJS((exports2, module2) => {
  "use strict";
  var WebSocket = require_websocket();
  WebSocket.createWebSocketStream = require_stream();
  WebSocket.Server = require_websocket_server();
  WebSocket.Receiver = require_receiver();
  WebSocket.Sender = require_sender();
  module2.exports = WebSocket;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/devtools-window-polyfill.js
var require_devtools_window_polyfill = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var ws_1 = __importDefault(require_ws());
  var customGlobal = global;
  if (!customGlobal.WebSocket) {
    customGlobal.WebSocket = ws_1.default;
  }
  if (!customGlobal.window) {
    customGlobal.window = global;
  }
  customGlobal.window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ = [
    {
      type: 1,
      value: 7,
      isEnabled: true
    },
    {
      type: 2,
      value: "InternalApp",
      isEnabled: true,
      isValid: true
    },
    {
      type: 2,
      value: "InternalAppContext",
      isEnabled: true,
      isValid: true
    },
    {
      type: 2,
      value: "InternalStdoutContext",
      isEnabled: true,
      isValid: true
    },
    {
      type: 2,
      value: "InternalStderrContext",
      isEnabled: true,
      isValid: true
    },
    {
      type: 2,
      value: "InternalStdinContext",
      isEnabled: true,
      isValid: true
    },
    {
      type: 2,
      value: "InternalFocusContext",
      isEnabled: true,
      isValid: true
    }
  ];
});

// node_modules/.pnpm/react-devtools-core@4.10.1/node_modules/react-devtools-core/dist/backend.js
var require_backend = __commonJS((exports2, module2) => {
  !function(e, t) {
    typeof exports2 == "object" && typeof module2 == "object" ? module2.exports = t() : typeof define == "function" && define.amd ? define([], t) : typeof exports2 == "object" ? exports2.ReactDevToolsBackend = t() : e.ReactDevToolsBackend = t();
  }(window, function() {
    return function(e) {
      var t = {};
      function n(r) {
        if (t[r])
          return t[r].exports;
        var o = t[r] = {i: r, l: false, exports: {}};
        return e[r].call(o.exports, o, o.exports, n), o.l = true, o.exports;
      }
      return n.m = e, n.c = t, n.d = function(e2, t2, r) {
        n.o(e2, t2) || Object.defineProperty(e2, t2, {enumerable: true, get: r});
      }, n.r = function(e2) {
        typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, {value: "Module"}), Object.defineProperty(e2, "__esModule", {value: true});
      }, n.t = function(e2, t2) {
        if (1 & t2 && (e2 = n(e2)), 8 & t2)
          return e2;
        if (4 & t2 && typeof e2 == "object" && e2 && e2.__esModule)
          return e2;
        var r = Object.create(null);
        if (n.r(r), Object.defineProperty(r, "default", {enumerable: true, value: e2}), 2 & t2 && typeof e2 != "string")
          for (var o in e2)
            n.d(r, o, function(t3) {
              return e2[t3];
            }.bind(null, o));
        return r;
      }, n.n = function(e2) {
        var t2 = e2 && e2.__esModule ? function() {
          return e2.default;
        } : function() {
          return e2;
        };
        return n.d(t2, "a", t2), t2;
      }, n.o = function(e2, t2) {
        return Object.prototype.hasOwnProperty.call(e2, t2);
      }, n.p = "", n(n.s = 20);
    }([function(e, t, n) {
      "use strict";
      e.exports = n(12);
    }, function(e, t, n) {
      "use strict";
      /*
      object-assign
      (c) Sindre Sorhus
      @license MIT
      */
      var r = Object.getOwnPropertySymbols, o = Object.prototype.hasOwnProperty, i = Object.prototype.propertyIsEnumerable;
      function a(e2) {
        if (e2 == null)
          throw new TypeError("Object.assign cannot be called with null or undefined");
        return Object(e2);
      }
      e.exports = function() {
        try {
          if (!Object.assign)
            return false;
          var e2 = new String("abc");
          if (e2[5] = "de", Object.getOwnPropertyNames(e2)[0] === "5")
            return false;
          for (var t2 = {}, n2 = 0; n2 < 10; n2++)
            t2["_" + String.fromCharCode(n2)] = n2;
          if (Object.getOwnPropertyNames(t2).map(function(e3) {
            return t2[e3];
          }).join("") !== "0123456789")
            return false;
          var r2 = {};
          return "abcdefghijklmnopqrst".split("").forEach(function(e3) {
            r2[e3] = e3;
          }), Object.keys(Object.assign({}, r2)).join("") === "abcdefghijklmnopqrst";
        } catch (e3) {
          return false;
        }
      }() ? Object.assign : function(e2, t2) {
        for (var n2, l, u = a(e2), c = 1; c < arguments.length; c++) {
          for (var s in n2 = Object(arguments[c]))
            o.call(n2, s) && (u[s] = n2[s]);
          if (r) {
            l = r(n2);
            for (var f = 0; f < l.length; f++)
              i.call(n2, l[f]) && (u[l[f]] = n2[l[f]]);
          }
        }
        return u;
      };
    }, function(e, t, n) {
      (function(n2) {
        function r(e2) {
          return (r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
            return typeof e3;
          } : function(e3) {
            return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
          })(e2);
        }
        var o;
        t = e.exports = d, o = (n2 === void 0 ? "undefined" : r(n2)) === "object" && n2.env && n2.env.NODE_DEBUG && /\bsemver\b/i.test(n2.env.NODE_DEBUG) ? function() {
          var e2 = Array.prototype.slice.call(arguments, 0);
          e2.unshift("SEMVER"), console.log.apply(console, e2);
        } : function() {
        }, t.SEMVER_SPEC_VERSION = "2.0.0";
        var i = Number.MAX_SAFE_INTEGER || 9007199254740991, a = t.re = [], l = t.src = [], u = t.tokens = {}, c = 0;
        function s(e2) {
          u[e2] = c++;
        }
        s("NUMERICIDENTIFIER"), l[u.NUMERICIDENTIFIER] = "0|[1-9]\\d*", s("NUMERICIDENTIFIERLOOSE"), l[u.NUMERICIDENTIFIERLOOSE] = "[0-9]+", s("NONNUMERICIDENTIFIER"), l[u.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*", s("MAINVERSION"), l[u.MAINVERSION] = "(" + l[u.NUMERICIDENTIFIER] + ")\\.(" + l[u.NUMERICIDENTIFIER] + ")\\.(" + l[u.NUMERICIDENTIFIER] + ")", s("MAINVERSIONLOOSE"), l[u.MAINVERSIONLOOSE] = "(" + l[u.NUMERICIDENTIFIERLOOSE] + ")\\.(" + l[u.NUMERICIDENTIFIERLOOSE] + ")\\.(" + l[u.NUMERICIDENTIFIERLOOSE] + ")", s("PRERELEASEIDENTIFIER"), l[u.PRERELEASEIDENTIFIER] = "(?:" + l[u.NUMERICIDENTIFIER] + "|" + l[u.NONNUMERICIDENTIFIER] + ")", s("PRERELEASEIDENTIFIERLOOSE"), l[u.PRERELEASEIDENTIFIERLOOSE] = "(?:" + l[u.NUMERICIDENTIFIERLOOSE] + "|" + l[u.NONNUMERICIDENTIFIER] + ")", s("PRERELEASE"), l[u.PRERELEASE] = "(?:-(" + l[u.PRERELEASEIDENTIFIER] + "(?:\\." + l[u.PRERELEASEIDENTIFIER] + ")*))", s("PRERELEASELOOSE"), l[u.PRERELEASELOOSE] = "(?:-?(" + l[u.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + l[u.PRERELEASEIDENTIFIERLOOSE] + ")*))", s("BUILDIDENTIFIER"), l[u.BUILDIDENTIFIER] = "[0-9A-Za-z-]+", s("BUILD"), l[u.BUILD] = "(?:\\+(" + l[u.BUILDIDENTIFIER] + "(?:\\." + l[u.BUILDIDENTIFIER] + ")*))", s("FULL"), s("FULLPLAIN"), l[u.FULLPLAIN] = "v?" + l[u.MAINVERSION] + l[u.PRERELEASE] + "?" + l[u.BUILD] + "?", l[u.FULL] = "^" + l[u.FULLPLAIN] + "$", s("LOOSEPLAIN"), l[u.LOOSEPLAIN] = "[v=\\s]*" + l[u.MAINVERSIONLOOSE] + l[u.PRERELEASELOOSE] + "?" + l[u.BUILD] + "?", s("LOOSE"), l[u.LOOSE] = "^" + l[u.LOOSEPLAIN] + "$", s("GTLT"), l[u.GTLT] = "((?:<|>)?=?)", s("XRANGEIDENTIFIERLOOSE"), l[u.XRANGEIDENTIFIERLOOSE] = l[u.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*", s("XRANGEIDENTIFIER"), l[u.XRANGEIDENTIFIER] = l[u.NUMERICIDENTIFIER] + "|x|X|\\*", s("XRANGEPLAIN"), l[u.XRANGEPLAIN] = "[v=\\s]*(" + l[u.XRANGEIDENTIFIER] + ")(?:\\.(" + l[u.XRANGEIDENTIFIER] + ")(?:\\.(" + l[u.XRANGEIDENTIFIER] + ")(?:" + l[u.PRERELEASE] + ")?" + l[u.BUILD] + "?)?)?", s("XRANGEPLAINLOOSE"), l[u.XRANGEPLAINLOOSE] = "[v=\\s]*(" + l[u.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + l[u.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + l[u.XRANGEIDENTIFIERLOOSE] + ")(?:" + l[u.PRERELEASELOOSE] + ")?" + l[u.BUILD] + "?)?)?", s("XRANGE"), l[u.XRANGE] = "^" + l[u.GTLT] + "\\s*" + l[u.XRANGEPLAIN] + "$", s("XRANGELOOSE"), l[u.XRANGELOOSE] = "^" + l[u.GTLT] + "\\s*" + l[u.XRANGEPLAINLOOSE] + "$", s("COERCE"), l[u.COERCE] = "(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])", s("COERCERTL"), a[u.COERCERTL] = new RegExp(l[u.COERCE], "g"), s("LONETILDE"), l[u.LONETILDE] = "(?:~>?)", s("TILDETRIM"), l[u.TILDETRIM] = "(\\s*)" + l[u.LONETILDE] + "\\s+", a[u.TILDETRIM] = new RegExp(l[u.TILDETRIM], "g");
        s("TILDE"), l[u.TILDE] = "^" + l[u.LONETILDE] + l[u.XRANGEPLAIN] + "$", s("TILDELOOSE"), l[u.TILDELOOSE] = "^" + l[u.LONETILDE] + l[u.XRANGEPLAINLOOSE] + "$", s("LONECARET"), l[u.LONECARET] = "(?:\\^)", s("CARETTRIM"), l[u.CARETTRIM] = "(\\s*)" + l[u.LONECARET] + "\\s+", a[u.CARETTRIM] = new RegExp(l[u.CARETTRIM], "g");
        s("CARET"), l[u.CARET] = "^" + l[u.LONECARET] + l[u.XRANGEPLAIN] + "$", s("CARETLOOSE"), l[u.CARETLOOSE] = "^" + l[u.LONECARET] + l[u.XRANGEPLAINLOOSE] + "$", s("COMPARATORLOOSE"), l[u.COMPARATORLOOSE] = "^" + l[u.GTLT] + "\\s*(" + l[u.LOOSEPLAIN] + ")$|^$", s("COMPARATOR"), l[u.COMPARATOR] = "^" + l[u.GTLT] + "\\s*(" + l[u.FULLPLAIN] + ")$|^$", s("COMPARATORTRIM"), l[u.COMPARATORTRIM] = "(\\s*)" + l[u.GTLT] + "\\s*(" + l[u.LOOSEPLAIN] + "|" + l[u.XRANGEPLAIN] + ")", a[u.COMPARATORTRIM] = new RegExp(l[u.COMPARATORTRIM], "g");
        s("HYPHENRANGE"), l[u.HYPHENRANGE] = "^\\s*(" + l[u.XRANGEPLAIN] + ")\\s+-\\s+(" + l[u.XRANGEPLAIN] + ")\\s*$", s("HYPHENRANGELOOSE"), l[u.HYPHENRANGELOOSE] = "^\\s*(" + l[u.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + l[u.XRANGEPLAINLOOSE] + ")\\s*$", s("STAR"), l[u.STAR] = "(<|>)?=?\\s*\\*";
        for (var f = 0; f < c; f++)
          o(f, l[f]), a[f] || (a[f] = new RegExp(l[f]));
        function p(e2, t2) {
          if (t2 && r(t2) === "object" || (t2 = {loose: !!t2, includePrerelease: false}), e2 instanceof d)
            return e2;
          if (typeof e2 != "string")
            return null;
          if (e2.length > 256)
            return null;
          if (!(t2.loose ? a[u.LOOSE] : a[u.FULL]).test(e2))
            return null;
          try {
            return new d(e2, t2);
          } catch (e3) {
            return null;
          }
        }
        function d(e2, t2) {
          if (t2 && r(t2) === "object" || (t2 = {loose: !!t2, includePrerelease: false}), e2 instanceof d) {
            if (e2.loose === t2.loose)
              return e2;
            e2 = e2.version;
          } else if (typeof e2 != "string")
            throw new TypeError("Invalid Version: " + e2);
          if (e2.length > 256)
            throw new TypeError("version is longer than 256 characters");
          if (!(this instanceof d))
            return new d(e2, t2);
          o("SemVer", e2, t2), this.options = t2, this.loose = !!t2.loose;
          var n3 = e2.trim().match(t2.loose ? a[u.LOOSE] : a[u.FULL]);
          if (!n3)
            throw new TypeError("Invalid Version: " + e2);
          if (this.raw = e2, this.major = +n3[1], this.minor = +n3[2], this.patch = +n3[3], this.major > i || this.major < 0)
            throw new TypeError("Invalid major version");
          if (this.minor > i || this.minor < 0)
            throw new TypeError("Invalid minor version");
          if (this.patch > i || this.patch < 0)
            throw new TypeError("Invalid patch version");
          n3[4] ? this.prerelease = n3[4].split(".").map(function(e3) {
            if (/^[0-9]+$/.test(e3)) {
              var t3 = +e3;
              if (t3 >= 0 && t3 < i)
                return t3;
            }
            return e3;
          }) : this.prerelease = [], this.build = n3[5] ? n3[5].split(".") : [], this.format();
        }
        t.parse = p, t.valid = function(e2, t2) {
          var n3 = p(e2, t2);
          return n3 ? n3.version : null;
        }, t.clean = function(e2, t2) {
          var n3 = p(e2.trim().replace(/^[=v]+/, ""), t2);
          return n3 ? n3.version : null;
        }, t.SemVer = d, d.prototype.format = function() {
          return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), this.version;
        }, d.prototype.toString = function() {
          return this.version;
        }, d.prototype.compare = function(e2) {
          return o("SemVer.compare", this.version, this.options, e2), e2 instanceof d || (e2 = new d(e2, this.options)), this.compareMain(e2) || this.comparePre(e2);
        }, d.prototype.compareMain = function(e2) {
          return e2 instanceof d || (e2 = new d(e2, this.options)), m(this.major, e2.major) || m(this.minor, e2.minor) || m(this.patch, e2.patch);
        }, d.prototype.comparePre = function(e2) {
          if (e2 instanceof d || (e2 = new d(e2, this.options)), this.prerelease.length && !e2.prerelease.length)
            return -1;
          if (!this.prerelease.length && e2.prerelease.length)
            return 1;
          if (!this.prerelease.length && !e2.prerelease.length)
            return 0;
          var t2 = 0;
          do {
            var n3 = this.prerelease[t2], r2 = e2.prerelease[t2];
            if (o("prerelease compare", t2, n3, r2), n3 === void 0 && r2 === void 0)
              return 0;
            if (r2 === void 0)
              return 1;
            if (n3 === void 0)
              return -1;
            if (n3 !== r2)
              return m(n3, r2);
          } while (++t2);
        }, d.prototype.compareBuild = function(e2) {
          e2 instanceof d || (e2 = new d(e2, this.options));
          var t2 = 0;
          do {
            var n3 = this.build[t2], r2 = e2.build[t2];
            if (o("prerelease compare", t2, n3, r2), n3 === void 0 && r2 === void 0)
              return 0;
            if (r2 === void 0)
              return 1;
            if (n3 === void 0)
              return -1;
            if (n3 !== r2)
              return m(n3, r2);
          } while (++t2);
        }, d.prototype.inc = function(e2, t2) {
          switch (e2) {
            case "premajor":
              this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", t2);
              break;
            case "preminor":
              this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", t2);
              break;
            case "prepatch":
              this.prerelease.length = 0, this.inc("patch", t2), this.inc("pre", t2);
              break;
            case "prerelease":
              this.prerelease.length === 0 && this.inc("patch", t2), this.inc("pre", t2);
              break;
            case "major":
              this.minor === 0 && this.patch === 0 && this.prerelease.length !== 0 || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
              break;
            case "minor":
              this.patch === 0 && this.prerelease.length !== 0 || this.minor++, this.patch = 0, this.prerelease = [];
              break;
            case "patch":
              this.prerelease.length === 0 && this.patch++, this.prerelease = [];
              break;
            case "pre":
              if (this.prerelease.length === 0)
                this.prerelease = [0];
              else {
                for (var n3 = this.prerelease.length; --n3 >= 0; )
                  typeof this.prerelease[n3] == "number" && (this.prerelease[n3]++, n3 = -2);
                n3 === -1 && this.prerelease.push(0);
              }
              t2 && (this.prerelease[0] === t2 ? isNaN(this.prerelease[1]) && (this.prerelease = [t2, 0]) : this.prerelease = [t2, 0]);
              break;
            default:
              throw new Error("invalid increment argument: " + e2);
          }
          return this.format(), this.raw = this.version, this;
        }, t.inc = function(e2, t2, n3, r2) {
          typeof n3 == "string" && (r2 = n3, n3 = void 0);
          try {
            return new d(e2, n3).inc(t2, r2).version;
          } catch (e3) {
            return null;
          }
        }, t.diff = function(e2, t2) {
          if (b(e2, t2))
            return null;
          var n3 = p(e2), r2 = p(t2), o2 = "";
          if (n3.prerelease.length || r2.prerelease.length) {
            o2 = "pre";
            var i2 = "prerelease";
          }
          for (var a2 in n3)
            if ((a2 === "major" || a2 === "minor" || a2 === "patch") && n3[a2] !== r2[a2])
              return o2 + a2;
          return i2;
        }, t.compareIdentifiers = m;
        var h = /^[0-9]+$/;
        function m(e2, t2) {
          var n3 = h.test(e2), r2 = h.test(t2);
          return n3 && r2 && (e2 = +e2, t2 = +t2), e2 === t2 ? 0 : n3 && !r2 ? -1 : r2 && !n3 ? 1 : e2 < t2 ? -1 : 1;
        }
        function v(e2, t2, n3) {
          return new d(e2, n3).compare(new d(t2, n3));
        }
        function y(e2, t2, n3) {
          return v(e2, t2, n3) > 0;
        }
        function g(e2, t2, n3) {
          return v(e2, t2, n3) < 0;
        }
        function b(e2, t2, n3) {
          return v(e2, t2, n3) === 0;
        }
        function w(e2, t2, n3) {
          return v(e2, t2, n3) !== 0;
        }
        function E(e2, t2, n3) {
          return v(e2, t2, n3) >= 0;
        }
        function S(e2, t2, n3) {
          return v(e2, t2, n3) <= 0;
        }
        function O(e2, t2, n3, o2) {
          switch (t2) {
            case "===":
              return r(e2) === "object" && (e2 = e2.version), r(n3) === "object" && (n3 = n3.version), e2 === n3;
            case "!==":
              return r(e2) === "object" && (e2 = e2.version), r(n3) === "object" && (n3 = n3.version), e2 !== n3;
            case "":
            case "=":
            case "==":
              return b(e2, n3, o2);
            case "!=":
              return w(e2, n3, o2);
            case ">":
              return y(e2, n3, o2);
            case ">=":
              return E(e2, n3, o2);
            case "<":
              return g(e2, n3, o2);
            case "<=":
              return S(e2, n3, o2);
            default:
              throw new TypeError("Invalid operator: " + t2);
          }
        }
        function I(e2, t2) {
          if (t2 && r(t2) === "object" || (t2 = {loose: !!t2, includePrerelease: false}), e2 instanceof I) {
            if (e2.loose === !!t2.loose)
              return e2;
            e2 = e2.value;
          }
          if (!(this instanceof I))
            return new I(e2, t2);
          o("comparator", e2, t2), this.options = t2, this.loose = !!t2.loose, this.parse(e2), this.semver === _ ? this.value = "" : this.value = this.operator + this.semver.version, o("comp", this);
        }
        t.rcompareIdentifiers = function(e2, t2) {
          return m(t2, e2);
        }, t.major = function(e2, t2) {
          return new d(e2, t2).major;
        }, t.minor = function(e2, t2) {
          return new d(e2, t2).minor;
        }, t.patch = function(e2, t2) {
          return new d(e2, t2).patch;
        }, t.compare = v, t.compareLoose = function(e2, t2) {
          return v(e2, t2, true);
        }, t.compareBuild = function(e2, t2, n3) {
          var r2 = new d(e2, n3), o2 = new d(t2, n3);
          return r2.compare(o2) || r2.compareBuild(o2);
        }, t.rcompare = function(e2, t2, n3) {
          return v(t2, e2, n3);
        }, t.sort = function(e2, n3) {
          return e2.sort(function(e3, r2) {
            return t.compareBuild(e3, r2, n3);
          });
        }, t.rsort = function(e2, n3) {
          return e2.sort(function(e3, r2) {
            return t.compareBuild(r2, e3, n3);
          });
        }, t.gt = y, t.lt = g, t.eq = b, t.neq = w, t.gte = E, t.lte = S, t.cmp = O, t.Comparator = I;
        var _ = {};
        function C(e2, t2) {
          if (t2 && r(t2) === "object" || (t2 = {loose: !!t2, includePrerelease: false}), e2 instanceof C)
            return e2.loose === !!t2.loose && e2.includePrerelease === !!t2.includePrerelease ? e2 : new C(e2.raw, t2);
          if (e2 instanceof I)
            return new C(e2.value, t2);
          if (!(this instanceof C))
            return new C(e2, t2);
          if (this.options = t2, this.loose = !!t2.loose, this.includePrerelease = !!t2.includePrerelease, this.raw = e2, this.set = e2.split(/\s*\|\|\s*/).map(function(e3) {
            return this.parseRange(e3.trim());
          }, this).filter(function(e3) {
            return e3.length;
          }), !this.set.length)
            throw new TypeError("Invalid SemVer Range: " + e2);
          this.format();
        }
        function k(e2, t2) {
          for (var n3 = true, r2 = e2.slice(), o2 = r2.pop(); n3 && r2.length; )
            n3 = r2.every(function(e3) {
              return o2.intersects(e3, t2);
            }), o2 = r2.pop();
          return n3;
        }
        function R(e2) {
          return !e2 || e2.toLowerCase() === "x" || e2 === "*";
        }
        function T(e2, t2, n3, r2, o2, i2, a2, l2, u2, c2, s2, f2, p2) {
          return ((t2 = R(n3) ? "" : R(r2) ? ">=" + n3 + ".0.0" : R(o2) ? ">=" + n3 + "." + r2 + ".0" : ">=" + t2) + " " + (l2 = R(u2) ? "" : R(c2) ? "<" + (+u2 + 1) + ".0.0" : R(s2) ? "<" + u2 + "." + (+c2 + 1) + ".0" : f2 ? "<=" + u2 + "." + c2 + "." + s2 + "-" + f2 : "<=" + l2)).trim();
        }
        function P(e2, t2, n3) {
          for (var r2 = 0; r2 < e2.length; r2++)
            if (!e2[r2].test(t2))
              return false;
          if (t2.prerelease.length && !n3.includePrerelease) {
            for (r2 = 0; r2 < e2.length; r2++)
              if (o(e2[r2].semver), e2[r2].semver !== _ && e2[r2].semver.prerelease.length > 0) {
                var i2 = e2[r2].semver;
                if (i2.major === t2.major && i2.minor === t2.minor && i2.patch === t2.patch)
                  return true;
              }
            return false;
          }
          return true;
        }
        function A(e2, t2, n3) {
          try {
            t2 = new C(t2, n3);
          } catch (e3) {
            return false;
          }
          return t2.test(e2);
        }
        function x(e2, t2, n3, r2) {
          var o2, i2, a2, l2, u2;
          switch (e2 = new d(e2, r2), t2 = new C(t2, r2), n3) {
            case ">":
              o2 = y, i2 = S, a2 = g, l2 = ">", u2 = ">=";
              break;
            case "<":
              o2 = g, i2 = E, a2 = y, l2 = "<", u2 = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (A(e2, t2, r2))
            return false;
          for (var c2 = 0; c2 < t2.set.length; ++c2) {
            var s2 = t2.set[c2], f2 = null, p2 = null;
            if (s2.forEach(function(e3) {
              e3.semver === _ && (e3 = new I(">=0.0.0")), f2 = f2 || e3, p2 = p2 || e3, o2(e3.semver, f2.semver, r2) ? f2 = e3 : a2(e3.semver, p2.semver, r2) && (p2 = e3);
            }), f2.operator === l2 || f2.operator === u2)
              return false;
            if ((!p2.operator || p2.operator === l2) && i2(e2, p2.semver))
              return false;
            if (p2.operator === u2 && a2(e2, p2.semver))
              return false;
          }
          return true;
        }
        I.prototype.parse = function(e2) {
          var t2 = this.options.loose ? a[u.COMPARATORLOOSE] : a[u.COMPARATOR], n3 = e2.match(t2);
          if (!n3)
            throw new TypeError("Invalid comparator: " + e2);
          this.operator = n3[1] !== void 0 ? n3[1] : "", this.operator === "=" && (this.operator = ""), n3[2] ? this.semver = new d(n3[2], this.options.loose) : this.semver = _;
        }, I.prototype.toString = function() {
          return this.value;
        }, I.prototype.test = function(e2) {
          if (o("Comparator.test", e2, this.options.loose), this.semver === _ || e2 === _)
            return true;
          if (typeof e2 == "string")
            try {
              e2 = new d(e2, this.options);
            } catch (e3) {
              return false;
            }
          return O(e2, this.operator, this.semver, this.options);
        }, I.prototype.intersects = function(e2, t2) {
          if (!(e2 instanceof I))
            throw new TypeError("a Comparator is required");
          var n3;
          if (t2 && r(t2) === "object" || (t2 = {loose: !!t2, includePrerelease: false}), this.operator === "")
            return this.value === "" || (n3 = new C(e2.value, t2), A(this.value, n3, t2));
          if (e2.operator === "")
            return e2.value === "" || (n3 = new C(this.value, t2), A(e2.semver, n3, t2));
          var o2 = !(this.operator !== ">=" && this.operator !== ">" || e2.operator !== ">=" && e2.operator !== ">"), i2 = !(this.operator !== "<=" && this.operator !== "<" || e2.operator !== "<=" && e2.operator !== "<"), a2 = this.semver.version === e2.semver.version, l2 = !(this.operator !== ">=" && this.operator !== "<=" || e2.operator !== ">=" && e2.operator !== "<="), u2 = O(this.semver, "<", e2.semver, t2) && (this.operator === ">=" || this.operator === ">") && (e2.operator === "<=" || e2.operator === "<"), c2 = O(this.semver, ">", e2.semver, t2) && (this.operator === "<=" || this.operator === "<") && (e2.operator === ">=" || e2.operator === ">");
          return o2 || i2 || a2 && l2 || u2 || c2;
        }, t.Range = C, C.prototype.format = function() {
          return this.range = this.set.map(function(e2) {
            return e2.join(" ").trim();
          }).join("||").trim(), this.range;
        }, C.prototype.toString = function() {
          return this.range;
        }, C.prototype.parseRange = function(e2) {
          var t2 = this.options.loose;
          e2 = e2.trim();
          var n3 = t2 ? a[u.HYPHENRANGELOOSE] : a[u.HYPHENRANGE];
          e2 = e2.replace(n3, T), o("hyphen replace", e2), e2 = e2.replace(a[u.COMPARATORTRIM], "$1$2$3"), o("comparator trim", e2, a[u.COMPARATORTRIM]), e2 = (e2 = (e2 = e2.replace(a[u.TILDETRIM], "$1~")).replace(a[u.CARETTRIM], "$1^")).split(/\s+/).join(" ");
          var r2 = t2 ? a[u.COMPARATORLOOSE] : a[u.COMPARATOR], i2 = e2.split(" ").map(function(e3) {
            return function(e4, t3) {
              return o("comp", e4, t3), e4 = function(e5, t4) {
                return e5.trim().split(/\s+/).map(function(e6) {
                  return function(e7, t5) {
                    o("caret", e7, t5);
                    var n4 = t5.loose ? a[u.CARETLOOSE] : a[u.CARET];
                    return e7.replace(n4, function(t6, n5, r3, i3, a2) {
                      var l2;
                      return o("caret", e7, t6, n5, r3, i3, a2), R(n5) ? l2 = "" : R(r3) ? l2 = ">=" + n5 + ".0.0 <" + (+n5 + 1) + ".0.0" : R(i3) ? l2 = n5 === "0" ? ">=" + n5 + "." + r3 + ".0 <" + n5 + "." + (+r3 + 1) + ".0" : ">=" + n5 + "." + r3 + ".0 <" + (+n5 + 1) + ".0.0" : a2 ? (o("replaceCaret pr", a2), l2 = n5 === "0" ? r3 === "0" ? ">=" + n5 + "." + r3 + "." + i3 + "-" + a2 + " <" + n5 + "." + r3 + "." + (+i3 + 1) : ">=" + n5 + "." + r3 + "." + i3 + "-" + a2 + " <" + n5 + "." + (+r3 + 1) + ".0" : ">=" + n5 + "." + r3 + "." + i3 + "-" + a2 + " <" + (+n5 + 1) + ".0.0") : (o("no pr"), l2 = n5 === "0" ? r3 === "0" ? ">=" + n5 + "." + r3 + "." + i3 + " <" + n5 + "." + r3 + "." + (+i3 + 1) : ">=" + n5 + "." + r3 + "." + i3 + " <" + n5 + "." + (+r3 + 1) + ".0" : ">=" + n5 + "." + r3 + "." + i3 + " <" + (+n5 + 1) + ".0.0"), o("caret return", l2), l2;
                    });
                  }(e6, t4);
                }).join(" ");
              }(e4, t3), o("caret", e4), e4 = function(e5, t4) {
                return e5.trim().split(/\s+/).map(function(e6) {
                  return function(e7, t5) {
                    var n4 = t5.loose ? a[u.TILDELOOSE] : a[u.TILDE];
                    return e7.replace(n4, function(t6, n5, r3, i3, a2) {
                      var l2;
                      return o("tilde", e7, t6, n5, r3, i3, a2), R(n5) ? l2 = "" : R(r3) ? l2 = ">=" + n5 + ".0.0 <" + (+n5 + 1) + ".0.0" : R(i3) ? l2 = ">=" + n5 + "." + r3 + ".0 <" + n5 + "." + (+r3 + 1) + ".0" : a2 ? (o("replaceTilde pr", a2), l2 = ">=" + n5 + "." + r3 + "." + i3 + "-" + a2 + " <" + n5 + "." + (+r3 + 1) + ".0") : l2 = ">=" + n5 + "." + r3 + "." + i3 + " <" + n5 + "." + (+r3 + 1) + ".0", o("tilde return", l2), l2;
                    });
                  }(e6, t4);
                }).join(" ");
              }(e4, t3), o("tildes", e4), e4 = function(e5, t4) {
                return o("replaceXRanges", e5, t4), e5.split(/\s+/).map(function(e6) {
                  return function(e7, t5) {
                    e7 = e7.trim();
                    var n4 = t5.loose ? a[u.XRANGELOOSE] : a[u.XRANGE];
                    return e7.replace(n4, function(n5, r3, i3, a2, l2, u2) {
                      o("xRange", e7, n5, r3, i3, a2, l2, u2);
                      var c2 = R(i3), s2 = c2 || R(a2), f2 = s2 || R(l2), p2 = f2;
                      return r3 === "=" && p2 && (r3 = ""), u2 = t5.includePrerelease ? "-0" : "", c2 ? n5 = r3 === ">" || r3 === "<" ? "<0.0.0-0" : "*" : r3 && p2 ? (s2 && (a2 = 0), l2 = 0, r3 === ">" ? (r3 = ">=", s2 ? (i3 = +i3 + 1, a2 = 0, l2 = 0) : (a2 = +a2 + 1, l2 = 0)) : r3 === "<=" && (r3 = "<", s2 ? i3 = +i3 + 1 : a2 = +a2 + 1), n5 = r3 + i3 + "." + a2 + "." + l2 + u2) : s2 ? n5 = ">=" + i3 + ".0.0" + u2 + " <" + (+i3 + 1) + ".0.0" + u2 : f2 && (n5 = ">=" + i3 + "." + a2 + ".0" + u2 + " <" + i3 + "." + (+a2 + 1) + ".0" + u2), o("xRange return", n5), n5;
                    });
                  }(e6, t4);
                }).join(" ");
              }(e4, t3), o("xrange", e4), e4 = function(e5, t4) {
                return o("replaceStars", e5, t4), e5.trim().replace(a[u.STAR], "");
              }(e4, t3), o("stars", e4), e4;
            }(e3, this.options);
          }, this).join(" ").split(/\s+/);
          return this.options.loose && (i2 = i2.filter(function(e3) {
            return !!e3.match(r2);
          })), i2 = i2.map(function(e3) {
            return new I(e3, this.options);
          }, this);
        }, C.prototype.intersects = function(e2, t2) {
          if (!(e2 instanceof C))
            throw new TypeError("a Range is required");
          return this.set.some(function(n3) {
            return k(n3, t2) && e2.set.some(function(e3) {
              return k(e3, t2) && n3.every(function(n4) {
                return e3.every(function(e4) {
                  return n4.intersects(e4, t2);
                });
              });
            });
          });
        }, t.toComparators = function(e2, t2) {
          return new C(e2, t2).set.map(function(e3) {
            return e3.map(function(e4) {
              return e4.value;
            }).join(" ").trim().split(" ");
          });
        }, C.prototype.test = function(e2) {
          if (!e2)
            return false;
          if (typeof e2 == "string")
            try {
              e2 = new d(e2, this.options);
            } catch (e3) {
              return false;
            }
          for (var t2 = 0; t2 < this.set.length; t2++)
            if (P(this.set[t2], e2, this.options))
              return true;
          return false;
        }, t.satisfies = A, t.maxSatisfying = function(e2, t2, n3) {
          var r2 = null, o2 = null;
          try {
            var i2 = new C(t2, n3);
          } catch (e3) {
            return null;
          }
          return e2.forEach(function(e3) {
            i2.test(e3) && (r2 && o2.compare(e3) !== -1 || (o2 = new d(r2 = e3, n3)));
          }), r2;
        }, t.minSatisfying = function(e2, t2, n3) {
          var r2 = null, o2 = null;
          try {
            var i2 = new C(t2, n3);
          } catch (e3) {
            return null;
          }
          return e2.forEach(function(e3) {
            i2.test(e3) && (r2 && o2.compare(e3) !== 1 || (o2 = new d(r2 = e3, n3)));
          }), r2;
        }, t.minVersion = function(e2, t2) {
          e2 = new C(e2, t2);
          var n3 = new d("0.0.0");
          if (e2.test(n3))
            return n3;
          if (n3 = new d("0.0.0-0"), e2.test(n3))
            return n3;
          n3 = null;
          for (var r2 = 0; r2 < e2.set.length; ++r2) {
            e2.set[r2].forEach(function(e3) {
              var t3 = new d(e3.semver.version);
              switch (e3.operator) {
                case ">":
                  t3.prerelease.length === 0 ? t3.patch++ : t3.prerelease.push(0), t3.raw = t3.format();
                case "":
                case ">=":
                  n3 && !y(n3, t3) || (n3 = t3);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error("Unexpected operation: " + e3.operator);
              }
            });
          }
          if (n3 && e2.test(n3))
            return n3;
          return null;
        }, t.validRange = function(e2, t2) {
          try {
            return new C(e2, t2).range || "*";
          } catch (e3) {
            return null;
          }
        }, t.ltr = function(e2, t2, n3) {
          return x(e2, t2, "<", n3);
        }, t.gtr = function(e2, t2, n3) {
          return x(e2, t2, ">", n3);
        }, t.outside = x, t.prerelease = function(e2, t2) {
          var n3 = p(e2, t2);
          return n3 && n3.prerelease.length ? n3.prerelease : null;
        }, t.intersects = function(e2, t2, n3) {
          return e2 = new C(e2, n3), t2 = new C(t2, n3), e2.intersects(t2);
        }, t.coerce = function(e2, t2) {
          if (e2 instanceof d)
            return e2;
          typeof e2 == "number" && (e2 = String(e2));
          if (typeof e2 != "string")
            return null;
          var n3 = null;
          if ((t2 = t2 || {}).rtl) {
            for (var r2; (r2 = a[u.COERCERTL].exec(e2)) && (!n3 || n3.index + n3[0].length !== e2.length); )
              n3 && r2.index + r2[0].length === n3.index + n3[0].length || (n3 = r2), a[u.COERCERTL].lastIndex = r2.index + r2[1].length + r2[2].length;
            a[u.COERCERTL].lastIndex = -1;
          } else
            n3 = e2.match(a[u.COERCE]);
          if (n3 === null)
            return null;
          return p(n3[2] + "." + (n3[3] || "0") + "." + (n3[4] || "0"), t2);
        };
      }).call(this, n(5));
    }, function(e, t, n) {
      (function(t2) {
        function n2(e2) {
          return (n2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
            return typeof e3;
          } : function(e3) {
            return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
          })(e2);
        }
        var r = /^\s+|\s+$/g, o = /^[-+]0x[0-9a-f]+$/i, i = /^0b[01]+$/i, a = /^0o[0-7]+$/i, l = parseInt, u = (t2 === void 0 ? "undefined" : n2(t2)) == "object" && t2 && t2.Object === Object && t2, c = (typeof self == "undefined" ? "undefined" : n2(self)) == "object" && self && self.Object === Object && self, s = u || c || Function("return this")(), f = Object.prototype.toString, p = Math.max, d = Math.min, h = function() {
          return s.Date.now();
        };
        function m(e2, t3, n3) {
          var r2, o2, i2, a2, l2, u2, c2 = 0, s2 = false, f2 = false, m2 = true;
          if (typeof e2 != "function")
            throw new TypeError("Expected a function");
          function y2(t4) {
            var n4 = r2, i3 = o2;
            return r2 = o2 = void 0, c2 = t4, a2 = e2.apply(i3, n4);
          }
          function b(e3) {
            return c2 = e3, l2 = setTimeout(E, t3), s2 ? y2(e3) : a2;
          }
          function w(e3) {
            var n4 = e3 - u2;
            return u2 === void 0 || n4 >= t3 || n4 < 0 || f2 && e3 - c2 >= i2;
          }
          function E() {
            var e3 = h();
            if (w(e3))
              return S(e3);
            l2 = setTimeout(E, function(e4) {
              var n4 = t3 - (e4 - u2);
              return f2 ? d(n4, i2 - (e4 - c2)) : n4;
            }(e3));
          }
          function S(e3) {
            return l2 = void 0, m2 && r2 ? y2(e3) : (r2 = o2 = void 0, a2);
          }
          function O() {
            var e3 = h(), n4 = w(e3);
            if (r2 = arguments, o2 = this, u2 = e3, n4) {
              if (l2 === void 0)
                return b(u2);
              if (f2)
                return l2 = setTimeout(E, t3), y2(u2);
            }
            return l2 === void 0 && (l2 = setTimeout(E, t3)), a2;
          }
          return t3 = g(t3) || 0, v(n3) && (s2 = !!n3.leading, i2 = (f2 = "maxWait" in n3) ? p(g(n3.maxWait) || 0, t3) : i2, m2 = "trailing" in n3 ? !!n3.trailing : m2), O.cancel = function() {
            l2 !== void 0 && clearTimeout(l2), c2 = 0, r2 = u2 = o2 = l2 = void 0;
          }, O.flush = function() {
            return l2 === void 0 ? a2 : S(h());
          }, O;
        }
        function v(e2) {
          var t3 = n2(e2);
          return !!e2 && (t3 == "object" || t3 == "function");
        }
        function y(e2) {
          return n2(e2) == "symbol" || function(e3) {
            return !!e3 && n2(e3) == "object";
          }(e2) && f.call(e2) == "[object Symbol]";
        }
        function g(e2) {
          if (typeof e2 == "number")
            return e2;
          if (y(e2))
            return NaN;
          if (v(e2)) {
            var t3 = typeof e2.valueOf == "function" ? e2.valueOf() : e2;
            e2 = v(t3) ? t3 + "" : t3;
          }
          if (typeof e2 != "string")
            return e2 === 0 ? e2 : +e2;
          e2 = e2.replace(r, "");
          var n3 = i.test(e2);
          return n3 || a.test(e2) ? l(e2.slice(2), n3 ? 2 : 8) : o.test(e2) ? NaN : +e2;
        }
        e.exports = function(e2, t3, n3) {
          var r2 = true, o2 = true;
          if (typeof e2 != "function")
            throw new TypeError("Expected a function");
          return v(n3) && (r2 = "leading" in n3 ? !!n3.leading : r2, o2 = "trailing" in n3 ? !!n3.trailing : o2), m(e2, t3, {leading: r2, maxWait: t3, trailing: o2});
        };
      }).call(this, n(4));
    }, function(e, t) {
      function n(e2) {
        return (n = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      var r;
      r = function() {
        return this;
      }();
      try {
        r = r || new Function("return this")();
      } catch (e2) {
        (typeof window == "undefined" ? "undefined" : n(window)) === "object" && (r = window);
      }
      e.exports = r;
    }, function(e, t) {
      var n, r, o = e.exports = {};
      function i() {
        throw new Error("setTimeout has not been defined");
      }
      function a() {
        throw new Error("clearTimeout has not been defined");
      }
      function l(e2) {
        if (n === setTimeout)
          return setTimeout(e2, 0);
        if ((n === i || !n) && setTimeout)
          return n = setTimeout, setTimeout(e2, 0);
        try {
          return n(e2, 0);
        } catch (t2) {
          try {
            return n.call(null, e2, 0);
          } catch (t3) {
            return n.call(this, e2, 0);
          }
        }
      }
      !function() {
        try {
          n = typeof setTimeout == "function" ? setTimeout : i;
        } catch (e2) {
          n = i;
        }
        try {
          r = typeof clearTimeout == "function" ? clearTimeout : a;
        } catch (e2) {
          r = a;
        }
      }();
      var u, c = [], s = false, f = -1;
      function p() {
        s && u && (s = false, u.length ? c = u.concat(c) : f = -1, c.length && d());
      }
      function d() {
        if (!s) {
          var e2 = l(p);
          s = true;
          for (var t2 = c.length; t2; ) {
            for (u = c, c = []; ++f < t2; )
              u && u[f].run();
            f = -1, t2 = c.length;
          }
          u = null, s = false, function(e3) {
            if (r === clearTimeout)
              return clearTimeout(e3);
            if ((r === a || !r) && clearTimeout)
              return r = clearTimeout, clearTimeout(e3);
            try {
              r(e3);
            } catch (t3) {
              try {
                return r.call(null, e3);
              } catch (t4) {
                return r.call(this, e3);
              }
            }
          }(e2);
        }
      }
      function h(e2, t2) {
        this.fun = e2, this.array = t2;
      }
      function m() {
      }
      o.nextTick = function(e2) {
        var t2 = new Array(arguments.length - 1);
        if (arguments.length > 1)
          for (var n2 = 1; n2 < arguments.length; n2++)
            t2[n2 - 1] = arguments[n2];
        c.push(new h(e2, t2)), c.length !== 1 || s || l(d);
      }, h.prototype.run = function() {
        this.fun.apply(null, this.array);
      }, o.title = "browser", o.browser = true, o.env = {}, o.argv = [], o.version = "", o.versions = {}, o.on = m, o.addListener = m, o.once = m, o.off = m, o.removeListener = m, o.removeAllListeners = m, o.emit = m, o.prependListener = m, o.prependOnceListener = m, o.listeners = function(e2) {
        return [];
      }, o.binding = function(e2) {
        throw new Error("process.binding is not supported");
      }, o.cwd = function() {
        return "/";
      }, o.chdir = function(e2) {
        throw new Error("process.chdir is not supported");
      }, o.umask = function() {
        return 0;
      };
    }, function(e, t, n) {
      "use strict";
      function r(e2, t2) {
        if (!(e2 instanceof t2))
          throw new TypeError("Cannot call a class as a function");
      }
      function o(e2, t2) {
        for (var n2 = 0; n2 < t2.length; n2++) {
          var r2 = t2[n2];
          r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e2, r2.key, r2);
        }
      }
      var i = n(10), a = Symbol("max"), l = Symbol("length"), u = Symbol("lengthCalculator"), c = Symbol("allowStale"), s = Symbol("maxAge"), f = Symbol("dispose"), p = Symbol("noDisposeOnSet"), d = Symbol("lruList"), h = Symbol("cache"), m = Symbol("updateAgeOnGet"), v = function() {
        return 1;
      }, y = function() {
        function e2(t3) {
          if (r(this, e2), typeof t3 == "number" && (t3 = {max: t3}), t3 || (t3 = {}), t3.max && (typeof t3.max != "number" || t3.max < 0))
            throw new TypeError("max must be a non-negative number");
          this[a] = t3.max || 1 / 0;
          var n3 = t3.length || v;
          if (this[u] = typeof n3 != "function" ? v : n3, this[c] = t3.stale || false, t3.maxAge && typeof t3.maxAge != "number")
            throw new TypeError("maxAge must be a number");
          this[s] = t3.maxAge || 0, this[f] = t3.dispose, this[p] = t3.noDisposeOnSet || false, this[m] = t3.updateAgeOnGet || false, this.reset();
        }
        var t2, n2, y2;
        return t2 = e2, (n2 = [{key: "rforEach", value: function(e3, t3) {
          t3 = t3 || this;
          for (var n3 = this[d].tail; n3 !== null; ) {
            var r2 = n3.prev;
            O(this, e3, n3, t3), n3 = r2;
          }
        }}, {key: "forEach", value: function(e3, t3) {
          t3 = t3 || this;
          for (var n3 = this[d].head; n3 !== null; ) {
            var r2 = n3.next;
            O(this, e3, n3, t3), n3 = r2;
          }
        }}, {key: "keys", value: function() {
          return this[d].toArray().map(function(e3) {
            return e3.key;
          });
        }}, {key: "values", value: function() {
          return this[d].toArray().map(function(e3) {
            return e3.value;
          });
        }}, {key: "reset", value: function() {
          var e3 = this;
          this[f] && this[d] && this[d].length && this[d].forEach(function(t3) {
            return e3[f](t3.key, t3.value);
          }), this[h] = new Map(), this[d] = new i(), this[l] = 0;
        }}, {key: "dump", value: function() {
          var e3 = this;
          return this[d].map(function(t3) {
            return !b(e3, t3) && {k: t3.key, v: t3.value, e: t3.now + (t3.maxAge || 0)};
          }).toArray().filter(function(e4) {
            return e4;
          });
        }}, {key: "dumpLru", value: function() {
          return this[d];
        }}, {key: "set", value: function(e3, t3, n3) {
          if ((n3 = n3 || this[s]) && typeof n3 != "number")
            throw new TypeError("maxAge must be a number");
          var r2 = n3 ? Date.now() : 0, o2 = this[u](t3, e3);
          if (this[h].has(e3)) {
            if (o2 > this[a])
              return E(this, this[h].get(e3)), false;
            var i2 = this[h].get(e3).value;
            return this[f] && (this[p] || this[f](e3, i2.value)), i2.now = r2, i2.maxAge = n3, i2.value = t3, this[l] += o2 - i2.length, i2.length = o2, this.get(e3), w(this), true;
          }
          var c2 = new S(e3, t3, o2, r2, n3);
          return c2.length > this[a] ? (this[f] && this[f](e3, t3), false) : (this[l] += c2.length, this[d].unshift(c2), this[h].set(e3, this[d].head), w(this), true);
        }}, {key: "has", value: function(e3) {
          if (!this[h].has(e3))
            return false;
          var t3 = this[h].get(e3).value;
          return !b(this, t3);
        }}, {key: "get", value: function(e3) {
          return g(this, e3, true);
        }}, {key: "peek", value: function(e3) {
          return g(this, e3, false);
        }}, {key: "pop", value: function() {
          var e3 = this[d].tail;
          return e3 ? (E(this, e3), e3.value) : null;
        }}, {key: "del", value: function(e3) {
          E(this, this[h].get(e3));
        }}, {key: "load", value: function(e3) {
          this.reset();
          for (var t3 = Date.now(), n3 = e3.length - 1; n3 >= 0; n3--) {
            var r2 = e3[n3], o2 = r2.e || 0;
            if (o2 === 0)
              this.set(r2.k, r2.v);
            else {
              var i2 = o2 - t3;
              i2 > 0 && this.set(r2.k, r2.v, i2);
            }
          }
        }}, {key: "prune", value: function() {
          var e3 = this;
          this[h].forEach(function(t3, n3) {
            return g(e3, n3, false);
          });
        }}, {key: "max", set: function(e3) {
          if (typeof e3 != "number" || e3 < 0)
            throw new TypeError("max must be a non-negative number");
          this[a] = e3 || 1 / 0, w(this);
        }, get: function() {
          return this[a];
        }}, {key: "allowStale", set: function(e3) {
          this[c] = !!e3;
        }, get: function() {
          return this[c];
        }}, {key: "maxAge", set: function(e3) {
          if (typeof e3 != "number")
            throw new TypeError("maxAge must be a non-negative number");
          this[s] = e3, w(this);
        }, get: function() {
          return this[s];
        }}, {key: "lengthCalculator", set: function(e3) {
          var t3 = this;
          typeof e3 != "function" && (e3 = v), e3 !== this[u] && (this[u] = e3, this[l] = 0, this[d].forEach(function(e4) {
            e4.length = t3[u](e4.value, e4.key), t3[l] += e4.length;
          })), w(this);
        }, get: function() {
          return this[u];
        }}, {key: "length", get: function() {
          return this[l];
        }}, {key: "itemCount", get: function() {
          return this[d].length;
        }}]) && o(t2.prototype, n2), y2 && o(t2, y2), e2;
      }(), g = function(e2, t2, n2) {
        var r2 = e2[h].get(t2);
        if (r2) {
          var o2 = r2.value;
          if (b(e2, o2)) {
            if (E(e2, r2), !e2[c])
              return;
          } else
            n2 && (e2[m] && (r2.value.now = Date.now()), e2[d].unshiftNode(r2));
          return o2.value;
        }
      }, b = function(e2, t2) {
        if (!t2 || !t2.maxAge && !e2[s])
          return false;
        var n2 = Date.now() - t2.now;
        return t2.maxAge ? n2 > t2.maxAge : e2[s] && n2 > e2[s];
      }, w = function(e2) {
        if (e2[l] > e2[a])
          for (var t2 = e2[d].tail; e2[l] > e2[a] && t2 !== null; ) {
            var n2 = t2.prev;
            E(e2, t2), t2 = n2;
          }
      }, E = function(e2, t2) {
        if (t2) {
          var n2 = t2.value;
          e2[f] && e2[f](n2.key, n2.value), e2[l] -= n2.length, e2[h].delete(n2.key), e2[d].removeNode(t2);
        }
      }, S = function e2(t2, n2, o2, i2, a2) {
        r(this, e2), this.key = t2, this.value = n2, this.length = o2, this.now = i2, this.maxAge = a2 || 0;
      }, O = function(e2, t2, n2, r2) {
        var o2 = n2.value;
        b(e2, o2) && (E(e2, n2), e2[c] || (o2 = void 0)), o2 && t2.call(r2, o2.value, o2.key, e2);
      };
      e.exports = y;
    }, function(e, t, n) {
      (function(t2) {
        function n2(e2) {
          return (n2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
            return typeof e3;
          } : function(e3) {
            return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
          })(e2);
        }
        e.exports = function() {
          if (typeof document == "undefined" || !document.addEventListener)
            return null;
          var r, o, i, a = {};
          return a.copy = function() {
            var e2 = false, t3 = null, n3 = false;
            function r2() {
              e2 = false, t3 = null, n3 && window.getSelection().removeAllRanges(), n3 = false;
            }
            return document.addEventListener("copy", function(n4) {
              if (e2) {
                for (var r3 in t3)
                  n4.clipboardData.setData(r3, t3[r3]);
                n4.preventDefault();
              }
            }), function(o2) {
              return new Promise(function(i2, a2) {
                e2 = true, typeof o2 == "string" ? t3 = {"text/plain": o2} : o2 instanceof Node ? t3 = {"text/html": new XMLSerializer().serializeToString(o2)} : o2 instanceof Object ? t3 = o2 : a2("Invalid data type. Must be string, DOM node, or an object mapping MIME types to strings."), function e3(t4) {
                  try {
                    if (document.execCommand("copy"))
                      r2(), i2();
                    else {
                      if (t4)
                        throw r2(), new Error("Unable to copy. Perhaps it's not available in your browser?");
                      !function() {
                        var e4 = document.getSelection();
                        if (!document.queryCommandEnabled("copy") && e4.isCollapsed) {
                          var t5 = document.createRange();
                          t5.selectNodeContents(document.body), e4.removeAllRanges(), e4.addRange(t5), n3 = true;
                        }
                      }(), e3(true);
                    }
                  } catch (e4) {
                    r2(), a2(e4);
                  }
                }(false);
              });
            };
          }(), a.paste = (i = false, document.addEventListener("paste", function(e2) {
            if (i) {
              i = false, e2.preventDefault();
              var t3 = r;
              r = null, t3(e2.clipboardData.getData(o));
            }
          }), function(e2) {
            return new Promise(function(t3, n3) {
              i = true, r = t3, o = e2 || "text/plain";
              try {
                document.execCommand("paste") || (i = false, n3(new Error("Unable to paste. Pasting only works in Internet Explorer at the moment.")));
              } catch (e3) {
                i = false, n3(new Error(e3));
              }
            });
          }), typeof ClipboardEvent == "undefined" && window.clipboardData !== void 0 && window.clipboardData.setData !== void 0 && (function(r2) {
            function o2(e2, t3) {
              return function() {
                e2.apply(t3, arguments);
              };
            }
            function i2(e2) {
              if (n2(this) != "object")
                throw new TypeError("Promises must be constructed via new");
              if (typeof e2 != "function")
                throw new TypeError("not a function");
              this._state = null, this._value = null, this._deferreds = [], f(e2, o2(l, this), o2(u, this));
            }
            function a2(e2) {
              var t3 = this;
              return this._state === null ? void this._deferreds.push(e2) : void p(function() {
                var n3 = t3._state ? e2.onFulfilled : e2.onRejected;
                if (n3 !== null) {
                  var r3;
                  try {
                    r3 = n3(t3._value);
                  } catch (t4) {
                    return void e2.reject(t4);
                  }
                  e2.resolve(r3);
                } else
                  (t3._state ? e2.resolve : e2.reject)(t3._value);
              });
            }
            function l(e2) {
              try {
                if (e2 === this)
                  throw new TypeError("A promise cannot be resolved with itself.");
                if (e2 && (n2(e2) == "object" || typeof e2 == "function")) {
                  var t3 = e2.then;
                  if (typeof t3 == "function")
                    return void f(o2(t3, e2), o2(l, this), o2(u, this));
                }
                this._state = true, this._value = e2, c.call(this);
              } catch (e3) {
                u.call(this, e3);
              }
            }
            function u(e2) {
              this._state = false, this._value = e2, c.call(this);
            }
            function c() {
              for (var e2 = 0, t3 = this._deferreds.length; t3 > e2; e2++)
                a2.call(this, this._deferreds[e2]);
              this._deferreds = null;
            }
            function s(e2, t3, n3, r3) {
              this.onFulfilled = typeof e2 == "function" ? e2 : null, this.onRejected = typeof t3 == "function" ? t3 : null, this.resolve = n3, this.reject = r3;
            }
            function f(e2, t3, n3) {
              var r3 = false;
              try {
                e2(function(e3) {
                  r3 || (r3 = true, t3(e3));
                }, function(e3) {
                  r3 || (r3 = true, n3(e3));
                });
              } catch (e3) {
                if (r3)
                  return;
                r3 = true, n3(e3);
              }
            }
            var p = i2.immediateFn || typeof t2 == "function" && t2 || function(e2) {
              setTimeout(e2, 1);
            }, d = Array.isArray || function(e2) {
              return Object.prototype.toString.call(e2) === "[object Array]";
            };
            i2.prototype.catch = function(e2) {
              return this.then(null, e2);
            }, i2.prototype.then = function(e2, t3) {
              var n3 = this;
              return new i2(function(r3, o3) {
                a2.call(n3, new s(e2, t3, r3, o3));
              });
            }, i2.all = function() {
              var e2 = Array.prototype.slice.call(arguments.length === 1 && d(arguments[0]) ? arguments[0] : arguments);
              return new i2(function(t3, r3) {
                function o3(a4, l2) {
                  try {
                    if (l2 && (n2(l2) == "object" || typeof l2 == "function")) {
                      var u2 = l2.then;
                      if (typeof u2 == "function")
                        return void u2.call(l2, function(e3) {
                          o3(a4, e3);
                        }, r3);
                    }
                    e2[a4] = l2, --i3 == 0 && t3(e2);
                  } catch (e3) {
                    r3(e3);
                  }
                }
                if (e2.length === 0)
                  return t3([]);
                for (var i3 = e2.length, a3 = 0; a3 < e2.length; a3++)
                  o3(a3, e2[a3]);
              });
            }, i2.resolve = function(e2) {
              return e2 && n2(e2) == "object" && e2.constructor === i2 ? e2 : new i2(function(t3) {
                t3(e2);
              });
            }, i2.reject = function(e2) {
              return new i2(function(t3, n3) {
                n3(e2);
              });
            }, i2.race = function(e2) {
              return new i2(function(t3, n3) {
                for (var r3 = 0, o3 = e2.length; o3 > r3; r3++)
                  e2[r3].then(t3, n3);
              });
            }, e.exports ? e.exports = i2 : r2.Promise || (r2.Promise = i2);
          }(this), a.copy = function(e2) {
            return new Promise(function(t3, n3) {
              if (typeof e2 != "string" && !("text/plain" in e2))
                throw new Error("You must provide a text/plain type.");
              var r2 = typeof e2 == "string" ? e2 : e2["text/plain"];
              window.clipboardData.setData("Text", r2) ? t3() : n3(new Error("Copying was rejected."));
            });
          }, a.paste = function() {
            return new Promise(function(e2, t3) {
              var n3 = window.clipboardData.getData("Text");
              n3 ? e2(n3) : t3(new Error("Pasting was rejected."));
            });
          }), a;
        }();
      }).call(this, n(13).setImmediate);
    }, function(e, t, n) {
      "use strict";
      e.exports = n(15);
    }, function(e, t, n) {
      "use strict";
      n.r(t), t.default = ":root {\n  /**\n   * IMPORTANT: When new theme variables are added below\u2013 also add them to SettingsContext updateThemeVariables()\n   */\n\n  /* Light theme */\n  --light-color-attribute-name: #ef6632;\n  --light-color-attribute-name-not-editable: #23272f;\n  --light-color-attribute-name-inverted: rgba(255, 255, 255, 0.7);\n  --light-color-attribute-value: #1a1aa6;\n  --light-color-attribute-value-inverted: #ffffff;\n  --light-color-attribute-editable-value: #1a1aa6;\n  --light-color-background: #ffffff;\n  --light-color-background-hover: rgba(0, 136, 250, 0.1);\n  --light-color-background-inactive: #e5e5e5;\n  --light-color-background-invalid: #fff0f0;\n  --light-color-background-selected: #0088fa;\n  --light-color-button-background: #ffffff;\n  --light-color-button-background-focus: #ededed;\n  --light-color-button: #5f6673;\n  --light-color-button-disabled: #cfd1d5;\n  --light-color-button-active: #0088fa;\n  --light-color-button-focus: #23272f;\n  --light-color-button-hover: #23272f;\n  --light-color-border: #eeeeee;\n  --light-color-commit-did-not-render-fill: #cfd1d5;\n  --light-color-commit-did-not-render-fill-text: #000000;\n  --light-color-commit-did-not-render-pattern: #cfd1d5;\n  --light-color-commit-did-not-render-pattern-text: #333333;\n  --light-color-commit-gradient-0: #37afa9;\n  --light-color-commit-gradient-1: #63b19e;\n  --light-color-commit-gradient-2: #80b393;\n  --light-color-commit-gradient-3: #97b488;\n  --light-color-commit-gradient-4: #abb67d;\n  --light-color-commit-gradient-5: #beb771;\n  --light-color-commit-gradient-6: #cfb965;\n  --light-color-commit-gradient-7: #dfba57;\n  --light-color-commit-gradient-8: #efbb49;\n  --light-color-commit-gradient-9: #febc38;\n  --light-color-commit-gradient-text: #000000;\n  --light-color-component-name: #6a51b2;\n  --light-color-component-name-inverted: #ffffff;\n  --light-color-component-badge-background: rgba(0, 0, 0, 0.1);\n  --light-color-component-badge-background-inverted: rgba(255, 255, 255, 0.25);\n  --light-color-component-badge-count: #777d88;\n  --light-color-component-badge-count-inverted: rgba(255, 255, 255, 0.7);\n  --light-color-context-background: rgba(0,0,0,.9);\n  --light-color-context-background-hover: rgba(255, 255, 255, 0.1);\n  --light-color-context-background-selected: #178fb9;\n  --light-color-context-border: #3d424a;\n  --light-color-context-text: #ffffff;\n  --light-color-context-text-selected: #ffffff;\n  --light-color-dim: #777d88;\n  --light-color-dimmer: #cfd1d5;\n  --light-color-dimmest: #eff0f1;\n  --light-color-error-background: hsl(0, 100%, 97%);\n  --light-color-error-border: hsl(0, 100%, 92%);\n  --light-color-error-text: #ff0000;\n  --light-color-expand-collapse-toggle: #777d88;\n  --light-color-link: #0000ff;\n  --light-color-modal-background: rgba(255, 255, 255, 0.75);\n  --light-color-record-active: #fc3a4b;\n  --light-color-record-hover: #3578e5;\n  --light-color-record-inactive: #0088fa;\n  --light-color-scroll-thumb: #c2c2c2;\n  --light-color-scroll-track: #fafafa;\n  --light-color-search-match: yellow;\n  --light-color-search-match-current: #f7923b;\n  --light-color-selected-tree-highlight-active: rgba(0, 136, 250, 0.1);\n  --light-color-selected-tree-highlight-inactive: rgba(0, 0, 0, 0.05);\n  --light-color-shadow: rgba(0, 0, 0, 0.25);\n  --light-color-tab-selected-border: #0088fa;\n  --light-color-text: #000000;\n  --light-color-text-invalid: #ff0000;\n  --light-color-text-selected: #ffffff;\n  --light-color-toggle-background-invalid: #fc3a4b;\n  --light-color-toggle-background-on: #0088fa;\n  --light-color-toggle-background-off: #cfd1d5;\n  --light-color-toggle-text: #ffffff;\n  --light-color-tooltip-background: rgba(0, 0, 0, 0.9);\n  --light-color-tooltip-text: #ffffff;\n\n  /* Dark theme */\n  --dark-color-attribute-name: #9d87d2;\n  --dark-color-attribute-name-not-editable: #ededed;\n  --dark-color-attribute-name-inverted: #282828;\n  --dark-color-attribute-value: #cedae0;\n  --dark-color-attribute-value-inverted: #ffffff;\n  --dark-color-attribute-editable-value: yellow;\n  --dark-color-background: #282c34;\n  --dark-color-background-hover: rgba(255, 255, 255, 0.1);\n  --dark-color-background-inactive: #3d424a;\n  --dark-color-background-invalid: #5c0000;\n  --dark-color-background-selected: #178fb9;\n  --dark-color-button-background: #282c34;\n  --dark-color-button-background-focus: #3d424a;\n  --dark-color-button: #afb3b9;\n  --dark-color-button-active: #61dafb;\n  --dark-color-button-disabled: #4f5766;\n  --dark-color-button-focus: #a2e9fc;\n  --dark-color-button-hover: #ededed;\n  --dark-color-border: #3d424a;\n  --dark-color-commit-did-not-render-fill: #777d88;\n  --dark-color-commit-did-not-render-fill-text: #000000;\n  --dark-color-commit-did-not-render-pattern: #666c77;\n  --dark-color-commit-did-not-render-pattern-text: #ffffff;\n  --dark-color-commit-gradient-0: #37afa9;\n  --dark-color-commit-gradient-1: #63b19e;\n  --dark-color-commit-gradient-2: #80b393;\n  --dark-color-commit-gradient-3: #97b488;\n  --dark-color-commit-gradient-4: #abb67d;\n  --dark-color-commit-gradient-5: #beb771;\n  --dark-color-commit-gradient-6: #cfb965;\n  --dark-color-commit-gradient-7: #dfba57;\n  --dark-color-commit-gradient-8: #efbb49;\n  --dark-color-commit-gradient-9: #febc38;\n  --dark-color-commit-gradient-text: #000000;\n  --dark-color-component-name: #61dafb;\n  --dark-color-component-name-inverted: #282828;\n  --dark-color-component-badge-background: rgba(255, 255, 255, 0.25);\n  --dark-color-component-badge-background-inverted: rgba(0, 0, 0, 0.25);\n  --dark-color-component-badge-count: #8f949d;\n  --dark-color-component-badge-count-inverted: rgba(255, 255, 255, 0.7);\n  --dark-color-context-background: rgba(255,255,255,.9);\n  --dark-color-context-background-hover: rgba(0, 136, 250, 0.1);\n  --dark-color-context-background-selected: #0088fa;\n  --dark-color-context-border: #eeeeee;\n  --dark-color-context-text: #000000;\n  --dark-color-context-text-selected: #ffffff;\n  --dark-color-dim: #8f949d;\n  --dark-color-dimmer: #777d88;\n  --dark-color-dimmest: #4f5766;\n  --dark-color-error-background: #200;\n  --dark-color-error-border: #900;\n  --dark-color-error-text: #f55;\n  --dark-color-expand-collapse-toggle: #8f949d;\n  --dark-color-link: #61dafb;\n  --dark-color-modal-background: rgba(0, 0, 0, 0.75);\n  --dark-color-record-active: #fc3a4b;\n  --dark-color-record-hover: #a2e9fc;\n  --dark-color-record-inactive: #61dafb;\n  --dark-color-scroll-thumb: #afb3b9;\n  --dark-color-scroll-track: #313640;\n  --dark-color-search-match: yellow;\n  --dark-color-search-match-current: #f7923b;\n  --dark-color-selected-tree-highlight-active: rgba(23, 143, 185, 0.15);\n  --dark-color-selected-tree-highlight-inactive: rgba(255, 255, 255, 0.05);\n  --dark-color-shadow: rgba(0, 0, 0, 0.5);\n  --dark-color-tab-selected-border: #178fb9;\n  --dark-color-text: #ffffff;\n  --dark-color-text-invalid: #ff8080;\n  --dark-color-text-selected: #ffffff;\n  --dark-color-toggle-background-invalid: #fc3a4b;\n  --dark-color-toggle-background-on: #178fb9;\n  --dark-color-toggle-background-off: #777d88;\n  --dark-color-toggle-text: #ffffff;\n  --dark-color-tooltip-background: rgba(255, 255, 255, 0.9);\n  --dark-color-tooltip-text: #000000;\n\n  /* Font smoothing */\n  --light-font-smoothing: auto;\n  --dark-font-smoothing: antialiased;\n  --font-smoothing: auto;\n\n  /* Compact density */\n  --compact-font-size-monospace-small: 9px;\n  --compact-font-size-monospace-normal: 11px;\n  --compact-font-size-monospace-large: 15px;\n  --compact-font-size-sans-small: 10px;\n  --compact-font-size-sans-normal: 12px;\n  --compact-font-size-sans-large: 14px;\n  --compact-line-height-data: 18px;\n  --compact-root-font-size: 16px;\n\n  /* Comfortable density */\n  --comfortable-font-size-monospace-small: 10px;\n  --comfortable-font-size-monospace-normal: 13px;\n  --comfortable-font-size-monospace-large: 17px;\n  --comfortable-font-size-sans-small: 12px;\n  --comfortable-font-size-sans-normal: 14px;\n  --comfortable-font-size-sans-large: 16px;\n  --comfortable-line-height-data: 22px;\n  --comfortable-root-font-size: 20px;\n\n  /* GitHub.com system fonts */\n  --font-family-monospace: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo,\n    Courier, monospace;\n  --font-family-sans: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica,\n    Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;\n\n  /* Constant values shared between JS and CSS */\n  --interaction-commit-size: 10px;\n  --interaction-label-width: 200px;\n}\n";
    }, function(e, t, n) {
      "use strict";
      function r(e2) {
        var t2 = this;
        if (t2 instanceof r || (t2 = new r()), t2.tail = null, t2.head = null, t2.length = 0, e2 && typeof e2.forEach == "function")
          e2.forEach(function(e3) {
            t2.push(e3);
          });
        else if (arguments.length > 0)
          for (var n2 = 0, o2 = arguments.length; n2 < o2; n2++)
            t2.push(arguments[n2]);
        return t2;
      }
      function o(e2, t2, n2) {
        var r2 = t2 === e2.head ? new l(n2, null, t2, e2) : new l(n2, t2, t2.next, e2);
        return r2.next === null && (e2.tail = r2), r2.prev === null && (e2.head = r2), e2.length++, r2;
      }
      function i(e2, t2) {
        e2.tail = new l(t2, e2.tail, null, e2), e2.head || (e2.head = e2.tail), e2.length++;
      }
      function a(e2, t2) {
        e2.head = new l(t2, null, e2.head, e2), e2.tail || (e2.tail = e2.head), e2.length++;
      }
      function l(e2, t2, n2, r2) {
        if (!(this instanceof l))
          return new l(e2, t2, n2, r2);
        this.list = r2, this.value = e2, t2 ? (t2.next = this, this.prev = t2) : this.prev = null, n2 ? (n2.prev = this, this.next = n2) : this.next = null;
      }
      e.exports = r, r.Node = l, r.create = r, r.prototype.removeNode = function(e2) {
        if (e2.list !== this)
          throw new Error("removing node which does not belong to this list");
        var t2 = e2.next, n2 = e2.prev;
        return t2 && (t2.prev = n2), n2 && (n2.next = t2), e2 === this.head && (this.head = t2), e2 === this.tail && (this.tail = n2), e2.list.length--, e2.next = null, e2.prev = null, e2.list = null, t2;
      }, r.prototype.unshiftNode = function(e2) {
        if (e2 !== this.head) {
          e2.list && e2.list.removeNode(e2);
          var t2 = this.head;
          e2.list = this, e2.next = t2, t2 && (t2.prev = e2), this.head = e2, this.tail || (this.tail = e2), this.length++;
        }
      }, r.prototype.pushNode = function(e2) {
        if (e2 !== this.tail) {
          e2.list && e2.list.removeNode(e2);
          var t2 = this.tail;
          e2.list = this, e2.prev = t2, t2 && (t2.next = e2), this.tail = e2, this.head || (this.head = e2), this.length++;
        }
      }, r.prototype.push = function() {
        for (var e2 = 0, t2 = arguments.length; e2 < t2; e2++)
          i(this, arguments[e2]);
        return this.length;
      }, r.prototype.unshift = function() {
        for (var e2 = 0, t2 = arguments.length; e2 < t2; e2++)
          a(this, arguments[e2]);
        return this.length;
      }, r.prototype.pop = function() {
        if (this.tail) {
          var e2 = this.tail.value;
          return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, e2;
        }
      }, r.prototype.shift = function() {
        if (this.head) {
          var e2 = this.head.value;
          return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, e2;
        }
      }, r.prototype.forEach = function(e2, t2) {
        t2 = t2 || this;
        for (var n2 = this.head, r2 = 0; n2 !== null; r2++)
          e2.call(t2, n2.value, r2, this), n2 = n2.next;
      }, r.prototype.forEachReverse = function(e2, t2) {
        t2 = t2 || this;
        for (var n2 = this.tail, r2 = this.length - 1; n2 !== null; r2--)
          e2.call(t2, n2.value, r2, this), n2 = n2.prev;
      }, r.prototype.get = function(e2) {
        for (var t2 = 0, n2 = this.head; n2 !== null && t2 < e2; t2++)
          n2 = n2.next;
        if (t2 === e2 && n2 !== null)
          return n2.value;
      }, r.prototype.getReverse = function(e2) {
        for (var t2 = 0, n2 = this.tail; n2 !== null && t2 < e2; t2++)
          n2 = n2.prev;
        if (t2 === e2 && n2 !== null)
          return n2.value;
      }, r.prototype.map = function(e2, t2) {
        t2 = t2 || this;
        for (var n2 = new r(), o2 = this.head; o2 !== null; )
          n2.push(e2.call(t2, o2.value, this)), o2 = o2.next;
        return n2;
      }, r.prototype.mapReverse = function(e2, t2) {
        t2 = t2 || this;
        for (var n2 = new r(), o2 = this.tail; o2 !== null; )
          n2.push(e2.call(t2, o2.value, this)), o2 = o2.prev;
        return n2;
      }, r.prototype.reduce = function(e2, t2) {
        var n2, r2 = this.head;
        if (arguments.length > 1)
          n2 = t2;
        else {
          if (!this.head)
            throw new TypeError("Reduce of empty list with no initial value");
          r2 = this.head.next, n2 = this.head.value;
        }
        for (var o2 = 0; r2 !== null; o2++)
          n2 = e2(n2, r2.value, o2), r2 = r2.next;
        return n2;
      }, r.prototype.reduceReverse = function(e2, t2) {
        var n2, r2 = this.tail;
        if (arguments.length > 1)
          n2 = t2;
        else {
          if (!this.tail)
            throw new TypeError("Reduce of empty list with no initial value");
          r2 = this.tail.prev, n2 = this.tail.value;
        }
        for (var o2 = this.length - 1; r2 !== null; o2--)
          n2 = e2(n2, r2.value, o2), r2 = r2.prev;
        return n2;
      }, r.prototype.toArray = function() {
        for (var e2 = new Array(this.length), t2 = 0, n2 = this.head; n2 !== null; t2++)
          e2[t2] = n2.value, n2 = n2.next;
        return e2;
      }, r.prototype.toArrayReverse = function() {
        for (var e2 = new Array(this.length), t2 = 0, n2 = this.tail; n2 !== null; t2++)
          e2[t2] = n2.value, n2 = n2.prev;
        return e2;
      }, r.prototype.slice = function(e2, t2) {
        (t2 = t2 || this.length) < 0 && (t2 += this.length), (e2 = e2 || 0) < 0 && (e2 += this.length);
        var n2 = new r();
        if (t2 < e2 || t2 < 0)
          return n2;
        e2 < 0 && (e2 = 0), t2 > this.length && (t2 = this.length);
        for (var o2 = 0, i2 = this.head; i2 !== null && o2 < e2; o2++)
          i2 = i2.next;
        for (; i2 !== null && o2 < t2; o2++, i2 = i2.next)
          n2.push(i2.value);
        return n2;
      }, r.prototype.sliceReverse = function(e2, t2) {
        (t2 = t2 || this.length) < 0 && (t2 += this.length), (e2 = e2 || 0) < 0 && (e2 += this.length);
        var n2 = new r();
        if (t2 < e2 || t2 < 0)
          return n2;
        e2 < 0 && (e2 = 0), t2 > this.length && (t2 = this.length);
        for (var o2 = this.length, i2 = this.tail; i2 !== null && o2 > t2; o2--)
          i2 = i2.prev;
        for (; i2 !== null && o2 > e2; o2--, i2 = i2.prev)
          n2.push(i2.value);
        return n2;
      }, r.prototype.splice = function(e2, t2) {
        e2 > this.length && (e2 = this.length - 1), e2 < 0 && (e2 = this.length + e2);
        for (var n2 = 0, r2 = this.head; r2 !== null && n2 < e2; n2++)
          r2 = r2.next;
        var i2 = [];
        for (n2 = 0; r2 && n2 < t2; n2++)
          i2.push(r2.value), r2 = this.removeNode(r2);
        r2 === null && (r2 = this.tail), r2 !== this.head && r2 !== this.tail && (r2 = r2.prev);
        for (n2 = 2; n2 < arguments.length; n2++)
          r2 = o(this, r2, arguments[n2]);
        return i2;
      }, r.prototype.reverse = function() {
        for (var e2 = this.head, t2 = this.tail, n2 = e2; n2 !== null; n2 = n2.prev) {
          var r2 = n2.prev;
          n2.prev = n2.next, n2.next = r2;
        }
        return this.head = t2, this.tail = e2, this;
      };
      try {
        n(11)(r);
      } catch (e2) {
      }
    }, function(e, t, n) {
      "use strict";
      e.exports = function(e2) {
        e2.prototype[Symbol.iterator] = regeneratorRuntime.mark(function e3() {
          var t2;
          return regeneratorRuntime.wrap(function(e4) {
            for (; ; )
              switch (e4.prev = e4.next) {
                case 0:
                  t2 = this.head;
                case 1:
                  if (!t2) {
                    e4.next = 7;
                    break;
                  }
                  return e4.next = 4, t2.value;
                case 4:
                  t2 = t2.next, e4.next = 1;
                  break;
                case 7:
                case "end":
                  return e4.stop();
              }
          }, e3, this);
        });
      };
    }, function(e, t, n) {
      "use strict";
      /** @license React v0.0.0-experimental-9b8060041
       * react-is.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */
      function r(e2) {
        return (r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      var o = 60103, i = 60106, a = 60107, l = 60108, u = 60114, c = 60109, s = 60110, f = 60112, p = 60113, d = 60120, h = 60115, m = 60116, v = 60117, y = 60129, g = 60131;
      if (typeof Symbol == "function" && Symbol.for) {
        var b = Symbol.for;
        o = b("react.element"), i = b("react.portal"), a = b("react.fragment"), l = b("react.strict_mode"), u = b("react.profiler"), c = b("react.provider"), s = b("react.context"), f = b("react.forward_ref"), p = b("react.suspense"), d = b("react.suspense_list"), h = b("react.memo"), m = b("react.lazy"), v = b("react.fundamental"), y = b("react.debug_trace_mode"), g = b("react.legacy_hidden");
      }
      var w = 0;
      function E(e2) {
        if (r(e2) === "object" && e2 !== null) {
          var t2 = e2.$$typeof;
          switch (t2) {
            case o:
              switch (e2 = e2.type) {
                case a:
                case u:
                case l:
                case p:
                case d:
                  return e2;
                default:
                  switch (e2 = e2 && e2.$$typeof) {
                    case s:
                    case f:
                    case m:
                    case h:
                    case c:
                      return e2;
                    default:
                      return t2;
                  }
              }
            case i:
              return t2;
          }
        }
      }
      typeof Symbol == "function" && (w = Symbol.for("react.module.reference"));
      var S = c, O = o, I = f, _ = a, C = m, k = h, R = i, T = u, P = l, A = p;
      t.ContextConsumer = s, t.ContextProvider = S, t.Element = O, t.ForwardRef = I, t.Fragment = _, t.Lazy = C, t.Memo = k, t.Portal = R, t.Profiler = T, t.StrictMode = P, t.Suspense = A, t.isAsyncMode = function() {
        return false;
      }, t.isConcurrentMode = function() {
        return false;
      }, t.isContextConsumer = function(e2) {
        return E(e2) === s;
      }, t.isContextProvider = function(e2) {
        return E(e2) === c;
      }, t.isElement = function(e2) {
        return r(e2) === "object" && e2 !== null && e2.$$typeof === o;
      }, t.isForwardRef = function(e2) {
        return E(e2) === f;
      }, t.isFragment = function(e2) {
        return E(e2) === a;
      }, t.isLazy = function(e2) {
        return E(e2) === m;
      }, t.isMemo = function(e2) {
        return E(e2) === h;
      }, t.isPortal = function(e2) {
        return E(e2) === i;
      }, t.isProfiler = function(e2) {
        return E(e2) === u;
      }, t.isStrictMode = function(e2) {
        return E(e2) === l;
      }, t.isSuspense = function(e2) {
        return E(e2) === p;
      }, t.isValidElementType = function(e2) {
        return typeof e2 == "string" || typeof e2 == "function" || e2 === a || e2 === u || e2 === y || e2 === l || e2 === p || e2 === d || e2 === g || r(e2) === "object" && e2 !== null && (e2.$$typeof === m || e2.$$typeof === h || e2.$$typeof === c || e2.$$typeof === s || e2.$$typeof === f || e2.$$typeof === v || e2.$$typeof === w || e2.getModuleId !== void 0);
      }, t.typeOf = E;
    }, function(e, t, n) {
      (function(e2) {
        var r = e2 !== void 0 && e2 || typeof self != "undefined" && self || window, o = Function.prototype.apply;
        function i(e3, t2) {
          this._id = e3, this._clearFn = t2;
        }
        t.setTimeout = function() {
          return new i(o.call(setTimeout, r, arguments), clearTimeout);
        }, t.setInterval = function() {
          return new i(o.call(setInterval, r, arguments), clearInterval);
        }, t.clearTimeout = t.clearInterval = function(e3) {
          e3 && e3.close();
        }, i.prototype.unref = i.prototype.ref = function() {
        }, i.prototype.close = function() {
          this._clearFn.call(r, this._id);
        }, t.enroll = function(e3, t2) {
          clearTimeout(e3._idleTimeoutId), e3._idleTimeout = t2;
        }, t.unenroll = function(e3) {
          clearTimeout(e3._idleTimeoutId), e3._idleTimeout = -1;
        }, t._unrefActive = t.active = function(e3) {
          clearTimeout(e3._idleTimeoutId);
          var t2 = e3._idleTimeout;
          t2 >= 0 && (e3._idleTimeoutId = setTimeout(function() {
            e3._onTimeout && e3._onTimeout();
          }, t2));
        }, n(14), t.setImmediate = typeof self != "undefined" && self.setImmediate || e2 !== void 0 && e2.setImmediate || this && this.setImmediate, t.clearImmediate = typeof self != "undefined" && self.clearImmediate || e2 !== void 0 && e2.clearImmediate || this && this.clearImmediate;
      }).call(this, n(4));
    }, function(e, t, n) {
      (function(e2, t2) {
        !function(e3, n2) {
          "use strict";
          if (!e3.setImmediate) {
            var r, o, i, a, l, u = 1, c = {}, s = false, f = e3.document, p = Object.getPrototypeOf && Object.getPrototypeOf(e3);
            p = p && p.setTimeout ? p : e3, {}.toString.call(e3.process) === "[object process]" ? r = function(e4) {
              t2.nextTick(function() {
                h(e4);
              });
            } : !function() {
              if (e3.postMessage && !e3.importScripts) {
                var t3 = true, n3 = e3.onmessage;
                return e3.onmessage = function() {
                  t3 = false;
                }, e3.postMessage("", "*"), e3.onmessage = n3, t3;
              }
            }() ? e3.MessageChannel ? ((i = new MessageChannel()).port1.onmessage = function(e4) {
              h(e4.data);
            }, r = function(e4) {
              i.port2.postMessage(e4);
            }) : f && "onreadystatechange" in f.createElement("script") ? (o = f.documentElement, r = function(e4) {
              var t3 = f.createElement("script");
              t3.onreadystatechange = function() {
                h(e4), t3.onreadystatechange = null, o.removeChild(t3), t3 = null;
              }, o.appendChild(t3);
            }) : r = function(e4) {
              setTimeout(h, 0, e4);
            } : (a = "setImmediate$" + Math.random() + "$", l = function(t3) {
              t3.source === e3 && typeof t3.data == "string" && t3.data.indexOf(a) === 0 && h(+t3.data.slice(a.length));
            }, e3.addEventListener ? e3.addEventListener("message", l, false) : e3.attachEvent("onmessage", l), r = function(t3) {
              e3.postMessage(a + t3, "*");
            }), p.setImmediate = function(e4) {
              typeof e4 != "function" && (e4 = new Function("" + e4));
              for (var t3 = new Array(arguments.length - 1), n3 = 0; n3 < t3.length; n3++)
                t3[n3] = arguments[n3 + 1];
              var o2 = {callback: e4, args: t3};
              return c[u] = o2, r(u), u++;
            }, p.clearImmediate = d;
          }
          function d(e4) {
            delete c[e4];
          }
          function h(e4) {
            if (s)
              setTimeout(h, 0, e4);
            else {
              var t3 = c[e4];
              if (t3) {
                s = true;
                try {
                  !function(e5) {
                    var t4 = e5.callback, n3 = e5.args;
                    switch (n3.length) {
                      case 0:
                        t4();
                        break;
                      case 1:
                        t4(n3[0]);
                        break;
                      case 2:
                        t4(n3[0], n3[1]);
                        break;
                      case 3:
                        t4(n3[0], n3[1], n3[2]);
                        break;
                      default:
                        t4.apply(void 0, n3);
                    }
                  }(t3);
                } finally {
                  d(e4), s = false;
                }
              }
            }
          }
        }(typeof self == "undefined" ? e2 === void 0 ? this : e2 : self);
      }).call(this, n(4), n(5));
    }, function(e, t, n) {
      "use strict";
      /** @license React v0.0.0-experimental-9b8060041
       * react-debug-tools.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */
      function r(e2) {
        return (r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      var o = n(1), i = n(16);
      var a = n(18).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, l = 60128;
      if (typeof Symbol == "function" && Symbol.for) {
        var u = Symbol.for;
        l = u("react.opaque.id");
      }
      var c = [], s = null, f = null;
      function p() {
        if (s === null) {
          var e2 = new Map();
          try {
            m.useContext({_currentValue: null}), m.useState(null), m.useReducer(function(e3) {
              return e3;
            }, null), m.useRef(null), m.useLayoutEffect(function() {
            }), m.useEffect(function() {
            }), m.useImperativeHandle(void 0, function() {
              return null;
            }), m.useDebugValue(null), m.useCallback(function() {
            }), m.useMemo(function() {
              return null;
            });
          } finally {
            var t2 = c;
            c = [];
          }
          for (var n2 = 0; n2 < t2.length; n2++) {
            var r2 = t2[n2];
            e2.set(r2.primitive, i.parse(r2.stackError));
          }
          s = e2;
        }
        return s;
      }
      var d = null;
      function h() {
        var e2 = d;
        return e2 !== null && (d = e2.next), e2;
      }
      var m = {getCacheForType: function() {
        throw Error(function(e2) {
          for (var t2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + e2, n2 = 1; n2 < arguments.length; n2++)
            t2 += "&args[]=" + encodeURIComponent(arguments[n2]);
          return "Minified React error #" + e2 + "; visit " + t2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
        }(248));
      }, readContext: function(e2) {
        return e2._currentValue;
      }, useCallback: function(e2) {
        var t2 = h();
        return c.push({primitive: "Callback", stackError: Error(), value: t2 !== null ? t2.memoizedState[0] : e2}), e2;
      }, useContext: function(e2) {
        return c.push({primitive: "Context", stackError: Error(), value: e2._currentValue}), e2._currentValue;
      }, useEffect: function(e2) {
        h(), c.push({primitive: "Effect", stackError: Error(), value: e2});
      }, useImperativeHandle: function(e2) {
        h();
        var t2 = void 0;
        e2 !== null && r(e2) === "object" && (t2 = e2.current), c.push({primitive: "ImperativeHandle", stackError: Error(), value: t2});
      }, useDebugValue: function(e2, t2) {
        c.push({primitive: "DebugValue", stackError: Error(), value: typeof t2 == "function" ? t2(e2) : e2});
      }, useLayoutEffect: function(e2) {
        h(), c.push({primitive: "LayoutEffect", stackError: Error(), value: e2});
      }, useMemo: function(e2) {
        var t2 = h();
        return e2 = t2 !== null ? t2.memoizedState[0] : e2(), c.push({primitive: "Memo", stackError: Error(), value: e2}), e2;
      }, useReducer: function(e2, t2, n2) {
        return t2 = (e2 = h()) !== null ? e2.memoizedState : n2 !== void 0 ? n2(t2) : t2, c.push({primitive: "Reducer", stackError: Error(), value: t2}), [t2, function() {
        }];
      }, useRef: function(e2) {
        var t2 = h();
        return e2 = t2 !== null ? t2.memoizedState : {current: e2}, c.push({primitive: "Ref", stackError: Error(), value: e2.current}), e2;
      }, useState: function(e2) {
        var t2 = h();
        return e2 = t2 !== null ? t2.memoizedState : typeof e2 == "function" ? e2() : e2, c.push({primitive: "State", stackError: Error(), value: e2}), [e2, function() {
        }];
      }, useTransition: function() {
        return h(), h(), c.push({primitive: "Transition", stackError: Error(), value: void 0}), [function() {
        }, false];
      }, useMutableSource: function(e2, t2) {
        return h(), h(), h(), h(), e2 = t2(e2._source), c.push({primitive: "MutableSource", stackError: Error(), value: e2}), e2;
      }, useDeferredValue: function(e2) {
        return h(), h(), c.push({primitive: "DeferredValue", stackError: Error(), value: e2}), e2;
      }, useOpaqueIdentifier: function() {
        var e2 = h();
        return f && f.mode === 0 && h(), (e2 = e2 === null ? void 0 : e2.memoizedState) && e2.$$typeof === l && (e2 = void 0), c.push({primitive: "OpaqueIdentifier", stackError: Error(), value: e2}), e2;
      }}, v = 0;
      function y(e2, t2, n2) {
        var r2 = t2[n2].source, o2 = 0;
        e:
          for (; o2 < e2.length; o2++)
            if (e2[o2].source === r2) {
              for (var i2 = n2 + 1, a2 = o2 + 1; i2 < t2.length && a2 < e2.length; i2++, a2++)
                if (e2[a2].source !== t2[i2].source)
                  continue e;
              return o2;
            }
        return -1;
      }
      function g(e2, t2) {
        return !!e2 && (t2 = "use" + t2, !(e2.length < t2.length) && e2.lastIndexOf(t2) === e2.length - t2.length);
      }
      function b(e2) {
        if (!e2)
          return "";
        var t2 = e2.lastIndexOf(".");
        return t2 === -1 && (t2 = 0), e2.substr(t2, 3) === "use" && (t2 += 3), e2.substr(t2);
      }
      function w(e2, t2) {
        for (var n2 = [], r2 = null, o2 = n2, a2 = 0, l2 = [], u2 = 0; u2 < t2.length; u2++) {
          var c2 = t2[u2], s2 = e2, f2 = i.parse(c2.stackError);
          e: {
            var d2 = f2, h2 = y(d2, s2, v);
            if (h2 !== -1)
              s2 = h2;
            else {
              for (var m2 = 0; m2 < s2.length && 5 > m2; m2++)
                if ((h2 = y(d2, s2, m2)) !== -1) {
                  v = m2, s2 = h2;
                  break e;
                }
              s2 = -1;
            }
          }
          e: {
            if (d2 = f2, (h2 = p().get(c2.primitive)) !== void 0) {
              for (m2 = 0; m2 < h2.length && m2 < d2.length; m2++)
                if (h2[m2].source !== d2[m2].source) {
                  m2 < d2.length - 1 && g(d2[m2].functionName, c2.primitive) && m2++, m2 < d2.length - 1 && g(d2[m2].functionName, c2.primitive) && m2++, d2 = m2;
                  break e;
                }
            }
            d2 = -1;
          }
          if ((f2 = s2 === -1 || d2 === -1 || 2 > s2 - d2 ? null : f2.slice(d2, s2 - 1)) !== null) {
            if (s2 = 0, r2 !== null) {
              for (; s2 < f2.length && s2 < r2.length && f2[f2.length - s2 - 1].source === r2[r2.length - s2 - 1].source; )
                s2++;
              for (r2 = r2.length - 1; r2 > s2; r2--)
                o2 = l2.pop();
            }
            for (r2 = f2.length - s2 - 1; 1 <= r2; r2--)
              s2 = [], o2.push({id: null, isStateEditable: false, name: b(f2[r2 - 1].functionName), value: void 0, subHooks: s2}), l2.push(o2), o2 = s2;
            r2 = f2;
          }
          s2 = (f2 = c2.primitive) === "Context" || f2 === "DebugValue" ? null : a2++, o2.push({id: s2, isStateEditable: f2 === "Reducer" || f2 === "State", name: f2, value: c2.value, subHooks: []});
        }
        return function e3(t3, n3) {
          for (var r3 = [], o3 = 0; o3 < t3.length; o3++) {
            var i2 = t3[o3];
            i2.name === "DebugValue" && i2.subHooks.length === 0 ? (t3.splice(o3, 1), o3--, r3.push(i2)) : e3(i2.subHooks, i2);
          }
          n3 !== null && (r3.length === 1 ? n3.value = r3[0].value : 1 < r3.length && (n3.value = r3.map(function(e4) {
            return e4.value;
          })));
        }(n2, null), n2;
      }
      function E(e2, t2, n2) {
        n2 == null && (n2 = a.ReactCurrentDispatcher);
        var r2 = n2.current;
        n2.current = m;
        try {
          var o2 = Error();
          e2(t2);
        } finally {
          e2 = c, c = [], n2.current = r2;
        }
        return w(n2 = i.parse(o2), e2);
      }
      t.inspectHooks = E, t.inspectHooksOfFiber = function(e2, t2) {
        if (t2 == null && (t2 = a.ReactCurrentDispatcher), f = e2, e2.tag !== 0 && e2.tag !== 15 && e2.tag !== 11)
          throw Error("Unknown Fiber. Needs to be a function component to inspect hooks.");
        p();
        var n2 = e2.type, r2 = e2.memoizedProps;
        if (n2 !== e2.elementType && n2 && n2.defaultProps) {
          r2 = o({}, r2);
          var l2 = n2.defaultProps;
          for (u2 in l2)
            r2[u2] === void 0 && (r2[u2] = l2[u2]);
        }
        d = e2.memoizedState;
        var u2 = new Map();
        try {
          for (l2 = e2; l2; ) {
            if (l2.tag === 10) {
              var s2 = l2.type._context;
              u2.has(s2) || (u2.set(s2, s2._currentValue), s2._currentValue = l2.memoizedProps.value);
            }
            l2 = l2.return;
          }
          if (e2.tag === 11) {
            var h2 = n2.render;
            n2 = r2;
            var v2 = e2.ref, y2 = (e2 = t2).current;
            e2.current = m;
            try {
              var g2 = Error();
              h2(n2, v2);
            } finally {
              var b2 = c;
              c = [], e2.current = y2;
            }
            return w(i.parse(g2), b2);
          }
          return E(n2, r2, t2);
        } finally {
          d = null, function(e3) {
            e3.forEach(function(e4, t3) {
              return t3._currentValue = e4;
            });
          }(u2);
        }
      };
    }, function(e, t, n) {
      var r, o, i;
      !function(a, l) {
        "use strict";
        o = [n(17)], (i = typeof (r = function(e2) {
          var t2 = /(^|@)\S+:\d+/, n2 = /^\s*at .*(\S+:\d+|\(native\))/m, r2 = /^(eval@)?(\[native code])?$/;
          return {parse: function(e3) {
            if (e3.stacktrace !== void 0 || e3["opera#sourceloc"] !== void 0)
              return this.parseOpera(e3);
            if (e3.stack && e3.stack.match(n2))
              return this.parseV8OrIE(e3);
            if (e3.stack)
              return this.parseFFOrSafari(e3);
            throw new Error("Cannot parse given Error object");
          }, extractLocation: function(e3) {
            if (e3.indexOf(":") === -1)
              return [e3];
            var t3 = /(.+?)(?::(\d+))?(?::(\d+))?$/.exec(e3.replace(/[()]/g, ""));
            return [t3[1], t3[2] || void 0, t3[3] || void 0];
          }, parseV8OrIE: function(t3) {
            return t3.stack.split("\n").filter(function(e3) {
              return !!e3.match(n2);
            }, this).map(function(t4) {
              t4.indexOf("(eval ") > -1 && (t4 = t4.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, ""));
              var n3 = t4.replace(/^\s+/, "").replace(/\(eval code/g, "("), r3 = n3.match(/ (\((.+):(\d+):(\d+)\)$)/), o2 = (n3 = r3 ? n3.replace(r3[0], "") : n3).split(/\s+/).slice(1), i2 = this.extractLocation(r3 ? r3[1] : o2.pop()), a2 = o2.join(" ") || void 0, l2 = ["eval", "<anonymous>"].indexOf(i2[0]) > -1 ? void 0 : i2[0];
              return new e2({functionName: a2, fileName: l2, lineNumber: i2[1], columnNumber: i2[2], source: t4});
            }, this);
          }, parseFFOrSafari: function(t3) {
            return t3.stack.split("\n").filter(function(e3) {
              return !e3.match(r2);
            }, this).map(function(t4) {
              if (t4.indexOf(" > eval") > -1 && (t4 = t4.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1")), t4.indexOf("@") === -1 && t4.indexOf(":") === -1)
                return new e2({functionName: t4});
              var n3 = /((.*".+"[^@]*)?[^@]*)(?:@)/, r3 = t4.match(n3), o2 = r3 && r3[1] ? r3[1] : void 0, i2 = this.extractLocation(t4.replace(n3, ""));
              return new e2({functionName: o2, fileName: i2[0], lineNumber: i2[1], columnNumber: i2[2], source: t4});
            }, this);
          }, parseOpera: function(e3) {
            return !e3.stacktrace || e3.message.indexOf("\n") > -1 && e3.message.split("\n").length > e3.stacktrace.split("\n").length ? this.parseOpera9(e3) : e3.stack ? this.parseOpera11(e3) : this.parseOpera10(e3);
          }, parseOpera9: function(t3) {
            for (var n3 = /Line (\d+).*script (?:in )?(\S+)/i, r3 = t3.message.split("\n"), o2 = [], i2 = 2, a2 = r3.length; i2 < a2; i2 += 2) {
              var l2 = n3.exec(r3[i2]);
              l2 && o2.push(new e2({fileName: l2[2], lineNumber: l2[1], source: r3[i2]}));
            }
            return o2;
          }, parseOpera10: function(t3) {
            for (var n3 = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i, r3 = t3.stacktrace.split("\n"), o2 = [], i2 = 0, a2 = r3.length; i2 < a2; i2 += 2) {
              var l2 = n3.exec(r3[i2]);
              l2 && o2.push(new e2({functionName: l2[3] || void 0, fileName: l2[2], lineNumber: l2[1], source: r3[i2]}));
            }
            return o2;
          }, parseOpera11: function(n3) {
            return n3.stack.split("\n").filter(function(e3) {
              return !!e3.match(t2) && !e3.match(/^Error created at/);
            }, this).map(function(t3) {
              var n4, r3 = t3.split("@"), o2 = this.extractLocation(r3.pop()), i2 = r3.shift() || "", a2 = i2.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
              i2.match(/\(([^)]*)\)/) && (n4 = i2.replace(/^[^(]+\(([^)]*)\)$/, "$1"));
              var l2 = n4 === void 0 || n4 === "[arguments not available]" ? void 0 : n4.split(",");
              return new e2({functionName: a2, args: l2, fileName: o2[0], lineNumber: o2[1], columnNumber: o2[2], source: t3});
            }, this);
          }};
        }) == "function" ? r.apply(t, o) : r) === void 0 || (e.exports = i);
      }();
    }, function(e, t, n) {
      var r, o, i;
      !function(n2, a) {
        "use strict";
        o = [], (i = typeof (r = function() {
          function e2(e3) {
            return e3.charAt(0).toUpperCase() + e3.substring(1);
          }
          function t2(e3) {
            return function() {
              return this[e3];
            };
          }
          var n3 = ["isConstructor", "isEval", "isNative", "isToplevel"], r2 = ["columnNumber", "lineNumber"], o2 = ["fileName", "functionName", "source"], i2 = n3.concat(r2, o2, ["args"]);
          function a2(t3) {
            if (t3)
              for (var n4 = 0; n4 < i2.length; n4++)
                t3[i2[n4]] !== void 0 && this["set" + e2(i2[n4])](t3[i2[n4]]);
          }
          a2.prototype = {getArgs: function() {
            return this.args;
          }, setArgs: function(e3) {
            if (Object.prototype.toString.call(e3) !== "[object Array]")
              throw new TypeError("Args must be an Array");
            this.args = e3;
          }, getEvalOrigin: function() {
            return this.evalOrigin;
          }, setEvalOrigin: function(e3) {
            if (e3 instanceof a2)
              this.evalOrigin = e3;
            else {
              if (!(e3 instanceof Object))
                throw new TypeError("Eval Origin must be an Object or StackFrame");
              this.evalOrigin = new a2(e3);
            }
          }, toString: function() {
            var e3 = this.getFileName() || "", t3 = this.getLineNumber() || "", n4 = this.getColumnNumber() || "", r3 = this.getFunctionName() || "";
            return this.getIsEval() ? e3 ? "[eval] (" + e3 + ":" + t3 + ":" + n4 + ")" : "[eval]:" + t3 + ":" + n4 : r3 ? r3 + " (" + e3 + ":" + t3 + ":" + n4 + ")" : e3 + ":" + t3 + ":" + n4;
          }}, a2.fromString = function(e3) {
            var t3 = e3.indexOf("("), n4 = e3.lastIndexOf(")"), r3 = e3.substring(0, t3), o3 = e3.substring(t3 + 1, n4).split(","), i3 = e3.substring(n4 + 1);
            if (i3.indexOf("@") === 0)
              var l2 = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(i3, ""), u2 = l2[1], c2 = l2[2], s = l2[3];
            return new a2({functionName: r3, args: o3 || void 0, fileName: u2, lineNumber: c2 || void 0, columnNumber: s || void 0});
          };
          for (var l = 0; l < n3.length; l++)
            a2.prototype["get" + e2(n3[l])] = t2(n3[l]), a2.prototype["set" + e2(n3[l])] = function(e3) {
              return function(t3) {
                this[e3] = Boolean(t3);
              };
            }(n3[l]);
          for (var u = 0; u < r2.length; u++)
            a2.prototype["get" + e2(r2[u])] = t2(r2[u]), a2.prototype["set" + e2(r2[u])] = function(e3) {
              return function(t3) {
                if (n4 = t3, isNaN(parseFloat(n4)) || !isFinite(n4))
                  throw new TypeError(e3 + " must be a Number");
                var n4;
                this[e3] = Number(t3);
              };
            }(r2[u]);
          for (var c = 0; c < o2.length; c++)
            a2.prototype["get" + e2(o2[c])] = t2(o2[c]), a2.prototype["set" + e2(o2[c])] = function(e3) {
              return function(t3) {
                this[e3] = String(t3);
              };
            }(o2[c]);
          return a2;
        }) == "function" ? r.apply(t, o) : r) === void 0 || (e.exports = i);
      }();
    }, function(e, t, n) {
      "use strict";
      e.exports = n(19);
    }, function(e, t, n) {
      "use strict";
      /** @license React v0.0.0-experimental-9b8060041
       * react.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */
      function r(e2) {
        return (r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      var o = n(1), i = 60103, a = 60106;
      t.Fragment = 60107, t.StrictMode = 60108, t.Profiler = 60114;
      var l = 60109, u = 60110, c = 60112;
      t.Suspense = 60113, t.unstable_SuspenseList = 60120;
      var s = 60115, f = 60116;
      if (t.unstable_DebugTracingMode = 60129, t.unstable_LegacyHidden = 60131, typeof Symbol == "function" && Symbol.for) {
        var p = Symbol.for;
        i = p("react.element"), a = p("react.portal"), t.Fragment = p("react.fragment"), t.StrictMode = p("react.strict_mode"), t.Profiler = p("react.profiler"), l = p("react.provider"), u = p("react.context"), c = p("react.forward_ref"), t.Suspense = p("react.suspense"), t.unstable_SuspenseList = p("react.suspense_list"), s = p("react.memo"), f = p("react.lazy"), t.unstable_DebugTracingMode = p("react.debug_trace_mode"), t.unstable_LegacyHidden = p("react.legacy_hidden");
      }
      var d = typeof Symbol == "function" && Symbol.iterator;
      function h(e2) {
        for (var t2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + e2, n2 = 1; n2 < arguments.length; n2++)
          t2 += "&args[]=" + encodeURIComponent(arguments[n2]);
        return "Minified React error #" + e2 + "; visit " + t2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var m = {isMounted: function() {
        return false;
      }, enqueueForceUpdate: function() {
      }, enqueueReplaceState: function() {
      }, enqueueSetState: function() {
      }}, v = {};
      function y(e2, t2, n2) {
        this.props = e2, this.context = t2, this.refs = v, this.updater = n2 || m;
      }
      function g() {
      }
      function b(e2, t2, n2) {
        this.props = e2, this.context = t2, this.refs = v, this.updater = n2 || m;
      }
      y.prototype.isReactComponent = {}, y.prototype.setState = function(e2, t2) {
        if (r(e2) !== "object" && typeof e2 != "function" && e2 != null)
          throw Error(h(85));
        this.updater.enqueueSetState(this, e2, t2, "setState");
      }, y.prototype.forceUpdate = function(e2) {
        this.updater.enqueueForceUpdate(this, e2, "forceUpdate");
      }, g.prototype = y.prototype;
      var w = b.prototype = new g();
      w.constructor = b, o(w, y.prototype), w.isPureReactComponent = true;
      var E = {current: null}, S = Object.prototype.hasOwnProperty, O = {key: true, ref: true, __self: true, __source: true};
      function I(e2, t2, n2) {
        var r2, o2 = {}, a2 = null, l2 = null;
        if (t2 != null)
          for (r2 in t2.ref !== void 0 && (l2 = t2.ref), t2.key !== void 0 && (a2 = "" + t2.key), t2)
            S.call(t2, r2) && !O.hasOwnProperty(r2) && (o2[r2] = t2[r2]);
        var u2 = arguments.length - 2;
        if (u2 === 1)
          o2.children = n2;
        else if (1 < u2) {
          for (var c2 = Array(u2), s2 = 0; s2 < u2; s2++)
            c2[s2] = arguments[s2 + 2];
          o2.children = c2;
        }
        if (e2 && e2.defaultProps)
          for (r2 in u2 = e2.defaultProps)
            o2[r2] === void 0 && (o2[r2] = u2[r2]);
        return {$$typeof: i, type: e2, key: a2, ref: l2, props: o2, _owner: E.current};
      }
      function _(e2) {
        return r(e2) === "object" && e2 !== null && e2.$$typeof === i;
      }
      var C = /\/+/g;
      function k(e2, t2) {
        return r(e2) === "object" && e2 !== null && e2.key != null ? function(e3) {
          var t3 = {"=": "=0", ":": "=2"};
          return "$" + e3.replace(/[=:]/g, function(e4) {
            return t3[e4];
          });
        }("" + e2.key) : t2.toString(36);
      }
      function R(e2, t2, n2, o2, l2) {
        var u2 = r(e2);
        u2 !== "undefined" && u2 !== "boolean" || (e2 = null);
        var c2 = false;
        if (e2 === null)
          c2 = true;
        else
          switch (u2) {
            case "string":
            case "number":
              c2 = true;
              break;
            case "object":
              switch (e2.$$typeof) {
                case i:
                case a:
                  c2 = true;
              }
          }
        if (c2)
          return l2 = l2(c2 = e2), e2 = o2 === "" ? "." + k(c2, 0) : o2, Array.isArray(l2) ? (n2 = "", e2 != null && (n2 = e2.replace(C, "$&/") + "/"), R(l2, t2, n2, "", function(e3) {
            return e3;
          })) : l2 != null && (_(l2) && (l2 = function(e3, t3) {
            return {$$typeof: i, type: e3.type, key: t3, ref: e3.ref, props: e3.props, _owner: e3._owner};
          }(l2, n2 + (!l2.key || c2 && c2.key === l2.key ? "" : ("" + l2.key).replace(C, "$&/") + "/") + e2)), t2.push(l2)), 1;
        if (c2 = 0, o2 = o2 === "" ? "." : o2 + ":", Array.isArray(e2))
          for (var s2 = 0; s2 < e2.length; s2++) {
            var f2 = o2 + k(u2 = e2[s2], s2);
            c2 += R(u2, t2, n2, f2, l2);
          }
        else if (typeof (f2 = function(e3) {
          return e3 === null || r(e3) !== "object" ? null : typeof (e3 = d && e3[d] || e3["@@iterator"]) == "function" ? e3 : null;
        }(e2)) == "function")
          for (e2 = f2.call(e2), s2 = 0; !(u2 = e2.next()).done; )
            c2 += R(u2 = u2.value, t2, n2, f2 = o2 + k(u2, s2++), l2);
        else if (u2 === "object")
          throw t2 = "" + e2, Error(h(31, t2 === "[object Object]" ? "object with keys {" + Object.keys(e2).join(", ") + "}" : t2));
        return c2;
      }
      function T(e2, t2, n2) {
        if (e2 == null)
          return e2;
        var r2 = [], o2 = 0;
        return R(e2, r2, "", "", function(e3) {
          return t2.call(n2, e3, o2++);
        }), r2;
      }
      function P(e2) {
        if (e2._status === -1) {
          var t2 = e2._result;
          t2 = t2(), e2._status = 0, e2._result = t2, t2.then(function(t3) {
            e2._status === 0 && (t3 = t3.default, e2._status = 1, e2._result = t3);
          }, function(t3) {
            e2._status === 0 && (e2._status = 2, e2._result = t3);
          });
        }
        if (e2._status === 1)
          return e2._result;
        throw e2._result;
      }
      var A = {current: null};
      function x() {
        var e2 = A.current;
        if (e2 === null)
          throw Error(h(321));
        return e2;
      }
      var N = {transition: 0}, L = {ReactCurrentDispatcher: A, ReactCurrentBatchConfig: N, ReactCurrentOwner: E, IsSomeRendererActing: {current: false}, assign: o};
      t.Children = {map: T, forEach: function(e2, t2, n2) {
        T(e2, function() {
          t2.apply(this, arguments);
        }, n2);
      }, count: function(e2) {
        var t2 = 0;
        return T(e2, function() {
          t2++;
        }), t2;
      }, toArray: function(e2) {
        return T(e2, function(e3) {
          return e3;
        }) || [];
      }, only: function(e2) {
        if (!_(e2))
          throw Error(h(143));
        return e2;
      }}, t.Component = y, t.PureComponent = b, t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = L, t.cloneElement = function(e2, t2, n2) {
        if (e2 == null)
          throw Error(h(267, e2));
        var r2 = o({}, e2.props), a2 = e2.key, l2 = e2.ref, u2 = e2._owner;
        if (t2 != null) {
          if (t2.ref !== void 0 && (l2 = t2.ref, u2 = E.current), t2.key !== void 0 && (a2 = "" + t2.key), e2.type && e2.type.defaultProps)
            var c2 = e2.type.defaultProps;
          for (s2 in t2)
            S.call(t2, s2) && !O.hasOwnProperty(s2) && (r2[s2] = t2[s2] === void 0 && c2 !== void 0 ? c2[s2] : t2[s2]);
        }
        var s2 = arguments.length - 2;
        if (s2 === 1)
          r2.children = n2;
        else if (1 < s2) {
          c2 = Array(s2);
          for (var f2 = 0; f2 < s2; f2++)
            c2[f2] = arguments[f2 + 2];
          r2.children = c2;
        }
        return {$$typeof: i, type: e2.type, key: a2, ref: l2, props: r2, _owner: u2};
      }, t.createContext = function(e2, t2) {
        return t2 === void 0 && (t2 = null), (e2 = {$$typeof: u, _calculateChangedBits: t2, _currentValue: e2, _currentValue2: e2, _threadCount: 0, Provider: null, Consumer: null}).Provider = {$$typeof: l, _context: e2}, e2.Consumer = e2;
      }, t.createElement = I, t.createFactory = function(e2) {
        var t2 = I.bind(null, e2);
        return t2.type = e2, t2;
      }, t.createRef = function() {
        return {current: null};
      }, t.forwardRef = function(e2) {
        return {$$typeof: c, render: e2};
      }, t.isValidElement = _, t.lazy = function(e2) {
        return {$$typeof: f, _payload: {_status: -1, _result: e2}, _init: P};
      }, t.memo = function(e2, t2) {
        return {$$typeof: s, type: e2, compare: t2 === void 0 ? null : t2};
      }, t.unstable_createMutableSource = function(e2, t2) {
        return {_getVersion: t2, _source: e2, _workInProgressVersionPrimary: null, _workInProgressVersionSecondary: null};
      }, t.unstable_getCacheForType = function(e2) {
        return x().getCacheForType(e2);
      }, t.unstable_startTransition = function(e2) {
        var t2 = N.transition;
        N.transition = 1;
        try {
          e2();
        } finally {
          N.transition = t2;
        }
      }, t.unstable_useDeferredValue = function(e2) {
        return x().useDeferredValue(e2);
      }, t.unstable_useMutableSource = function(e2, t2, n2) {
        return x().useMutableSource(e2, t2, n2);
      }, t.unstable_useOpaqueIdentifier = function() {
        return x().useOpaqueIdentifier();
      }, t.unstable_useTransition = function() {
        return x().useTransition();
      }, t.useCallback = function(e2, t2) {
        return x().useCallback(e2, t2);
      }, t.useContext = function(e2, t2) {
        return x().useContext(e2, t2);
      }, t.useDebugValue = function() {
      }, t.useEffect = function(e2, t2) {
        return x().useEffect(e2, t2);
      }, t.useImperativeHandle = function(e2, t2, n2) {
        return x().useImperativeHandle(e2, t2, n2);
      }, t.useLayoutEffect = function(e2, t2) {
        return x().useLayoutEffect(e2, t2);
      }, t.useMemo = function(e2, t2) {
        return x().useMemo(e2, t2);
      }, t.useReducer = function(e2, t2, n2) {
        return x().useReducer(e2, t2, n2);
      }, t.useRef = function(e2) {
        return x().useRef(e2);
      }, t.useState = function(e2) {
        return x().useState(e2);
      }, t.version = "17.0.2-experimental-9b8060041";
    }, function(e, t, n) {
      "use strict";
      function r(e2, t2) {
        for (var n2 = 0; n2 < t2.length; n2++) {
          var r2 = t2[n2];
          r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e2, r2.key, r2);
        }
      }
      n.r(t), n.d(t, "connectToDevTools", function() {
        return nn;
      });
      var o = function() {
        function e2() {
          var t3, n3, r2;
          !function(e3, t4) {
            if (!(e3 instanceof t4))
              throw new TypeError("Cannot call a class as a function");
          }(this, e2), t3 = this, n3 = "listenersMap", r2 = new Map(), n3 in t3 ? Object.defineProperty(t3, n3, {value: r2, enumerable: true, configurable: true, writable: true}) : t3[n3] = r2;
        }
        var t2, n2, o2;
        return t2 = e2, (n2 = [{key: "addListener", value: function(e3, t3) {
          var n3 = this.listenersMap.get(e3);
          n3 === void 0 ? this.listenersMap.set(e3, [t3]) : n3.indexOf(t3) < 0 && n3.push(t3);
        }}, {key: "emit", value: function(e3) {
          var t3 = this.listenersMap.get(e3);
          if (t3 !== void 0) {
            for (var n3 = arguments.length, r2 = new Array(n3 > 1 ? n3 - 1 : 0), o3 = 1; o3 < n3; o3++)
              r2[o3 - 1] = arguments[o3];
            if (t3.length === 1) {
              var i2 = t3[0];
              i2.apply(null, r2);
            } else {
              for (var a2 = false, l2 = null, u2 = Array.from(t3), c2 = 0; c2 < u2.length; c2++) {
                var s2 = u2[c2];
                try {
                  s2.apply(null, r2);
                } catch (e4) {
                  l2 === null && (a2 = true, l2 = e4);
                }
              }
              if (a2)
                throw l2;
            }
          }
        }}, {key: "removeAllListeners", value: function() {
          this.listenersMap.clear();
        }}, {key: "removeListener", value: function(e3, t3) {
          var n3 = this.listenersMap.get(e3);
          if (n3 !== void 0) {
            var r2 = n3.indexOf(t3);
            r2 >= 0 && n3.splice(r2, 1);
          }
        }}]) && r(t2.prototype, n2), o2 && r(t2, o2), e2;
      }(), i = n(3), a = n.n(i);
      try {
        var l = n(9).default, u = function(e2) {
          var t2 = new RegExp("".concat(e2, ": ([0-9]+)")), n2 = l.match(t2);
          return parseInt(n2[1], 10);
        };
        u("comfortable-line-height-data"), u("compact-line-height-data");
      } catch (e2) {
        15, 10;
      }
      function c(e2) {
        try {
          return sessionStorage.getItem(e2);
        } catch (e3) {
          return null;
        }
      }
      function s(e2) {
        try {
          sessionStorage.removeItem(e2);
        } catch (e3) {
        }
      }
      function f(e2, t2) {
        try {
          return sessionStorage.setItem(e2, t2);
        } catch (e3) {
        }
      }
      var p = function(e2, t2) {
        return e2 === t2;
      }, d = n(1), h = n.n(d);
      function m(e2) {
        return e2.ownerDocument ? e2.ownerDocument.defaultView : null;
      }
      function v(e2) {
        var t2 = m(e2);
        return t2 ? t2.frameElement : null;
      }
      function y(e2) {
        var t2 = w(e2);
        return g([e2.getBoundingClientRect(), {top: t2.borderTop, left: t2.borderLeft, bottom: t2.borderBottom, right: t2.borderRight, width: 0, height: 0}]);
      }
      function g(e2) {
        return e2.reduce(function(e3, t2) {
          return e3 == null ? t2 : {top: e3.top + t2.top, left: e3.left + t2.left, width: e3.width, height: e3.height, bottom: e3.bottom + t2.bottom, right: e3.right + t2.right};
        });
      }
      function b(e2, t2) {
        var n2 = v(e2);
        if (n2 && n2 !== t2) {
          for (var r2 = [e2.getBoundingClientRect()], o2 = n2, i2 = false; o2; ) {
            var a2 = y(o2);
            if (r2.push(a2), o2 = v(o2), i2)
              break;
            o2 && m(o2) === t2 && (i2 = true);
          }
          return g(r2);
        }
        return e2.getBoundingClientRect();
      }
      function w(e2) {
        var t2 = window.getComputedStyle(e2);
        return {borderLeft: parseInt(t2.borderLeftWidth, 10), borderRight: parseInt(t2.borderRightWidth, 10), borderTop: parseInt(t2.borderTopWidth, 10), borderBottom: parseInt(t2.borderBottomWidth, 10), marginLeft: parseInt(t2.marginLeft, 10), marginRight: parseInt(t2.marginRight, 10), marginTop: parseInt(t2.marginTop, 10), marginBottom: parseInt(t2.marginBottom, 10), paddingLeft: parseInt(t2.paddingLeft, 10), paddingRight: parseInt(t2.paddingRight, 10), paddingTop: parseInt(t2.paddingTop, 10), paddingBottom: parseInt(t2.paddingBottom, 10)};
      }
      function E(e2, t2) {
        var n2;
        if (typeof Symbol == "undefined" || e2[Symbol.iterator] == null) {
          if (Array.isArray(e2) || (n2 = function(e3, t3) {
            if (!e3)
              return;
            if (typeof e3 == "string")
              return S(e3, t3);
            var n3 = Object.prototype.toString.call(e3).slice(8, -1);
            n3 === "Object" && e3.constructor && (n3 = e3.constructor.name);
            if (n3 === "Map" || n3 === "Set")
              return Array.from(e3);
            if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
              return S(e3, t3);
          }(e2)) || t2 && e2 && typeof e2.length == "number") {
            n2 && (e2 = n2);
            var r2 = 0, o2 = function() {
            };
            return {s: o2, n: function() {
              return r2 >= e2.length ? {done: true} : {done: false, value: e2[r2++]};
            }, e: function(e3) {
              throw e3;
            }, f: o2};
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var i2, a2 = true, l2 = false;
        return {s: function() {
          n2 = e2[Symbol.iterator]();
        }, n: function() {
          var e3 = n2.next();
          return a2 = e3.done, e3;
        }, e: function(e3) {
          l2 = true, i2 = e3;
        }, f: function() {
          try {
            a2 || n2.return == null || n2.return();
          } finally {
            if (l2)
              throw i2;
          }
        }};
      }
      function S(e2, t2) {
        (t2 == null || t2 > e2.length) && (t2 = e2.length);
        for (var n2 = 0, r2 = new Array(t2); n2 < t2; n2++)
          r2[n2] = e2[n2];
        return r2;
      }
      function O(e2, t2) {
        if (!(e2 instanceof t2))
          throw new TypeError("Cannot call a class as a function");
      }
      function I(e2, t2) {
        for (var n2 = 0; n2 < t2.length; n2++) {
          var r2 = t2[n2];
          r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e2, r2.key, r2);
        }
      }
      function _(e2, t2, n2) {
        return t2 && I(e2.prototype, t2), n2 && I(e2, n2), e2;
      }
      var C = function() {
        function e2(t2, n2) {
          O(this, e2), this.node = t2.createElement("div"), this.border = t2.createElement("div"), this.padding = t2.createElement("div"), this.content = t2.createElement("div"), this.border.style.borderColor = P.border, this.padding.style.borderColor = P.padding, this.content.style.backgroundColor = P.background, h()(this.node.style, {borderColor: P.margin, pointerEvents: "none", position: "fixed"}), this.node.style.zIndex = "10000000", this.node.appendChild(this.border), this.border.appendChild(this.padding), this.padding.appendChild(this.content), n2.appendChild(this.node);
        }
        return _(e2, [{key: "remove", value: function() {
          this.node.parentNode && this.node.parentNode.removeChild(this.node);
        }}, {key: "update", value: function(e3, t2) {
          T(t2, "margin", this.node), T(t2, "border", this.border), T(t2, "padding", this.padding), h()(this.content.style, {height: e3.height - t2.borderTop - t2.borderBottom - t2.paddingTop - t2.paddingBottom + "px", width: e3.width - t2.borderLeft - t2.borderRight - t2.paddingLeft - t2.paddingRight + "px"}), h()(this.node.style, {top: e3.top - t2.marginTop + "px", left: e3.left - t2.marginLeft + "px"});
        }}]), e2;
      }(), k = function() {
        function e2(t2, n2) {
          O(this, e2), this.tip = t2.createElement("div"), h()(this.tip.style, {display: "flex", flexFlow: "row nowrap", backgroundColor: "#333740", borderRadius: "2px", fontFamily: '"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace', fontWeight: "bold", padding: "3px 5px", pointerEvents: "none", position: "fixed", fontSize: "12px", whiteSpace: "nowrap"}), this.nameSpan = t2.createElement("span"), this.tip.appendChild(this.nameSpan), h()(this.nameSpan.style, {color: "#ee78e6", borderRight: "1px solid #aaaaaa", paddingRight: "0.5rem", marginRight: "0.5rem"}), this.dimSpan = t2.createElement("span"), this.tip.appendChild(this.dimSpan), h()(this.dimSpan.style, {color: "#d7d7d7"}), this.tip.style.zIndex = "10000000", n2.appendChild(this.tip);
        }
        return _(e2, [{key: "remove", value: function() {
          this.tip.parentNode && this.tip.parentNode.removeChild(this.tip);
        }}, {key: "updateText", value: function(e3, t2, n2) {
          this.nameSpan.textContent = e3, this.dimSpan.textContent = Math.round(t2) + "px \xD7 " + Math.round(n2) + "px";
        }}, {key: "updatePosition", value: function(e3, t2) {
          var n2 = this.tip.getBoundingClientRect(), r2 = function(e4, t3, n3) {
            var r3, o2 = Math.max(n3.height, 20), i2 = Math.max(n3.width, 60);
            r3 = e4.top + e4.height + o2 <= t3.top + t3.height ? e4.top + e4.height < t3.top + 0 ? t3.top + 5 : e4.top + e4.height + 5 : e4.top - o2 <= t3.top + t3.height ? e4.top - o2 - 5 < t3.top + 5 ? t3.top + 5 : e4.top - o2 - 5 : t3.top + t3.height - o2 - 5;
            var a2 = e4.left + 5;
            e4.left < t3.left && (a2 = t3.left + 5);
            e4.left + i2 > t3.left + t3.width && (a2 = t3.left + t3.width - i2 - 5);
            return {style: {top: r3 += "px", left: a2 += "px"}};
          }(e3, t2, {width: n2.width, height: n2.height});
          h()(this.tip.style, r2.style);
        }}]), e2;
      }(), R = function() {
        function e2() {
          O(this, e2);
          var t2 = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
          this.window = t2;
          var n2 = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
          this.tipBoundsWindow = n2;
          var r2 = t2.document;
          this.container = r2.createElement("div"), this.container.style.zIndex = "10000000", this.tip = new k(r2, this.container), this.rects = [], r2.body.appendChild(this.container);
        }
        return _(e2, [{key: "remove", value: function() {
          this.tip.remove(), this.rects.forEach(function(e3) {
            e3.remove();
          }), this.rects.length = 0, this.container.parentNode && this.container.parentNode.removeChild(this.container);
        }}, {key: "inspect", value: function(e3, t2) {
          for (var n2 = this, r2 = e3.filter(function(e4) {
            return e4.nodeType === Node.ELEMENT_NODE;
          }); this.rects.length > r2.length; ) {
            this.rects.pop().remove();
          }
          if (r2.length !== 0) {
            for (; this.rects.length < r2.length; )
              this.rects.push(new C(this.window.document, this.container));
            var o2 = {top: Number.POSITIVE_INFINITY, right: Number.NEGATIVE_INFINITY, bottom: Number.NEGATIVE_INFINITY, left: Number.POSITIVE_INFINITY};
            if (r2.forEach(function(e4, t3) {
              var r3 = b(e4, n2.window), i3 = w(e4);
              o2.top = Math.min(o2.top, r3.top - i3.marginTop), o2.right = Math.max(o2.right, r3.left + r3.width + i3.marginRight), o2.bottom = Math.max(o2.bottom, r3.top + r3.height + i3.marginBottom), o2.left = Math.min(o2.left, r3.left - i3.marginLeft), n2.rects[t3].update(r3, i3);
            }), !t2) {
              t2 = r2[0].nodeName.toLowerCase();
              var i2 = r2[0], a2 = i2.ownerDocument.defaultView.__REACT_DEVTOOLS_GLOBAL_HOOK__;
              if (a2 != null && a2.rendererInterfaces != null) {
                var l2, u2 = null, c2 = E(a2.rendererInterfaces.values());
                try {
                  for (c2.s(); !(l2 = c2.n()).done; ) {
                    var s2 = l2.value, f2 = s2.getFiberIDForNative(i2, true);
                    if (f2 !== null) {
                      u2 = s2.getDisplayNameForFiberID(f2, true);
                      break;
                    }
                  }
                } catch (e4) {
                  c2.e(e4);
                } finally {
                  c2.f();
                }
                u2 && (t2 += " (in " + u2 + ")");
              }
            }
            this.tip.updateText(t2, o2.right - o2.left, o2.bottom - o2.top);
            var p2 = b(this.tipBoundsWindow.document.documentElement, this.window);
            this.tip.updatePosition({top: o2.top, left: o2.left, height: o2.bottom - o2.top, width: o2.right - o2.left}, {top: p2.top + this.tipBoundsWindow.scrollY, left: p2.left + this.tipBoundsWindow.scrollX, height: this.tipBoundsWindow.innerHeight, width: this.tipBoundsWindow.innerWidth});
          }
        }}]), e2;
      }();
      function T(e2, t2, n2) {
        h()(n2.style, {borderTopWidth: e2[t2 + "Top"] + "px", borderLeftWidth: e2[t2 + "Left"] + "px", borderRightWidth: e2[t2 + "Right"] + "px", borderBottomWidth: e2[t2 + "Bottom"] + "px", borderStyle: "solid"});
      }
      var P = {background: "rgba(120, 170, 210, 0.7)", padding: "rgba(77, 200, 0, 0.3)", margin: "rgba(255, 155, 0, 0.3)", border: "rgba(255, 200, 50, 0.3)"}, A = null, x = null;
      function N() {
        A = null, x !== null && (x.remove(), x = null);
      }
      function L(e2, t2, n2) {
        window.document != null && (A !== null && clearTimeout(A), e2 != null && (x === null && (x = new R()), x.inspect(e2, t2), n2 && (A = setTimeout(N, 2e3))));
      }
      var D = new Set();
      function j(e2, t2) {
        function n2(e3) {
          e3 && typeof e3.addEventListener == "function" && (e3.addEventListener("click", i2, true), e3.addEventListener("mousedown", l2, true), e3.addEventListener("mouseover", l2, true), e3.addEventListener("mouseup", l2, true), e3.addEventListener("pointerdown", u2, true), e3.addEventListener("pointerover", c2, true), e3.addEventListener("pointerup", s2, true));
        }
        function r2() {
          N(), o2(window), D.forEach(function(e3) {
            try {
              o2(e3.contentWindow);
            } catch (e4) {
            }
          }), D = new Set();
        }
        function o2(e3) {
          e3 && typeof e3.removeEventListener == "function" && (e3.removeEventListener("click", i2, true), e3.removeEventListener("mousedown", l2, true), e3.removeEventListener("mouseover", l2, true), e3.removeEventListener("mouseup", l2, true), e3.removeEventListener("pointerdown", u2, true), e3.removeEventListener("pointerover", c2, true), e3.removeEventListener("pointerup", s2, true));
        }
        function i2(t3) {
          t3.preventDefault(), t3.stopPropagation(), r2(), e2.send("stopInspectingNative", true);
        }
        function l2(e3) {
          e3.preventDefault(), e3.stopPropagation();
        }
        function u2(e3) {
          e3.preventDefault(), e3.stopPropagation(), f2(e3.target);
        }
        function c2(e3) {
          e3.preventDefault(), e3.stopPropagation();
          var t3 = e3.target;
          if (t3.tagName === "IFRAME") {
            var r3 = t3;
            try {
              if (!D.has(r3))
                n2(r3.contentWindow), D.add(r3);
            } catch (e4) {
            }
          }
          L([t3], null, false), f2(t3);
        }
        function s2(e3) {
          e3.preventDefault(), e3.stopPropagation();
        }
        e2.addListener("clearNativeElementHighlight", function() {
          N();
        }), e2.addListener("highlightNativeElement", function(n3) {
          var r3 = n3.displayName, o3 = n3.hideAfterTimeout, i3 = n3.id, a2 = n3.openNativeElementsPanel, l3 = n3.rendererID, u3 = n3.scrollIntoView, c3 = t2.rendererInterfaces[l3];
          c3 == null && console.warn('Invalid renderer id "'.concat(l3, '" for element "').concat(i3, '"'));
          var s3 = null;
          c3 != null && (s3 = c3.findNativeNodesForFiberID(i3));
          if (s3 != null && s3[0] != null) {
            var f3 = s3[0];
            u3 && typeof f3.scrollIntoView == "function" && f3.scrollIntoView({block: "nearest", inline: "nearest"}), L(s3, r3, o3), a2 && (window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0 = f3, e2.send("syncSelectionToNativeElementsPanel"));
          } else
            N();
        }), e2.addListener("shutdown", r2), e2.addListener("startInspectingNative", function() {
          n2(window);
        }), e2.addListener("stopInspectingNative", r2);
        var f2 = a()(function(e3) {
          var t3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : p, n3 = void 0, r3 = [], o3 = void 0, i3 = false, a2 = function(e4, n4) {
            return t3(e4, r3[n4]);
          }, l3 = function() {
            for (var t4 = arguments.length, l4 = Array(t4), u3 = 0; u3 < t4; u3++)
              l4[u3] = arguments[u3];
            return i3 && n3 === this && l4.length === r3.length && l4.every(a2) ? o3 : (i3 = true, n3 = this, r3 = l4, o3 = e3.apply(this, l4));
          };
          return l3;
        }(function(n3) {
          var r3 = t2.getIDForNode(n3);
          r3 !== null && e2.send("selectFiber", r3);
        }), 200, {leading: false});
      }
      var F = ["#37afa9", "#63b19e", "#80b393", "#97b488", "#abb67d", "#beb771", "#cfb965", "#dfba57", "#efbb49", "#febc38"], M = null;
      function U(e2) {
        M === null && function() {
          (M = window.document.createElement("canvas")).style.cssText = "\n    xx-background-color: red;\n    xx-opacity: 0.5;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1000000000;\n  ";
          var e3 = window.document.documentElement;
          e3.insertBefore(M, e3.firstChild);
        }();
        var t2 = M;
        t2.width = window.innerWidth, t2.height = window.innerHeight;
        var n2 = t2.getContext("2d");
        n2.clearRect(0, 0, t2.width, t2.height), e2.forEach(function(e3) {
          var t3 = e3.count, r2 = e3.rect;
          if (r2 !== null) {
            var o2 = Math.min(F.length - 1, t3 - 1);
            !function(e4, t4, n3) {
              var r3 = t4.height, o3 = t4.left, i2 = t4.top, a2 = t4.width;
              e4.lineWidth = 1, e4.strokeStyle = "#f0f0f0", e4.strokeRect(o3 - 1, i2 - 1, a2 + 2, r3 + 2), e4.lineWidth = 1, e4.strokeStyle = "#f0f0f0", e4.strokeRect(o3 + 1, i2 + 1, a2 - 1, r3 - 1), e4.strokeStyle = n3, e4.setLineDash([0]), e4.lineWidth = 1, e4.strokeRect(o3, i2, a2 - 1, r3 - 1), e4.setLineDash([0]);
            }(n2, r2, F[o2]);
          }
        });
      }
      function H(e2) {
        return (H = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      var V = (typeof performance == "undefined" ? "undefined" : H(performance)) === "object" && typeof performance.now == "function" ? function() {
        return performance.now();
      } : function() {
        return Date.now();
      }, $ = new Map(), z = null, B = false, G = null;
      function W(e2) {
        (B = e2) || ($.clear(), z !== null && (cancelAnimationFrame(z), z = null), G !== null && (clearTimeout(G), G = null), M !== null && (M.parentNode != null && M.parentNode.removeChild(M), M = null));
      }
      function X(e2) {
        B && (e2.forEach(function(e3) {
          var t2 = $.get(e3), n2 = V(), r2 = t2 != null ? t2.lastMeasuredAt : 0, o2 = t2 != null ? t2.rect : null;
          (o2 === null || r2 + 250 < n2) && (r2 = n2, o2 = function(e4) {
            if (!e4 || typeof e4.getBoundingClientRect != "function")
              return null;
            var t3 = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
            return b(e4, t3);
          }(e3)), $.set(e3, {count: t2 != null ? t2.count + 1 : 1, expirationTime: t2 != null ? Math.min(n2 + 3e3, t2.expirationTime + 250) : n2 + 250, lastMeasuredAt: r2, rect: o2});
        }), G !== null && (clearTimeout(G), G = null), z === null && (z = requestAnimationFrame(q)));
      }
      function q() {
        z = null, G = null;
        var e2 = V(), t2 = Number.MAX_VALUE;
        $.forEach(function(n2, r2) {
          n2.expirationTime < e2 ? $.delete(r2) : t2 = Math.min(t2, n2.expirationTime);
        }), U($), t2 !== Number.MAX_VALUE && (G = setTimeout(q, t2 - e2));
      }
      var Y = n(2), K = n(6), Q = n.n(K), J = n(0);
      var Z = 60120;
      if (typeof Symbol == "function" && Symbol.for) {
        var ee = Symbol.for;
        ee("react.element"), ee("react.portal"), ee("react.fragment"), ee("react.strict_mode"), ee("react.profiler"), ee("react.provider"), ee("react.context"), ee("react.forward_ref"), ee("react.suspense"), Z = ee("react.suspense_list"), ee("react.memo"), ee("react.lazy"), ee("react.fundamental"), ee("react.scope"), ee("react.opaque.id"), ee("react.debug_trace_mode"), ee("react.offscreen"), ee("react.legacy_hidden");
      }
      typeof Symbol == "function" && Symbol.iterator;
      function te(e2) {
        return (te = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      var ne = {inspectable: Symbol("inspectable"), inspected: Symbol("inspected"), name: Symbol("name"), preview_long: Symbol("preview_long"), preview_short: Symbol("preview_short"), readonly: Symbol("readonly"), size: Symbol("size"), type: Symbol("type"), unserializable: Symbol("unserializable")};
      function re(e2, t2, n2, r2, o2) {
        r2.push(o2);
        var i2 = {inspectable: t2, type: e2, preview_long: Oe(n2, true), preview_short: Oe(n2, false), name: n2.constructor && n2.constructor.name !== "Object" ? n2.constructor.name : ""};
        return e2 === "array" || e2 === "typed_array" ? i2.size = n2.length : e2 === "object" && (i2.size = Object.keys(n2).length), e2 !== "iterator" && e2 !== "typed_array" || (i2.readonly = true), i2;
      }
      function oe(e2, t2, n2, r2, o2) {
        var i2, a2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0, l2 = we(e2);
        switch (l2) {
          case "html_element":
            return t2.push(r2), {inspectable: false, preview_short: Oe(e2, false), preview_long: Oe(e2, true), name: e2.tagName, type: l2};
          case "function":
            return t2.push(r2), {inspectable: false, preview_short: Oe(e2, false), preview_long: Oe(e2, true), name: typeof e2.name != "function" && e2.name ? e2.name : "function", type: l2};
          case "string":
            return e2.length <= 500 ? e2 : e2.slice(0, 500) + "...";
          case "bigint":
          case "symbol":
            return t2.push(r2), {inspectable: false, preview_short: Oe(e2, false), preview_long: Oe(e2, true), name: e2.toString(), type: l2};
          case "react_element":
            return t2.push(r2), {inspectable: false, preview_short: Oe(e2, false), preview_long: Oe(e2, true), name: Ee(e2) || "Unknown", type: l2};
          case "array_buffer":
          case "data_view":
            return t2.push(r2), {inspectable: false, preview_short: Oe(e2, false), preview_long: Oe(e2, true), name: l2 === "data_view" ? "DataView" : "ArrayBuffer", size: e2.byteLength, type: l2};
          case "array":
            return i2 = o2(r2), a2 >= 2 && !i2 ? re(l2, true, e2, t2, r2) : e2.map(function(e3, l3) {
              return oe(e3, t2, n2, r2.concat([l3]), o2, i2 ? 1 : a2 + 1);
            });
          case "html_all_collection":
          case "typed_array":
          case "iterator":
            if (i2 = o2(r2), a2 >= 2 && !i2)
              return re(l2, true, e2, t2, r2);
            var u2 = {unserializable: true, type: l2, readonly: true, size: l2 === "typed_array" ? e2.length : void 0, preview_short: Oe(e2, false), preview_long: Oe(e2, true), name: e2.constructor && e2.constructor.name !== "Object" ? e2.constructor.name : ""};
            return te(e2[Symbol.iterator]) && Array.from(e2).forEach(function(e3, l3) {
              return u2[l3] = oe(e3, t2, n2, r2.concat([l3]), o2, i2 ? 1 : a2 + 1);
            }), n2.push(r2), u2;
          case "opaque_iterator":
            return t2.push(r2), {inspectable: false, preview_short: Oe(e2, false), preview_long: Oe(e2, true), name: e2[Symbol.toStringTag], type: l2};
          case "date":
          case "regexp":
            return t2.push(r2), {inspectable: false, preview_short: Oe(e2, false), preview_long: Oe(e2, true), name: e2.toString(), type: l2};
          case "object":
            if (i2 = o2(r2), a2 >= 2 && !i2)
              return re(l2, true, e2, t2, r2);
            var c2 = {};
            return fe(e2).forEach(function(l3) {
              var u3 = l3.toString();
              c2[u3] = oe(e2[l3], t2, n2, r2.concat([u3]), o2, i2 ? 1 : a2 + 1);
            }), c2;
          case "infinity":
          case "nan":
          case "undefined":
            return t2.push(r2), {type: l2};
          default:
            return e2;
        }
      }
      function ie(e2) {
        return (ie = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function ae(e2) {
        return function(e3) {
          if (Array.isArray(e3))
            return le(e3);
        }(e2) || function(e3) {
          if (typeof Symbol != "undefined" && Symbol.iterator in Object(e3))
            return Array.from(e3);
        }(e2) || function(e3, t2) {
          if (!e3)
            return;
          if (typeof e3 == "string")
            return le(e3, t2);
          var n2 = Object.prototype.toString.call(e3).slice(8, -1);
          n2 === "Object" && e3.constructor && (n2 = e3.constructor.name);
          if (n2 === "Map" || n2 === "Set")
            return Array.from(e3);
          if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
            return le(e3, t2);
        }(e2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function le(e2, t2) {
        (t2 == null || t2 > e2.length) && (t2 = e2.length);
        for (var n2 = 0, r2 = new Array(t2); n2 < t2; n2++)
          r2[n2] = e2[n2];
        return r2;
      }
      var ue = new WeakMap(), ce = new Q.a({max: 1e3});
      function se(e2, t2) {
        return e2.toString() > t2.toString() ? 1 : t2.toString() > e2.toString() ? -1 : 0;
      }
      function fe(e2) {
        for (var t2 = [], n2 = e2, r2 = function() {
          var e3 = [].concat(ae(Object.keys(n2)), ae(Object.getOwnPropertySymbols(n2))), r3 = Object.getOwnPropertyDescriptors(n2);
          e3.forEach(function(e4) {
            r3[e4].enumerable && t2.push(e4);
          }), n2 = Object.getPrototypeOf(n2);
        }; n2 != null; )
          r2();
        return t2;
      }
      function pe(e2) {
        var t2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "Anonymous", n2 = ue.get(e2);
        if (n2 != null)
          return n2;
        var r2 = t2;
        return typeof e2.displayName == "string" ? r2 = e2.displayName : typeof e2.name == "string" && e2.name !== "" && (r2 = e2.name), ue.set(e2, r2), r2;
      }
      var de = 0;
      function he() {
        return ++de;
      }
      function me(e2) {
        var t2 = ce.get(e2);
        if (t2 !== void 0)
          return t2;
        for (var n2 = new Array(e2.length), r2 = 0; r2 < e2.length; r2++)
          n2[r2] = e2.codePointAt(r2);
        return ce.set(e2, n2), n2;
      }
      function ve(e2, t2) {
        return t2.reduce(function(e3, t3) {
          if (e3) {
            if (hasOwnProperty.call(e3, t3))
              return e3[t3];
            if (typeof e3[Symbol.iterator] == "function")
              return Array.from(e3)[t3];
          }
          return null;
        }, e2);
      }
      function ye(e2, t2) {
        var n2 = t2.length, r2 = t2[n2 - 1];
        if (e2 != null) {
          var o2 = ve(e2, t2.slice(0, n2 - 1));
          o2 && (Array.isArray(o2) ? o2.splice(r2, 1) : delete o2[r2]);
        }
      }
      function ge(e2, t2, n2) {
        var r2 = t2.length;
        if (e2 != null) {
          var o2 = ve(e2, t2.slice(0, r2 - 1));
          if (o2) {
            var i2 = t2[r2 - 1];
            o2[n2[r2 - 1]] = o2[i2], Array.isArray(o2) ? o2.splice(i2, 1) : delete o2[i2];
          }
        }
      }
      function be(e2, t2, n2) {
        var r2 = t2.length, o2 = t2[r2 - 1];
        if (e2 != null) {
          var i2 = ve(e2, t2.slice(0, r2 - 1));
          i2 && (i2[o2] = n2);
        }
      }
      function we(e2) {
        if (e2 === null)
          return "null";
        if (e2 === void 0)
          return "undefined";
        if (Object(J.isElement)(e2))
          return "react_element";
        if (typeof HTMLElement != "undefined" && e2 instanceof HTMLElement)
          return "html_element";
        switch (ie(e2)) {
          case "bigint":
            return "bigint";
          case "boolean":
            return "boolean";
          case "function":
            return "function";
          case "number":
            return Number.isNaN(e2) ? "nan" : Number.isFinite(e2) ? "number" : "infinity";
          case "object":
            if (Array.isArray(e2))
              return "array";
            if (ArrayBuffer.isView(e2))
              return hasOwnProperty.call(e2.constructor, "BYTES_PER_ELEMENT") ? "typed_array" : "data_view";
            if (e2.constructor && e2.constructor.name === "ArrayBuffer")
              return "array_buffer";
            if (typeof e2[Symbol.iterator] == "function")
              return e2[Symbol.iterator]() === e2 ? "opaque_iterator" : "iterator";
            if (e2.constructor && e2.constructor.name === "RegExp")
              return "regexp";
            var t2 = Object.prototype.toString.call(e2);
            return t2 === "[object Date]" ? "date" : t2 === "[object HTMLAllCollection]" ? "html_all_collection" : "object";
          case "string":
            return "string";
          case "symbol":
            return "symbol";
          case "undefined":
            return Object.prototype.toString.call(e2) === "[object HTMLAllCollection]" ? "html_all_collection" : "undefined";
          default:
            return "unknown";
        }
      }
      function Ee(e2) {
        switch (Object(J.typeOf)(e2)) {
          case J.ContextConsumer:
            return "ContextConsumer";
          case J.ContextProvider:
            return "ContextProvider";
          case J.ForwardRef:
            return "ForwardRef";
          case J.Fragment:
            return "Fragment";
          case J.Lazy:
            return "Lazy";
          case J.Memo:
            return "Memo";
          case J.Portal:
            return "Portal";
          case J.Profiler:
            return "Profiler";
          case J.StrictMode:
            return "StrictMode";
          case J.Suspense:
            return "Suspense";
          case Z:
            return "SuspenseList";
          default:
            var t2 = e2.type;
            return typeof t2 == "string" ? t2 : typeof t2 == "function" ? pe(t2, "Anonymous") : t2 != null ? "NotImplementedInDevtools" : "Element";
        }
      }
      function Se(e2) {
        var t2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;
        return e2.length > t2 ? e2.substr(0, t2) + "\u2026" : e2;
      }
      function Oe(e2, t2) {
        if (e2 != null && hasOwnProperty.call(e2, ne.type))
          return t2 ? e2[ne.preview_long] : e2[ne.preview_short];
        switch (we(e2)) {
          case "html_element":
            return "<".concat(Se(e2.tagName.toLowerCase()), " />");
          case "function":
            return Se("\u0192 ".concat(typeof e2.name == "function" ? "" : e2.name, "() {}"));
          case "string":
            return '"'.concat(e2, '"');
          case "bigint":
            return Se(e2.toString() + "n");
          case "regexp":
          case "symbol":
            return Se(e2.toString());
          case "react_element":
            return "<".concat(Se(Ee(e2) || "Unknown"), " />");
          case "array_buffer":
            return "ArrayBuffer(".concat(e2.byteLength, ")");
          case "data_view":
            return "DataView(".concat(e2.buffer.byteLength, ")");
          case "array":
            if (t2) {
              for (var n2 = "", r2 = 0; r2 < e2.length && (r2 > 0 && (n2 += ", "), !((n2 += Oe(e2[r2], false)).length > 50)); r2++)
                ;
              return "[".concat(Se(n2), "]");
            }
            var o2 = hasOwnProperty.call(e2, ne.size) ? e2[ne.size] : e2.length;
            return "Array(".concat(o2, ")");
          case "typed_array":
            var i2 = "".concat(e2.constructor.name, "(").concat(e2.length, ")");
            if (t2) {
              for (var a2 = "", l2 = 0; l2 < e2.length && (l2 > 0 && (a2 += ", "), !((a2 += e2[l2]).length > 50)); l2++)
                ;
              return "".concat(i2, " [").concat(Se(a2), "]");
            }
            return i2;
          case "iterator":
            var u2 = e2.constructor.name;
            if (t2) {
              for (var c2 = Array.from(e2), s2 = "", f2 = 0; f2 < c2.length; f2++) {
                var p2 = c2[f2];
                if (f2 > 0 && (s2 += ", "), Array.isArray(p2)) {
                  var d2 = Oe(p2[0], true), h2 = Oe(p2[1], false);
                  s2 += "".concat(d2, " => ").concat(h2);
                } else
                  s2 += Oe(p2, false);
                if (s2.length > 50)
                  break;
              }
              return "".concat(u2, "(").concat(e2.size, ") {").concat(Se(s2), "}");
            }
            return "".concat(u2, "(").concat(e2.size, ")");
          case "opaque_iterator":
            return e2[Symbol.toStringTag];
          case "date":
            return e2.toString();
          case "object":
            if (t2) {
              for (var m2 = fe(e2).sort(se), v2 = "", y2 = 0; y2 < m2.length; y2++) {
                var g2 = m2[y2];
                if (y2 > 0 && (v2 += ", "), (v2 += "".concat(g2.toString(), ": ").concat(Oe(e2[g2], false))).length > 50)
                  break;
              }
              return "{".concat(Se(v2), "}");
            }
            return "{\u2026}";
          case "boolean":
          case "number":
          case "infinity":
          case "nan":
          case "null":
          case "undefined":
            return e2;
          default:
            try {
              return Se("" + e2);
            } catch (e3) {
              return "unserializable";
            }
        }
      }
      var Ie = n(7);
      function _e(e2) {
        return (_e = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function Ce(e2, t2) {
        var n2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), n2.push.apply(n2, r2);
        }
        return n2;
      }
      function ke(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var n2 = arguments[t2] != null ? arguments[t2] : {};
          t2 % 2 ? Ce(Object(n2), true).forEach(function(t3) {
            Re(e2, t3, n2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(n2)) : Ce(Object(n2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(n2, t3));
          });
        }
        return e2;
      }
      function Re(e2, t2, n2) {
        return t2 in e2 ? Object.defineProperty(e2, t2, {value: n2, enumerable: true, configurable: true, writable: true}) : e2[t2] = n2, e2;
      }
      function Te(e2, t2) {
        var n2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
        if (e2 !== null) {
          var r2 = [], o2 = [], i2 = oe(e2, r2, o2, n2, t2);
          return {data: i2, cleaned: r2, unserializable: o2};
        }
        return null;
      }
      function Pe(e2) {
        var t2, n2, r2 = (t2 = e2, n2 = new Set(), JSON.stringify(t2, function(e3, t3) {
          if (_e(t3) === "object" && t3 !== null) {
            if (n2.has(t3))
              return;
            n2.add(t3);
          }
          return typeof t3 == "bigint" ? t3.toString() + "n" : t3;
        })), o2 = r2 === void 0 ? "undefined" : r2, i2 = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.clipboardCopyText;
        typeof i2 == "function" ? i2(o2).catch(function(e3) {
        }) : Object(Ie.copy)(o2);
      }
      function Ae(e2, t2) {
        var n2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, r2 = t2[n2], o2 = Array.isArray(e2) ? e2.slice() : ke({}, e2);
        return n2 + 1 === t2.length ? Array.isArray(o2) ? o2.splice(r2, 1) : delete o2[r2] : o2[r2] = Ae(e2[r2], t2, n2 + 1), o2;
      }
      function xe(e2, t2, n2) {
        var r2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, o2 = t2[r2], i2 = Array.isArray(e2) ? e2.slice() : ke({}, e2);
        if (r2 + 1 === t2.length) {
          var a2 = n2[r2];
          i2[a2] = i2[o2], Array.isArray(i2) ? i2.splice(o2, 1) : delete i2[o2];
        } else
          i2[o2] = xe(e2[o2], t2, n2, r2 + 1);
        return i2;
      }
      function Ne(e2, t2, n2) {
        var r2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
        if (r2 >= t2.length)
          return n2;
        var o2 = t2[r2], i2 = Array.isArray(e2) ? e2.slice() : ke({}, e2);
        return i2[o2] = Ne(e2[o2], t2, n2, r2 + 1), i2;
      }
      var Le = n(8);
      function De(e2, t2) {
        var n2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), n2.push.apply(n2, r2);
        }
        return n2;
      }
      function je(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var n2 = arguments[t2] != null ? arguments[t2] : {};
          t2 % 2 ? De(Object(n2), true).forEach(function(t3) {
            Fe(e2, t3, n2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(n2)) : De(Object(n2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(n2, t3));
          });
        }
        return e2;
      }
      function Fe(e2, t2, n2) {
        return t2 in e2 ? Object.defineProperty(e2, t2, {value: n2, enumerable: true, configurable: true, writable: true}) : e2[t2] = n2, e2;
      }
      function Me(e2) {
        return function(e3) {
          if (Array.isArray(e3))
            return $e(e3);
        }(e2) || function(e3) {
          if (typeof Symbol != "undefined" && Symbol.iterator in Object(e3))
            return Array.from(e3);
        }(e2) || Ve(e2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function Ue(e2, t2) {
        return function(e3) {
          if (Array.isArray(e3))
            return e3;
        }(e2) || function(e3, t3) {
          if (typeof Symbol == "undefined" || !(Symbol.iterator in Object(e3)))
            return;
          var n2 = [], r2 = true, o2 = false, i2 = void 0;
          try {
            for (var a2, l2 = e3[Symbol.iterator](); !(r2 = (a2 = l2.next()).done) && (n2.push(a2.value), !t3 || n2.length !== t3); r2 = true)
              ;
          } catch (e4) {
            o2 = true, i2 = e4;
          } finally {
            try {
              r2 || l2.return == null || l2.return();
            } finally {
              if (o2)
                throw i2;
            }
          }
          return n2;
        }(e2, t2) || Ve(e2, t2) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function He(e2, t2) {
        var n2;
        if (typeof Symbol == "undefined" || e2[Symbol.iterator] == null) {
          if (Array.isArray(e2) || (n2 = Ve(e2)) || t2 && e2 && typeof e2.length == "number") {
            n2 && (e2 = n2);
            var r2 = 0, o2 = function() {
            };
            return {s: o2, n: function() {
              return r2 >= e2.length ? {done: true} : {done: false, value: e2[r2++]};
            }, e: function(e3) {
              throw e3;
            }, f: o2};
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var i2, a2 = true, l2 = false;
        return {s: function() {
          n2 = e2[Symbol.iterator]();
        }, n: function() {
          var e3 = n2.next();
          return a2 = e3.done, e3;
        }, e: function(e3) {
          l2 = true, i2 = e3;
        }, f: function() {
          try {
            a2 || n2.return == null || n2.return();
          } finally {
            if (l2)
              throw i2;
          }
        }};
      }
      function Ve(e2, t2) {
        if (e2) {
          if (typeof e2 == "string")
            return $e(e2, t2);
          var n2 = Object.prototype.toString.call(e2).slice(8, -1);
          return n2 === "Object" && e2.constructor && (n2 = e2.constructor.name), n2 === "Map" || n2 === "Set" ? Array.from(e2) : n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2) ? $e(e2, t2) : void 0;
        }
      }
      function $e(e2, t2) {
        (t2 == null || t2 > e2.length) && (t2 = e2.length);
        for (var n2 = 0, r2 = new Array(t2); n2 < t2; n2++)
          r2[n2] = e2[n2];
        return r2;
      }
      function ze(e2) {
        return (ze = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function Be(e2) {
        return e2.flags !== void 0 ? e2.flags : e2.effectTag;
      }
      var Ge = (typeof performance == "undefined" ? "undefined" : ze(performance)) === "object" && typeof performance.now == "function" ? function() {
        return performance.now();
      } : function() {
        return Date.now();
      };
      function We(e2) {
        var t2 = null;
        function n2(e3) {
          var t3 = ze(e3) === "object" && e3 !== null ? e3.$$typeof : e3;
          return ze(t3) === "symbol" ? t3.toString() : t3;
        }
        var r2 = t2 = Object(Y.gt)(e2, "17.0.1") ? {ClassComponent: 1, ContextConsumer: 9, ContextProvider: 10, CoroutineComponent: -1, CoroutineHandlerPhase: -1, DehydratedSuspenseComponent: 18, ForwardRef: 11, Fragment: 7, FunctionComponent: 0, HostComponent: 5, HostPortal: 4, HostRoot: 3, HostText: 6, IncompleteClassComponent: 17, IndeterminateComponent: 2, LazyComponent: 16, LegacyHiddenComponent: 23, MemoComponent: 14, Mode: 8, OffscreenComponent: 22, Profiler: 12, ScopeComponent: 21, SimpleMemoComponent: 15, SuspenseComponent: 13, SuspenseListComponent: 19, YieldComponent: -1} : Object(Y.gte)(e2, "17.0.0-alpha") ? {ClassComponent: 1, ContextConsumer: 9, ContextProvider: 10, CoroutineComponent: -1, CoroutineHandlerPhase: -1, DehydratedSuspenseComponent: 18, ForwardRef: 11, Fragment: 7, FunctionComponent: 0, HostComponent: 5, HostPortal: 4, HostRoot: 3, HostText: 6, IncompleteClassComponent: 17, IndeterminateComponent: 2, LazyComponent: 16, LegacyHiddenComponent: 24, MemoComponent: 14, Mode: 8, OffscreenComponent: 23, Profiler: 12, ScopeComponent: 21, SimpleMemoComponent: 15, SuspenseComponent: 13, SuspenseListComponent: 19, YieldComponent: -1} : Object(Y.gte)(e2, "16.6.0-beta.0") ? {ClassComponent: 1, ContextConsumer: 9, ContextProvider: 10, CoroutineComponent: -1, CoroutineHandlerPhase: -1, DehydratedSuspenseComponent: 18, ForwardRef: 11, Fragment: 7, FunctionComponent: 0, HostComponent: 5, HostPortal: 4, HostRoot: 3, HostText: 6, IncompleteClassComponent: 17, IndeterminateComponent: 2, LazyComponent: 16, LegacyHiddenComponent: -1, MemoComponent: 14, Mode: 8, OffscreenComponent: -1, Profiler: 12, ScopeComponent: -1, SimpleMemoComponent: 15, SuspenseComponent: 13, SuspenseListComponent: 19, YieldComponent: -1} : Object(Y.gte)(e2, "16.4.3-alpha") ? {ClassComponent: 2, ContextConsumer: 11, ContextProvider: 12, CoroutineComponent: -1, CoroutineHandlerPhase: -1, DehydratedSuspenseComponent: -1, ForwardRef: 13, Fragment: 9, FunctionComponent: 0, HostComponent: 7, HostPortal: 6, HostRoot: 5, HostText: 8, IncompleteClassComponent: -1, IndeterminateComponent: 4, LazyComponent: -1, LegacyHiddenComponent: -1, MemoComponent: -1, Mode: 10, OffscreenComponent: -1, Profiler: 15, ScopeComponent: -1, SimpleMemoComponent: -1, SuspenseComponent: 16, SuspenseListComponent: -1, YieldComponent: -1} : {ClassComponent: 2, ContextConsumer: 12, ContextProvider: 13, CoroutineComponent: 7, CoroutineHandlerPhase: 8, DehydratedSuspenseComponent: -1, ForwardRef: 14, Fragment: 10, FunctionComponent: 1, HostComponent: 5, HostPortal: 4, HostRoot: 3, HostText: 6, IncompleteClassComponent: -1, IndeterminateComponent: 0, LazyComponent: -1, LegacyHiddenComponent: -1, MemoComponent: -1, Mode: 11, OffscreenComponent: -1, Profiler: 15, ScopeComponent: -1, SimpleMemoComponent: -1, SuspenseComponent: 16, SuspenseListComponent: -1, YieldComponent: 9}, o2 = r2.ClassComponent, i2 = r2.IncompleteClassComponent, a2 = r2.FunctionComponent, l2 = r2.IndeterminateComponent, u2 = r2.ForwardRef, c2 = r2.HostRoot, s2 = r2.HostComponent, f2 = r2.HostPortal, p2 = r2.HostText, d2 = r2.Fragment, h2 = r2.LazyComponent, m2 = r2.LegacyHiddenComponent, v2 = r2.MemoComponent, y2 = r2.OffscreenComponent, g2 = r2.ScopeComponent, b2 = r2.SimpleMemoComponent, w2 = r2.SuspenseComponent, E2 = r2.SuspenseListComponent;
        return {getDisplayNameForFiber: function(e3) {
          var t3 = e3.type, r3 = e3.tag, S2 = t3;
          ze(t3) === "object" && t3 !== null && (S2 = function e4(t4) {
            switch (n2(t4)) {
              case 60115:
              case "Symbol(react.memo)":
                return e4(t4.type);
              case 60112:
              case "Symbol(react.forward_ref)":
                return t4.render;
              default:
                return t4;
            }
          }(t3));
          var O2 = null;
          switch (r3) {
            case o2:
            case i2:
              return pe(S2);
            case a2:
            case l2:
              return pe(S2);
            case u2:
              return t3 && t3.displayName || pe(S2, "Anonymous");
            case c2:
              return null;
            case s2:
              return t3;
            case f2:
            case p2:
            case d2:
              return null;
            case h2:
              return "Lazy";
            case v2:
            case b2:
              return pe(S2, "Anonymous");
            case w2:
              return "Suspense";
            case m2:
              return "LegacyHidden";
            case y2:
              return "Offscreen";
            case g2:
              return "Scope";
            case E2:
              return "SuspenseList";
            default:
              switch (n2(t3)) {
                case 60111:
                case "Symbol(react.concurrent_mode)":
                case "Symbol(react.async_mode)":
                  return null;
                case 60109:
                case "Symbol(react.provider)":
                  return O2 = e3.type._context || e3.type.context, "".concat(O2.displayName || "Context", ".Provider");
                case 60110:
                case "Symbol(react.context)":
                  return O2 = e3.type._context || e3.type, "".concat(O2.displayName || "Context", ".Consumer");
                case 60108:
                case "Symbol(react.strict_mode)":
                  return null;
                case 60114:
                case "Symbol(react.profiler)":
                  return "Profiler(".concat(e3.memoizedProps.id, ")");
                case 60119:
                case "Symbol(react.scope)":
                  return "Scope";
                default:
                  return null;
              }
          }
        }, getTypeSymbol: n2, ReactPriorityLevels: {ImmediatePriority: 99, UserBlockingPriority: 98, NormalPriority: 97, LowPriority: 96, IdlePriority: 95, NoPriority: 90}, ReactTypeOfWork: t2, ReactTypeOfSideEffect: {NoFlags: 0, PerformedWork: 1, Placement: 2}};
      }
      function Xe(e2, t2, n2, r2) {
        var o2 = We(n2.version), i2 = o2.getDisplayNameForFiber, a2 = o2.getTypeSymbol, l2 = o2.ReactPriorityLevels, u2 = o2.ReactTypeOfWork, s2 = o2.ReactTypeOfSideEffect, f2 = s2.NoFlags, p2 = s2.PerformedWork, d2 = s2.Placement, h2 = u2.FunctionComponent, m2 = u2.ClassComponent, v2 = u2.ContextConsumer, y2 = u2.DehydratedSuspenseComponent, g2 = u2.Fragment, b2 = u2.ForwardRef, w2 = u2.HostRoot, E2 = u2.HostPortal, S2 = u2.HostComponent, O2 = u2.HostText, I2 = u2.IncompleteClassComponent, _2 = u2.IndeterminateComponent, C2 = u2.MemoComponent, k2 = u2.OffscreenComponent, R2 = u2.SimpleMemoComponent, T2 = u2.SuspenseComponent, P2 = u2.SuspenseListComponent, A2 = l2.ImmediatePriority, x2 = l2.UserBlockingPriority, N2 = l2.NormalPriority, L2 = l2.LowPriority, D2 = l2.IdlePriority, j2 = l2.NoPriority, F2 = n2.overrideHookState, M2 = n2.overrideHookStateDeletePath, U2 = n2.overrideHookStateRenamePath, H2 = n2.overrideProps, V2 = n2.overridePropsDeletePath, $2 = n2.overridePropsRenamePath, z2 = n2.setSuspenseHandler, B2 = n2.scheduleUpdate, G2 = typeof z2 == "function" && typeof B2 == "function";
        pt(n2);
        var W2 = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false, X2 = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
        (W2 || X2) && ht({appendComponentStack: W2, breakOnConsoleErrors: X2});
        var q2 = new Set(), Y2 = new Set(), K2 = new Set(), Q2 = false, J2 = new Set();
        function Z2(e3) {
          K2.clear(), q2.clear(), Y2.clear(), e3.forEach(function(e4) {
            if (e4.isEnabled)
              switch (e4.type) {
                case 2:
                  e4.isValid && e4.value !== "" && q2.add(new RegExp(e4.value, "i"));
                  break;
                case 1:
                  K2.add(e4.value);
                  break;
                case 3:
                  e4.isValid && e4.value !== "" && Y2.add(new RegExp(e4.value, "i"));
                  break;
                case 4:
                  q2.add(new RegExp("\\("));
                  break;
                default:
                  console.warn('Invalid component filter type "'.concat(e4.type, '"'));
              }
          });
        }
        function ee2(e3) {
          var t3 = e3._debugSource, n3 = e3.tag, r3 = e3.type;
          switch (n3) {
            case y2:
              return true;
            case E2:
            case O2:
            case g2:
            case k2:
              return true;
            case w2:
              return false;
            default:
              switch (a2(r3)) {
                case 60111:
                case "Symbol(react.concurrent_mode)":
                case "Symbol(react.async_mode)":
                case 60108:
                case "Symbol(react.strict_mode)":
                  return true;
              }
          }
          var o3 = te2(e3);
          if (K2.has(o3))
            return true;
          if (q2.size > 0) {
            var l3 = i2(e3);
            if (l3 != null) {
              var u3, c2 = He(q2);
              try {
                for (c2.s(); !(u3 = c2.n()).done; ) {
                  if (u3.value.test(l3))
                    return true;
                }
              } catch (e4) {
                c2.e(e4);
              } finally {
                c2.f();
              }
            }
          }
          if (t3 != null && Y2.size > 0) {
            var s3, f3 = t3.fileName, p3 = He(Y2);
            try {
              for (p3.s(); !(s3 = p3.n()).done; ) {
                if (s3.value.test(f3))
                  return true;
              }
            } catch (e4) {
              p3.e(e4);
            } finally {
              p3.f();
            }
          }
          return false;
        }
        function te2(e3) {
          var t3 = e3.type;
          switch (e3.tag) {
            case m2:
            case I2:
              return 1;
            case h2:
            case _2:
              return 5;
            case b2:
              return 6;
            case w2:
              return 11;
            case S2:
              return 7;
            case E2:
            case O2:
            case g2:
              return 9;
            case C2:
            case R2:
              return 8;
            case T2:
              return 12;
            case P2:
              return 13;
            default:
              switch (a2(t3)) {
                case 60111:
                case "Symbol(react.concurrent_mode)":
                case "Symbol(react.async_mode)":
                  return 9;
                case 60109:
                case "Symbol(react.provider)":
                  return 2;
                case 60110:
                case "Symbol(react.context)":
                  return 2;
                case 60108:
                case "Symbol(react.strict_mode)":
                  return 9;
                case 60114:
                case "Symbol(react.profiler)":
                  return 10;
                default:
                  return 9;
              }
          }
        }
        function ne2(e3) {
          if (ie2.has(e3))
            return e3;
          var t3 = e3.alternate;
          return t3 != null && ie2.has(t3) ? t3 : (ie2.add(e3), e3);
        }
        window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ != null ? Z2(window.__REACT_DEVTOOLS_COMPONENT_FILTERS__) : Z2([{type: 1, value: 7, isEnabled: true}]);
        var re2 = new Map(), oe2 = new Map(), ie2 = new Set(), ae2 = new Map(), le2 = new Map(), ue2 = -1;
        function ce2(e3) {
          if (!re2.has(e3)) {
            var t3 = he();
            re2.set(e3, t3), oe2.set(t3, e3);
          }
          return re2.get(e3);
        }
        function se2(e3) {
          switch (te2(e3)) {
            case 1:
              if (ft2 !== null) {
                var t3 = ce2(ne2(e3)), n3 = pe2(e3);
                n3 !== null && ft2.set(t3, n3);
              }
          }
        }
        var fe2 = {};
        function pe2(e3) {
          switch (te2(e3)) {
            case 1:
              var t3 = e3.stateNode, n3 = fe2, r3 = fe2;
              return t3 != null && (t3.constructor && t3.constructor.contextType != null ? r3 = t3.context : (n3 = t3.context) && Object.keys(n3).length === 0 && (n3 = fe2)), [n3, r3];
            default:
              return null;
          }
        }
        function de2(e3) {
          switch (te2(e3)) {
            case 1:
              if (ft2 !== null) {
                var t3 = ce2(ne2(e3)), n3 = ft2.has(t3) ? ft2.get(t3) : null, r3 = pe2(e3);
                if (n3 == null || r3 == null)
                  return null;
                var o3 = Ue(n3, 2), i3 = o3[0], a3 = o3[1], l3 = Ue(r3, 2), u3 = l3[0], c2 = l3[1];
                if (u3 !== fe2)
                  return Ee2(i3, u3);
                if (c2 !== fe2)
                  return a3 !== c2;
              }
          }
          return null;
        }
        function we2(e3, t3) {
          if (e3 == null || t3 == null)
            return false;
          if (t3.hasOwnProperty("baseState") && t3.hasOwnProperty("memoizedState") && t3.hasOwnProperty("next") && t3.hasOwnProperty("queue"))
            for (; t3 !== null; ) {
              if (t3.memoizedState !== e3.memoizedState)
                return true;
              t3 = t3.next, e3 = e3.next;
            }
          return false;
        }
        function Ee2(e3, t3) {
          if (e3 == null || t3 == null)
            return null;
          if (t3.hasOwnProperty("baseState") && t3.hasOwnProperty("memoizedState") && t3.hasOwnProperty("next") && t3.hasOwnProperty("queue"))
            return null;
          var n3, r3 = [], o3 = He(new Set([].concat(Me(Object.keys(e3)), Me(Object.keys(t3)))));
          try {
            for (o3.s(); !(n3 = o3.n()).done; ) {
              var i3 = n3.value;
              e3[i3] !== t3[i3] && r3.push(i3);
            }
          } catch (e4) {
            o3.e(e4);
          } finally {
            o3.f();
          }
          return r3;
        }
        function Se2(e3, t3) {
          switch (t3.tag) {
            case m2:
            case h2:
            case v2:
            case C2:
            case R2:
              return (Be(t3) & p2) === p2;
            default:
              return e3.memoizedProps !== t3.memoizedProps || e3.memoizedState !== t3.memoizedState || e3.ref !== t3.ref;
          }
        }
        var Oe2 = [], Ie2 = [], _e2 = [], Ce2 = [], ke2 = new Map(), Re2 = 0, De2 = null;
        function Fe2(e3) {
          Oe2.push(e3);
        }
        function Ve2(n3) {
          if (Oe2.length !== 0 || Ie2.length !== 0 || _e2.length !== 0 || De2 !== null || vt2) {
            var r3 = Ie2.length + _e2.length + (De2 === null ? 0 : 1), o3 = new Array(3 + Re2 + (r3 > 0 ? 2 + r3 : 0) + Oe2.length), i3 = 0;
            if (o3[i3++] = t2, o3[i3++] = ue2, o3[i3++] = Re2, ke2.forEach(function(e3, t3) {
              o3[i3++] = t3.length;
              for (var n4 = me(t3), r4 = 0; r4 < n4.length; r4++)
                o3[i3 + r4] = n4[r4];
              i3 += t3.length;
            }), r3 > 0) {
              o3[i3++] = 2, o3[i3++] = r3;
              for (var a3 = Ie2.length - 1; a3 >= 0; a3--)
                o3[i3++] = Ie2[a3];
              for (var l3 = 0; l3 < _e2.length; l3++)
                o3[i3 + l3] = _e2[l3];
              i3 += _e2.length, De2 !== null && (o3[i3] = De2, i3++);
            }
            for (var u3 = 0; u3 < Oe2.length; u3++)
              o3[i3 + u3] = Oe2[u3];
            i3 += Oe2.length, Ce2 !== null ? Ce2.push(o3) : e2.emit("operations", o3), Oe2.length = 0, Ie2.length = 0, _e2.length = 0, De2 = null, ke2.clear(), Re2 = 0;
          }
        }
        function $e2(e3) {
          if (e3 === null)
            return 0;
          var t3 = ke2.get(e3);
          if (t3 !== void 0)
            return t3;
          var n3 = ke2.size + 1;
          return ke2.set(e3, n3), Re2 += e3.length + 1, n3;
        }
        function ze2(e3, t3) {
          _t2 !== null && (e3 !== _t2 && e3 !== _t2.alternate || Rt2(null));
          var n3 = e3.tag === w2, r3 = ne2(e3);
          if (re2.has(r3)) {
            var o3 = ce2(r3);
            n3 ? De2 = o3 : ee2(e3) || (t3 ? _e2.push(o3) : Ie2.push(o3)), re2.delete(r3), oe2.delete(o3), ie2.delete(r3), e3.hasOwnProperty("treeBaseDuration") && (le2.delete(o3), ae2.delete(o3));
          } else
            ie2.delete(r3);
        }
        function Xe2(e3, t3, n3, r3) {
          var o3 = function(e4) {
            if (It2 === null || !kt2)
              return false;
            var t4 = e4.return, n4 = t4 !== null ? t4.alternate : null;
            if (_t2 === t4 || _t2 === n4 && n4 !== null) {
              var r4 = Nt2(e4), o4 = It2[Ct2 + 1];
              if (o4 === void 0)
                throw new Error("Expected to see a frame at the next depth.");
              if (r4.index === o4.index && r4.key === o4.key && r4.displayName === o4.displayName)
                return _t2 = e4, Ct2++, kt2 = Ct2 !== It2.length - 1, false;
            }
            return kt2 = false, true;
          }(e3), a3 = !ee2(e3);
          (a3 && function(e4, t4) {
            var n4 = e4.tag === w2, r4 = ce2(ne2(e4)), o4 = e4.hasOwnProperty("_debugOwner"), a4 = e4.hasOwnProperty("treeBaseDuration");
            if (n4)
              Fe2(1), Fe2(r4), Fe2(11), Fe2(a4 ? 1 : 0), Fe2(o4 ? 1 : 0), vt2 && st2 !== null && st2.set(r4, xt2(e4));
            else {
              var l4 = e4.key, u3 = i2(e4), c3 = te2(e4), s4 = e4._debugOwner, f4 = s4 != null ? ce2(ne2(s4)) : 0, p3 = t4 ? ce2(ne2(t4)) : 0, d3 = $e2(u3), h3 = $e2(l4 === null ? null : "" + l4);
              Fe2(1), Fe2(r4), Fe2(c3), Fe2(p3), Fe2(f4), Fe2(d3), Fe2(h3);
            }
            a4 && (le2.set(r4, ue2), Ye2(e4));
          }(e3, t3), Q2) && (r3 && te2(e3) === 7 && (J2.add(e3.stateNode), r3 = false));
          if (e3.tag === u2.SuspenseComponent)
            if (e3.memoizedState !== null) {
              var l3 = e3.child, c2 = l3 ? l3.sibling : null, s3 = c2 ? c2.child : null;
              s3 !== null && Xe2(s3, a3 ? e3 : t3, true, r3);
            } else {
              var f3 = null;
              k2 === -1 ? f3 = e3.child : e3.child !== null && (f3 = e3.child.child), f3 !== null && Xe2(f3, a3 ? e3 : t3, true, r3);
            }
          else
            e3.child !== null && Xe2(e3.child, a3 ? e3 : t3, true, r3);
          !function(e4) {
            kt2 = e4;
          }(o3), n3 && e3.sibling !== null && Xe2(e3.sibling, t3, true, r3);
        }
        function qe2(e3) {
          var t3 = e3.tag === u2.SuspenseComponent && e3.memoizedState !== null, n3 = e3.child;
          if (t3) {
            var r3 = e3.child, o3 = r3 ? r3.sibling : null;
            n3 = o3 ? o3.child : null;
          }
          for (; n3 !== null; )
            n3.return !== null && (qe2(n3), ze2(n3, true)), n3 = n3.sibling;
        }
        function Ye2(e3) {
          var t3 = ce2(ne2(e3)), n3 = e3.actualDuration, r3 = e3.treeBaseDuration;
          if (ae2.set(t3, r3 || 0), vt2) {
            var o3 = e3.alternate;
            if (o3 == null || r3 !== o3.treeBaseDuration) {
              var i3 = Math.floor(1e3 * (r3 || 0));
              Fe2(4), Fe2(t3), Fe2(i3);
            }
            if ((o3 == null || Se2(o3, e3)) && n3 != null) {
              for (var a3 = n3, l3 = e3.child; l3 !== null; )
                a3 -= l3.actualDuration || 0, l3 = l3.sibling;
              var u3 = ct2;
              if (u3.durations.push(t3, n3, a3), u3.maxActualDuration = Math.max(u3.maxActualDuration, n3), gt2) {
                var c2 = function(e4, t4) {
                  switch (te2(t4)) {
                    case 1:
                    case 5:
                    case 8:
                    case 6:
                      return e4 === null ? {context: null, didHooksChange: false, isFirstMount: true, props: null, state: null} : {context: de2(t4), didHooksChange: we2(e4.memoizedState, t4.memoizedState), isFirstMount: false, props: Ee2(e4.memoizedProps, t4.memoizedProps), state: Ee2(e4.memoizedState, t4.memoizedState)};
                    default:
                      return null;
                  }
                }(o3, e3);
                c2 !== null && u3.changeDescriptions !== null && u3.changeDescriptions.set(t3, c2), se2(e3);
              }
            }
          }
        }
        function Ke2(e3, t3) {
          if (ee2(e3)) {
            var n3 = e3.child;
            if (e3.tag === T2 && e3.memoizedState !== null) {
              var r3 = e3.child, o3 = r3 ? r3.sibling : null, i3 = o3 ? o3.child : null;
              i3 !== null && (n3 = i3);
            }
            for (; n3 !== null; )
              Ke2(n3, t3), n3 = n3.sibling;
          } else
            t3.push(ce2(ne2(e3)));
        }
        function Qe2(e3, t3, n3, r3) {
          if (Q2) {
            var o3 = te2(e3);
            r3 ? o3 === 7 && (J2.add(e3.stateNode), r3 = false) : o3 !== 5 && o3 !== 1 && o3 !== 2 || (r3 = Se2(t3, e3));
          }
          rt2 !== null && rt2.id === ce2(ne2(e3)) && Se2(t3, e3) && (ot2 = true);
          var i3 = !ee2(e3), a3 = e3.tag === T2, l3 = false, u3 = a3 && t3.memoizedState !== null, c2 = a3 && e3.memoizedState !== null;
          if (u3 && c2) {
            var s3 = e3.child, f3 = s3 ? s3.sibling : null, p3 = t3.child, d3 = p3 ? p3.sibling : null;
            f3 != null && d3 != null && Qe2(f3, d3, e3, r3) && (l3 = true);
          } else if (u3 && !c2) {
            var h3 = e3.child;
            h3 !== null && Xe2(h3, i3 ? e3 : n3, true, r3), l3 = true;
          } else if (!u3 && c2) {
            qe2(t3);
            var m3 = e3.child, v3 = m3 ? m3.sibling : null;
            v3 != null && (Xe2(v3, i3 ? e3 : n3, true, r3), l3 = true);
          } else if (e3.child !== t3.child) {
            for (var y3 = e3.child, g3 = t3.child; y3; ) {
              if (y3.alternate) {
                var b3 = y3.alternate;
                Qe2(y3, b3, i3 ? e3 : n3, r3) && (l3 = true), b3 !== g3 && (l3 = true);
              } else
                Xe2(y3, i3 ? e3 : n3, false, r3), l3 = true;
              y3 = y3.sibling, l3 || g3 === null || (g3 = g3.sibling);
            }
            g3 !== null && (l3 = true);
          } else {
            if (Q2) {
              if (r3)
                Je2(ce2(ne2(e3))).forEach(function(e4) {
                  J2.add(e4.stateNode);
                });
            }
          }
          i3 && (e3.hasOwnProperty("treeBaseDuration") && Ye2(e3));
          if (l3) {
            if (i3) {
              var w3 = e3.child;
              if (c2) {
                var E3 = e3.child;
                w3 = E3 ? E3.sibling : null;
              }
              return w3 != null && function(e4, t4) {
                for (var n4 = [], r4 = t4; r4 !== null; )
                  Ke2(r4, n4), r4 = r4.sibling;
                var o4 = n4.length;
                if (!(o4 < 2)) {
                  Fe2(3), Fe2(ce2(ne2(e4))), Fe2(o4);
                  for (var i4 = 0; i4 < n4.length; i4++)
                    Fe2(n4[i4]);
                }
              }(e3, w3), false;
            }
            return true;
          }
          return false;
        }
        function Je2(e3) {
          var t3 = [], n3 = tt2(e3);
          if (!n3)
            return t3;
          for (var r3 = n3; ; ) {
            if (r3.tag === S2 || r3.tag === O2)
              t3.push(r3);
            else if (r3.child) {
              r3.child.return = r3, r3 = r3.child;
              continue;
            }
            if (r3 === n3)
              return t3;
            for (; !r3.sibling; ) {
              if (!r3.return || r3.return === n3)
                return t3;
              r3 = r3.return;
            }
            r3.sibling.return = r3.return, r3 = r3.sibling;
          }
          return t3;
        }
        function Ze2(e3) {
          try {
            var t3 = tt2(e3);
            if (t3 === null)
              return null;
            if (t3.tag === T2 && t3.memoizedState !== null) {
              var n3 = t3.child && t3.child.sibling;
              n3 != null && (t3 = n3);
            }
            return Je2(e3).map(function(e4) {
              return e4.stateNode;
            }).filter(Boolean);
          } catch (e4) {
            return null;
          }
        }
        function et2(e3) {
          var t3 = e3;
          if (e3.alternate)
            for (; t3.return; )
              t3 = t3.return;
          else {
            if ((Be(t3) & d2) !== f2)
              return 1;
            for (; t3.return; )
              if ((Be(t3 = t3.return) & d2) !== f2)
                return 1;
          }
          return t3.tag === w2 ? 2 : 3;
        }
        function tt2(e3) {
          var t3 = oe2.get(e3);
          if (t3 == null)
            return console.warn('Could not find Fiber with id "'.concat(e3, '"')), null;
          var n3 = t3.alternate;
          if (!n3) {
            var r3 = et2(t3);
            if (r3 === 3)
              throw Error("Unable to find node on an unmounted component.");
            return r3 === 1 ? null : t3;
          }
          for (var o3 = t3, i3 = n3; ; ) {
            var a3 = o3.return;
            if (a3 === null)
              break;
            var l3 = a3.alternate;
            if (l3 === null) {
              var u3 = a3.return;
              if (u3 !== null) {
                o3 = i3 = u3;
                continue;
              }
              break;
            }
            if (a3.child === l3.child) {
              for (var c2 = a3.child; c2; ) {
                if (c2 === o3) {
                  if (et2(a3) !== 2)
                    throw Error("Unable to find node on an unmounted component.");
                  return t3;
                }
                if (c2 === i3) {
                  if (et2(a3) !== 2)
                    throw Error("Unable to find node on an unmounted component.");
                  return n3;
                }
                c2 = c2.sibling;
              }
              throw Error("Unable to find node on an unmounted component.");
            }
            if (o3.return !== i3.return)
              o3 = a3, i3 = l3;
            else {
              for (var s3 = false, f3 = a3.child; f3; ) {
                if (f3 === o3) {
                  s3 = true, o3 = a3, i3 = l3;
                  break;
                }
                if (f3 === i3) {
                  s3 = true, i3 = a3, o3 = l3;
                  break;
                }
                f3 = f3.sibling;
              }
              if (!s3) {
                for (f3 = l3.child; f3; ) {
                  if (f3 === o3) {
                    s3 = true, o3 = l3, i3 = a3;
                    break;
                  }
                  if (f3 === i3) {
                    s3 = true, i3 = l3, o3 = a3;
                    break;
                  }
                  f3 = f3.sibling;
                }
                if (!s3)
                  throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
            if (o3.alternate !== i3)
              throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
          if (o3.tag !== w2)
            throw Error("Unable to find node on an unmounted component.");
          return o3.stateNode.current === o3 ? t3 : n3;
        }
        function nt2(e3) {
          var t3 = tt2(e3);
          if (t3 == null)
            return null;
          var r3 = t3._debugOwner, o3 = t3._debugSource, l3 = t3.stateNode, u3 = t3.key, c2 = t3.memoizedProps, s3 = t3.memoizedState, f3 = t3.dependencies, p3 = t3.tag, d3 = t3.type, v3 = te2(t3), y3 = !(p3 !== h2 && p3 !== R2 && p3 !== b2 || !s3 && !f3), g3 = a2(d3), w3 = false, E3 = null;
          if (p3 === m2 || p3 === h2 || p3 === I2 || p3 === _2 || p3 === C2 || p3 === b2 || p3 === R2)
            w3 = true, l3 && l3.context != null && (v3 === 1 && !(d3.contextTypes || d3.contextType) || (E3 = l3.context));
          else if (g3 === 60110 || g3 === "Symbol(react.context)") {
            var S3 = d3._context || d3;
            E3 = S3._currentValue || null;
            for (var O3 = t3.return; O3 !== null; ) {
              var k3 = O3.type, P3 = a2(k3);
              if (P3 === 60109 || P3 === "Symbol(react.provider)") {
                if ((k3._context || k3.context) === S3) {
                  E3 = O3.memoizedProps.value;
                  break;
                }
              }
              O3 = O3.return;
            }
          }
          var A3 = false;
          E3 !== null && (A3 = !!d3.contextTypes, E3 = {value: E3});
          var x3 = null;
          if (r3) {
            x3 = [];
            for (var N3 = r3; N3 !== null; )
              x3.push({displayName: i2(N3) || "Anonymous", id: ce2(ne2(N3)), type: te2(N3)}), N3 = N3._debugOwner || null;
          }
          var L3 = p3 === T2 && s3 !== null, D3 = null;
          if (y3) {
            var j3 = {};
            for (var z3 in console)
              try {
                j3[z3] = console[z3], console[z3] = function() {
                };
              } catch (e4) {
              }
            try {
              D3 = Object(Le.inspectHooksOfFiber)(t3, n2.currentDispatcherRef);
            } finally {
              for (var B3 in j3)
                try {
                  console[B3] = j3[B3];
                } catch (e4) {
                }
            }
          }
          for (var W3 = null, X3 = t3; X3.return !== null; )
            X3 = X3.return;
          var q3 = X3.stateNode;
          return q3 != null && q3._debugRootType !== null && (W3 = q3._debugRootType), {id: e3, canEditHooks: typeof F2 == "function", canEditFunctionProps: typeof H2 == "function", canEditHooksAndDeletePaths: typeof M2 == "function", canEditHooksAndRenamePaths: typeof U2 == "function", canEditFunctionPropsDeletePaths: typeof V2 == "function", canEditFunctionPropsRenamePaths: typeof $2 == "function", canToggleSuspense: G2 && (!L3 || St2.has(e3)), canViewSource: w3, hasLegacyContext: A3, key: u3 != null ? u3 : null, displayName: i2(t3), type: v3, context: E3, hooks: D3, props: c2, state: y3 ? null : s3, owners: x3, source: o3 || null, rootType: W3, rendererPackageName: n2.rendererPackageName, rendererVersion: n2.version};
        }
        var rt2 = null, ot2 = false, it2 = {};
        function at2(e3) {
          return rt2 !== null && rt2.id === e3 && !ot2;
        }
        function lt2(e3) {
          var t3 = it2;
          e3.forEach(function(e4) {
            t3[e4] || (t3[e4] = {}), t3 = t3[e4];
          });
        }
        function ut2(e3, t3) {
          return function(n3) {
            switch (t3) {
              case "hooks":
                if (n3.length === 1)
                  return true;
                if (n3[n3.length - 1] === "subHooks" || n3[n3.length - 2] === "subHooks")
                  return true;
            }
            var r3 = e3 === null ? it2 : it2[e3];
            if (!r3)
              return false;
            for (var o3 = 0; o3 < n3.length; o3++)
              if (!(r3 = r3[n3[o3]]))
                return false;
            return true;
          };
        }
        var ct2 = null, st2 = null, ft2 = null, dt2 = null, mt2 = null, vt2 = false, yt2 = 0, gt2 = false, bt2 = null;
        function wt2(n3) {
          vt2 || (gt2 = n3, st2 = new Map(), dt2 = new Map(ae2), mt2 = new Map(le2), ft2 = new Map(), e2.getFiberRoots(t2).forEach(function(e3) {
            var t3 = ce2(ne2(e3.current));
            st2.set(t3, xt2(e3.current)), n3 && function e4(t4) {
              se2(t4);
              for (var n4 = t4.child; n4 !== null; )
                e4(n4), n4 = n4.sibling;
            }(e3.current);
          }), vt2 = true, yt2 = Ge(), bt2 = new Map());
        }
        function Et2() {
          return false;
        }
        c("React::DevTools::reloadAndProfile") === "true" && wt2(c("React::DevTools::recordChangeDescriptions") === "true");
        var St2 = new Set();
        function Ot2(e3) {
          var t3 = ce2(ne2(e3));
          return St2.has(t3);
        }
        var It2 = null, _t2 = null, Ct2 = -1, kt2 = false;
        function Rt2(e3) {
          e3 === null && (_t2 = null, Ct2 = -1, kt2 = false), It2 = e3;
        }
        var Tt2 = new Map(), Pt2 = new Map();
        function At2(e3, t3) {
          var n3 = xt2(t3), r3 = Pt2.get(n3) || 0;
          Pt2.set(n3, r3 + 1);
          var o3 = "".concat(n3, ":").concat(r3);
          Tt2.set(e3, o3);
        }
        function xt2(e3) {
          for (var t3 = null, n3 = null, r3 = e3.child, o3 = 0; o3 < 3 && r3 !== null; o3++) {
            var a3 = i2(r3);
            if (a3 !== null && (typeof r3.type == "function" ? t3 = a3 : n3 === null && (n3 = a3)), t3 !== null)
              break;
            r3 = r3.child;
          }
          return t3 || n3 || "Anonymous";
        }
        function Nt2(e3) {
          var t3 = e3.key, n3 = i2(e3), r3 = e3.index;
          switch (e3.tag) {
            case w2:
              var o3 = ce2(ne2(e3)), a3 = Tt2.get(o3);
              if (a3 === void 0)
                throw new Error("Expected mounted root to have known pseudo key.");
              n3 = a3;
              break;
            case S2:
              n3 = e3.type;
          }
          return {displayName: n3, key: t3, index: r3};
        }
        var Lt2 = function(e3) {
          if (e3 == null)
            return "Unknown";
          switch (e3) {
            case A2:
              return "Immediate";
            case x2:
              return "User-Blocking";
            case N2:
              return "Normal";
            case L2:
              return "Low";
            case D2:
              return "Idle";
            case j2:
            default:
              return "Unknown";
          }
        };
        return {cleanup: function() {
        }, copyElementPath: function(e3, t3) {
          at2(e3) && Pe(ve(rt2, t3));
        }, deletePath: function(e3, t3, n3, r3) {
          var o3 = tt2(t3);
          if (o3 !== null) {
            var i3 = o3.stateNode;
            switch (e3) {
              case "context":
                switch (r3 = r3.slice(1), o3.tag) {
                  case m2:
                    r3.length === 0 || ye(i3.context, r3), i3.forceUpdate();
                }
                break;
              case "hooks":
                typeof M2 == "function" && M2(o3, n3, r3);
                break;
              case "props":
                i3 === null ? typeof V2 == "function" && V2(o3, r3) : (o3.pendingProps = Ae(i3.props, r3), i3.forceUpdate());
                break;
              case "state":
                ye(i3.state, r3), i3.forceUpdate();
            }
          }
        }, findNativeNodesForFiberID: Ze2, flushInitialOperations: function() {
          var n3 = Ce2;
          Ce2 = null, n3 !== null && n3.length > 0 ? n3.forEach(function(t3) {
            e2.emit("operations", t3);
          }) : (It2 !== null && (kt2 = true), e2.getFiberRoots(t2).forEach(function(e3) {
            At2(ue2 = ce2(ne2(e3.current)), e3.current), vt2 && e3.memoizedInteractions != null && (ct2 = {changeDescriptions: gt2 ? new Map() : null, durations: [], commitTime: Ge() - yt2, interactions: Array.from(e3.memoizedInteractions).map(function(e4) {
              return je(je({}, e4), {}, {timestamp: e4.timestamp - yt2});
            }), maxActualDuration: 0, priorityLevel: null}), Xe2(e3.current, null, false, false), Ve2(), ue2 = -1;
          }));
        }, getBestMatchForTrackedPath: function() {
          if (It2 === null)
            return null;
          if (_t2 === null)
            return null;
          for (var e3 = _t2; e3 !== null && ee2(e3); )
            e3 = e3.return;
          return e3 === null ? null : {id: ce2(ne2(e3)), isFullMatch: Ct2 === It2.length - 1};
        }, getDisplayNameForFiberID: function(e3) {
          var t3 = oe2.get(e3);
          return t3 != null ? i2(t3) : null;
        }, getFiberIDForNative: function(e3) {
          var t3 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1], r3 = n2.findFiberByHostInstance(e3);
          if (r3 != null) {
            if (t3)
              for (; r3 !== null && ee2(r3); )
                r3 = r3.return;
            return ce2(ne2(r3));
          }
          return null;
        }, getInstanceAndStyle: function(e3) {
          var t3 = null, n3 = null, r3 = tt2(e3);
          return r3 !== null && (t3 = r3.stateNode, r3.memoizedProps !== null && (n3 = r3.memoizedProps.style)), {instance: t3, style: n3};
        }, getOwnersList: function(e3) {
          var t3 = tt2(e3);
          if (t3 == null)
            return null;
          var n3 = t3._debugOwner, r3 = [{displayName: i2(t3) || "Anonymous", id: e3, type: te2(t3)}];
          if (n3)
            for (var o3 = n3; o3 !== null; )
              r3.unshift({displayName: i2(o3) || "Anonymous", id: ce2(ne2(o3)), type: te2(o3)}), o3 = o3._debugOwner || null;
          return r3;
        }, getPathForElement: function(e3) {
          var t3 = oe2.get(e3);
          if (t3 == null)
            return null;
          for (var n3 = []; t3 !== null; )
            n3.push(Nt2(t3)), t3 = t3.return;
          return n3.reverse(), n3;
        }, getProfilingData: function() {
          var e3 = [];
          if (bt2 === null)
            throw Error("getProfilingData() called before any profiling data was recorded");
          return bt2.forEach(function(t3, n3) {
            var r3 = [], o3 = [], i3 = new Map(), a3 = new Map(), l3 = st2 !== null && st2.get(n3) || "Unknown";
            dt2 != null && dt2.forEach(function(e4, t4) {
              mt2 != null && mt2.get(t4) === n3 && o3.push([t4, e4]);
            }), t3.forEach(function(e4, t4) {
              var n4 = e4.changeDescriptions, o4 = e4.durations, l4 = e4.interactions, u3 = e4.maxActualDuration, c2 = e4.priorityLevel, s3 = e4.commitTime, f3 = [];
              l4.forEach(function(e5) {
                i3.has(e5.id) || i3.set(e5.id, e5), f3.push(e5.id);
                var n5 = a3.get(e5.id);
                n5 != null ? n5.push(t4) : a3.set(e5.id, [t4]);
              });
              for (var p3 = [], d3 = [], h3 = 0; h3 < o4.length; h3 += 3) {
                var m3 = o4[h3];
                p3.push([m3, o4[h3 + 1]]), d3.push([m3, o4[h3 + 2]]);
              }
              r3.push({changeDescriptions: n4 !== null ? Array.from(n4.entries()) : null, duration: u3, fiberActualDurations: p3, fiberSelfDurations: d3, interactionIDs: f3, priorityLevel: c2, timestamp: s3});
            }), e3.push({commitData: r3, displayName: l3, initialTreeBaseDurations: o3, interactionCommits: Array.from(a3.entries()), interactions: Array.from(i3.entries()), rootID: n3});
          }), {dataForRoots: e3, rendererID: t2};
        }, handleCommitFiberRoot: function(t3, n3) {
          var r3 = t3.current, o3 = r3.alternate;
          ue2 = ce2(ne2(r3)), It2 !== null && (kt2 = true), Q2 && J2.clear();
          var i3 = t3.memoizedInteractions != null;
          if (vt2 && i3 && (ct2 = {changeDescriptions: gt2 ? new Map() : null, durations: [], commitTime: Ge() - yt2, interactions: Array.from(t3.memoizedInteractions).map(function(e3) {
            return je(je({}, e3), {}, {timestamp: e3.timestamp - yt2});
          }), maxActualDuration: 0, priorityLevel: n3 == null ? null : Lt2(n3)}), o3) {
            var a3 = o3.memoizedState != null && o3.memoizedState.element != null, l3 = r3.memoizedState != null && r3.memoizedState.element != null;
            !a3 && l3 ? (At2(ue2, r3), Xe2(r3, null, false, false)) : a3 && l3 ? Qe2(r3, o3, null, false) : a3 && !l3 && (!function(e3) {
              var t4 = Tt2.get(e3);
              if (t4 === void 0)
                throw new Error("Expected root pseudo key to be known.");
              var n4 = t4.substring(0, t4.lastIndexOf(":")), r4 = Pt2.get(n4);
              if (r4 === void 0)
                throw new Error("Expected counter to be known.");
              r4 > 1 ? Pt2.set(n4, r4 - 1) : Pt2.delete(n4);
              Tt2.delete(e3);
            }(ue2), ze2(r3, false));
          } else
            At2(ue2, r3), Xe2(r3, null, false, false);
          if (vt2 && i3) {
            var u3 = bt2.get(ue2);
            u3 != null ? u3.push(ct2) : bt2.set(ue2, [ct2]);
          }
          Ve2(), Q2 && e2.emit("traceUpdates", J2), ue2 = -1;
        }, handleCommitFiberUnmount: function(e3) {
          ze2(e3, false);
        }, inspectElement: function(e3, t3) {
          if (at2(e3)) {
            if (t3 != null) {
              lt2(t3);
              var n3 = null;
              return t3[0] === "hooks" && (n3 = "hooks"), {id: e3, type: "hydrated-path", path: t3, value: Te(ve(rt2, t3), ut2(null, n3), t3)};
            }
            return {id: e3, type: "no-change"};
          }
          if (ot2 = false, rt2 !== null && rt2.id === e3 || (it2 = {}), (rt2 = nt2(e3)) === null)
            return {id: e3, type: "not-found"};
          t3 != null && lt2(t3), function(e4) {
            var t4 = e4.hooks, n4 = e4.id, o4 = e4.props, i3 = oe2.get(n4);
            if (i3 != null) {
              var a3 = i3.elementType, l3 = i3.stateNode, u3 = i3.tag, c2 = i3.type;
              switch (u3) {
                case m2:
                case I2:
                case _2:
                  r2.$r = l3;
                  break;
                case h2:
                  r2.$r = {hooks: t4, props: o4, type: c2};
                  break;
                case b2:
                  r2.$r = {props: o4, type: c2.render};
                  break;
                case C2:
                case R2:
                  r2.$r = {props: o4, type: a3 != null && a3.type != null ? a3.type : c2};
                  break;
                default:
                  r2.$r = null;
              }
            } else
              console.warn('Could not find Fiber with id "'.concat(n4, '"'));
          }(rt2);
          var o3 = je({}, rt2);
          return o3.context = Te(o3.context, ut2("context", null)), o3.hooks = Te(o3.hooks, ut2("hooks", "hooks")), o3.props = Te(o3.props, ut2("props", null)), o3.state = Te(o3.state, ut2("state", null)), {id: e3, type: "full-data", value: o3};
        }, logElementToConsole: function(e3) {
          var t3 = at2(e3) ? rt2 : nt2(e3);
          if (t3 !== null) {
            var n3 = typeof console.groupCollapsed == "function";
            n3 && console.groupCollapsed("[Click to expand] %c<".concat(t3.displayName || "Component", " />"), "color: var(--dom-tag-name-color); font-weight: normal;"), t3.props !== null && console.log("Props:", t3.props), t3.state !== null && console.log("State:", t3.state), t3.hooks !== null && console.log("Hooks:", t3.hooks);
            var r3 = Ze2(e3);
            r3 !== null && console.log("Nodes:", r3), t3.source !== null && console.log("Location:", t3.source), (window.chrome || /firefox/i.test(navigator.userAgent)) && console.log("Right-click any value to save it as a global variable for further inspection."), n3 && console.groupEnd();
          } else
            console.warn('Could not find Fiber with id "'.concat(e3, '"'));
        }, prepareViewAttributeSource: function(e3, t3) {
          at2(e3) && (window.$attribute = ve(rt2, t3));
        }, prepareViewElementSource: function(e3) {
          var t3 = oe2.get(e3);
          if (t3 != null) {
            var n3 = t3.elementType, o3 = t3.tag, i3 = t3.type;
            switch (o3) {
              case m2:
              case I2:
              case _2:
              case h2:
                r2.$type = i3;
                break;
              case b2:
                r2.$type = i3.render;
                break;
              case C2:
              case R2:
                r2.$type = n3 != null && n3.type != null ? n3.type : i3;
                break;
              default:
                r2.$type = null;
            }
          } else
            console.warn('Could not find Fiber with id "'.concat(e3, '"'));
        }, overrideSuspense: function(e3, t3) {
          if (typeof z2 != "function" || typeof B2 != "function")
            throw new Error("Expected overrideSuspense() to not get called for earlier React versions.");
          t3 ? (St2.add(e3), St2.size === 1 && z2(Ot2)) : (St2.delete(e3), St2.size === 0 && z2(Et2));
          var n3 = oe2.get(e3);
          n3 != null && B2(n3);
        }, overrideValueAtPath: function(e3, t3, n3, r3, o3) {
          var i3 = tt2(t3);
          if (i3 !== null) {
            var a3 = i3.stateNode;
            switch (e3) {
              case "context":
                switch (r3 = r3.slice(1), i3.tag) {
                  case m2:
                    r3.length === 0 ? a3.context = o3 : be(a3.context, r3, o3), a3.forceUpdate();
                }
                break;
              case "hooks":
                typeof F2 == "function" && F2(i3, n3, r3, o3);
                break;
              case "props":
                switch (i3.tag) {
                  case m2:
                    i3.pendingProps = Ne(a3.props, r3, o3), a3.forceUpdate();
                    break;
                  default:
                    typeof H2 == "function" && H2(i3, r3, o3);
                }
                break;
              case "state":
                switch (i3.tag) {
                  case m2:
                    be(a3.state, r3, o3), a3.forceUpdate();
                }
            }
          }
        }, renamePath: function(e3, t3, n3, r3, o3) {
          var i3 = tt2(t3);
          if (i3 !== null) {
            var a3 = i3.stateNode;
            switch (e3) {
              case "context":
                switch (r3 = r3.slice(1), o3 = o3.slice(1), i3.tag) {
                  case m2:
                    r3.length === 0 || ge(a3.context, r3, o3), a3.forceUpdate();
                }
                break;
              case "hooks":
                typeof U2 == "function" && U2(i3, n3, r3, o3);
                break;
              case "props":
                a3 === null ? typeof $2 == "function" && $2(i3, r3, o3) : (i3.pendingProps = xe(a3.props, r3, o3), a3.forceUpdate());
                break;
              case "state":
                ge(a3.state, r3, o3), a3.forceUpdate();
            }
          }
        }, renderer: n2, setTraceUpdatesEnabled: function(e3) {
          Q2 = e3;
        }, setTrackedPath: Rt2, startProfiling: wt2, stopProfiling: function() {
          vt2 = false, gt2 = false;
        }, storeAsGlobal: function(e3, t3, n3) {
          if (at2(e3)) {
            var r3 = ve(rt2, t3), o3 = "$reactTemp".concat(n3);
            window[o3] = r3, console.log(o3), console.log(r3);
          }
        }, updateComponentFilters: function(n3) {
          if (vt2)
            throw Error("Cannot modify filter preferences while profiling");
          e2.getFiberRoots(t2).forEach(function(e3) {
            ue2 = ce2(ne2(e3.current)), qe2(e3.current), ze2(e3.current, false), ue2 = -1;
          }), Z2(n3), Pt2.clear(), e2.getFiberRoots(t2).forEach(function(e3) {
            At2(ue2 = ce2(ne2(e3.current)), e3.current), Xe2(e3.current, null, false, false), Ve2(e3), ue2 = -1;
          });
        }};
      }
      var qe;
      function Ye(e2) {
        return (Ye = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function Ke(e2, t2, n2) {
        if (qe === void 0)
          try {
            throw Error();
          } catch (e3) {
            var r2 = e3.stack.trim().match(/\n( *(at )?)/);
            qe = r2 && r2[1] || "";
          }
        return "\n" + qe + e2;
      }
      var Qe = false;
      function Je(e2, t2, n2) {
        if (!e2 || Qe)
          return "";
        var r2, o2 = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0, Qe = true;
        var i2 = n2.current;
        n2.current = null;
        try {
          if (t2) {
            var a2 = function() {
              throw Error();
            };
            if (Object.defineProperty(a2.prototype, "props", {set: function() {
              throw Error();
            }}), (typeof Reflect == "undefined" ? "undefined" : Ye(Reflect)) === "object" && Reflect.construct) {
              try {
                Reflect.construct(a2, []);
              } catch (e3) {
                r2 = e3;
              }
              Reflect.construct(e2, [], a2);
            } else {
              try {
                a2.call();
              } catch (e3) {
                r2 = e3;
              }
              e2.call(a2.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (e3) {
              r2 = e3;
            }
            e2();
          }
        } catch (e3) {
          if (e3 && r2 && typeof e3.stack == "string") {
            for (var l2 = e3.stack.split("\n"), u2 = r2.stack.split("\n"), c2 = l2.length - 1, s2 = u2.length - 1; c2 >= 1 && s2 >= 0 && l2[c2] !== u2[s2]; )
              s2--;
            for (; c2 >= 1 && s2 >= 0; c2--, s2--)
              if (l2[c2] !== u2[s2]) {
                if (c2 !== 1 || s2 !== 1)
                  do {
                    if (c2--, --s2 < 0 || l2[c2] !== u2[s2])
                      return "\n" + l2[c2].replace(" at new ", " at ");
                  } while (c2 >= 1 && s2 >= 0);
                break;
              }
          }
        } finally {
          Qe = false, Error.prepareStackTrace = o2, n2.current = i2;
        }
        var f2 = e2 ? e2.displayName || e2.name : "";
        return f2 ? Ke(f2) : "";
      }
      function Ze(e2, t2, n2, r2) {
        return Je(e2, false, r2);
      }
      function et(e2, t2, n2) {
        var r2 = e2.HostComponent, o2 = e2.LazyComponent, i2 = e2.SuspenseComponent, a2 = e2.SuspenseListComponent, l2 = e2.FunctionComponent, u2 = e2.IndeterminateComponent, c2 = e2.SimpleMemoComponent, s2 = e2.ForwardRef, f2 = e2.ClassComponent;
        switch (t2.tag) {
          case r2:
            return Ke(t2.type);
          case o2:
            return Ke("Lazy");
          case i2:
            return Ke("Suspense");
          case a2:
            return Ke("SuspenseList");
          case l2:
          case u2:
          case c2:
            return Ze(t2.type, 0, 0, n2);
          case s2:
            return Ze(t2.type.render, 0, 0, n2);
          case f2:
            return function(e3, t3, n3, r3) {
              return Je(e3, true, r3);
            }(t2.type, 0, 0, n2);
          default:
            return "";
        }
      }
      function tt(e2, t2, n2) {
        try {
          var r2 = "", o2 = t2;
          do {
            r2 += et(e2, o2, n2), o2 = o2.return;
          } while (o2);
          return r2;
        } catch (e3) {
          return "\nError generating stack: " + e3.message + "\n" + e3.stack;
        }
      }
      function nt(e2, t2) {
        var n2;
        if (typeof Symbol == "undefined" || e2[Symbol.iterator] == null) {
          if (Array.isArray(e2) || (n2 = function(e3, t3) {
            if (!e3)
              return;
            if (typeof e3 == "string")
              return rt(e3, t3);
            var n3 = Object.prototype.toString.call(e3).slice(8, -1);
            n3 === "Object" && e3.constructor && (n3 = e3.constructor.name);
            if (n3 === "Map" || n3 === "Set")
              return Array.from(e3);
            if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
              return rt(e3, t3);
          }(e2)) || t2 && e2 && typeof e2.length == "number") {
            n2 && (e2 = n2);
            var r2 = 0, o2 = function() {
            };
            return {s: o2, n: function() {
              return r2 >= e2.length ? {done: true} : {done: false, value: e2[r2++]};
            }, e: function(e3) {
              throw e3;
            }, f: o2};
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var i2, a2 = true, l2 = false;
        return {s: function() {
          n2 = e2[Symbol.iterator]();
        }, n: function() {
          var e3 = n2.next();
          return a2 = e3.done, e3;
        }, e: function(e3) {
          l2 = true, i2 = e3;
        }, f: function() {
          try {
            a2 || n2.return == null || n2.return();
          } finally {
            if (l2)
              throw i2;
          }
        }};
      }
      function rt(e2, t2) {
        (t2 == null || t2 > e2.length) && (t2 = e2.length);
        for (var n2 = 0, r2 = new Array(t2); n2 < t2; n2++)
          r2[n2] = e2[n2];
        return r2;
      }
      var ot = ["error", "trace", "warn"], it = /\s{4}(in|at)\s{1}/, at = /:\d+:\d+(\n|$)/, lt = new Map(), ut = console, ct = {};
      for (var st in console)
        ct[st] = console[st];
      var ft = null;
      function pt(e2) {
        var t2 = e2.currentDispatcherRef, n2 = e2.getCurrentFiber, r2 = e2.findFiberByHostInstance, o2 = e2.version;
        if (typeof r2 == "function" && t2 != null && typeof n2 == "function") {
          var i2 = We(o2).ReactTypeOfWork;
          lt.set(e2, {currentDispatcherRef: t2, getCurrentFiber: n2, workTagMap: i2});
        }
      }
      var dt = {appendComponentStack: false, breakOnConsoleErrors: false};
      function ht(e2) {
        var t2 = e2.appendComponentStack, n2 = e2.breakOnConsoleErrors;
        if (dt.appendComponentStack = t2, dt.breakOnConsoleErrors = n2, ft === null) {
          var r2 = {};
          ft = function() {
            for (var e3 in r2)
              try {
                ut[e3] = r2[e3];
              } catch (e4) {
              }
          }, ot.forEach(function(e3) {
            try {
              var t3 = r2[e3] = ut[e3], n3 = function() {
                for (var e4 = dt.appendComponentStack, n4 = (dt.breakOnConsoleErrors, arguments.length), r3 = new Array(n4), o2 = 0; o2 < n4; o2++)
                  r3[o2] = arguments[o2];
                if (e4)
                  try {
                    var i2 = r3.length > 0 ? r3[r3.length - 1] : null, a2 = i2 !== null && (it.test(i2) || at.test(i2));
                    if (!a2) {
                      var l2, u2 = nt(lt.values());
                      try {
                        for (u2.s(); !(l2 = u2.n()).done; ) {
                          var c2 = l2.value, s2 = c2.currentDispatcherRef, f2 = c2.getCurrentFiber, p2 = c2.workTagMap, d2 = f2();
                          if (d2 != null) {
                            var h2 = tt(p2, d2, s2);
                            h2 !== "" && r3.push(h2);
                            break;
                          }
                        }
                      } catch (e5) {
                        u2.e(e5);
                      } finally {
                        u2.f();
                      }
                    }
                  } catch (e5) {
                  }
                t3.apply(void 0, r3);
              };
              n3.__REACT_DEVTOOLS_ORIGINAL_METHOD__ = t3, ut[e3] = n3;
            } catch (e4) {
            }
          });
        }
      }
      function mt(e2) {
        return (mt = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function vt(e2, t2) {
        for (var n2 = 0; n2 < t2.length; n2++) {
          var r2 = t2[n2];
          r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e2, r2.key, r2);
        }
      }
      function yt(e2, t2) {
        return (yt = Object.setPrototypeOf || function(e3, t3) {
          return e3.__proto__ = t3, e3;
        })(e2, t2);
      }
      function gt(e2) {
        var t2 = function() {
          if (typeof Reflect == "undefined" || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if (typeof Proxy == "function")
            return true;
          try {
            return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
            })), true;
          } catch (e3) {
            return false;
          }
        }();
        return function() {
          var n2, r2 = Et(e2);
          if (t2) {
            var o2 = Et(this).constructor;
            n2 = Reflect.construct(r2, arguments, o2);
          } else
            n2 = r2.apply(this, arguments);
          return bt(this, n2);
        };
      }
      function bt(e2, t2) {
        return !t2 || mt(t2) !== "object" && typeof t2 != "function" ? wt(e2) : t2;
      }
      function wt(e2) {
        if (e2 === void 0)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e2;
      }
      function Et(e2) {
        return (Et = Object.setPrototypeOf ? Object.getPrototypeOf : function(e3) {
          return e3.__proto__ || Object.getPrototypeOf(e3);
        })(e2);
      }
      function St(e2, t2, n2) {
        return t2 in e2 ? Object.defineProperty(e2, t2, {value: n2, enumerable: true, configurable: true, writable: true}) : e2[t2] = n2, e2;
      }
      var Ot = function(e2) {
        !function(e3, t3) {
          if (typeof t3 != "function" && t3 !== null)
            throw new TypeError("Super expression must either be null or a function");
          e3.prototype = Object.create(t3 && t3.prototype, {constructor: {value: e3, writable: true, configurable: true}}), t3 && yt(e3, t3);
        }(i2, e2);
        var t2, n2, r2, o2 = gt(i2);
        function i2(e3) {
          var t3;
          !function(e4, t4) {
            if (!(e4 instanceof t4))
              throw new TypeError("Cannot call a class as a function");
          }(this, i2), St(wt(t3 = o2.call(this)), "_isProfiling", false), St(wt(t3), "_recordChangeDescriptions", false), St(wt(t3), "_rendererInterfaces", {}), St(wt(t3), "_persistedSelection", null), St(wt(t3), "_persistedSelectionMatch", null), St(wt(t3), "_traceUpdatesEnabled", false), St(wt(t3), "copyElementPath", function(e4) {
            var n4 = e4.id, r4 = e4.path, o3 = e4.rendererID, i3 = t3._rendererInterfaces[o3];
            i3 == null ? console.warn('Invalid renderer id "'.concat(o3, '" for element "').concat(n4, '"')) : i3.copyElementPath(n4, r4);
          }), St(wt(t3), "deletePath", function(e4) {
            var n4 = e4.hookID, r4 = e4.id, o3 = e4.path, i3 = e4.rendererID, a2 = e4.type, l3 = t3._rendererInterfaces[i3];
            l3 == null ? console.warn('Invalid renderer id "'.concat(i3, '" for element "').concat(r4, '"')) : l3.deletePath(a2, r4, n4, o3);
          }), St(wt(t3), "getProfilingData", function(e4) {
            var n4 = e4.rendererID, r4 = t3._rendererInterfaces[n4];
            r4 == null && console.warn('Invalid renderer id "'.concat(n4, '"')), t3._bridge.send("profilingData", r4.getProfilingData());
          }), St(wt(t3), "getProfilingStatus", function() {
            t3._bridge.send("profilingStatus", t3._isProfiling);
          }), St(wt(t3), "getOwnersList", function(e4) {
            var n4 = e4.id, r4 = e4.rendererID, o3 = t3._rendererInterfaces[r4];
            if (o3 == null)
              console.warn('Invalid renderer id "'.concat(r4, '" for element "').concat(n4, '"'));
            else {
              var i3 = o3.getOwnersList(n4);
              t3._bridge.send("ownersList", {id: n4, owners: i3});
            }
          }), St(wt(t3), "inspectElement", function(e4) {
            var n4 = e4.id, r4 = e4.path, o3 = e4.rendererID, i3 = t3._rendererInterfaces[o3];
            i3 == null ? console.warn('Invalid renderer id "'.concat(o3, '" for element "').concat(n4, '"')) : (t3._bridge.send("inspectedElement", i3.inspectElement(n4, r4)), t3._persistedSelectionMatch !== null && t3._persistedSelectionMatch.id === n4 || (t3._persistedSelection = null, t3._persistedSelectionMatch = null, i3.setTrackedPath(null), t3._throttledPersistSelection(o3, n4)));
          }), St(wt(t3), "logElementToConsole", function(e4) {
            var n4 = e4.id, r4 = e4.rendererID, o3 = t3._rendererInterfaces[r4];
            o3 == null ? console.warn('Invalid renderer id "'.concat(r4, '" for element "').concat(n4, '"')) : o3.logElementToConsole(n4);
          }), St(wt(t3), "overrideSuspense", function(e4) {
            var n4 = e4.id, r4 = e4.rendererID, o3 = e4.forceFallback, i3 = t3._rendererInterfaces[r4];
            i3 == null ? console.warn('Invalid renderer id "'.concat(r4, '" for element "').concat(n4, '"')) : i3.overrideSuspense(n4, o3);
          }), St(wt(t3), "overrideValueAtPath", function(e4) {
            var n4 = e4.hookID, r4 = e4.id, o3 = e4.path, i3 = e4.rendererID, a2 = e4.type, l3 = e4.value, u2 = t3._rendererInterfaces[i3];
            u2 == null ? console.warn('Invalid renderer id "'.concat(i3, '" for element "').concat(r4, '"')) : u2.overrideValueAtPath(a2, r4, n4, o3, l3);
          }), St(wt(t3), "overrideContext", function(e4) {
            var n4 = e4.id, r4 = e4.path, o3 = e4.rendererID, i3 = e4.wasForwarded, a2 = e4.value;
            i3 || t3.overrideValueAtPath({id: n4, path: r4, rendererID: o3, type: "context", value: a2});
          }), St(wt(t3), "overrideHookState", function(e4) {
            var n4 = e4.id, r4 = (e4.hookID, e4.path), o3 = e4.rendererID, i3 = e4.wasForwarded, a2 = e4.value;
            i3 || t3.overrideValueAtPath({id: n4, path: r4, rendererID: o3, type: "hooks", value: a2});
          }), St(wt(t3), "overrideProps", function(e4) {
            var n4 = e4.id, r4 = e4.path, o3 = e4.rendererID, i3 = e4.wasForwarded, a2 = e4.value;
            i3 || t3.overrideValueAtPath({id: n4, path: r4, rendererID: o3, type: "props", value: a2});
          }), St(wt(t3), "overrideState", function(e4) {
            var n4 = e4.id, r4 = e4.path, o3 = e4.rendererID, i3 = e4.wasForwarded, a2 = e4.value;
            i3 || t3.overrideValueAtPath({id: n4, path: r4, rendererID: o3, type: "state", value: a2});
          }), St(wt(t3), "reloadAndProfile", function(e4) {
            f("React::DevTools::reloadAndProfile", "true"), f("React::DevTools::recordChangeDescriptions", e4 ? "true" : "false"), t3._bridge.send("reloadAppForProfiling");
          }), St(wt(t3), "renamePath", function(e4) {
            var n4 = e4.hookID, r4 = e4.id, o3 = e4.newPath, i3 = e4.oldPath, a2 = e4.rendererID, l3 = e4.type, u2 = t3._rendererInterfaces[a2];
            u2 == null ? console.warn('Invalid renderer id "'.concat(a2, '" for element "').concat(r4, '"')) : u2.renamePath(l3, r4, n4, i3, o3);
          }), St(wt(t3), "setTraceUpdatesEnabled", function(e4) {
            for (var n4 in t3._traceUpdatesEnabled = e4, W(e4), t3._rendererInterfaces) {
              t3._rendererInterfaces[n4].setTraceUpdatesEnabled(e4);
            }
          }), St(wt(t3), "syncSelectionFromNativeElementsPanel", function() {
            var e4 = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;
            e4 != null && t3.selectNode(e4);
          }), St(wt(t3), "shutdown", function() {
            t3.emit("shutdown");
          }), St(wt(t3), "startProfiling", function(e4) {
            for (var n4 in t3._recordChangeDescriptions = e4, t3._isProfiling = true, t3._rendererInterfaces) {
              t3._rendererInterfaces[n4].startProfiling(e4);
            }
            t3._bridge.send("profilingStatus", t3._isProfiling);
          }), St(wt(t3), "stopProfiling", function() {
            for (var e4 in t3._isProfiling = false, t3._recordChangeDescriptions = false, t3._rendererInterfaces) {
              t3._rendererInterfaces[e4].stopProfiling();
            }
            t3._bridge.send("profilingStatus", t3._isProfiling);
          }), St(wt(t3), "storeAsGlobal", function(e4) {
            var n4 = e4.count, r4 = e4.id, o3 = e4.path, i3 = e4.rendererID, a2 = t3._rendererInterfaces[i3];
            a2 == null ? console.warn('Invalid renderer id "'.concat(i3, '" for element "').concat(r4, '"')) : a2.storeAsGlobal(r4, o3, n4);
          }), St(wt(t3), "updateConsolePatchSettings", function(e4) {
            var t4 = e4.appendComponentStack, n4 = e4.breakOnConsoleErrors;
            t4 || n4 ? ht({appendComponentStack: t4, breakOnConsoleErrors: n4}) : ft !== null && (ft(), ft = null);
          }), St(wt(t3), "updateComponentFilters", function(e4) {
            for (var n4 in t3._rendererInterfaces) {
              t3._rendererInterfaces[n4].updateComponentFilters(e4);
            }
          }), St(wt(t3), "viewAttributeSource", function(e4) {
            var n4 = e4.id, r4 = e4.path, o3 = e4.rendererID, i3 = t3._rendererInterfaces[o3];
            i3 == null ? console.warn('Invalid renderer id "'.concat(o3, '" for element "').concat(n4, '"')) : i3.prepareViewAttributeSource(n4, r4);
          }), St(wt(t3), "viewElementSource", function(e4) {
            var n4 = e4.id, r4 = e4.rendererID, o3 = t3._rendererInterfaces[r4];
            o3 == null ? console.warn('Invalid renderer id "'.concat(r4, '" for element "').concat(n4, '"')) : o3.prepareViewElementSource(n4);
          }), St(wt(t3), "onTraceUpdates", function(e4) {
            t3.emit("traceUpdates", e4);
          }), St(wt(t3), "onHookOperations", function(e4) {
            if (t3._bridge.send("operations", e4), t3._persistedSelection !== null) {
              var n4 = e4[0];
              if (t3._persistedSelection.rendererID === n4) {
                var r4 = t3._rendererInterfaces[n4];
                if (r4 == null)
                  console.warn('Invalid renderer id "'.concat(n4, '"'));
                else {
                  var o3 = t3._persistedSelectionMatch, i3 = r4.getBestMatchForTrackedPath();
                  t3._persistedSelectionMatch = i3;
                  var a2 = o3 !== null ? o3.id : null, l3 = i3 !== null ? i3.id : null;
                  a2 !== l3 && l3 !== null && t3._bridge.send("selectFiber", l3), i3 !== null && i3.isFullMatch && (t3._persistedSelection = null, t3._persistedSelectionMatch = null, r4.setTrackedPath(null));
                }
              }
            }
          }), St(wt(t3), "_throttledPersistSelection", a()(function(e4, n4) {
            var r4 = t3._rendererInterfaces[e4], o3 = r4 != null ? r4.getPathForElement(n4) : null;
            o3 !== null ? f("React::DevTools::lastSelection", JSON.stringify({rendererID: e4, path: o3})) : s("React::DevTools::lastSelection");
          }, 1e3)), c("React::DevTools::reloadAndProfile") === "true" && (t3._recordChangeDescriptions = c("React::DevTools::recordChangeDescriptions") === "true", t3._isProfiling = true, s("React::DevTools::recordChangeDescriptions"), s("React::DevTools::reloadAndProfile"));
          var n3 = c("React::DevTools::lastSelection");
          n3 != null && (t3._persistedSelection = JSON.parse(n3)), t3._bridge = e3, e3.addListener("copyElementPath", t3.copyElementPath), e3.addListener("deletePath", t3.deletePath), e3.addListener("getProfilingData", t3.getProfilingData), e3.addListener("getProfilingStatus", t3.getProfilingStatus), e3.addListener("getOwnersList", t3.getOwnersList), e3.addListener("inspectElement", t3.inspectElement), e3.addListener("logElementToConsole", t3.logElementToConsole), e3.addListener("overrideSuspense", t3.overrideSuspense), e3.addListener("overrideValueAtPath", t3.overrideValueAtPath), e3.addListener("reloadAndProfile", t3.reloadAndProfile), e3.addListener("renamePath", t3.renamePath), e3.addListener("setTraceUpdatesEnabled", t3.setTraceUpdatesEnabled), e3.addListener("startProfiling", t3.startProfiling), e3.addListener("stopProfiling", t3.stopProfiling), e3.addListener("storeAsGlobal", t3.storeAsGlobal), e3.addListener("syncSelectionFromNativeElementsPanel", t3.syncSelectionFromNativeElementsPanel), e3.addListener("shutdown", t3.shutdown), e3.addListener("updateConsolePatchSettings", t3.updateConsolePatchSettings), e3.addListener("updateComponentFilters", t3.updateComponentFilters), e3.addListener("viewAttributeSource", t3.viewAttributeSource), e3.addListener("viewElementSource", t3.viewElementSource), e3.addListener("overrideContext", t3.overrideContext), e3.addListener("overrideHookState", t3.overrideHookState), e3.addListener("overrideProps", t3.overrideProps), e3.addListener("overrideState", t3.overrideState), t3._isProfiling && e3.send("profilingStatus", true);
          var r3, l2 = false;
          try {
            localStorage.getItem("test"), l2 = true;
          } catch (e4) {
          }
          return e3.send("isBackendStorageAPISupported", l2), j(e3, wt(t3)), r3 = wt(t3), r3.addListener("traceUpdates", X), t3;
        }
        return t2 = i2, (n2 = [{key: "getInstanceAndStyle", value: function(e3) {
          var t3 = e3.id, n3 = e3.rendererID, r3 = this._rendererInterfaces[n3];
          return r3 == null ? (console.warn('Invalid renderer id "'.concat(n3, '"')), null) : r3.getInstanceAndStyle(t3);
        }}, {key: "getIDForNode", value: function(e3) {
          for (var t3 in this._rendererInterfaces) {
            var n3 = this._rendererInterfaces[t3];
            try {
              var r3 = n3.getFiberIDForNative(e3, true);
              if (r3 !== null)
                return r3;
            } catch (e4) {
            }
          }
          return null;
        }}, {key: "selectNode", value: function(e3) {
          var t3 = this.getIDForNode(e3);
          t3 !== null && this._bridge.send("selectFiber", t3);
        }}, {key: "setRendererInterface", value: function(e3, t3) {
          this._rendererInterfaces[e3] = t3, this._isProfiling && t3.startProfiling(this._recordChangeDescriptions), t3.setTraceUpdatesEnabled(this._traceUpdatesEnabled);
          var n3 = this._persistedSelection;
          n3 !== null && n3.rendererID === e3 && t3.setTrackedPath(n3.path);
        }}, {key: "onUnsupportedRenderer", value: function(e3) {
          this._bridge.send("unsupportedRendererVersion", e3);
        }}, {key: "rendererInterfaces", get: function() {
          return this._rendererInterfaces;
        }}]) && vt(t2.prototype, n2), r2 && vt(t2, r2), i2;
      }(o);
      function It(e2) {
        return (It = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function _t(e2) {
        return function(e3) {
          if (Array.isArray(e3))
            return Ct(e3);
        }(e2) || function(e3) {
          if (typeof Symbol != "undefined" && Symbol.iterator in Object(e3))
            return Array.from(e3);
        }(e2) || function(e3, t2) {
          if (!e3)
            return;
          if (typeof e3 == "string")
            return Ct(e3, t2);
          var n2 = Object.prototype.toString.call(e3).slice(8, -1);
          n2 === "Object" && e3.constructor && (n2 = e3.constructor.name);
          if (n2 === "Map" || n2 === "Set")
            return Array.from(e3);
          if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
            return Ct(e3, t2);
        }(e2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function Ct(e2, t2) {
        (t2 == null || t2 > e2.length) && (t2 = e2.length);
        for (var n2 = 0, r2 = new Array(t2); n2 < t2; n2++)
          r2[n2] = e2[n2];
        return r2;
      }
      function kt(e2, t2) {
        for (var n2 = 0; n2 < t2.length; n2++) {
          var r2 = t2[n2];
          r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e2, r2.key, r2);
        }
      }
      function Rt(e2, t2) {
        return (Rt = Object.setPrototypeOf || function(e3, t3) {
          return e3.__proto__ = t3, e3;
        })(e2, t2);
      }
      function Tt(e2) {
        var t2 = function() {
          if (typeof Reflect == "undefined" || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if (typeof Proxy == "function")
            return true;
          try {
            return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
            })), true;
          } catch (e3) {
            return false;
          }
        }();
        return function() {
          var n2, r2 = xt(e2);
          if (t2) {
            var o2 = xt(this).constructor;
            n2 = Reflect.construct(r2, arguments, o2);
          } else
            n2 = r2.apply(this, arguments);
          return Pt(this, n2);
        };
      }
      function Pt(e2, t2) {
        return !t2 || It(t2) !== "object" && typeof t2 != "function" ? At(e2) : t2;
      }
      function At(e2) {
        if (e2 === void 0)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e2;
      }
      function xt(e2) {
        return (xt = Object.setPrototypeOf ? Object.getPrototypeOf : function(e3) {
          return e3.__proto__ || Object.getPrototypeOf(e3);
        })(e2);
      }
      function Nt(e2, t2, n2) {
        return t2 in e2 ? Object.defineProperty(e2, t2, {value: n2, enumerable: true, configurable: true, writable: true}) : e2[t2] = n2, e2;
      }
      var Lt = function(e2) {
        !function(e3, t3) {
          if (typeof t3 != "function" && t3 !== null)
            throw new TypeError("Super expression must either be null or a function");
          e3.prototype = Object.create(t3 && t3.prototype, {constructor: {value: e3, writable: true, configurable: true}}), t3 && Rt(e3, t3);
        }(i2, e2);
        var t2, n2, r2, o2 = Tt(i2);
        function i2(e3) {
          var t3;
          return function(e4, t4) {
            if (!(e4 instanceof t4))
              throw new TypeError("Cannot call a class as a function");
          }(this, i2), Nt(At(t3 = o2.call(this)), "_isShutdown", false), Nt(At(t3), "_messageQueue", []), Nt(At(t3), "_timeoutID", null), Nt(At(t3), "_wallUnlisten", null), Nt(At(t3), "_flush", function() {
            if (t3._timeoutID !== null && (clearTimeout(t3._timeoutID), t3._timeoutID = null), t3._messageQueue.length) {
              for (var e4 = 0; e4 < t3._messageQueue.length; e4 += 2) {
                var n3;
                (n3 = t3._wall).send.apply(n3, [t3._messageQueue[e4]].concat(_t(t3._messageQueue[e4 + 1])));
              }
              t3._messageQueue.length = 0, t3._timeoutID = setTimeout(t3._flush, 100);
            }
          }), Nt(At(t3), "overrideValueAtPath", function(e4) {
            var n3 = e4.id, r3 = e4.path, o3 = e4.rendererID, i3 = e4.type, a2 = e4.value;
            switch (i3) {
              case "context":
                t3.send("overrideContext", {id: n3, path: r3, rendererID: o3, wasForwarded: true, value: a2});
                break;
              case "hooks":
                t3.send("overrideHookState", {id: n3, path: r3, rendererID: o3, wasForwarded: true, value: a2});
                break;
              case "props":
                t3.send("overrideProps", {id: n3, path: r3, rendererID: o3, wasForwarded: true, value: a2});
                break;
              case "state":
                t3.send("overrideState", {id: n3, path: r3, rendererID: o3, wasForwarded: true, value: a2});
            }
          }), t3._wall = e3, t3._wallUnlisten = e3.listen(function(e4) {
            At(t3).emit(e4.event, e4.payload);
          }) || null, t3.addListener("overrideValueAtPath", t3.overrideValueAtPath), t3;
        }
        return t2 = i2, (n2 = [{key: "send", value: function(e3) {
          if (this._isShutdown)
            console.warn('Cannot send message "'.concat(e3, '" through a Bridge that has been shutdown.'));
          else {
            for (var t3 = arguments.length, n3 = new Array(t3 > 1 ? t3 - 1 : 0), r3 = 1; r3 < t3; r3++)
              n3[r3 - 1] = arguments[r3];
            this._messageQueue.push(e3, n3), this._timeoutID || (this._timeoutID = setTimeout(this._flush, 0));
          }
        }}, {key: "shutdown", value: function() {
          if (this._isShutdown)
            console.warn("Bridge was already shutdown.");
          else {
            this.send("shutdown"), this._isShutdown = true, this.addListener = function() {
            }, this.emit = function() {
            }, this.removeAllListeners();
            var e3 = this._wallUnlisten;
            e3 && e3();
            do {
              this._flush();
            } while (this._messageQueue.length);
            this._timeoutID !== null && (clearTimeout(this._timeoutID), this._timeoutID = null);
          }
        }}, {key: "wall", get: function() {
          return this._wall;
        }}]) && kt(t2.prototype, n2), r2 && kt(t2, r2), i2;
      }(o);
      function Dt(e2, t2, n2) {
        var r2 = e2[t2];
        return e2[t2] = function(e3) {
          return n2.call(this, r2, arguments);
        }, r2;
      }
      function jt(e2, t2) {
        for (var n2 in t2)
          e2[n2] = t2[n2];
      }
      function Ft(e2) {
        typeof e2.forceUpdate == "function" ? e2.forceUpdate() : e2.updater != null && typeof e2.updater.enqueueForceUpdate == "function" && e2.updater.enqueueForceUpdate(this, function() {
        }, "forceUpdate");
      }
      function Mt(e2, t2) {
        var n2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), n2.push.apply(n2, r2);
        }
        return n2;
      }
      function Ut(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var n2 = arguments[t2] != null ? arguments[t2] : {};
          t2 % 2 ? Mt(Object(n2), true).forEach(function(t3) {
            Ht(e2, t3, n2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(n2)) : Mt(Object(n2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(n2, t3));
          });
        }
        return e2;
      }
      function Ht(e2, t2, n2) {
        return t2 in e2 ? Object.defineProperty(e2, t2, {value: n2, enumerable: true, configurable: true, writable: true}) : e2[t2] = n2, e2;
      }
      function Vt(e2) {
        return (Vt = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function $t(e2) {
        var t2 = null, n2 = null;
        if (e2._currentElement != null) {
          e2._currentElement.key && (n2 = "" + e2._currentElement.key);
          var r2 = e2._currentElement.type;
          typeof r2 == "string" ? t2 = r2 : typeof r2 == "function" && (t2 = pe(r2));
        }
        return {displayName: t2, key: n2};
      }
      function zt(e2) {
        if (e2._currentElement != null) {
          var t2 = e2._currentElement.type;
          if (typeof t2 == "function")
            return e2.getPublicInstance() !== null ? 1 : 5;
          if (typeof t2 == "string")
            return 7;
        }
        return 9;
      }
      function Bt(e2) {
        var t2 = [];
        if (Vt(e2) !== "object")
          ;
        else if (e2._currentElement === null || e2._currentElement === false)
          ;
        else if (e2._renderedComponent) {
          var n2 = e2._renderedComponent;
          zt(n2) !== 9 && t2.push(n2);
        } else if (e2._renderedChildren) {
          var r2 = e2._renderedChildren;
          for (var o2 in r2) {
            var i2 = r2[o2];
            zt(i2) !== 9 && t2.push(i2);
          }
        }
        return t2;
      }
      function Gt(e2, t2, n2, r2) {
        var o2, i2 = new Map(), a2 = new WeakMap(), l2 = new WeakMap(), u2 = null;
        function c2(e3) {
          if (Vt(e3) !== "object" || e3 === null)
            throw new Error("Invalid internal instance: " + e3);
          if (!a2.has(e3)) {
            var t3 = he();
            a2.set(e3, t3), i2.set(t3, e3);
          }
          return a2.get(e3);
        }
        function s2(e3, t3) {
          if (e3.length !== t3.length)
            return false;
          for (var n3 = 0; n3 < e3.length; n3++)
            if (e3[n3] !== t3[n3])
              return false;
          return true;
        }
        n2.ComponentTree ? (u2 = function(e3, t3) {
          var r3 = n2.ComponentTree.getClosestInstanceFromNode(e3);
          return a2.get(r3) || null;
        }, o2 = function(e3) {
          var t3 = i2.get(e3);
          return n2.ComponentTree.getNodeFromInstance(t3);
        }) : n2.Mount.getID && n2.Mount.getNode && (u2 = function(e3, t3) {
          return null;
        }, o2 = function(e3) {
          return null;
        });
        var f2 = [], p2 = null;
        function d2(e3, t3, n3) {
          if (n3 === 0) {
            var r3 = e3._currentElement != null && e3._currentElement._owner != null;
            S2(1), S2(t3), S2(11), S2(0), S2(r3 ? 1 : 0);
          } else {
            var o3 = zt(e3), i3 = $t(e3), a3 = i3.displayName, l3 = i3.key, u3 = e3._currentElement != null && e3._currentElement._owner != null ? c2(e3._currentElement._owner) : 0, s3 = O2(a3), f3 = O2(l3);
            S2(1), S2(t3), S2(o3), S2(n3), S2(u3), S2(s3), S2(f3);
          }
        }
        function h2(e3, t3, n3) {
          S2(3), S2(t3);
          var r3 = n3.map(c2);
          S2(r3.length);
          for (var o3 = 0; o3 < r3.length; o3++)
            S2(r3[o3]);
        }
        function m2(e3, t3, n3) {
          var r3 = i2.get(e3);
          r3 != null && (l2.set(r3, n3), d2(r3, e3, t3), Bt(r3).forEach(function(t4) {
            return m2(c2(t4), e3, n3);
          }));
        }
        n2.Reconciler && (p2 = function(e3, t3) {
          var n3 = {};
          for (var r3 in t3)
            n3[r3] = Dt(e3, r3, t3[r3]);
          return n3;
        }(n2.Reconciler, {mountComponent: function(e3, t3) {
          var n3 = t3[0], r3 = t3[3];
          if (zt(n3) === 9)
            return e3.apply(this, t3);
          if (r3._topLevelWrapper === void 0)
            return e3.apply(this, t3);
          var o3 = c2(n3);
          d2(n3, o3, f2.length > 0 ? f2[f2.length - 1] : 0), f2.push(o3), l2.set(n3, c2(r3._topLevelWrapper));
          try {
            var i3 = e3.apply(this, t3);
            return f2.pop(), i3;
          } catch (e4) {
            throw f2 = [], e4;
          } finally {
            if (f2.length === 0) {
              var a3 = l2.get(n3);
              if (a3 === void 0)
                throw new Error("Expected to find root ID.");
              E2(a3);
            }
          }
        }, performUpdateIfNecessary: function(e3, t3) {
          var n3 = t3[0];
          if (zt(n3) === 9)
            return e3.apply(this, t3);
          var r3 = c2(n3);
          f2.push(r3);
          var o3 = Bt(n3);
          try {
            var i3 = e3.apply(this, t3), a3 = Bt(n3);
            return s2(o3, a3) || h2(n3, r3, a3), f2.pop(), i3;
          } catch (e4) {
            throw f2 = [], e4;
          } finally {
            if (f2.length === 0) {
              var u3 = l2.get(n3);
              if (u3 === void 0)
                throw new Error("Expected to find root ID.");
              E2(u3);
            }
          }
        }, receiveComponent: function(e3, t3) {
          var n3 = t3[0];
          if (zt(n3) === 9)
            return e3.apply(this, t3);
          var r3 = c2(n3);
          f2.push(r3);
          var o3 = Bt(n3);
          try {
            var i3 = e3.apply(this, t3), a3 = Bt(n3);
            return s2(o3, a3) || h2(n3, r3, a3), f2.pop(), i3;
          } catch (e4) {
            throw f2 = [], e4;
          } finally {
            if (f2.length === 0) {
              var u3 = l2.get(n3);
              if (u3 === void 0)
                throw new Error("Expected to find root ID.");
              E2(u3);
            }
          }
        }, unmountComponent: function(e3, t3) {
          var n3 = t3[0];
          if (zt(n3) === 9)
            return e3.apply(this, t3);
          var r3 = c2(n3);
          f2.push(r3);
          try {
            var o3 = e3.apply(this, t3);
            return f2.pop(), function(e4, t4) {
              g2.push(t4), i2.delete(t4);
            }(0, r3), o3;
          } catch (e4) {
            throw f2 = [], e4;
          } finally {
            if (f2.length === 0) {
              var a3 = l2.get(n3);
              if (a3 === void 0)
                throw new Error("Expected to find root ID.");
              E2(a3);
            }
          }
        }}));
        var v2 = [], y2 = new Map(), g2 = [], b2 = 0, w2 = null;
        function E2(n3) {
          if (v2.length !== 0 || g2.length !== 0 || w2 !== null) {
            var r3 = g2.length + (w2 === null ? 0 : 1), o3 = new Array(3 + b2 + (r3 > 0 ? 2 + r3 : 0) + v2.length), i3 = 0;
            if (o3[i3++] = t2, o3[i3++] = n3, o3[i3++] = b2, y2.forEach(function(e3, t3) {
              o3[i3++] = t3.length;
              for (var n4 = me(t3), r4 = 0; r4 < n4.length; r4++)
                o3[i3 + r4] = n4[r4];
              i3 += t3.length;
            }), r3 > 0) {
              o3[i3++] = 2, o3[i3++] = r3;
              for (var a3 = 0; a3 < g2.length; a3++)
                o3[i3++] = g2[a3];
              w2 !== null && (o3[i3] = w2, i3++);
            }
            for (var l3 = 0; l3 < v2.length; l3++)
              o3[i3 + l3] = v2[l3];
            i3 += v2.length, e2.emit("operations", o3), v2.length = 0, g2 = [], w2 = null, y2.clear(), b2 = 0;
          }
        }
        function S2(e3) {
          v2.push(e3);
        }
        function O2(e3) {
          if (e3 === null)
            return 0;
          var t3 = y2.get(e3);
          if (t3 !== void 0)
            return t3;
          var n3 = y2.size + 1;
          return y2.set(e3, n3), b2 += e3.length + 1, n3;
        }
        var I2 = null, _2 = {};
        function C2(e3) {
          return function(t3) {
            var n3 = _2[e3];
            if (!n3)
              return false;
            for (var r3 = 0; r3 < t3.length; r3++)
              if (!(n3 = n3[t3[r3]]))
                return false;
            return true;
          };
        }
        function k2(e3) {
          var t3 = i2.get(e3);
          if (t3 == null)
            return null;
          var n3 = $t(t3), r3 = n3.displayName, o3 = n3.key, a3 = zt(t3), l3 = null, u3 = null, s3 = null, f3 = null, p3 = null, d3 = t3._currentElement;
          if (d3 !== null) {
            s3 = d3.props, p3 = d3._source != null ? d3._source : null;
            var h3 = d3._owner;
            if (h3)
              for (u3 = []; h3 != null; )
                u3.push({displayName: $t(h3).displayName || "Unknown", id: c2(h3), type: zt(h3)}), h3._currentElement && (h3 = h3._currentElement._owner);
          }
          var m3 = t3._instance;
          return m3 != null && (l3 = m3.context || null, f3 = m3.state || null), {id: e3, canEditHooks: false, canEditFunctionProps: false, canEditHooksAndDeletePaths: false, canEditHooksAndRenamePaths: false, canEditFunctionPropsDeletePaths: false, canEditFunctionPropsRenamePaths: false, canToggleSuspense: false, canViewSource: a3 === 1 || a3 === 5, hasLegacyContext: true, displayName: r3, type: a3, key: o3 != null ? o3 : null, context: l3, hooks: null, props: s3, state: f3, owners: u3, source: p3, rootType: null, rendererPackageName: null, rendererVersion: null};
        }
        return {cleanup: function() {
          p2 !== null && (n2.Component ? jt(n2.Component.Mixin, p2) : jt(n2.Reconciler, p2)), p2 = null;
        }, copyElementPath: function(e3, t3) {
          var n3 = k2(e3);
          n3 !== null && Pe(ve(n3, t3));
        }, deletePath: function(e3, t3, n3, r3) {
          var o3 = i2.get(t3);
          if (o3 != null) {
            var a3 = o3._instance;
            if (a3 != null)
              switch (e3) {
                case "context":
                  ye(a3.context, r3), Ft(a3);
                  break;
                case "hooks":
                  throw new Error("Hooks not supported by this renderer");
                case "props":
                  var l3 = o3._currentElement;
                  o3._currentElement = Ut(Ut({}, l3), {}, {props: Ae(l3.props, r3)}), Ft(a3);
                  break;
                case "state":
                  ye(a3.state, r3), Ft(a3);
              }
          }
        }, flushInitialOperations: function() {
          var e3 = n2.Mount._instancesByReactRootID || n2.Mount._instancesByContainerID;
          for (var t3 in e3) {
            var r3 = c2(e3[t3]);
            m2(r3, 0, r3), E2(r3);
          }
        }, getBestMatchForTrackedPath: function() {
          return null;
        }, getDisplayNameForFiberID: function(e3) {
          var t3 = i2.get(e3);
          return t3 ? $t(t3).displayName : null;
        }, getFiberIDForNative: u2, getInstanceAndStyle: function(e3) {
          var t3 = null, n3 = null, r3 = i2.get(e3);
          if (r3 != null) {
            t3 = r3._instance || null;
            var o3 = r3._currentElement;
            o3 != null && o3.props != null && (n3 = o3.props.style || null);
          }
          return {instance: t3, style: n3};
        }, findNativeNodesForFiberID: function(e3) {
          var t3 = o2(e3);
          return t3 == null ? null : [t3];
        }, getOwnersList: function(e3) {
          return null;
        }, getPathForElement: function(e3) {
          return null;
        }, getProfilingData: function() {
          throw new Error("getProfilingData not supported by this renderer");
        }, handleCommitFiberRoot: function() {
          throw new Error("handleCommitFiberRoot not supported by this renderer");
        }, handleCommitFiberUnmount: function() {
          throw new Error("handleCommitFiberUnmount not supported by this renderer");
        }, inspectElement: function(e3, t3) {
          I2 !== e3 && (I2 = e3, _2 = {});
          var n3 = k2(e3);
          return n3 === null ? {id: e3, type: "not-found"} : (t3 != null && function(e4) {
            var t4 = _2;
            e4.forEach(function(e5) {
              t4[e5] || (t4[e5] = {}), t4 = t4[e5];
            });
          }(t3), function(e4) {
            var t4 = i2.get(e4);
            if (t4 != null)
              switch (zt(t4)) {
                case 1:
                  r2.$r = t4._instance;
                  break;
                case 5:
                  var n4 = t4._currentElement;
                  if (n4 == null)
                    return void console.warn('Could not find element with id "'.concat(e4, '"'));
                  r2.$r = {props: n4.props, type: n4.type};
                  break;
                default:
                  r2.$r = null;
              }
            else
              console.warn('Could not find instance with id "'.concat(e4, '"'));
          }(e3), n3.context = Te(n3.context, C2("context")), n3.props = Te(n3.props, C2("props")), n3.state = Te(n3.state, C2("state")), {id: e3, type: "full-data", value: n3});
        }, logElementToConsole: function(e3) {
          var t3 = k2(e3);
          if (t3 !== null) {
            var n3 = typeof console.groupCollapsed == "function";
            n3 && console.groupCollapsed("[Click to expand] %c<".concat(t3.displayName || "Component", " />"), "color: var(--dom-tag-name-color); font-weight: normal;"), t3.props !== null && console.log("Props:", t3.props), t3.state !== null && console.log("State:", t3.state), t3.context !== null && console.log("Context:", t3.context);
            var r3 = o2(e3);
            r3 !== null && console.log("Node:", r3), (window.chrome || /firefox/i.test(navigator.userAgent)) && console.log("Right-click any value to save it as a global variable for further inspection."), n3 && console.groupEnd();
          } else
            console.warn('Could not find element with id "'.concat(e3, '"'));
        }, overrideSuspense: function() {
          throw new Error("overrideSuspense not supported by this renderer");
        }, overrideValueAtPath: function(e3, t3, n3, r3, o3) {
          var a3 = i2.get(t3);
          if (a3 != null) {
            var l3 = a3._instance;
            if (l3 != null)
              switch (e3) {
                case "context":
                  be(l3.context, r3, o3), Ft(l3);
                  break;
                case "hooks":
                  throw new Error("Hooks not supported by this renderer");
                case "props":
                  var u3 = a3._currentElement;
                  a3._currentElement = Ut(Ut({}, u3), {}, {props: Ne(u3.props, r3, o3)}), Ft(l3);
                  break;
                case "state":
                  be(l3.state, r3, o3), Ft(l3);
              }
          }
        }, renamePath: function(e3, t3, n3, r3, o3) {
          var a3 = i2.get(t3);
          if (a3 != null) {
            var l3 = a3._instance;
            if (l3 != null)
              switch (e3) {
                case "context":
                  ge(l3.context, r3, o3), Ft(l3);
                  break;
                case "hooks":
                  throw new Error("Hooks not supported by this renderer");
                case "props":
                  var u3 = a3._currentElement;
                  a3._currentElement = Ut(Ut({}, u3), {}, {props: xe(u3.props, r3, o3)}), Ft(l3);
                  break;
                case "state":
                  ge(l3.state, r3, o3), Ft(l3);
              }
          }
        }, prepareViewAttributeSource: function(e3, t3) {
          var n3 = k2(e3);
          n3 !== null && (window.$attribute = ve(n3, t3));
        }, prepareViewElementSource: function(e3) {
          var t3 = i2.get(e3);
          if (t3 != null) {
            var n3 = t3._currentElement;
            n3 != null ? r2.$type = n3.type : console.warn('Could not find element with id "'.concat(e3, '"'));
          } else
            console.warn('Could not find instance with id "'.concat(e3, '"'));
        }, renderer: n2, setTraceUpdatesEnabled: function(e3) {
        }, setTrackedPath: function(e3) {
        }, startProfiling: function() {
        }, stopProfiling: function() {
        }, storeAsGlobal: function(e3, t3, n3) {
          var r3 = k2(e3);
          if (r3 !== null) {
            var o3 = ve(r3, t3), i3 = "$reactTemp".concat(n3);
            window[i3] = o3, console.log(i3), console.log(o3);
          }
        }, updateComponentFilters: function(e3) {
        }};
      }
      function Wt(e2, t2) {
        var n2 = false, r2 = {bottom: 0, left: 0, right: 0, top: 0}, o2 = t2[e2];
        if (o2 != null) {
          for (var i2 = 0, a2 = Object.keys(r2); i2 < a2.length; i2++) {
            r2[a2[i2]] = o2;
          }
          n2 = true;
        }
        var l2 = t2[e2 + "Horizontal"];
        if (l2 != null)
          r2.left = l2, r2.right = l2, n2 = true;
        else {
          var u2 = t2[e2 + "Left"];
          u2 != null && (r2.left = u2, n2 = true);
          var c2 = t2[e2 + "Right"];
          c2 != null && (r2.right = c2, n2 = true);
          var s2 = t2[e2 + "End"];
          s2 != null && (r2.right = s2, n2 = true);
          var f2 = t2[e2 + "Start"];
          f2 != null && (r2.left = f2, n2 = true);
        }
        var p2 = t2[e2 + "Vertical"];
        if (p2 != null)
          r2.bottom = p2, r2.top = p2, n2 = true;
        else {
          var d2 = t2[e2 + "Bottom"];
          d2 != null && (r2.bottom = d2, n2 = true);
          var h2 = t2[e2 + "Top"];
          h2 != null && (r2.top = h2, n2 = true);
        }
        return n2 ? r2 : null;
      }
      function Xt(e2) {
        return (Xt = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function qt(e2, t2, n2) {
        return t2 in e2 ? Object.defineProperty(e2, t2, {value: n2, enumerable: true, configurable: true, writable: true}) : e2[t2] = n2, e2;
      }
      function Yt(e2, t2, n2, r2) {
        e2.addListener("NativeStyleEditor_measure", function(r3) {
          var o2 = r3.id, i2 = r3.rendererID;
          Jt(t2, e2, n2, o2, i2);
        }), e2.addListener("NativeStyleEditor_renameAttribute", function(r3) {
          var o2 = r3.id, i2 = r3.rendererID, a2 = r3.oldName, l2 = r3.newName, u2 = r3.value;
          !function(e3, t3, n3, r4, o3, i3) {
            var a3, l3 = e3.getInstanceAndStyle({id: t3, rendererID: n3});
            if (!l3 || !l3.style)
              return;
            var u3, c2 = l3.instance, s2 = l3.style, f2 = o3 ? (qt(a3 = {}, r4, void 0), qt(a3, o3, i3), a3) : qt({}, r4, void 0);
            if (c2 !== null && typeof c2.setNativeProps == "function") {
              var p2 = Qt.get(t3);
              p2 ? Object.assign(p2, f2) : Qt.set(t3, f2), c2.setNativeProps({style: f2});
            } else if (Array.isArray(s2)) {
              var d2 = s2.length - 1;
              Xt(s2[d2]) !== "object" || Array.isArray(s2[d2]) ? e3.overrideValueAtPath({type: "props", id: t3, rendererID: n3, path: ["style"], value: s2.concat([f2])}) : (delete (u3 = Zt(s2[d2]))[r4], o3 ? u3[o3] = i3 : u3[r4] = void 0, e3.overrideValueAtPath({type: "props", id: t3, rendererID: n3, path: ["style", d2], value: u3}));
            } else
              Xt(s2) === "object" ? (delete (u3 = Zt(s2))[r4], o3 ? u3[o3] = i3 : u3[r4] = void 0, e3.overrideValueAtPath({type: "props", id: t3, rendererID: n3, path: ["style"], value: u3})) : e3.overrideValueAtPath({type: "props", id: t3, rendererID: n3, path: ["style"], value: [s2, f2]});
            e3.emit("hideNativeHighlight");
          }(t2, o2, i2, a2, l2, u2), setTimeout(function() {
            return Jt(t2, e2, n2, o2, i2);
          });
        }), e2.addListener("NativeStyleEditor_setValue", function(r3) {
          var o2 = r3.id, i2 = r3.rendererID, a2 = r3.name, l2 = r3.value;
          !function(e3, t3, n3, r4, o3) {
            var i3 = e3.getInstanceAndStyle({id: t3, rendererID: n3});
            if (!i3 || !i3.style)
              return;
            var a3 = i3.instance, l3 = i3.style, u2 = qt({}, r4, o3);
            if (a3 !== null && typeof a3.setNativeProps == "function") {
              var c2 = Qt.get(t3);
              c2 ? Object.assign(c2, u2) : Qt.set(t3, u2), a3.setNativeProps({style: u2});
            } else if (Array.isArray(l3)) {
              var s2 = l3.length - 1;
              Xt(l3[s2]) !== "object" || Array.isArray(l3[s2]) ? e3.overrideValueAtPath({type: "props", id: t3, rendererID: n3, path: ["style"], value: l3.concat([u2])}) : e3.overrideValueAtPath({type: "props", id: t3, rendererID: n3, path: ["style", s2, r4], value: o3});
            } else
              e3.overrideValueAtPath({type: "props", id: t3, rendererID: n3, path: ["style"], value: [l3, u2]});
            e3.emit("hideNativeHighlight");
          }(t2, o2, i2, a2, l2), setTimeout(function() {
            return Jt(t2, e2, n2, o2, i2);
          });
        }), e2.send("isNativeStyleEditorSupported", {isSupported: true, validAttributes: r2});
      }
      var Kt = {top: 0, left: 0, right: 0, bottom: 0}, Qt = new Map();
      function Jt(e2, t2, n2, r2, o2) {
        var i2 = e2.getInstanceAndStyle({id: r2, rendererID: o2});
        if (i2 && i2.style) {
          var a2 = i2.instance, l2 = n2(i2.style), u2 = Qt.get(r2);
          u2 != null && (l2 = Object.assign({}, l2, u2)), a2 && typeof a2.measure == "function" ? a2.measure(function(e3, n3, o3, i3, a3, u3) {
            if (typeof e3 == "number") {
              var c2 = l2 != null && Wt("margin", l2) || Kt, s2 = l2 != null && Wt("padding", l2) || Kt;
              t2.send("NativeStyleEditor_styleAndLayout", {id: r2, layout: {x: e3, y: n3, width: o3, height: i3, left: a3, top: u3, margin: c2, padding: s2}, style: l2 || null});
            } else
              t2.send("NativeStyleEditor_styleAndLayout", {id: r2, layout: null, style: l2 || null});
          }) : t2.send("NativeStyleEditor_styleAndLayout", {id: r2, layout: null, style: l2 || null});
        } else
          t2.send("NativeStyleEditor_styleAndLayout", {id: r2, layout: null, style: null});
      }
      function Zt(e2) {
        var t2 = {};
        for (var n2 in e2)
          t2[n2] = e2[n2];
        return t2;
      }
      !function(e2) {
        if (e2.hasOwnProperty("__REACT_DEVTOOLS_GLOBAL_HOOK__"))
          return null;
        var t2 = 0, n2 = false, r2 = {}, o2 = new Map(), i2 = {}, a2 = new Map(), l2 = {rendererInterfaces: o2, listeners: i2, renderers: a2, emit: function(e3, t3) {
          i2[e3] && i2[e3].map(function(e4) {
            return e4(t3);
          });
        }, getFiberRoots: function(e3) {
          var t3 = r2;
          return t3[e3] || (t3[e3] = new Set()), t3[e3];
        }, inject: function(r3) {
          var o3 = ++t2;
          a2.set(o3, r3);
          var i3 = n2 ? "deadcode" : function(e3) {
            try {
              if (typeof e3.version == "string")
                return e3.bundleType > 0 ? "development" : "production";
              var t3 = Function.prototype.toString;
              if (e3.Mount && e3.Mount._renderNewRootComponent) {
                var n3 = t3.call(e3.Mount._renderNewRootComponent);
                return n3.indexOf("function") !== 0 ? "production" : n3.indexOf("storedMeasure") !== -1 ? "development" : n3.indexOf("should be a pure function") !== -1 ? n3.indexOf("NODE_ENV") !== -1 || n3.indexOf("development") !== -1 || n3.indexOf("true") !== -1 ? "development" : n3.indexOf("nextElement") !== -1 || n3.indexOf("nextComponent") !== -1 ? "unminified" : "development" : n3.indexOf("nextElement") !== -1 || n3.indexOf("nextComponent") !== -1 ? "unminified" : "outdated";
              }
            } catch (e4) {
            }
            return "production";
          }(r3);
          try {
            var u2 = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false, c2 = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
            (u2 || c2) && (pt(r3), ht({appendComponentStack: u2, breakOnConsoleErrors: c2}));
          } catch (e3) {
          }
          var s2 = e2.__REACT_DEVTOOLS_ATTACH__;
          if (typeof s2 == "function") {
            var f2 = s2(l2, o3, r3, e2);
            l2.rendererInterfaces.set(o3, f2);
          }
          return l2.emit("renderer", {id: o3, renderer: r3, reactBuildType: i3}), o3;
        }, on: function(e3, t3) {
          i2[e3] || (i2[e3] = []), i2[e3].push(t3);
        }, off: function(e3, t3) {
          if (i2[e3]) {
            var n3 = i2[e3].indexOf(t3);
            n3 !== -1 && i2[e3].splice(n3, 1), i2[e3].length || delete i2[e3];
          }
        }, sub: function(e3, t3) {
          return l2.on(e3, t3), function() {
            return l2.off(e3, t3);
          };
        }, supportsFiber: true, checkDCE: function(e3) {
          try {
            Function.prototype.toString.call(e3).indexOf("^_^") > -1 && (n2 = true, setTimeout(function() {
              throw new Error("React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://reactjs.org/link/perf-use-production-build");
            }));
          } catch (e4) {
          }
        }, onCommitFiberUnmount: function(e3, t3) {
          var n3 = o2.get(e3);
          n3 != null && n3.handleCommitFiberUnmount(t3);
        }, onCommitFiberRoot: function(e3, t3, n3) {
          var r3 = l2.getFiberRoots(e3), i3 = t3.current, a3 = r3.has(t3), u2 = i3.memoizedState == null || i3.memoizedState.element == null;
          a3 || u2 ? a3 && u2 && r3.delete(t3) : r3.add(t3);
          var c2 = o2.get(e3);
          c2 != null && c2.handleCommitFiberRoot(t3, n3);
        }};
        Object.defineProperty(e2, "__REACT_DEVTOOLS_GLOBAL_HOOK__", {configurable: false, enumerable: false, get: function() {
          return l2;
        }});
      }(window);
      var en = window.__REACT_DEVTOOLS_GLOBAL_HOOK__, tn = [{type: 1, value: 7, isEnabled: true}];
      function nn(e2) {
        if (en != null) {
          var t2 = e2 || {}, n2 = t2.host, r2 = n2 === void 0 ? "localhost" : n2, o2 = t2.nativeStyleEditorValidAttributes, i2 = t2.useHttps, a2 = i2 !== void 0 && i2, l2 = t2.port, u2 = l2 === void 0 ? 8097 : l2, c2 = t2.websocket, s2 = t2.resolveRNStyle, f2 = s2 === void 0 ? null : s2, p2 = t2.retryConnectionDelay, d2 = p2 === void 0 ? 2e3 : p2, h2 = t2.isAppActive, m2 = a2 ? "wss" : "ws", v2 = null;
          if ((h2 === void 0 ? function() {
            return true;
          } : h2)()) {
            var y2 = null, g2 = [], b2 = m2 + "://" + r2 + ":" + u2, w2 = c2 || new window.WebSocket(b2);
            w2.onclose = function() {
              0;
              y2 !== null && y2.emit("shutdown");
              E2();
            }, w2.onerror = function() {
              0;
              E2();
            }, w2.onmessage = function(e3) {
              var t3;
              try {
                if (typeof e3.data != "string")
                  throw Error();
                t3 = JSON.parse(e3.data);
              } catch (t4) {
                return void console.error("[React DevTools] Failed to parse JSON: " + e3.data);
              }
              g2.forEach(function(e4) {
                try {
                  e4(t3);
                } catch (e5) {
                  throw console.log("[React DevTools] Error calling listener", t3), console.log("error:", e5), e5;
                }
              });
            }, w2.onopen = function() {
              (y2 = new Lt({listen: function(e4) {
                return g2.push(e4), function() {
                  var t4 = g2.indexOf(e4);
                  t4 >= 0 && g2.splice(t4, 1);
                };
              }, send: function(e4, t4, n4) {
                w2.readyState === w2.OPEN ? w2.send(JSON.stringify({event: e4, payload: t4})) : (y2 !== null && y2.shutdown(), E2());
              }})).addListener("inspectElement", function(t4) {
                var n4 = t4.id, r4 = t4.rendererID, o3 = e3.rendererInterfaces[r4];
                if (o3 != null) {
                  var i3 = o3.findNativeNodesForFiberID(n4);
                  i3 != null && i3[0] != null && e3.emit("showNativeHighlight", i3[0]);
                }
              }), y2.addListener("updateComponentFilters", function(e4) {
                tn = e4;
              }), window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ == null && y2.send("overrideComponentFilters", tn);
              var e3 = new Ot(y2);
              if (e3.addListener("shutdown", function() {
                en.emit("shutdown");
              }), function(e4, t4, n4) {
                if (e4 == null)
                  return function() {
                  };
                var r4 = [e4.sub("renderer-attached", function(e5) {
                  var n5 = e5.id, r5 = (e5.renderer, e5.rendererInterface);
                  t4.setRendererInterface(n5, r5), r5.flushInitialOperations();
                }), e4.sub("unsupported-renderer-version", function(e5) {
                  t4.onUnsupportedRenderer(e5);
                }), e4.sub("operations", t4.onHookOperations), e4.sub("traceUpdates", t4.onTraceUpdates)], o3 = function(t5, r5) {
                  var o4 = e4.rendererInterfaces.get(t5);
                  o4 == null && (typeof r5.findFiberByHostInstance == "function" ? o4 = Xe(e4, t5, r5, n4) : r5.ComponentTree && (o4 = Gt(e4, t5, r5, n4)), o4 != null && e4.rendererInterfaces.set(t5, o4)), o4 != null ? e4.emit("renderer-attached", {id: t5, renderer: r5, rendererInterface: o4}) : e4.emit("unsupported-renderer-version", t5);
                };
                e4.renderers.forEach(function(e5, t5) {
                  o3(t5, e5);
                }), r4.push(e4.sub("renderer", function(e5) {
                  var t5 = e5.id, n5 = e5.renderer;
                  o3(t5, n5);
                })), e4.emit("react-devtools", t4), e4.reactDevtoolsAgent = t4;
                var i3 = function() {
                  r4.forEach(function(e5) {
                    return e5();
                  }), e4.rendererInterfaces.forEach(function(e5) {
                    e5.cleanup();
                  }), e4.reactDevtoolsAgent = null;
                };
                t4.addListener("shutdown", i3), r4.push(function() {
                  t4.removeListener("shutdown", i3);
                });
              }(en, e3, window), f2 != null || en.resolveRNStyle != null)
                Yt(y2, e3, f2 || en.resolveRNStyle, o2 || en.nativeStyleEditorValidAttributes || null);
              else {
                var t3, n3, r3 = function() {
                  y2 !== null && Yt(y2, e3, t3, n3);
                };
                en.hasOwnProperty("resolveRNStyle") || Object.defineProperty(en, "resolveRNStyle", {enumerable: false, get: function() {
                  return t3;
                }, set: function(e4) {
                  t3 = e4, r3();
                }}), en.hasOwnProperty("nativeStyleEditorValidAttributes") || Object.defineProperty(en, "nativeStyleEditorValidAttributes", {enumerable: false, get: function() {
                  return n3;
                }, set: function(e4) {
                  n3 = e4, r3();
                }});
              }
            };
          } else
            E2();
        }
        function E2() {
          v2 === null && (v2 = setTimeout(function() {
            return nn(e2);
          }, d2));
        }
      }
    }]);
  });
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/devtools.js
var require_devtools = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  require_devtools_window_polyfill();
  var react_devtools_core_1 = require_backend();
  react_devtools_core_1.connectToDevTools();
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/reconciler.js
var require_reconciler = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var scheduler_1 = require_scheduler();
  var react_reconciler_1 = __importDefault(require_react_reconciler());
  var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
  var dom_1 = require_dom();
  if (process.env.DEV === "true") {
    require_devtools();
  }
  var cleanupYogaNode = (node) => {
    node === null || node === void 0 ? void 0 : node.unsetMeasureFunc();
    node === null || node === void 0 ? void 0 : node.freeRecursive();
  };
  exports2.default = react_reconciler_1.default({
    schedulePassiveEffects: scheduler_1.unstable_scheduleCallback,
    cancelPassiveEffects: scheduler_1.unstable_cancelCallback,
    now: Date.now,
    getRootHostContext: () => ({
      isInsideText: false
    }),
    prepareForCommit: () => {
    },
    resetAfterCommit: (rootNode) => {
      if (rootNode.isStaticDirty) {
        rootNode.isStaticDirty = false;
        if (typeof rootNode.onImmediateRender === "function") {
          rootNode.onImmediateRender();
        }
        return;
      }
      if (typeof rootNode.onRender === "function") {
        rootNode.onRender();
      }
    },
    getChildHostContext: (parentHostContext, type) => {
      const previousIsInsideText = parentHostContext.isInsideText;
      const isInsideText = type === "ink-text" || type === "ink-virtual-text";
      if (previousIsInsideText === isInsideText) {
        return parentHostContext;
      }
      return {isInsideText};
    },
    shouldSetTextContent: () => false,
    createInstance: (originalType, newProps, _root, hostContext) => {
      if (hostContext.isInsideText && originalType === "ink-box") {
        throw new Error(`<Box> can\u2019t be nested inside <Text> component`);
      }
      const type = originalType === "ink-text" && hostContext.isInsideText ? "ink-virtual-text" : originalType;
      const node = dom_1.createNode(type);
      for (const [key, value] of Object.entries(newProps)) {
        if (key === "children") {
          continue;
        } else if (key === "style") {
          dom_1.setStyle(node, value);
        } else if (key === "internal_transform") {
          node.internal_transform = value;
        } else if (key === "internal_static") {
          node.internal_static = true;
        } else {
          dom_1.setAttribute(node, key, value);
        }
      }
      return node;
    },
    createTextInstance: (text, _root, hostContext) => {
      if (!hostContext.isInsideText) {
        throw new Error(`Text string "${text}" must be rendered inside <Text> component`);
      }
      return dom_1.createTextNode(text);
    },
    resetTextContent: () => {
    },
    hideTextInstance: (node) => {
      dom_1.setTextNodeValue(node, "");
    },
    unhideTextInstance: (node, text) => {
      dom_1.setTextNodeValue(node, text);
    },
    getPublicInstance: (instance2) => instance2,
    hideInstance: (node) => {
      var _a2;
      (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.setDisplay(yoga_layout_prebuilt_1.default.DISPLAY_NONE);
    },
    unhideInstance: (node) => {
      var _a2;
      (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.setDisplay(yoga_layout_prebuilt_1.default.DISPLAY_FLEX);
    },
    appendInitialChild: dom_1.appendChildNode,
    appendChild: dom_1.appendChildNode,
    insertBefore: dom_1.insertBeforeNode,
    finalizeInitialChildren: (node, _type, _props, rootNode) => {
      if (node.internal_static) {
        rootNode.isStaticDirty = true;
        rootNode.staticNode = node;
      }
      return false;
    },
    supportsMutation: true,
    appendChildToContainer: dom_1.appendChildNode,
    insertInContainerBefore: dom_1.insertBeforeNode,
    removeChildFromContainer: (node, removeNode) => {
      dom_1.removeChildNode(node, removeNode);
      cleanupYogaNode(removeNode.yogaNode);
    },
    prepareUpdate: (node, _type, oldProps, newProps, rootNode) => {
      if (node.internal_static) {
        rootNode.isStaticDirty = true;
      }
      const updatePayload = {};
      const keys = Object.keys(newProps);
      for (const key of keys) {
        if (newProps[key] !== oldProps[key]) {
          const isStyle = key === "style" && typeof newProps.style === "object" && typeof oldProps.style === "object";
          if (isStyle) {
            const newStyle = newProps.style;
            const oldStyle = oldProps.style;
            const styleKeys = Object.keys(newStyle);
            for (const styleKey of styleKeys) {
              if (styleKey === "borderStyle" || styleKey === "borderColor") {
                if (typeof updatePayload.style !== "object") {
                  const style = {};
                  updatePayload.style = style;
                }
                updatePayload.style.borderStyle = newStyle.borderStyle;
                updatePayload.style.borderColor = newStyle.borderColor;
              }
              if (newStyle[styleKey] !== oldStyle[styleKey]) {
                if (typeof updatePayload.style !== "object") {
                  const style = {};
                  updatePayload.style = style;
                }
                updatePayload.style[styleKey] = newStyle[styleKey];
              }
            }
            continue;
          }
          updatePayload[key] = newProps[key];
        }
      }
      return updatePayload;
    },
    commitUpdate: (node, updatePayload) => {
      for (const [key, value] of Object.entries(updatePayload)) {
        if (key === "children") {
          continue;
        } else if (key === "style") {
          dom_1.setStyle(node, value);
        } else if (key === "internal_transform") {
          node.internal_transform = value;
        } else if (key === "internal_static") {
          node.internal_static = true;
        } else {
          dom_1.setAttribute(node, key, value);
        }
      }
    },
    commitTextUpdate: (node, _oldText, newText) => {
      dom_1.setTextNodeValue(node, newText);
    },
    removeChild: (node, removeNode) => {
      dom_1.removeChildNode(node, removeNode);
      cleanupYogaNode(removeNode.yogaNode);
    }
  });
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/get-max-width.js
var require_get_max_width = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
  exports2.default = (yogaNode) => {
    return yogaNode.getComputedWidth() - yogaNode.getComputedPadding(yoga_layout_prebuilt_1.default.EDGE_LEFT) - yogaNode.getComputedPadding(yoga_layout_prebuilt_1.default.EDGE_RIGHT) - yogaNode.getComputedBorder(yoga_layout_prebuilt_1.default.EDGE_LEFT) - yogaNode.getComputedBorder(yoga_layout_prebuilt_1.default.EDGE_RIGHT);
  };
});

// node_modules/.pnpm/cli-boxes@2.2.1/node_modules/cli-boxes/boxes.json
var require_boxes = __commonJS((exports2, module2) => {
  module2.exports = {
    single: {
      topLeft: "\u250C",
      topRight: "\u2510",
      bottomRight: "\u2518",
      bottomLeft: "\u2514",
      vertical: "\u2502",
      horizontal: "\u2500"
    },
    double: {
      topLeft: "\u2554",
      topRight: "\u2557",
      bottomRight: "\u255D",
      bottomLeft: "\u255A",
      vertical: "\u2551",
      horizontal: "\u2550"
    },
    round: {
      topLeft: "\u256D",
      topRight: "\u256E",
      bottomRight: "\u256F",
      bottomLeft: "\u2570",
      vertical: "\u2502",
      horizontal: "\u2500"
    },
    bold: {
      topLeft: "\u250F",
      topRight: "\u2513",
      bottomRight: "\u251B",
      bottomLeft: "\u2517",
      vertical: "\u2503",
      horizontal: "\u2501"
    },
    singleDouble: {
      topLeft: "\u2553",
      topRight: "\u2556",
      bottomRight: "\u255C",
      bottomLeft: "\u2559",
      vertical: "\u2551",
      horizontal: "\u2500"
    },
    doubleSingle: {
      topLeft: "\u2552",
      topRight: "\u2555",
      bottomRight: "\u255B",
      bottomLeft: "\u2558",
      vertical: "\u2502",
      horizontal: "\u2550"
    },
    classic: {
      topLeft: "+",
      topRight: "+",
      bottomRight: "+",
      bottomLeft: "+",
      vertical: "|",
      horizontal: "-"
    }
  };
});

// node_modules/.pnpm/cli-boxes@2.2.1/node_modules/cli-boxes/index.js
var require_cli_boxes = __commonJS((exports2, module2) => {
  "use strict";
  var cliBoxes = require_boxes();
  module2.exports = cliBoxes;
  module2.exports.default = cliBoxes;
});

// node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js
var require_has_flag2 = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (flag, argv = process.argv) => {
    const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
    const position = argv.indexOf(prefix + flag);
    const terminatorPosition = argv.indexOf("--");
    return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
  };
});

// node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js
var require_supports_color2 = __commonJS((exports2, module2) => {
  "use strict";
  var os = require("os");
  var tty = require("tty");
  var hasFlag = require_has_flag2();
  var {env} = process;
  var forceColor;
  if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
    forceColor = 0;
  } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
    forceColor = 1;
  }
  if ("FORCE_COLOR" in env) {
    if (env.FORCE_COLOR === "true") {
      forceColor = 1;
    } else if (env.FORCE_COLOR === "false") {
      forceColor = 0;
    } else {
      forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    }
  }
  function translateLevel(level) {
    if (level === 0) {
      return false;
    }
    return {
      level,
      hasBasic: true,
      has256: level >= 2,
      has16m: level >= 3
    };
  }
  function supportsColor(haveStream, streamIsTTY) {
    if (forceColor === 0) {
      return 0;
    }
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
      return 3;
    }
    if (hasFlag("color=256")) {
      return 2;
    }
    if (haveStream && !streamIsTTY && forceColor === void 0) {
      return 0;
    }
    const min = forceColor || 0;
    if (env.TERM === "dumb") {
      return min;
    }
    if (process.platform === "win32") {
      const osRelease = os.release().split(".");
      if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
        return Number(osRelease[2]) >= 14931 ? 3 : 2;
      }
      return 1;
    }
    if ("CI" in env) {
      if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
        return 1;
      }
      return min;
    }
    if ("TEAMCITY_VERSION" in env) {
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === "truecolor") {
      return 3;
    }
    if ("TERM_PROGRAM" in env) {
      const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (env.TERM_PROGRAM) {
        case "iTerm.app":
          return version >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
      return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
      return 1;
    }
    if ("COLORTERM" in env) {
      return 1;
    }
    return min;
  }
  function getSupportLevel(stream) {
    const level = supportsColor(stream, stream && stream.isTTY);
    return translateLevel(level);
  }
  module2.exports = {
    supportsColor: getSupportLevel,
    stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    stderr: translateLevel(supportsColor(true, tty.isatty(2)))
  };
});

// node_modules/.pnpm/chalk@4.1.0/node_modules/chalk/source/util.js
var require_util = __commonJS((exports2, module2) => {
  "use strict";
  var stringReplaceAll = (string, substring, replacer) => {
    let index = string.indexOf(substring);
    if (index === -1) {
      return string;
    }
    const substringLength = substring.length;
    let endIndex = 0;
    let returnValue = "";
    do {
      returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
      endIndex = index + substringLength;
      index = string.indexOf(substring, endIndex);
    } while (index !== -1);
    returnValue += string.substr(endIndex);
    return returnValue;
  };
  var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
    let endIndex = 0;
    let returnValue = "";
    do {
      const gotCR = string[index - 1] === "\r";
      returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
      endIndex = index + 1;
      index = string.indexOf("\n", endIndex);
    } while (index !== -1);
    returnValue += string.substr(endIndex);
    return returnValue;
  };
  module2.exports = {
    stringReplaceAll,
    stringEncaseCRLFWithFirstIndex
  };
});

// node_modules/.pnpm/chalk@4.1.0/node_modules/chalk/source/templates.js
var require_templates2 = __commonJS((exports2, module2) => {
  "use strict";
  var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
  var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
  var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
  var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
  var ESCAPES = new Map([
    ["n", "\n"],
    ["r", "\r"],
    ["t", "	"],
    ["b", "\b"],
    ["f", "\f"],
    ["v", "\v"],
    ["0", "\0"],
    ["\\", "\\"],
    ["e", ""],
    ["a", "\x07"]
  ]);
  function unescape2(c) {
    const u = c[0] === "u";
    const bracket = c[1] === "{";
    if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
      return String.fromCharCode(parseInt(c.slice(1), 16));
    }
    if (u && bracket) {
      return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
    }
    return ESCAPES.get(c) || c;
  }
  function parseArguments(name, arguments_) {
    const results = [];
    const chunks = arguments_.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks) {
      const number = Number(chunk);
      if (!Number.isNaN(number)) {
        results.push(number);
      } else if (matches = chunk.match(STRING_REGEX)) {
        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape2, character) => escape2 ? unescape2(escape2) : character));
      } else {
        throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
      }
    }
    return results;
  }
  function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while ((matches = STYLE_REGEX.exec(style)) !== null) {
      const name = matches[1];
      if (matches[2]) {
        const args = parseArguments(name, matches[2]);
        results.push([name].concat(args));
      } else {
        results.push([name]);
      }
    }
    return results;
  }
  function buildStyle(chalk, styles) {
    const enabled = {};
    for (const layer of styles) {
      for (const style of layer.styles) {
        enabled[style[0]] = layer.inverse ? null : style.slice(1);
      }
    }
    let current = chalk;
    for (const [styleName, styles2] of Object.entries(enabled)) {
      if (!Array.isArray(styles2)) {
        continue;
      }
      if (!(styleName in current)) {
        throw new Error(`Unknown Chalk style: ${styleName}`);
      }
      current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
    }
    return current;
  }
  module2.exports = (chalk, temporary) => {
    const styles = [];
    const chunks = [];
    let chunk = [];
    temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
      if (escapeCharacter) {
        chunk.push(unescape2(escapeCharacter));
      } else if (style) {
        const string = chunk.join("");
        chunk = [];
        chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
        styles.push({inverse, styles: parseStyle(style)});
      } else if (close) {
        if (styles.length === 0) {
          throw new Error("Found extraneous } in Chalk template literal");
        }
        chunks.push(buildStyle(chalk, styles)(chunk.join("")));
        chunk = [];
        styles.pop();
      } else {
        chunk.push(character);
      }
    });
    chunks.push(chunk.join(""));
    if (styles.length > 0) {
      const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(errMessage);
    }
    return chunks.join("");
  };
});

// node_modules/.pnpm/chalk@4.1.0/node_modules/chalk/source/index.js
var require_source = __commonJS((exports2, module2) => {
  "use strict";
  var ansiStyles = require_ansi_styles2();
  var {stdout: stdoutColor, stderr: stderrColor} = require_supports_color2();
  var {
    stringReplaceAll,
    stringEncaseCRLFWithFirstIndex
  } = require_util();
  var {isArray} = Array;
  var levelMapping = [
    "ansi",
    "ansi",
    "ansi256",
    "ansi16m"
  ];
  var styles = Object.create(null);
  var applyOptions = (object, options = {}) => {
    if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
      throw new Error("The `level` option should be an integer from 0 to 3");
    }
    const colorLevel = stdoutColor ? stdoutColor.level : 0;
    object.level = options.level === void 0 ? colorLevel : options.level;
  };
  var ChalkClass = class {
    constructor(options) {
      return chalkFactory(options);
    }
  };
  var chalkFactory = (options) => {
    const chalk2 = {};
    applyOptions(chalk2, options);
    chalk2.template = (...arguments_) => chalkTag(chalk2.template, ...arguments_);
    Object.setPrototypeOf(chalk2, Chalk.prototype);
    Object.setPrototypeOf(chalk2.template, chalk2);
    chalk2.template.constructor = () => {
      throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
    };
    chalk2.template.Instance = ChalkClass;
    return chalk2.template;
  };
  function Chalk(options) {
    return chalkFactory(options);
  }
  for (const [styleName, style] of Object.entries(ansiStyles)) {
    styles[styleName] = {
      get() {
        const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
        Object.defineProperty(this, styleName, {value: builder});
        return builder;
      }
    };
  }
  styles.visible = {
    get() {
      const builder = createBuilder(this, this._styler, true);
      Object.defineProperty(this, "visible", {value: builder});
      return builder;
    }
  };
  var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
  for (const model of usedModels) {
    styles[model] = {
      get() {
        const {level} = this;
        return function(...arguments_) {
          const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
          return createBuilder(this, styler, this._isEmpty);
        };
      }
    };
  }
  for (const model of usedModels) {
    const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
    styles[bgModel] = {
      get() {
        const {level} = this;
        return function(...arguments_) {
          const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
          return createBuilder(this, styler, this._isEmpty);
        };
      }
    };
  }
  var proto = Object.defineProperties(() => {
  }, {
    ...styles,
    level: {
      enumerable: true,
      get() {
        return this._generator.level;
      },
      set(level) {
        this._generator.level = level;
      }
    }
  });
  var createStyler = (open, close, parent) => {
    let openAll;
    let closeAll;
    if (parent === void 0) {
      openAll = open;
      closeAll = close;
    } else {
      openAll = parent.openAll + open;
      closeAll = close + parent.closeAll;
    }
    return {
      open,
      close,
      openAll,
      closeAll,
      parent
    };
  };
  var createBuilder = (self2, _styler, _isEmpty) => {
    const builder = (...arguments_) => {
      if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
        return applyStyle(builder, chalkTag(builder, ...arguments_));
      }
      return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
    };
    Object.setPrototypeOf(builder, proto);
    builder._generator = self2;
    builder._styler = _styler;
    builder._isEmpty = _isEmpty;
    return builder;
  };
  var applyStyle = (self2, string) => {
    if (self2.level <= 0 || !string) {
      return self2._isEmpty ? "" : string;
    }
    let styler = self2._styler;
    if (styler === void 0) {
      return string;
    }
    const {openAll, closeAll} = styler;
    if (string.indexOf("") !== -1) {
      while (styler !== void 0) {
        string = stringReplaceAll(string, styler.close, styler.open);
        styler = styler.parent;
      }
    }
    const lfIndex = string.indexOf("\n");
    if (lfIndex !== -1) {
      string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
    }
    return openAll + string + closeAll;
  };
  var template;
  var chalkTag = (chalk2, ...strings) => {
    const [firstString] = strings;
    if (!isArray(firstString) || !isArray(firstString.raw)) {
      return strings.join(" ");
    }
    const arguments_ = strings.slice(1);
    const parts = [firstString.raw[0]];
    for (let i = 1; i < firstString.length; i++) {
      parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
    }
    if (template === void 0) {
      template = require_templates2();
    }
    return template(chalk2, parts.join(""));
  };
  Object.defineProperties(Chalk.prototype, styles);
  var chalk = Chalk();
  chalk.supportsColor = stdoutColor;
  chalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0});
  chalk.stderr.supportsColor = stderrColor;
  module2.exports = chalk;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/colorize.js
var require_colorize = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var chalk_1 = __importDefault(require_source());
  var RGB_LIKE_REGEX = /^(rgb|hsl|hsv|hwb)\(\s?(\d+),\s?(\d+),\s?(\d+)\s?\)$/;
  var ANSI_REGEX = /^(ansi|ansi256)\(\s?(\d+)\s?\)$/;
  var getMethod = (name, type) => {
    if (type === "foreground") {
      return name;
    }
    return "bg" + name[0].toUpperCase() + name.slice(1);
  };
  exports2.default = (str, color, type) => {
    if (!color) {
      return str;
    }
    if (color in chalk_1.default) {
      const method = getMethod(color, type);
      return chalk_1.default[method](str);
    }
    if (color.startsWith("#")) {
      const method = getMethod("hex", type);
      return chalk_1.default[method](color)(str);
    }
    if (color.startsWith("ansi")) {
      const matches = ANSI_REGEX.exec(color);
      if (!matches) {
        return str;
      }
      const method = getMethod(matches[1], type);
      const value = Number(matches[2]);
      return chalk_1.default[method](value)(str);
    }
    const isRgbLike = color.startsWith("rgb") || color.startsWith("hsl") || color.startsWith("hsv") || color.startsWith("hwb");
    if (isRgbLike) {
      const matches = RGB_LIKE_REGEX.exec(color);
      if (!matches) {
        return str;
      }
      const method = getMethod(matches[1], type);
      const firstValue = Number(matches[2]);
      const secondValue = Number(matches[3]);
      const thirdValue = Number(matches[4]);
      return chalk_1.default[method](firstValue, secondValue, thirdValue)(str);
    }
    return str;
  };
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/render-border.js
var require_render_border = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var cli_boxes_1 = __importDefault(require_cli_boxes());
  var colorize_1 = __importDefault(require_colorize());
  exports2.default = (x, y, node, output) => {
    if (typeof node.style.borderStyle === "string") {
      const width = node.yogaNode.getComputedWidth();
      const height = node.yogaNode.getComputedHeight();
      const color = node.style.borderColor;
      const box = cli_boxes_1.default[node.style.borderStyle];
      const topBorder = colorize_1.default(box.topLeft + box.horizontal.repeat(width - 2) + box.topRight, color, "foreground");
      const verticalBorder = (colorize_1.default(box.vertical, color, "foreground") + "\n").repeat(height - 2);
      const bottomBorder = colorize_1.default(box.bottomLeft + box.horizontal.repeat(width - 2) + box.bottomRight, color, "foreground");
      output.write(x, y, topBorder, {transformers: []});
      output.write(x, y + 1, verticalBorder, {transformers: []});
      output.write(x + width - 1, y + 1, verticalBorder, {transformers: []});
      output.write(x, y + height - 1, bottomBorder, {transformers: []});
    }
  };
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/render-node-to-output.js
var require_render_node_to_output = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
  var widest_line_1 = __importDefault(require_widest_line());
  var indent_string_1 = __importDefault(require_indent_string());
  var wrap_text_1 = __importDefault(require_wrap_text());
  var get_max_width_1 = __importDefault(require_get_max_width());
  var squash_text_nodes_1 = __importDefault(require_squash_text_nodes());
  var render_border_1 = __importDefault(require_render_border());
  var applyPaddingToText = (node, text) => {
    var _a2;
    const yogaNode = (_a2 = node.childNodes[0]) === null || _a2 === void 0 ? void 0 : _a2.yogaNode;
    if (yogaNode) {
      const offsetX = yogaNode.getComputedLeft();
      const offsetY = yogaNode.getComputedTop();
      text = "\n".repeat(offsetY) + indent_string_1.default(text, offsetX);
    }
    return text;
  };
  var renderNodeToOutput = (node, output, options) => {
    var _a2;
    const {offsetX = 0, offsetY = 0, transformers = [], skipStaticElements} = options;
    if (skipStaticElements && node.internal_static) {
      return;
    }
    const {yogaNode} = node;
    if (yogaNode) {
      if (yogaNode.getDisplay() === yoga_layout_prebuilt_1.default.DISPLAY_NONE) {
        return;
      }
      const x = offsetX + yogaNode.getComputedLeft();
      const y = offsetY + yogaNode.getComputedTop();
      let newTransformers = transformers;
      if (typeof node.internal_transform === "function") {
        newTransformers = [node.internal_transform, ...transformers];
      }
      if (node.nodeName === "ink-text") {
        let text = squash_text_nodes_1.default(node);
        if (text.length > 0) {
          const currentWidth = widest_line_1.default(text);
          const maxWidth = get_max_width_1.default(yogaNode);
          if (currentWidth > maxWidth) {
            const textWrap = (_a2 = node.style.textWrap) !== null && _a2 !== void 0 ? _a2 : "wrap";
            text = wrap_text_1.default(text, maxWidth, textWrap);
          }
          text = applyPaddingToText(node, text);
          output.write(x, y, text, {transformers: newTransformers});
        }
        return;
      }
      if (node.nodeName === "ink-box") {
        render_border_1.default(x, y, node, output);
      }
      if (node.nodeName === "ink-root" || node.nodeName === "ink-box") {
        for (const childNode of node.childNodes) {
          renderNodeToOutput(childNode, output, {
            offsetX: x,
            offsetY: y,
            transformers: newTransformers,
            skipStaticElements
          });
        }
      }
    }
  };
  exports2.default = renderNodeToOutput;
});

// node_modules/.pnpm/ansi-regex@4.1.0/node_modules/ansi-regex/index.js
var require_ansi_regex2 = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (options) => {
    options = Object.assign({
      onlyFirst: false
    }, options);
    const pattern = [
      "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
      "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
    ].join("|");
    return new RegExp(pattern, options.onlyFirst ? void 0 : "g");
  };
});

// node_modules/.pnpm/strip-ansi@5.2.0/node_modules/strip-ansi/index.js
var require_strip_ansi2 = __commonJS((exports2, module2) => {
  "use strict";
  var ansiRegex = require_ansi_regex2();
  var stripAnsi = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
  module2.exports = stripAnsi;
  module2.exports.default = stripAnsi;
});

// node_modules/.pnpm/astral-regex@1.0.0/node_modules/astral-regex/index.js
var require_astral_regex2 = __commonJS((exports2, module2) => {
  "use strict";
  var regex = "[\uD800-\uDBFF][\uDC00-\uDFFF]";
  module2.exports = (opts) => opts && opts.exact ? new RegExp(`^${regex}$`) : new RegExp(regex, "g");
});

// node_modules/.pnpm/string-length@3.1.0/node_modules/string-length/index.js
var require_string_length = __commonJS((exports2, module2) => {
  "use strict";
  var stripAnsi = require_strip_ansi2();
  var astralRegex = require_astral_regex2();
  var stringLength = (string) => stripAnsi(string).replace(astralRegex(), " ").length;
  module2.exports = stringLength;
  module2.exports.default = stringLength;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/output.js
var require_output = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var slice_ansi_1 = __importDefault(require_slice_ansi());
  var string_length_1 = __importDefault(require_string_length());
  var Output = class {
    constructor(options) {
      this.writes = [];
      const {width, height} = options;
      this.width = width;
      this.height = height;
    }
    write(x, y, text, options) {
      const {transformers} = options;
      if (!text) {
        return;
      }
      this.writes.push({x, y, text, transformers});
    }
    get() {
      const output = [];
      for (let y = 0; y < this.height; y++) {
        output.push(" ".repeat(this.width));
      }
      for (const write of this.writes) {
        const {x, y, text, transformers} = write;
        const lines = text.split("\n");
        let offsetY = 0;
        for (let line of lines) {
          const currentLine = output[y + offsetY];
          if (!currentLine) {
            continue;
          }
          const length = string_length_1.default(line);
          for (const transformer of transformers) {
            line = transformer(line);
          }
          output[y + offsetY] = slice_ansi_1.default(currentLine, 0, x) + line + slice_ansi_1.default(currentLine, x + length);
          offsetY++;
        }
      }
      const generatedOutput = output.map((line) => line.trimRight()).join("\n");
      return {
        output: generatedOutput,
        height: output.length
      };
    }
  };
  exports2.default = Output;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/renderer.js
var require_renderer = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
  var render_node_to_output_1 = __importDefault(require_render_node_to_output());
  var output_1 = __importDefault(require_output());
  exports2.default = (node, terminalWidth) => {
    var _a2;
    node.yogaNode.setWidth(terminalWidth);
    if (node.yogaNode) {
      node.yogaNode.calculateLayout(void 0, void 0, yoga_layout_prebuilt_1.default.DIRECTION_LTR);
      const output = new output_1.default({
        width: node.yogaNode.getComputedWidth(),
        height: node.yogaNode.getComputedHeight()
      });
      render_node_to_output_1.default(node, output, {skipStaticElements: true});
      let staticOutput;
      if ((_a2 = node.staticNode) === null || _a2 === void 0 ? void 0 : _a2.yogaNode) {
        staticOutput = new output_1.default({
          width: node.staticNode.yogaNode.getComputedWidth(),
          height: node.staticNode.yogaNode.getComputedHeight()
        });
        render_node_to_output_1.default(node.staticNode, staticOutput, {
          skipStaticElements: false
        });
      }
      const {output: generatedOutput, height: outputHeight} = output.get();
      return {
        output: generatedOutput,
        outputHeight,
        staticOutput: staticOutput ? `${staticOutput.get().output}
` : ""
      };
    }
    return {
      output: "",
      outputHeight: 0,
      staticOutput: ""
    };
  };
});

// node_modules/.pnpm/patch-console@1.0.0/node_modules/patch-console/build/index.js
var require_build2 = __commonJS((exports2, module2) => {
  "use strict";
  var stream_1 = require("stream");
  var CONSOLE_METHODS = [
    "assert",
    "count",
    "countReset",
    "debug",
    "dir",
    "dirxml",
    "error",
    "group",
    "groupCollapsed",
    "groupEnd",
    "info",
    "log",
    "table",
    "time",
    "timeEnd",
    "timeLog",
    "trace",
    "warn"
  ];
  var originalMethods = {};
  var patchConsole = (callback) => {
    const stdout = new stream_1.PassThrough();
    const stderr = new stream_1.PassThrough();
    stdout.write = (data) => callback("stdout", data);
    stderr.write = (data) => callback("stderr", data);
    const internalConsole = new console.Console(stdout, stderr);
    for (const method of CONSOLE_METHODS) {
      originalMethods[method] = console[method];
      console[method] = internalConsole[method];
    }
    return () => {
      for (const method of CONSOLE_METHODS) {
        console[method] = originalMethods[method];
      }
      originalMethods = {};
    };
  };
  module2.exports = patchConsole;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/instances.js
var require_instances = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.default = new WeakMap();
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/AppContext.js
var require_AppContext = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var AppContext = react_1.createContext({
    exit: () => {
    }
  });
  AppContext.displayName = "InternalAppContext";
  exports2.default = AppContext;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/StdinContext.js
var require_StdinContext = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var StdinContext = react_1.createContext({
    stdin: void 0,
    setRawMode: () => {
    },
    isRawModeSupported: false,
    internal_exitOnCtrlC: true
  });
  StdinContext.displayName = "InternalStdinContext";
  exports2.default = StdinContext;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/StdoutContext.js
var require_StdoutContext = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var StdoutContext = react_1.createContext({
    stdout: void 0,
    write: () => {
    }
  });
  StdoutContext.displayName = "InternalStdoutContext";
  exports2.default = StdoutContext;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/StderrContext.js
var require_StderrContext = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var StderrContext = react_1.createContext({
    stderr: void 0,
    write: () => {
    }
  });
  StderrContext.displayName = "InternalStderrContext";
  exports2.default = StderrContext;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/FocusContext.js
var require_FocusContext = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var FocusContext = react_1.createContext({
    activeId: void 0,
    add: () => {
    },
    remove: () => {
    },
    activate: () => {
    },
    deactivate: () => {
    },
    enableFocus: () => {
    },
    disableFocus: () => {
    },
    focusNext: () => {
    },
    focusPrevious: () => {
    }
  });
  FocusContext.displayName = "InternalFocusContext";
  exports2.default = FocusContext;
});

// node_modules/.pnpm/escape-string-regexp@2.0.0/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp2 = __commonJS((exports2, module2) => {
  "use strict";
  var matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;
  module2.exports = (string) => {
    if (typeof string !== "string") {
      throw new TypeError("Expected a string");
    }
    return string.replace(matchOperatorsRegex, "\\$&");
  };
});

// node_modules/.pnpm/stack-utils@2.0.3/node_modules/stack-utils/index.js
var require_stack_utils = __commonJS((exports2, module2) => {
  "use strict";
  var escapeStringRegexp = require_escape_string_regexp2();
  var natives = [].concat(require("module").builtinModules, "bootstrap_node", "node").map((n) => new RegExp(`(?:\\((?:node:)?${n}(?:\\.js)?:\\d+:\\d+\\)$|^\\s*at (?:node:)?${n}(?:\\.js)?:\\d+:\\d+$)`));
  natives.push(/\((?:node:)?internal\/[^:]+:\d+:\d+\)$/, /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/, /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/);
  var StackUtils = class {
    constructor(opts) {
      opts = {
        ignoredPackages: [],
        ...opts
      };
      if ("internals" in opts === false) {
        opts.internals = StackUtils.nodeInternals();
      }
      if ("cwd" in opts === false) {
        opts.cwd = process.cwd();
      }
      this._cwd = opts.cwd.replace(/\\/g, "/");
      this._internals = [].concat(opts.internals, ignoredPackagesRegExp(opts.ignoredPackages));
      this._wrapCallSite = opts.wrapCallSite || false;
    }
    static nodeInternals() {
      return [...natives];
    }
    clean(stack, indent = 0) {
      indent = " ".repeat(indent);
      if (!Array.isArray(stack)) {
        stack = stack.split("\n");
      }
      if (!/^\s*at /.test(stack[0]) && /^\s*at /.test(stack[1])) {
        stack = stack.slice(1);
      }
      let outdent = false;
      let lastNonAtLine = null;
      const result = [];
      stack.forEach((st) => {
        st = st.replace(/\\/g, "/");
        if (this._internals.some((internal) => internal.test(st))) {
          return;
        }
        const isAtLine = /^\s*at /.test(st);
        if (outdent) {
          st = st.trimEnd().replace(/^(\s+)at /, "$1");
        } else {
          st = st.trim();
          if (isAtLine) {
            st = st.slice(3);
          }
        }
        st = st.replace(`${this._cwd}/`, "");
        if (st) {
          if (isAtLine) {
            if (lastNonAtLine) {
              result.push(lastNonAtLine);
              lastNonAtLine = null;
            }
            result.push(st);
          } else {
            outdent = true;
            lastNonAtLine = st;
          }
        }
      });
      return result.map((line) => `${indent}${line}
`).join("");
    }
    captureString(limit, fn = this.captureString) {
      if (typeof limit === "function") {
        fn = limit;
        limit = Infinity;
      }
      const {stackTraceLimit} = Error;
      if (limit) {
        Error.stackTraceLimit = limit;
      }
      const obj = {};
      Error.captureStackTrace(obj, fn);
      const {stack} = obj;
      Error.stackTraceLimit = stackTraceLimit;
      return this.clean(stack);
    }
    capture(limit, fn = this.capture) {
      if (typeof limit === "function") {
        fn = limit;
        limit = Infinity;
      }
      const {prepareStackTrace, stackTraceLimit} = Error;
      Error.prepareStackTrace = (obj2, site) => {
        if (this._wrapCallSite) {
          return site.map(this._wrapCallSite);
        }
        return site;
      };
      if (limit) {
        Error.stackTraceLimit = limit;
      }
      const obj = {};
      Error.captureStackTrace(obj, fn);
      const {stack} = obj;
      Object.assign(Error, {prepareStackTrace, stackTraceLimit});
      return stack;
    }
    at(fn = this.at) {
      const [site] = this.capture(1, fn);
      if (!site) {
        return {};
      }
      const res = {
        line: site.getLineNumber(),
        column: site.getColumnNumber()
      };
      setFile(res, site.getFileName(), this._cwd);
      if (site.isConstructor()) {
        res.constructor = true;
      }
      if (site.isEval()) {
        res.evalOrigin = site.getEvalOrigin();
      }
      if (site.isNative()) {
        res.native = true;
      }
      let typename;
      try {
        typename = site.getTypeName();
      } catch (_) {
      }
      if (typename && typename !== "Object" && typename !== "[object Object]") {
        res.type = typename;
      }
      const fname = site.getFunctionName();
      if (fname) {
        res.function = fname;
      }
      const meth = site.getMethodName();
      if (meth && fname !== meth) {
        res.method = meth;
      }
      return res;
    }
    parseLine(line) {
      const match = line && line.match(re);
      if (!match) {
        return null;
      }
      const ctor = match[1] === "new";
      let fname = match[2];
      const evalOrigin = match[3];
      const evalFile = match[4];
      const evalLine = Number(match[5]);
      const evalCol = Number(match[6]);
      let file = match[7];
      const lnum = match[8];
      const col = match[9];
      const native = match[10] === "native";
      const closeParen = match[11] === ")";
      let method;
      const res = {};
      if (lnum) {
        res.line = Number(lnum);
      }
      if (col) {
        res.column = Number(col);
      }
      if (closeParen && file) {
        let closes = 0;
        for (let i = file.length - 1; i > 0; i--) {
          if (file.charAt(i) === ")") {
            closes++;
          } else if (file.charAt(i) === "(" && file.charAt(i - 1) === " ") {
            closes--;
            if (closes === -1 && file.charAt(i - 1) === " ") {
              const before = file.slice(0, i - 1);
              const after = file.slice(i + 1);
              file = after;
              fname += ` (${before}`;
              break;
            }
          }
        }
      }
      if (fname) {
        const methodMatch = fname.match(methodRe);
        if (methodMatch) {
          fname = methodMatch[1];
          method = methodMatch[2];
        }
      }
      setFile(res, file, this._cwd);
      if (ctor) {
        res.constructor = true;
      }
      if (evalOrigin) {
        res.evalOrigin = evalOrigin;
        res.evalLine = evalLine;
        res.evalColumn = evalCol;
        res.evalFile = evalFile && evalFile.replace(/\\/g, "/");
      }
      if (native) {
        res.native = true;
      }
      if (fname) {
        res.function = fname;
      }
      if (method && fname !== method) {
        res.method = method;
      }
      return res;
    }
  };
  function setFile(result, filename, cwd) {
    if (filename) {
      filename = filename.replace(/\\/g, "/");
      if (filename.startsWith(`${cwd}/`)) {
        filename = filename.slice(cwd.length + 1);
      }
      result.file = filename;
    }
  }
  function ignoredPackagesRegExp(ignoredPackages) {
    if (ignoredPackages.length === 0) {
      return [];
    }
    const packages = ignoredPackages.map((mod) => escapeStringRegexp(mod));
    return new RegExp(`[/\\\\]node_modules[/\\\\](?:${packages.join("|")})[/\\\\][^:]+:\\d+:\\d+`);
  }
  var re = new RegExp("^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$");
  var methodRe = /^(.*?) \[as (.*?)\]$/;
  module2.exports = StackUtils;
});

// node_modules/.pnpm/convert-to-spaces@1.0.2/node_modules/convert-to-spaces/index.js
var require_convert_to_spaces = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (str, spaces) => {
    return str.replace(/^\t+/gm, ($1) => " ".repeat($1.length * (spaces || 2)));
  };
});

// node_modules/.pnpm/code-excerpt@3.0.0/node_modules/code-excerpt/index.js
var require_code_excerpt = __commonJS((exports2, module2) => {
  "use strict";
  var tabsToSpaces = require_convert_to_spaces();
  var generateLineNumbers = (line, around) => {
    const lineNumbers = [];
    const min = line - around;
    const max = line + around;
    for (let lineNumber = min; lineNumber <= max; lineNumber++) {
      lineNumbers.push(lineNumber);
    }
    return lineNumbers;
  };
  module2.exports = (source, line, options) => {
    if (typeof source !== "string") {
      throw new TypeError("Source code is missing.");
    }
    if (!line || line < 1) {
      throw new TypeError("Line number must start from `1`.");
    }
    source = tabsToSpaces(source).split(/\r?\n/);
    if (line > source.length) {
      return;
    }
    options = {
      around: 3,
      ...options
    };
    return generateLineNumbers(line, options.around).filter((line2) => source[line2 - 1] !== void 0).map((line2) => ({line: line2, value: source[line2 - 1]}));
  };
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/Box.js
var require_Box = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __rest = exports2 && exports2.__rest || function(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = __importStar(require_react());
  var Box2 = react_1.forwardRef((_a2, ref) => {
    var {children} = _a2, style = __rest(_a2, ["children"]);
    const transformedStyle = Object.assign(Object.assign({}, style), {marginLeft: style.marginLeft || style.marginX || style.margin || 0, marginRight: style.marginRight || style.marginX || style.margin || 0, marginTop: style.marginTop || style.marginY || style.margin || 0, marginBottom: style.marginBottom || style.marginY || style.margin || 0, paddingLeft: style.paddingLeft || style.paddingX || style.padding || 0, paddingRight: style.paddingRight || style.paddingX || style.padding || 0, paddingTop: style.paddingTop || style.paddingY || style.padding || 0, paddingBottom: style.paddingBottom || style.paddingY || style.padding || 0});
    return react_1.default.createElement("ink-box", {ref, style: transformedStyle}, children);
  });
  Box2.displayName = "Box";
  Box2.defaultProps = {
    flexDirection: "row",
    flexGrow: 0,
    flexShrink: 1
  };
  exports2.default = Box2;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/Text.js
var require_Text = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = __importDefault(require_react());
  var chalk_1 = __importDefault(require_source());
  var colorize_1 = __importDefault(require_colorize());
  var Text2 = ({color, backgroundColor, dimColor, bold, italic, underline, strikethrough, inverse, wrap, children}) => {
    if (children === void 0 || children === null) {
      return null;
    }
    const transform = (children2) => {
      if (dimColor) {
        children2 = chalk_1.default.dim(children2);
      }
      if (color) {
        children2 = colorize_1.default(children2, color, "foreground");
      }
      if (backgroundColor) {
        children2 = colorize_1.default(children2, backgroundColor, "background");
      }
      if (bold) {
        children2 = chalk_1.default.bold(children2);
      }
      if (italic) {
        children2 = chalk_1.default.italic(children2);
      }
      if (underline) {
        children2 = chalk_1.default.underline(children2);
      }
      if (strikethrough) {
        children2 = chalk_1.default.strikethrough(children2);
      }
      if (inverse) {
        children2 = chalk_1.default.inverse(children2);
      }
      return children2;
    };
    return react_1.default.createElement("ink-text", {style: {flexGrow: 0, flexShrink: 1, flexDirection: "row", textWrap: wrap}, internal_transform: transform}, children);
  };
  Text2.displayName = "Text";
  Text2.defaultProps = {
    dimColor: false,
    bold: false,
    italic: false,
    underline: false,
    strikethrough: false,
    wrap: "wrap"
  };
  exports2.default = Text2;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/ErrorOverview.js
var require_ErrorOverview = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var fs2 = __importStar(require("fs"));
  var react_1 = __importDefault(require_react());
  var stack_utils_1 = __importDefault(require_stack_utils());
  var code_excerpt_1 = __importDefault(require_code_excerpt());
  var Box_1 = __importDefault(require_Box());
  var Text_1 = __importDefault(require_Text());
  var stackUtils = new stack_utils_1.default({
    cwd: process.cwd(),
    internals: stack_utils_1.default.nodeInternals()
  });
  var ErrorOverview = ({error}) => {
    const stack = error.stack ? error.stack.split("\n").slice(1) : void 0;
    const origin = stack ? stackUtils.parseLine(stack[0]) : void 0;
    let excerpt;
    let lineWidth = 0;
    if ((origin === null || origin === void 0 ? void 0 : origin.file) && (origin === null || origin === void 0 ? void 0 : origin.line) && fs2.existsSync(origin.file)) {
      const sourceCode = fs2.readFileSync(origin.file, "utf8");
      excerpt = code_excerpt_1.default(sourceCode, origin.line);
      if (excerpt) {
        for (const {line} of excerpt) {
          lineWidth = Math.max(lineWidth, String(line).length);
        }
      }
    }
    return react_1.default.createElement(Box_1.default, {flexDirection: "column", padding: 1}, react_1.default.createElement(Box_1.default, null, react_1.default.createElement(Text_1.default, {backgroundColor: "red", color: "white"}, " ", "ERROR", " "), react_1.default.createElement(Text_1.default, null, " ", error.message)), origin && react_1.default.createElement(Box_1.default, {marginTop: 1}, react_1.default.createElement(Text_1.default, {dimColor: true}, origin.file, ":", origin.line, ":", origin.column)), origin && excerpt && react_1.default.createElement(Box_1.default, {marginTop: 1, flexDirection: "column"}, excerpt.map(({line, value}) => react_1.default.createElement(Box_1.default, {key: line}, react_1.default.createElement(Box_1.default, {width: lineWidth + 1}, react_1.default.createElement(Text_1.default, {dimColor: line !== origin.line, backgroundColor: line === origin.line ? "red" : void 0, color: line === origin.line ? "white" : void 0}, String(line).padStart(lineWidth, " "), ":")), react_1.default.createElement(Text_1.default, {key: line, backgroundColor: line === origin.line ? "red" : void 0, color: line === origin.line ? "white" : void 0}, " " + value)))), error.stack && react_1.default.createElement(Box_1.default, {marginTop: 1, flexDirection: "column"}, error.stack.split("\n").slice(1).map((line) => {
      const parsedLine = stackUtils.parseLine(line);
      if (!parsedLine) {
        return react_1.default.createElement(Box_1.default, {key: line}, react_1.default.createElement(Text_1.default, {dimColor: true}, "- "), react_1.default.createElement(Text_1.default, {dimColor: true, bold: true}, line));
      }
      return react_1.default.createElement(Box_1.default, {key: line}, react_1.default.createElement(Text_1.default, {dimColor: true}, "- "), react_1.default.createElement(Text_1.default, {dimColor: true, bold: true}, parsedLine.function), react_1.default.createElement(Text_1.default, {dimColor: true, color: "gray"}, " ", "(", parsedLine.file, ":", parsedLine.line, ":", parsedLine.column, ")"));
    })));
  };
  exports2.default = ErrorOverview;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/App.js
var require_App = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = __importStar(require_react());
  var cli_cursor_1 = __importDefault(require_cli_cursor());
  var AppContext_1 = __importDefault(require_AppContext());
  var StdinContext_1 = __importDefault(require_StdinContext());
  var StdoutContext_1 = __importDefault(require_StdoutContext());
  var StderrContext_1 = __importDefault(require_StderrContext());
  var FocusContext_1 = __importDefault(require_FocusContext());
  var ErrorOverview_1 = __importDefault(require_ErrorOverview());
  var TAB = "	";
  var SHIFT_TAB = "[Z";
  var ESC = "";
  var App = class extends react_1.PureComponent {
    constructor() {
      super(...arguments);
      this.state = {
        isFocusEnabled: true,
        activeFocusId: void 0,
        focusables: [],
        error: void 0
      };
      this.rawModeEnabledCount = 0;
      this.handleSetRawMode = (isEnabled) => {
        const {stdin} = this.props;
        if (!this.isRawModeSupported()) {
          if (stdin === process.stdin) {
            throw new Error("Raw mode is not supported on the current process.stdin, which Ink uses as input stream by default.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported");
          } else {
            throw new Error("Raw mode is not supported on the stdin provided to Ink.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported");
          }
        }
        stdin.setEncoding("utf8");
        if (isEnabled) {
          if (this.rawModeEnabledCount === 0) {
            stdin.addListener("data", this.handleInput);
            stdin.resume();
            stdin.setRawMode(true);
          }
          this.rawModeEnabledCount++;
          return;
        }
        if (--this.rawModeEnabledCount === 0) {
          stdin.setRawMode(false);
          stdin.removeListener("data", this.handleInput);
          stdin.pause();
        }
      };
      this.handleInput = (input) => {
        if (input === "" && this.props.exitOnCtrlC) {
          this.handleExit();
        }
        if (input === ESC && this.state.activeFocusId) {
          this.setState({
            activeFocusId: void 0
          });
        }
        if (this.state.isFocusEnabled && this.state.focusables.length > 0) {
          if (input === TAB) {
            this.focusNext();
          }
          if (input === SHIFT_TAB) {
            this.focusPrevious();
          }
        }
      };
      this.handleExit = (error) => {
        if (this.isRawModeSupported()) {
          this.handleSetRawMode(false);
        }
        this.props.onExit(error);
      };
      this.enableFocus = () => {
        this.setState({
          isFocusEnabled: true
        });
      };
      this.disableFocus = () => {
        this.setState({
          isFocusEnabled: false
        });
      };
      this.focusNext = () => {
        this.setState((previousState) => {
          const firstFocusableId = previousState.focusables[0].id;
          const nextFocusableId = this.findNextFocusable(previousState);
          return {
            activeFocusId: nextFocusableId || firstFocusableId
          };
        });
      };
      this.focusPrevious = () => {
        this.setState((previousState) => {
          const lastFocusableId = previousState.focusables[previousState.focusables.length - 1].id;
          const previousFocusableId = this.findPreviousFocusable(previousState);
          return {
            activeFocusId: previousFocusableId || lastFocusableId
          };
        });
      };
      this.addFocusable = (id, {autoFocus}) => {
        this.setState((previousState) => {
          let nextFocusId = previousState.activeFocusId;
          if (!nextFocusId && autoFocus) {
            nextFocusId = id;
          }
          return {
            activeFocusId: nextFocusId,
            focusables: [
              ...previousState.focusables,
              {
                id,
                isActive: true
              }
            ]
          };
        });
      };
      this.removeFocusable = (id) => {
        this.setState((previousState) => ({
          activeFocusId: previousState.activeFocusId === id ? void 0 : previousState.activeFocusId,
          focusables: previousState.focusables.filter((focusable) => {
            return focusable.id !== id;
          })
        }));
      };
      this.activateFocusable = (id) => {
        this.setState((previousState) => ({
          focusables: previousState.focusables.map((focusable) => {
            if (focusable.id !== id) {
              return focusable;
            }
            return {
              id,
              isActive: true
            };
          })
        }));
      };
      this.deactivateFocusable = (id) => {
        this.setState((previousState) => ({
          activeFocusId: previousState.activeFocusId === id ? void 0 : previousState.activeFocusId,
          focusables: previousState.focusables.map((focusable) => {
            if (focusable.id !== id) {
              return focusable;
            }
            return {
              id,
              isActive: false
            };
          })
        }));
      };
      this.findNextFocusable = (state) => {
        const activeIndex = state.focusables.findIndex((focusable) => {
          return focusable.id === state.activeFocusId;
        });
        for (let index = activeIndex + 1; index < state.focusables.length; index++) {
          if (state.focusables[index].isActive) {
            return state.focusables[index].id;
          }
        }
        return void 0;
      };
      this.findPreviousFocusable = (state) => {
        const activeIndex = state.focusables.findIndex((focusable) => {
          return focusable.id === state.activeFocusId;
        });
        for (let index = activeIndex - 1; index >= 0; index--) {
          if (state.focusables[index].isActive) {
            return state.focusables[index].id;
          }
        }
        return void 0;
      };
    }
    static getDerivedStateFromError(error) {
      return {error};
    }
    isRawModeSupported() {
      return this.props.stdin.isTTY;
    }
    render() {
      return react_1.default.createElement(AppContext_1.default.Provider, {value: {
        exit: this.handleExit
      }}, react_1.default.createElement(StdinContext_1.default.Provider, {value: {
        stdin: this.props.stdin,
        setRawMode: this.handleSetRawMode,
        isRawModeSupported: this.isRawModeSupported(),
        internal_exitOnCtrlC: this.props.exitOnCtrlC
      }}, react_1.default.createElement(StdoutContext_1.default.Provider, {value: {
        stdout: this.props.stdout,
        write: this.props.writeToStdout
      }}, react_1.default.createElement(StderrContext_1.default.Provider, {value: {
        stderr: this.props.stderr,
        write: this.props.writeToStderr
      }}, react_1.default.createElement(FocusContext_1.default.Provider, {value: {
        activeId: this.state.activeFocusId,
        add: this.addFocusable,
        remove: this.removeFocusable,
        activate: this.activateFocusable,
        deactivate: this.deactivateFocusable,
        enableFocus: this.enableFocus,
        disableFocus: this.disableFocus,
        focusNext: this.focusNext,
        focusPrevious: this.focusPrevious
      }}, this.state.error ? react_1.default.createElement(ErrorOverview_1.default, {error: this.state.error}) : this.props.children)))));
    }
    componentDidMount() {
      cli_cursor_1.default.hide(this.props.stdout);
    }
    componentWillUnmount() {
      cli_cursor_1.default.show(this.props.stdout);
      if (this.isRawModeSupported()) {
        this.handleSetRawMode(false);
      }
    }
    componentDidCatch(error) {
      this.handleExit(error);
    }
  };
  exports2.default = App;
  App.displayName = "InternalApp";
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/ink.js
var require_ink = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = __importDefault(require_react());
  var lodash_1 = require_lodash();
  var log_update_1 = __importDefault(require_log_update());
  var ansi_escapes_1 = __importDefault(require_ansi_escapes());
  var is_ci_1 = __importDefault(require_is_ci());
  var auto_bind_1 = __importDefault(require_auto_bind());
  var reconciler_1 = __importDefault(require_reconciler());
  var renderer_1 = __importDefault(require_renderer());
  var signal_exit_1 = __importDefault(require_signal_exit());
  var patch_console_1 = __importDefault(require_build2());
  var dom = __importStar(require_dom());
  var instances_1 = __importDefault(require_instances());
  var App_1 = __importDefault(require_App());
  var isCI = process.env.CI === "false" ? false : is_ci_1.default;
  var noop = () => {
  };
  var Ink = class {
    constructor(options) {
      this.resolveExitPromise = () => {
      };
      this.rejectExitPromise = () => {
      };
      this.unsubscribeExit = () => {
      };
      this.onRender = () => {
        if (this.isUnmounted) {
          return;
        }
        const {output, outputHeight, staticOutput} = renderer_1.default(this.rootNode, this.options.stdout.columns || 80);
        const hasStaticOutput = staticOutput && staticOutput !== "\n";
        if (this.options.debug) {
          if (hasStaticOutput) {
            this.fullStaticOutput += staticOutput;
          }
          this.options.stdout.write(this.fullStaticOutput + output);
          return;
        }
        if (isCI) {
          if (hasStaticOutput) {
            this.options.stdout.write(staticOutput);
          }
          this.lastOutput = output;
          return;
        }
        if (hasStaticOutput) {
          this.fullStaticOutput += staticOutput;
        }
        if (outputHeight >= this.options.stdout.rows) {
          this.options.stdout.write(ansi_escapes_1.default.clearTerminal + this.fullStaticOutput + output);
          this.lastOutput = output;
          return;
        }
        if (hasStaticOutput) {
          this.log.clear();
          this.options.stdout.write(staticOutput);
          this.log(output);
        }
        if (!hasStaticOutput && output !== this.lastOutput) {
          this.throttledLog(output);
        }
        this.lastOutput = output;
      };
      auto_bind_1.default(this);
      this.options = options;
      this.rootNode = dom.createNode("ink-root");
      this.rootNode.onRender = options.debug ? this.onRender : lodash_1.throttle(this.onRender, 32, {
        leading: true,
        trailing: true
      });
      this.rootNode.onImmediateRender = this.onRender;
      this.log = log_update_1.default.create(options.stdout);
      this.throttledLog = options.debug ? this.log : lodash_1.throttle(this.log, void 0, {
        leading: true,
        trailing: true
      });
      this.isUnmounted = false;
      this.lastOutput = "";
      this.fullStaticOutput = "";
      this.container = reconciler_1.default.createContainer(this.rootNode, false, false);
      this.unsubscribeExit = signal_exit_1.default(this.unmount, {alwaysLast: false});
      if (process.env.DEV === "true") {
        reconciler_1.default.injectIntoDevTools({
          bundleType: 0,
          version: "16.13.1",
          rendererPackageName: "ink"
        });
      }
      if (options.patchConsole) {
        this.patchConsole();
      }
      if (!isCI) {
        options.stdout.on("resize", this.onRender);
        this.unsubscribeResize = () => {
          options.stdout.off("resize", this.onRender);
        };
      }
    }
    render(node) {
      const tree = react_1.default.createElement(App_1.default, {stdin: this.options.stdin, stdout: this.options.stdout, stderr: this.options.stderr, writeToStdout: this.writeToStdout, writeToStderr: this.writeToStderr, exitOnCtrlC: this.options.exitOnCtrlC, onExit: this.unmount}, node);
      reconciler_1.default.updateContainer(tree, this.container, null, noop);
    }
    writeToStdout(data) {
      if (this.isUnmounted) {
        return;
      }
      if (this.options.debug) {
        this.options.stdout.write(data + this.fullStaticOutput + this.lastOutput);
        return;
      }
      if (isCI) {
        this.options.stdout.write(data);
        return;
      }
      this.log.clear();
      this.options.stdout.write(data);
      this.log(this.lastOutput);
    }
    writeToStderr(data) {
      if (this.isUnmounted) {
        return;
      }
      if (this.options.debug) {
        this.options.stderr.write(data);
        this.options.stdout.write(this.fullStaticOutput + this.lastOutput);
        return;
      }
      if (isCI) {
        this.options.stderr.write(data);
        return;
      }
      this.log.clear();
      this.options.stderr.write(data);
      this.log(this.lastOutput);
    }
    unmount(error) {
      if (this.isUnmounted) {
        return;
      }
      this.onRender();
      this.unsubscribeExit();
      if (typeof this.restoreConsole === "function") {
        this.restoreConsole();
      }
      if (typeof this.unsubscribeResize === "function") {
        this.unsubscribeResize();
      }
      if (isCI) {
        this.options.stdout.write(this.lastOutput + "\n");
      } else if (!this.options.debug) {
        this.log.done();
      }
      this.isUnmounted = true;
      reconciler_1.default.updateContainer(null, this.container, null, noop);
      instances_1.default.delete(this.options.stdout);
      if (error instanceof Error) {
        this.rejectExitPromise(error);
      } else {
        this.resolveExitPromise();
      }
    }
    waitUntilExit() {
      if (!this.exitPromise) {
        this.exitPromise = new Promise((resolve, reject) => {
          this.resolveExitPromise = resolve;
          this.rejectExitPromise = reject;
        });
      }
      return this.exitPromise;
    }
    clear() {
      if (!isCI && !this.options.debug) {
        this.log.clear();
      }
    }
    patchConsole() {
      if (this.options.debug) {
        return;
      }
      this.restoreConsole = patch_console_1.default((stream, data) => {
        if (stream === "stdout") {
          this.writeToStdout(data);
        }
        if (stream === "stderr") {
          const isReactMessage = data.startsWith("The above error occurred");
          if (!isReactMessage) {
            this.writeToStderr(data);
          }
        }
      });
    }
  };
  exports2.default = Ink;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/render.js
var require_render = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var ink_1 = __importDefault(require_ink());
  var instances_1 = __importDefault(require_instances());
  var stream_1 = require("stream");
  var render2 = (node, options) => {
    const inkOptions = Object.assign({stdout: process.stdout, stdin: process.stdin, stderr: process.stderr, debug: false, exitOnCtrlC: true, patchConsole: true}, getOptions(options));
    const instance2 = getInstance(inkOptions.stdout, () => new ink_1.default(inkOptions));
    instance2.render(node);
    return {
      rerender: instance2.render,
      unmount: () => instance2.unmount(),
      waitUntilExit: instance2.waitUntilExit,
      cleanup: () => instances_1.default.delete(inkOptions.stdout),
      clear: instance2.clear
    };
  };
  exports2.default = render2;
  var getOptions = (stdout = {}) => {
    if (stdout instanceof stream_1.Stream) {
      return {
        stdout,
        stdin: process.stdin
      };
    }
    return stdout;
  };
  var getInstance = (stdout, createInstance) => {
    let instance2;
    if (instances_1.default.has(stdout)) {
      instance2 = instances_1.default.get(stdout);
    } else {
      instance2 = createInstance();
      instances_1.default.set(stdout, instance2);
    }
    return instance2;
  };
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/Static.js
var require_Static = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = __importStar(require_react());
  var Static = (props) => {
    const {items, children: render2, style: customStyle} = props;
    const [index, setIndex] = react_1.useState(0);
    const itemsToRender = react_1.useMemo(() => {
      return items.slice(index);
    }, [items, index]);
    react_1.useLayoutEffect(() => {
      setIndex(items.length);
    }, [items.length]);
    const children = itemsToRender.map((item, itemIndex) => {
      return render2(item, index + itemIndex);
    });
    const style = react_1.useMemo(() => Object.assign({position: "absolute", flexDirection: "column"}, customStyle), [customStyle]);
    return react_1.default.createElement("ink-box", {
      internal_static: true,
      style
    }, children);
  };
  Static.displayName = "Static";
  exports2.default = Static;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/Transform.js
var require_Transform = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = __importDefault(require_react());
  var Transform = ({children, transform}) => {
    if (children === void 0 || children === null) {
      return null;
    }
    return react_1.default.createElement("ink-text", {style: {flexGrow: 0, flexShrink: 1, flexDirection: "row"}, internal_transform: transform}, children);
  };
  Transform.displayName = "Transform";
  exports2.default = Transform;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/Newline.js
var require_Newline = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = __importDefault(require_react());
  var Newline = ({count = 1}) => react_1.default.createElement("ink-text", null, "\n".repeat(count));
  Newline.displayName = "Newline";
  exports2.default = Newline;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/components/Spacer.js
var require_Spacer = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = __importDefault(require_react());
  var Box_1 = __importDefault(require_Box());
  var Spacer = () => react_1.default.createElement(Box_1.default, {flexGrow: 1});
  Spacer.displayName = "Spacer";
  exports2.default = Spacer;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/hooks/use-stdin.js
var require_use_stdin = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var StdinContext_1 = __importDefault(require_StdinContext());
  var useStdin = () => react_1.useContext(StdinContext_1.default);
  exports2.default = useStdin;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/hooks/use-input.js
var require_use_input = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var use_stdin_1 = __importDefault(require_use_stdin());
  var useInput = (inputHandler, options = {}) => {
    const {stdin, setRawMode, internal_exitOnCtrlC} = use_stdin_1.default();
    react_1.useEffect(() => {
      if (options.isActive === false) {
        return;
      }
      setRawMode(true);
      return () => {
        setRawMode(false);
      };
    }, [options.isActive, setRawMode]);
    react_1.useEffect(() => {
      if (options.isActive === false) {
        return;
      }
      const handleData = (data) => {
        let input = String(data);
        const key = {
          upArrow: input === "[A",
          downArrow: input === "[B",
          leftArrow: input === "[D",
          rightArrow: input === "[C",
          pageDown: input === "[6~",
          pageUp: input === "[5~",
          return: input === "\r",
          escape: input === "",
          ctrl: false,
          shift: false,
          tab: input === "	" || input === "[Z",
          backspace: input === "\b",
          delete: input === "\x7F" || input === "[3~",
          meta: false
        };
        if (input <= "" && !key.return) {
          input = String.fromCharCode(input.charCodeAt(0) + "a".charCodeAt(0) - 1);
          key.ctrl = true;
        }
        if (input.startsWith("")) {
          input = input.slice(1);
          key.meta = true;
        }
        const isLatinUppercase = input >= "A" && input <= "Z";
        const isCyrillicUppercase = input >= "\u0410" && input <= "\u042F";
        if (input.length === 1 && (isLatinUppercase || isCyrillicUppercase)) {
          key.shift = true;
        }
        if (key.tab && input === "[Z") {
          key.shift = true;
        }
        if (key.tab || key.backspace || key.delete) {
          input = "";
        }
        if (!(input === "c" && key.ctrl) || !internal_exitOnCtrlC) {
          inputHandler(input, key);
        }
      };
      stdin === null || stdin === void 0 ? void 0 : stdin.on("data", handleData);
      return () => {
        stdin === null || stdin === void 0 ? void 0 : stdin.off("data", handleData);
      };
    }, [options.isActive, stdin, internal_exitOnCtrlC, inputHandler]);
  };
  exports2.default = useInput;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/hooks/use-app.js
var require_use_app = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var AppContext_1 = __importDefault(require_AppContext());
  var useApp = () => react_1.useContext(AppContext_1.default);
  exports2.default = useApp;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/hooks/use-stdout.js
var require_use_stdout = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var StdoutContext_1 = __importDefault(require_StdoutContext());
  var useStdout = () => react_1.useContext(StdoutContext_1.default);
  exports2.default = useStdout;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/hooks/use-stderr.js
var require_use_stderr = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var StderrContext_1 = __importDefault(require_StderrContext());
  var useStderr = () => react_1.useContext(StderrContext_1.default);
  exports2.default = useStderr;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/hooks/use-focus.js
var require_use_focus = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var FocusContext_1 = __importDefault(require_FocusContext());
  var use_stdin_1 = __importDefault(require_use_stdin());
  var useFocus = ({isActive = true, autoFocus = false} = {}) => {
    const {isRawModeSupported, setRawMode} = use_stdin_1.default();
    const {activeId, add, remove, activate, deactivate} = react_1.useContext(FocusContext_1.default);
    const id = react_1.useMemo(() => Math.random().toString().slice(2, 7), []);
    react_1.useEffect(() => {
      add(id, {autoFocus});
      return () => {
        remove(id);
      };
    }, [id, autoFocus]);
    react_1.useEffect(() => {
      if (isActive) {
        activate(id);
      } else {
        deactivate(id);
      }
    }, [isActive, id]);
    react_1.useEffect(() => {
      if (!isRawModeSupported || !isActive) {
        return;
      }
      setRawMode(true);
      return () => {
        setRawMode(false);
      };
    }, [isActive]);
    return {
      isFocused: Boolean(id) && activeId === id
    };
  };
  exports2.default = useFocus;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/hooks/use-focus-manager.js
var require_use_focus_manager = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var react_1 = require_react();
  var FocusContext_1 = __importDefault(require_FocusContext());
  var useFocusManager = () => {
    const focusContext = react_1.useContext(FocusContext_1.default);
    return {
      enableFocus: focusContext.enableFocus,
      disableFocus: focusContext.disableFocus,
      focusNext: focusContext.focusNext,
      focusPrevious: focusContext.focusPrevious
    };
  };
  exports2.default = useFocusManager;
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/measure-element.js
var require_measure_element = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.default = (node) => {
    var _a2, _b, _c, _d;
    return {
      width: (_b = (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.getComputedWidth()) !== null && _b !== void 0 ? _b : 0,
      height: (_d = (_c = node.yogaNode) === null || _c === void 0 ? void 0 : _c.getComputedHeight()) !== null && _d !== void 0 ? _d : 0
    };
  };
});

// node_modules/.pnpm/ink@3.0.8_react@17.0.1/node_modules/ink/build/index.js
var require_build3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var render_1 = require_render();
  Object.defineProperty(exports2, "render", {enumerable: true, get: function() {
    return render_1.default;
  }});
  var Box_1 = require_Box();
  Object.defineProperty(exports2, "Box", {enumerable: true, get: function() {
    return Box_1.default;
  }});
  var Text_1 = require_Text();
  Object.defineProperty(exports2, "Text", {enumerable: true, get: function() {
    return Text_1.default;
  }});
  var Static_1 = require_Static();
  Object.defineProperty(exports2, "Static", {enumerable: true, get: function() {
    return Static_1.default;
  }});
  var Transform_1 = require_Transform();
  Object.defineProperty(exports2, "Transform", {enumerable: true, get: function() {
    return Transform_1.default;
  }});
  var Newline_1 = require_Newline();
  Object.defineProperty(exports2, "Newline", {enumerable: true, get: function() {
    return Newline_1.default;
  }});
  var Spacer_1 = require_Spacer();
  Object.defineProperty(exports2, "Spacer", {enumerable: true, get: function() {
    return Spacer_1.default;
  }});
  var use_input_1 = require_use_input();
  Object.defineProperty(exports2, "useInput", {enumerable: true, get: function() {
    return use_input_1.default;
  }});
  var use_app_1 = require_use_app();
  Object.defineProperty(exports2, "useApp", {enumerable: true, get: function() {
    return use_app_1.default;
  }});
  var use_stdin_1 = require_use_stdin();
  Object.defineProperty(exports2, "useStdin", {enumerable: true, get: function() {
    return use_stdin_1.default;
  }});
  var use_stdout_1 = require_use_stdout();
  Object.defineProperty(exports2, "useStdout", {enumerable: true, get: function() {
    return use_stdout_1.default;
  }});
  var use_stderr_1 = require_use_stderr();
  Object.defineProperty(exports2, "useStderr", {enumerable: true, get: function() {
    return use_stderr_1.default;
  }});
  var use_focus_1 = require_use_focus();
  Object.defineProperty(exports2, "useFocus", {enumerable: true, get: function() {
    return use_focus_1.default;
  }});
  var use_focus_manager_1 = require_use_focus_manager();
  Object.defineProperty(exports2, "useFocusManager", {enumerable: true, get: function() {
    return use_focus_manager_1.default;
  }});
  var measure_element_1 = require_measure_element();
  Object.defineProperty(exports2, "measureElement", {enumerable: true, get: function() {
    return measure_element_1.default;
  }});
});

// node_modules/.pnpm/lodash.isequal@4.5.0/node_modules/lodash.isequal/index.js
var require_lodash2 = __commonJS((exports2, module2) => {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var COMPARE_PARTIAL_FLAG = 1;
  var COMPARE_UNORDERED_FLAG = 2;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]";
  var arrayTag = "[object Array]";
  var asyncTag = "[object AsyncFunction]";
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var nullTag = "[object Null]";
  var objectTag = "[object Object]";
  var promiseTag = "[object Promise]";
  var proxyTag = "[object Proxy]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var symbolTag = "[object Symbol]";
  var undefinedTag = "[object Undefined]";
  var weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var float32Tag = "[object Float32Array]";
  var float64Tag = "[object Float64Array]";
  var int8Tag = "[object Int8Array]";
  var int16Tag = "[object Int16Array]";
  var int32Tag = "[object Int32Array]";
  var uint8Tag = "[object Uint8Array]";
  var uint8ClampedTag = "[object Uint8ClampedArray]";
  var uint16Tag = "[object Uint16Array]";
  var uint32Tag = "[object Uint32Array]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
  var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;
  var nodeUtil = function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  var arrayProto = Array.prototype;
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var funcToString = funcProto.toString;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var nativeObjectToString = objectProto.toString;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Buffer2 = moduleExports ? root.Buffer : void 0;
  var Symbol2 = root.Symbol;
  var Uint8Array2 = root.Uint8Array;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var splice = arrayProto.splice;
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
  var nativeKeys = overArg(Object.keys, Object);
  var DataView2 = getNative(root, "DataView");
  var Map2 = getNative(root, "Map");
  var Promise2 = getNative(root, "Promise");
  var Set2 = getNative(root, "Set");
  var WeakMap2 = getNative(root, "WeakMap");
  var nativeCreate = getNative(Object, "create");
  var dataViewCtorString = toSource(DataView2);
  var mapCtorString = toSource(Map2);
  var promiseCtorString = toSource(Promise2);
  var setCtorString = toSource(Set2);
  var weakMapCtorString = toSource(WeakMap2);
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
  var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty2.call(data, key) ? data[key] : void 0;
  }
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
  }
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      hash: new Hash(),
      map: new (Map2 || ListCache)(),
      string: new Hash()
    };
  }
  function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();
    while (++index < length) {
      this.add(values[index]);
    }
  }
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }
  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }
  function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  function stackGet(key) {
    return this.__data__.get(key);
  }
  function stackHas(key) {
    return this.__data__.has(key);
  }
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty2.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var stacked = stack.get(array);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
    stack.set(array, other);
    stack.set(other, array);
    while (++index < arrLength) {
      var arrValue = array[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome(other, function(othValue2, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
  }
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
          return false;
        }
        return true;
      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag:
        return object == other + "";
      case mapTag:
        var convert = mapToArray;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object);
        return result;
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
        return false;
      }
    }
    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
  }
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  function getRawTag(value) {
    var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var getTag = baseGetTag;
  if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
    getTag = function(value) {
      var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  var isArguments = baseIsArguments(function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  var isArray = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  var isBuffer = nativeIsBuffer || stubFalse;
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  function stubArray() {
    return [];
  }
  function stubFalse() {
    return false;
  }
  module2.exports = isEqual;
});

// node_modules/.pnpm/arr-rotate@1.0.0/node_modules/arr-rotate/index.js
var require_arr_rotate = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (input, n) => {
    if (!Array.isArray(input)) {
      throw new TypeError(`Expected an array, got ${typeof input}`);
    }
    const x = input.slice();
    const num = typeof n === "number" ? n : 0;
    return x.splice(-num % x.length).concat(x);
  };
});

// node_modules/.pnpm/figures@3.2.0/node_modules/figures/index.js
var require_figures = __commonJS((exports2, module2) => {
  "use strict";
  var escapeStringRegexp = require_escape_string_regexp();
  var {platform} = process;
  var main = {
    tick: "\u2714",
    cross: "\u2716",
    star: "\u2605",
    square: "\u2587",
    squareSmall: "\u25FB",
    squareSmallFilled: "\u25FC",
    play: "\u25B6",
    circle: "\u25EF",
    circleFilled: "\u25C9",
    circleDotted: "\u25CC",
    circleDouble: "\u25CE",
    circleCircle: "\u24DE",
    circleCross: "\u24E7",
    circlePipe: "\u24BE",
    circleQuestionMark: "?\u20DD",
    bullet: "\u25CF",
    dot: "\u2024",
    line: "\u2500",
    ellipsis: "\u2026",
    pointer: "\u276F",
    pointerSmall: "\u203A",
    info: "\u2139",
    warning: "\u26A0",
    hamburger: "\u2630",
    smiley: "\u32E1",
    mustache: "\u0DF4",
    heart: "\u2665",
    nodejs: "\u2B22",
    arrowUp: "\u2191",
    arrowDown: "\u2193",
    arrowLeft: "\u2190",
    arrowRight: "\u2192",
    radioOn: "\u25C9",
    radioOff: "\u25EF",
    checkboxOn: "\u2612",
    checkboxOff: "\u2610",
    checkboxCircleOn: "\u24E7",
    checkboxCircleOff: "\u24BE",
    questionMarkPrefix: "?\u20DD",
    oneHalf: "\xBD",
    oneThird: "\u2153",
    oneQuarter: "\xBC",
    oneFifth: "\u2155",
    oneSixth: "\u2159",
    oneSeventh: "\u2150",
    oneEighth: "\u215B",
    oneNinth: "\u2151",
    oneTenth: "\u2152",
    twoThirds: "\u2154",
    twoFifths: "\u2156",
    threeQuarters: "\xBE",
    threeFifths: "\u2157",
    threeEighths: "\u215C",
    fourFifths: "\u2158",
    fiveSixths: "\u215A",
    fiveEighths: "\u215D",
    sevenEighths: "\u215E"
  };
  var windows = {
    tick: "\u221A",
    cross: "\xD7",
    star: "*",
    square: "\u2588",
    squareSmall: "[ ]",
    squareSmallFilled: "[\u2588]",
    play: "\u25BA",
    circle: "( )",
    circleFilled: "(*)",
    circleDotted: "( )",
    circleDouble: "( )",
    circleCircle: "(\u25CB)",
    circleCross: "(\xD7)",
    circlePipe: "(\u2502)",
    circleQuestionMark: "(?)",
    bullet: "*",
    dot: ".",
    line: "\u2500",
    ellipsis: "...",
    pointer: ">",
    pointerSmall: "\xBB",
    info: "i",
    warning: "\u203C",
    hamburger: "\u2261",
    smiley: "\u263A",
    mustache: "\u250C\u2500\u2510",
    heart: main.heart,
    nodejs: "\u2666",
    arrowUp: main.arrowUp,
    arrowDown: main.arrowDown,
    arrowLeft: main.arrowLeft,
    arrowRight: main.arrowRight,
    radioOn: "(*)",
    radioOff: "( )",
    checkboxOn: "[\xD7]",
    checkboxOff: "[ ]",
    checkboxCircleOn: "(\xD7)",
    checkboxCircleOff: "( )",
    questionMarkPrefix: "\uFF1F",
    oneHalf: "1/2",
    oneThird: "1/3",
    oneQuarter: "1/4",
    oneFifth: "1/5",
    oneSixth: "1/6",
    oneSeventh: "1/7",
    oneEighth: "1/8",
    oneNinth: "1/9",
    oneTenth: "1/10",
    twoThirds: "2/3",
    twoFifths: "2/5",
    threeQuarters: "3/4",
    threeFifths: "3/5",
    threeEighths: "3/8",
    fourFifths: "4/5",
    fiveSixths: "5/6",
    fiveEighths: "5/8",
    sevenEighths: "7/8"
  };
  if (platform === "linux") {
    main.questionMarkPrefix = "?";
  }
  var figures = platform === "win32" ? windows : main;
  var fn = (string) => {
    if (figures === main) {
      return string;
    }
    for (const [key, value] of Object.entries(main)) {
      if (value === figures[key]) {
        continue;
      }
      string = string.replace(new RegExp(escapeStringRegexp(value), "g"), figures[key]);
    }
    return string;
  };
  module2.exports = Object.assign(fn, figures);
  module2.exports.main = main;
  module2.exports.windows = windows;
});

// node_modules/.pnpm/ink-select-input@4.2.0_ink@3.0.8+react@17.0.1/node_modules/ink-select-input/build/Indicator.js
var require_Indicator = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var React2 = require_react();
  var ink_1 = require_build3();
  var figures = require_figures();
  var Indicator = ({isSelected = false}) => React2.createElement(ink_1.Box, {marginRight: 1}, isSelected ? React2.createElement(ink_1.Text, {color: "blue"}, figures.pointer) : React2.createElement(ink_1.Text, null, " "));
  exports2.default = Indicator;
});

// node_modules/.pnpm/ink-select-input@4.2.0_ink@3.0.8+react@17.0.1/node_modules/ink-select-input/build/Item.js
var require_Item = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var React2 = require_react();
  var ink_1 = require_build3();
  var Item = ({isSelected = false, label}) => React2.createElement(ink_1.Text, {color: isSelected ? "blue" : void 0}, label);
  exports2.default = Item;
});

// node_modules/.pnpm/ink-select-input@4.2.0_ink@3.0.8+react@17.0.1/node_modules/ink-select-input/build/SelectInput.js
var require_SelectInput = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var React2 = require_react();
  var react_1 = require_react();
  var isEqual = require_lodash2();
  var arrayRotate = require_arr_rotate();
  var ink_1 = require_build3();
  var Indicator_1 = require_Indicator();
  var Item_1 = require_Item();
  function SelectInput2({items = [], isFocused = true, initialIndex = 0, indicatorComponent = Indicator_1.default, itemComponent = Item_1.default, limit: customLimit, onSelect, onHighlight}) {
    const [rotateIndex, setRotateIndex] = react_1.useState(0);
    const [selectedIndex, setSelectedIndex] = react_1.useState(initialIndex);
    const hasLimit = typeof customLimit === "number" && items.length > customLimit;
    const limit = hasLimit ? Math.min(customLimit, items.length) : items.length;
    const previousItems = react_1.useRef(items);
    react_1.useEffect(() => {
      if (!isEqual(previousItems.current.map((item) => item.value), items.map((item) => item.value))) {
        setRotateIndex(0);
        setSelectedIndex(0);
      }
      previousItems.current = items;
    }, [items]);
    ink_1.useInput(react_1.useCallback((input, key) => {
      if (input === "k" || key.upArrow) {
        const lastIndex = (hasLimit ? limit : items.length) - 1;
        const atFirstIndex = selectedIndex === 0;
        const nextIndex = hasLimit ? selectedIndex : lastIndex;
        const nextRotateIndex = atFirstIndex ? rotateIndex + 1 : rotateIndex;
        const nextSelectedIndex = atFirstIndex ? nextIndex : selectedIndex - 1;
        setRotateIndex(nextRotateIndex);
        setSelectedIndex(nextSelectedIndex);
        const slicedItems2 = hasLimit ? arrayRotate(items, nextRotateIndex).slice(0, limit) : items;
        if (typeof onHighlight === "function") {
          onHighlight(slicedItems2[nextSelectedIndex]);
        }
      }
      if (input === "j" || key.downArrow) {
        const atLastIndex = selectedIndex === (hasLimit ? limit : items.length) - 1;
        const nextIndex = hasLimit ? selectedIndex : 0;
        const nextRotateIndex = atLastIndex ? rotateIndex - 1 : rotateIndex;
        const nextSelectedIndex = atLastIndex ? nextIndex : selectedIndex + 1;
        setRotateIndex(nextRotateIndex);
        setSelectedIndex(nextSelectedIndex);
        const slicedItems2 = hasLimit ? arrayRotate(items, nextRotateIndex).slice(0, limit) : items;
        if (typeof onHighlight === "function") {
          onHighlight(slicedItems2[nextSelectedIndex]);
        }
      }
      if (key.return) {
        const slicedItems2 = hasLimit ? arrayRotate(items, rotateIndex).slice(0, limit) : items;
        if (typeof onSelect === "function") {
          onSelect(slicedItems2[selectedIndex]);
        }
      }
    }, [
      hasLimit,
      limit,
      rotateIndex,
      selectedIndex,
      items,
      onSelect,
      onHighlight
    ]), {isActive: isFocused});
    const slicedItems = hasLimit ? arrayRotate(items, rotateIndex).slice(0, limit) : items;
    return React2.createElement(ink_1.Box, {flexDirection: "column"}, slicedItems.map((item, index) => {
      var _a2;
      const isSelected = index === selectedIndex;
      return React2.createElement(ink_1.Box, {key: (_a2 = item.key) !== null && _a2 !== void 0 ? _a2 : item.value}, React2.createElement(indicatorComponent, {isSelected}), React2.createElement(itemComponent, {...item, isSelected}));
    }));
  }
  exports2.default = SelectInput2;
});

// node_modules/.pnpm/ink-select-input@4.2.0_ink@3.0.8+react@17.0.1/node_modules/ink-select-input/build/index.js
var require_build4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var SelectInput_1 = require_SelectInput();
  exports2.default = SelectInput_1.default;
  var Indicator_1 = require_Indicator();
  Object.defineProperty(exports2, "Indicator", {enumerable: true, get: function() {
    return Indicator_1.default;
  }});
  var Item_1 = require_Item();
  Object.defineProperty(exports2, "Item", {enumerable: true, get: function() {
    return Item_1.default;
  }});
});

// node_modules/.pnpm/ink-text-input@4.0.1_ink@3.0.8+react@17.0.1/node_modules/ink-text-input/build/index.js
var require_build5 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.UncontrolledTextInput = void 0;
  var React2 = require_react();
  var react_1 = require_react();
  var ink_1 = require_build3();
  var chalk = require_source();
  var TextInput2 = ({value: originalValue, placeholder = "", focus = true, mask, highlightPastedText = false, showCursor = true, onChange, onSubmit}) => {
    const [{cursorOffset, cursorWidth}, setState] = react_1.useState({
      cursorOffset: (originalValue || "").length,
      cursorWidth: 0
    });
    react_1.useEffect(() => {
      setState((previousState) => {
        if (!focus || !showCursor) {
          return previousState;
        }
        const newValue = originalValue || "";
        if (previousState.cursorOffset > newValue.length - 1) {
          return {
            cursorOffset: newValue.length,
            cursorWidth: 0
          };
        }
        return previousState;
      });
    }, [originalValue, focus, showCursor]);
    const cursorActualWidth = highlightPastedText ? cursorWidth : 0;
    const value = mask ? mask.repeat(originalValue.length) : originalValue;
    let renderedValue = value;
    let renderedPlaceholder = placeholder ? chalk.grey(placeholder) : void 0;
    if (showCursor && focus) {
      renderedPlaceholder = placeholder.length > 0 ? chalk.inverse(placeholder[0]) + chalk.grey(placeholder.slice(1)) : chalk.inverse(" ");
      renderedValue = value.length > 0 ? "" : chalk.inverse(" ");
      let i = 0;
      for (const char of value) {
        if (i >= cursorOffset - cursorActualWidth && i <= cursorOffset) {
          renderedValue += chalk.inverse(char);
        } else {
          renderedValue += char;
        }
        i++;
      }
      if (value.length > 0 && cursorOffset === value.length) {
        renderedValue += chalk.inverse(" ");
      }
    }
    ink_1.useInput((input, key) => {
      if (key.upArrow || key.downArrow || key.ctrl && input === "c" || key.tab || key.shift && key.tab) {
        return;
      }
      if (key.return) {
        if (onSubmit) {
          onSubmit(originalValue);
        }
        return;
      }
      let nextCursorOffset = cursorOffset;
      let nextValue = originalValue;
      let nextCursorWidth = 0;
      if (key.leftArrow) {
        if (showCursor) {
          nextCursorOffset--;
        }
      } else if (key.rightArrow) {
        if (showCursor) {
          nextCursorOffset++;
        }
      } else if (key.backspace || key.delete) {
        if (cursorOffset > 0) {
          nextValue = originalValue.slice(0, cursorOffset - 1) + originalValue.slice(cursorOffset, originalValue.length);
          nextCursorOffset--;
        }
      } else {
        nextValue = originalValue.slice(0, cursorOffset) + input + originalValue.slice(cursorOffset, originalValue.length);
        nextCursorOffset += input.length;
        if (input.length > 1) {
          nextCursorWidth = input.length;
        }
      }
      if (cursorOffset < 0) {
        nextCursorOffset = 0;
      }
      if (cursorOffset > originalValue.length) {
        nextCursorOffset = originalValue.length;
      }
      setState({
        cursorOffset: nextCursorOffset,
        cursorWidth: nextCursorWidth
      });
      if (nextValue !== originalValue) {
        onChange(nextValue);
      }
    }, {isActive: focus});
    return React2.createElement(ink_1.Text, null, placeholder ? value.length > 0 ? renderedValue : renderedPlaceholder : renderedValue);
  };
  exports2.default = TextInput2;
  exports2.UncontrolledTextInput = (props) => {
    const [value, setValue] = react_1.useState("");
    return React2.createElement(TextInput2, Object.assign({}, props, {value, onChange: setValue}));
  };
});

// node_modules/.pnpm/qs@6.9.6/node_modules/qs/lib/formats.js
var require_formats = __commonJS((exports2, module2) => {
  "use strict";
  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;
  var Format = {
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
  };
  module2.exports = {
    default: Format.RFC3986,
    formatters: {
      RFC1738: function(value) {
        return replace.call(value, percentTwenties, "+");
      },
      RFC3986: function(value) {
        return String(value);
      }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
  };
});

// node_modules/.pnpm/qs@6.9.6/node_modules/qs/lib/utils.js
var require_utils = __commonJS((exports2, module2) => {
  "use strict";
  var formats = require_formats();
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var hexTable = function() {
    var array = [];
    for (var i = 0; i < 256; ++i) {
      array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
    }
    return array;
  }();
  var compactQueue = function compactQueue2(queue) {
    while (queue.length > 1) {
      var item = queue.pop();
      var obj = item.obj[item.prop];
      if (isArray(obj)) {
        var compacted = [];
        for (var j = 0; j < obj.length; ++j) {
          if (typeof obj[j] !== "undefined") {
            compacted.push(obj[j]);
          }
        }
        item.obj[item.prop] = compacted;
      }
    }
  };
  var arrayToObject = function arrayToObject2(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
      if (typeof source[i] !== "undefined") {
        obj[i] = source[i];
      }
    }
    return obj;
  };
  var merge = function merge2(target, source, options) {
    if (!source) {
      return target;
    }
    if (typeof source !== "object") {
      if (isArray(target)) {
        target.push(source);
      } else if (target && typeof target === "object") {
        if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }
      return target;
    }
    if (!target || typeof target !== "object") {
      return [target].concat(source);
    }
    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
      mergeTarget = arrayToObject(target, options);
    }
    if (isArray(target) && isArray(source)) {
      source.forEach(function(item, i) {
        if (has.call(target, i)) {
          var targetItem = target[i];
          if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
            target[i] = merge2(targetItem, item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i] = item;
        }
      });
      return target;
    }
    return Object.keys(source).reduce(function(acc, key) {
      var value = source[key];
      if (has.call(acc, key)) {
        acc[key] = merge2(acc[key], value, options);
      } else {
        acc[key] = value;
      }
      return acc;
    }, mergeTarget);
  };
  var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
      acc[key] = source[key];
      return acc;
    }, target);
  };
  var decode = function(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") {
      return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    try {
      return decodeURIComponent(strWithoutPlus);
    } catch (e) {
      return strWithoutPlus;
    }
  };
  var encode = function encode2(str, defaultEncoder, charset, kind, format) {
    if (str.length === 0) {
      return str;
    }
    var string = str;
    if (typeof str === "symbol") {
      string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== "string") {
      string = String(str);
    }
    if (charset === "iso-8859-1") {
      return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
      });
    }
    var out = "";
    for (var i = 0; i < string.length; ++i) {
      var c = string.charCodeAt(i);
      if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
        out += string.charAt(i);
        continue;
      }
      if (c < 128) {
        out = out + hexTable[c];
        continue;
      }
      if (c < 2048) {
        out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
        continue;
      }
      if (c < 55296 || c >= 57344) {
        out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
        continue;
      }
      i += 1;
      c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
      out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
    }
    return out;
  };
  var compact = function compact2(value) {
    var queue = [{obj: {o: value}, prop: "o"}];
    var refs = [];
    for (var i = 0; i < queue.length; ++i) {
      var item = queue[i];
      var obj = item.obj[item.prop];
      var keys = Object.keys(obj);
      for (var j = 0; j < keys.length; ++j) {
        var key = keys[j];
        var val = obj[key];
        if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
          queue.push({obj, prop: key});
          refs.push(val);
        }
      }
    }
    compactQueue(queue);
    return value;
  };
  var isRegExp = function isRegExp2(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isBuffer = function isBuffer2(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };
  var combine = function combine2(a, b) {
    return [].concat(a, b);
  };
  var maybeMap = function maybeMap2(val, fn) {
    if (isArray(val)) {
      var mapped = [];
      for (var i = 0; i < val.length; i += 1) {
        mapped.push(fn(val[i]));
      }
      return mapped;
    }
    return fn(val);
  };
  module2.exports = {
    arrayToObject,
    assign,
    combine,
    compact,
    decode,
    encode,
    isBuffer,
    isRegExp,
    maybeMap,
    merge
  };
});

// node_modules/.pnpm/qs@6.9.6/node_modules/qs/lib/stringify.js
var require_stringify = __commonJS((exports2, module2) => {
  "use strict";
  var utils = require_utils();
  var formats = require_formats();
  var has = Object.prototype.hasOwnProperty;
  var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
      return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key) {
      return prefix + "[" + key + "]";
    },
    repeat: function repeat(prefix) {
      return prefix;
    }
  };
  var isArray = Array.isArray;
  var push = Array.prototype.push;
  var pushToArray = function(arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
  };
  var toISO = Date.prototype.toISOString;
  var defaultFormat = formats["default"];
  var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: "utf-8",
    charsetSentinel: false,
    delimiter: "&",
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    indices: false,
    serializeDate: function serializeDate(date) {
      return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
  };
  var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
    return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
  };
  var stringify = function stringify2(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset) {
    var obj = object;
    if (typeof filter === "function") {
      obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
      obj = serializeDate(obj);
    } else if (generateArrayPrefix === "comma" && isArray(obj)) {
      obj = utils.maybeMap(obj, function(value2) {
        if (value2 instanceof Date) {
          return serializeDate(value2);
        }
        return value2;
      });
    }
    if (obj === null) {
      if (strictNullHandling) {
        return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
      }
      obj = "";
    }
    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
      if (encoder) {
        var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
        return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
      }
      return [formatter(prefix) + "=" + formatter(String(obj))];
    }
    var values = [];
    if (typeof obj === "undefined") {
      return values;
    }
    var objKeys;
    if (generateArrayPrefix === "comma" && isArray(obj)) {
      objKeys = [{value: obj.length > 0 ? obj.join(",") || null : void 0}];
    } else if (isArray(filter)) {
      objKeys = filter;
    } else {
      var keys = Object.keys(obj);
      objKeys = sort ? keys.sort(sort) : keys;
    }
    for (var i = 0; i < objKeys.length; ++i) {
      var key = objKeys[i];
      var value = typeof key === "object" && key.value !== void 0 ? key.value : obj[key];
      if (skipNulls && value === null) {
        continue;
      }
      var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? "." + key : "[" + key + "]");
      pushToArray(values, stringify2(value, keyPrefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset));
    }
    return values;
  };
  var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
    if (!opts) {
      return defaults;
    }
    if (opts.encoder !== null && opts.encoder !== void 0 && typeof opts.encoder !== "function") {
      throw new TypeError("Encoder has to be a function.");
    }
    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var format = formats["default"];
    if (typeof opts.format !== "undefined") {
      if (!has.call(formats.formatters, opts.format)) {
        throw new TypeError("Unknown format option provided.");
      }
      format = opts.format;
    }
    var formatter = formats.formatters[format];
    var filter = defaults.filter;
    if (typeof opts.filter === "function" || isArray(opts.filter)) {
      filter = opts.filter;
    }
    return {
      addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
      allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
      encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
      encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
      encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
      filter,
      format,
      formatter,
      serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
      skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
      sort: typeof opts.sort === "function" ? opts.sort : null,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  module2.exports = function(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === "function") {
      filter = options.filter;
      obj = filter("", obj);
    } else if (isArray(options.filter)) {
      filter = options.filter;
      objKeys = filter;
    }
    var keys = [];
    if (typeof obj !== "object" || obj === null) {
      return "";
    }
    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
      arrayFormat = opts.arrayFormat;
    } else if (opts && "indices" in opts) {
      arrayFormat = opts.indices ? "indices" : "repeat";
    } else {
      arrayFormat = "indices";
    }
    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
    if (!objKeys) {
      objKeys = Object.keys(obj);
    }
    if (options.sort) {
      objKeys.sort(options.sort);
    }
    for (var i = 0; i < objKeys.length; ++i) {
      var key = objKeys[i];
      if (options.skipNulls && obj[key] === null) {
        continue;
      }
      pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
      if (options.charset === "iso-8859-1") {
        prefix += "utf8=%26%2310003%3B&";
      } else {
        prefix += "utf8=%E2%9C%93&";
      }
    }
    return joined.length > 0 ? prefix + joined : "";
  };
});

// node_modules/.pnpm/qs@6.9.6/node_modules/qs/lib/parse.js
var require_parse3 = __commonJS((exports2, module2) => {
  "use strict";
  var utils = require_utils();
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: "&",
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1e3,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
  };
  var interpretNumericEntities = function(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
      return String.fromCharCode(parseInt(numberStr, 10));
    });
  };
  var parseArrayValue = function(val, options) {
    if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
      return val.split(",");
    }
    return val;
  };
  var isoSentinel = "utf8=%26%2310003%3B";
  var charsetSentinel = "utf8=%E2%9C%93";
  var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1;
    var i;
    var charset = options.charset;
    if (options.charsetSentinel) {
      for (i = 0; i < parts.length; ++i) {
        if (parts[i].indexOf("utf8=") === 0) {
          if (parts[i] === charsetSentinel) {
            charset = "utf-8";
          } else if (parts[i] === isoSentinel) {
            charset = "iso-8859-1";
          }
          skipIndex = i;
          i = parts.length;
        }
      }
    }
    for (i = 0; i < parts.length; ++i) {
      if (i === skipIndex) {
        continue;
      }
      var part = parts[i];
      var bracketEqualsPos = part.indexOf("]=");
      var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
      var key, val;
      if (pos === -1) {
        key = options.decoder(part, defaults.decoder, charset, "key");
        val = options.strictNullHandling ? null : "";
      } else {
        key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
        val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {
          return options.decoder(encodedVal, defaults.decoder, charset, "value");
        });
      }
      if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
        val = interpretNumericEntities(val);
      }
      if (part.indexOf("[]=") > -1) {
        val = isArray(val) ? [val] : val;
      }
      if (has.call(obj, key)) {
        obj[key] = utils.combine(obj[key], val);
      } else {
        obj[key] = val;
      }
    }
    return obj;
  };
  var parseObject = function(chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);
    for (var i = chain.length - 1; i >= 0; --i) {
      var obj;
      var root = chain[i];
      if (root === "[]" && options.parseArrays) {
        obj = [].concat(leaf);
      } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
        var index = parseInt(cleanRoot, 10);
        if (!options.parseArrays && cleanRoot === "") {
          obj = {0: leaf};
        } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
          obj = [];
          obj[index] = leaf;
        } else {
          obj[cleanRoot] = leaf;
        }
      }
      leaf = obj;
    }
    return leaf;
  };
  var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
      return;
    }
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    var keys = [];
    if (parent) {
      if (!options.plainObjects && has.call(Object.prototype, parent)) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(parent);
    }
    var i = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
      i += 1;
      if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(segment[1]);
    }
    if (segment) {
      keys.push("[" + key.slice(segment.index) + "]");
    }
    return parseObject(keys, val, options, valuesParsed);
  };
  var normalizeParseOptions = function normalizeParseOptions2(opts) {
    if (!opts) {
      return defaults;
    }
    if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
      throw new TypeError("Decoder has to be a function.");
    }
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
    return {
      allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
      allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
      arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
      decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
      delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
      depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
      ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
      interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
      parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
      parseArrays: opts.parseArrays !== false,
      plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  module2.exports = function(str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") {
      return options.plainObjects ? Object.create(null) : {};
    }
    var tempObj = typeof str === "string" ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
      obj = utils.merge(obj, newObj, options);
    }
    return utils.compact(obj);
  };
});

// node_modules/.pnpm/qs@6.9.6/node_modules/qs/lib/index.js
var require_lib10 = __commonJS((exports2, module2) => {
  "use strict";
  var stringify = require_stringify();
  var parse2 = require_parse3();
  var formats = require_formats();
  module2.exports = {
    formats,
    parse: parse2,
    stringify
  };
});

// node_modules/.pnpm/swr@0.4.2_react@17.0.1/node_modules/swr/dist/index.js
var require_dist2 = __commonJS((exports2, module2) => {
  module2.exports = function(e, t) {
    "use strict";
    var r = {};
    function __webpack_require__(t2) {
      if (r[t2]) {
        return r[t2].exports;
      }
      var n = r[t2] = {i: t2, l: false, exports: {}};
      e[t2].call(n.exports, n, n.exports, __webpack_require__);
      n.l = true;
      return n.exports;
    }
    __webpack_require__.ab = __dirname + "/";
    function startup() {
      return __webpack_require__(325);
    }
    return startup();
  }({48: function(e, t) {
    var r = Object.prototype.hasOwnProperty;
    function dequal(e2, t2) {
      var n, i;
      if (e2 === t2)
        return true;
      if (e2 && t2 && (n = e2.constructor) === t2.constructor) {
        if (n === Date)
          return e2.getTime() === t2.getTime();
        if (n === RegExp)
          return e2.toString() === t2.toString();
        if (n === Array) {
          if ((i = e2.length) === t2.length) {
            while (i-- && dequal(e2[i], t2[i]))
              ;
          }
          return i === -1;
        }
        if (!n || typeof e2 === "object") {
          i = 0;
          for (n in e2) {
            if (r.call(e2, n) && ++i && !r.call(t2, n))
              return false;
            if (!(n in t2) || !dequal(e2[n], t2[n]))
              return false;
          }
          return Object.keys(t2).length === i;
        }
      }
      return e2 !== e2 && t2 !== t2;
    }
    t.dequal = dequal;
  }, 202: function(e, t) {
    "use strict";
    Object.defineProperty(t, "__esModule", {value: true});
    var r = new WeakMap();
    var n = 0;
    function hash(e2) {
      if (!e2.length)
        return "";
      var t2 = "arg";
      for (var i = 0; i < e2.length; ++i) {
        if (e2[i] === null) {
          t2 += "@null";
          continue;
        }
        var u = void 0;
        if (typeof e2[i] !== "object" && typeof e2[i] !== "function") {
          if (typeof e2[i] === "string") {
            u = '"' + e2[i] + '"';
          } else {
            u = String(e2[i]);
          }
        } else {
          if (!r.has(e2[i])) {
            u = n;
            r.set(e2[i], n++);
          } else {
            u = r.get(e2[i]);
          }
        }
        t2 += "@" + u;
      }
      return t2;
    }
    t.default = hash;
  }, 209: function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {value: true});
    var n = r(297);
    var i = n.createContext({});
    i.displayName = "SWRConfigContext";
    t.default = i;
  }, 297: function(e) {
    e.exports = require_react();
  }, 323: function(e, t) {
    "use strict";
    Object.defineProperty(t, "__esModule", {value: true});
    function isOnline() {
      if (typeof navigator !== "undefined" && typeof navigator.onLine !== "undefined") {
        return navigator.onLine;
      }
      return true;
    }
    function isDocumentVisible() {
      if (typeof document !== "undefined" && typeof document.visibilityState !== "undefined") {
        return document.visibilityState !== "hidden";
      }
      return true;
    }
    var r = function(e2) {
      return fetch(e2).then(function(e3) {
        return e3.json();
      });
    };
    t.default = {isOnline, isDocumentVisible, fetcher: r};
  }, 325: function(e, t, r) {
    "use strict";
    function __export2(e2) {
      for (var r2 in e2)
        if (!t.hasOwnProperty(r2))
          t[r2] = e2[r2];
    }
    var n = this && this.__importDefault || function(e2) {
      return e2 && e2.__esModule ? e2 : {default: e2};
    };
    Object.defineProperty(t, "__esModule", {value: true});
    __export2(r(516));
    var i = n(r(516));
    var u = r(942);
    t.useSWRInfinite = u.useSWRInfinite;
    var a = r(641);
    t.cache = a.cache;
    t.default = i.default;
  }, 516: function(e, t, r) {
    "use strict";
    var n = this && this.__awaiter || function(e2, t2, r2, n2) {
      function adopt(e3) {
        return e3 instanceof r2 ? e3 : new r2(function(t3) {
          t3(e3);
        });
      }
      return new (r2 || (r2 = Promise))(function(r3, i2) {
        function fulfilled(e3) {
          try {
            step(n2.next(e3));
          } catch (e4) {
            i2(e4);
          }
        }
        function rejected(e3) {
          try {
            step(n2["throw"](e3));
          } catch (e4) {
            i2(e4);
          }
        }
        function step(e3) {
          e3.done ? r3(e3.value) : adopt(e3.value).then(fulfilled, rejected);
        }
        step((n2 = n2.apply(e2, t2 || [])).next());
      });
    };
    var i = this && this.__generator || function(e2, t2) {
      var r2 = {label: 0, sent: function() {
        if (u2[0] & 1)
          throw u2[1];
        return u2[1];
      }, trys: [], ops: []}, n2, i2, u2, a2;
      return a2 = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (a2[Symbol.iterator] = function() {
        return this;
      }), a2;
      function verb(e3) {
        return function(t3) {
          return step([e3, t3]);
        };
      }
      function step(a3) {
        if (n2)
          throw new TypeError("Generator is already executing.");
        while (r2)
          try {
            if (n2 = 1, i2 && (u2 = a3[0] & 2 ? i2["return"] : a3[0] ? i2["throw"] || ((u2 = i2["return"]) && u2.call(i2), 0) : i2.next) && !(u2 = u2.call(i2, a3[1])).done)
              return u2;
            if (i2 = 0, u2)
              a3 = [a3[0] & 2, u2.value];
            switch (a3[0]) {
              case 0:
              case 1:
                u2 = a3;
                break;
              case 4:
                r2.label++;
                return {value: a3[1], done: false};
              case 5:
                r2.label++;
                i2 = a3[1];
                a3 = [0];
                continue;
              case 7:
                a3 = r2.ops.pop();
                r2.trys.pop();
                continue;
              default:
                if (!(u2 = r2.trys, u2 = u2.length > 0 && u2[u2.length - 1]) && (a3[0] === 6 || a3[0] === 2)) {
                  r2 = 0;
                  continue;
                }
                if (a3[0] === 3 && (!u2 || a3[1] > u2[0] && a3[1] < u2[3])) {
                  r2.label = a3[1];
                  break;
                }
                if (a3[0] === 6 && r2.label < u2[1]) {
                  r2.label = u2[1];
                  u2 = a3;
                  break;
                }
                if (u2 && r2.label < u2[2]) {
                  r2.label = u2[2];
                  r2.ops.push(a3);
                  break;
                }
                if (u2[2])
                  r2.ops.pop();
                r2.trys.pop();
                continue;
            }
            a3 = t2.call(e2, r2);
          } catch (e3) {
            a3 = [6, e3];
            i2 = 0;
          } finally {
            n2 = u2 = 0;
          }
        if (a3[0] & 5)
          throw a3[1];
        return {value: a3[0] ? a3[1] : void 0, done: true};
      }
    };
    var u = this && this.__importStar || function(e2) {
      if (e2 && e2.__esModule)
        return e2;
      var t2 = {};
      if (e2 != null) {
        for (var r2 in e2)
          if (Object.hasOwnProperty.call(e2, r2))
            t2[r2] = e2[r2];
      }
      t2["default"] = e2;
      return t2;
    };
    var a = this && this.__importDefault || function(e2) {
      return e2 && e2.__esModule ? e2 : {default: e2};
    };
    Object.defineProperty(t, "__esModule", {value: true});
    var f = r(297);
    var o = u(r(641));
    var c = a(r(209));
    var l = typeof window === "undefined" || !!(typeof Deno !== "undefined" && Deno && Deno.version && Deno.version.deno);
    var s = l ? null : window["requestAnimationFrame"] || function(e2) {
      return setTimeout(e2, 1);
    };
    var d = l ? f.useEffect : f.useLayoutEffect;
    var v = {};
    var h = {};
    var p = {};
    var y = {};
    var b = {};
    var _ = {};
    var m = {};
    var w = function() {
      var e2 = 0;
      return function() {
        return ++e2;
      };
    }();
    if (!l && window.addEventListener && typeof document !== "undefined" && typeof document.addEventListener !== "undefined") {
      var g = function(e2) {
        if (!o.default.isDocumentVisible() || !o.default.isOnline())
          return;
        for (var t2 in e2) {
          if (e2[t2][0])
            e2[t2][0]();
        }
      };
      document.addEventListener("visibilitychange", function() {
        return g(p);
      }, false);
      window.addEventListener("focus", function() {
        return g(p);
      }, false);
      window.addEventListener("online", function() {
        return g(y);
      }, false);
    }
    var O = function(e2, t2) {
      if (t2 === void 0) {
        t2 = true;
      }
      var r2 = o.cache.serializeKey(e2), n2 = r2[0], i2 = r2[2], u2 = r2[3];
      if (!n2)
        return Promise.resolve();
      var a2 = b[n2];
      if (n2 && a2) {
        var f2 = o.cache.get(n2);
        var c2 = o.cache.get(i2);
        var l2 = o.cache.get(u2);
        var s2 = [];
        for (var d2 = 0; d2 < a2.length; ++d2) {
          s2.push(a2[d2](t2, f2, c2, l2, d2 > 0));
        }
        return Promise.all(s2).then(function() {
          return o.cache.get(n2);
        });
      }
      return Promise.resolve(o.cache.get(n2));
    };
    t.trigger = O;
    var j = function(e2, t2, r2, n2) {
      var i2 = b[e2];
      if (e2 && i2) {
        for (var u2 = 0; u2 < i2.length; ++u2) {
          i2[u2](false, t2, r2, n2);
        }
      }
    };
    var x = function(e2, t2, r2) {
      if (r2 === void 0) {
        r2 = true;
      }
      return n(void 0, void 0, void 0, function() {
        var n2, u2, a2, f2, c2, l2, s2, d2, v2, p2, y2, g2, j2;
        return i(this, function(i2) {
          switch (i2.label) {
            case 0:
              n2 = o.cache.serializeKey(e2), u2 = n2[0], a2 = n2[2];
              if (!u2)
                return [2];
              if (typeof t2 === "undefined")
                return [2, O(e2, r2)];
              _[u2] = w() - 1;
              m[u2] = 0;
              f2 = _[u2];
              c2 = h[u2];
              d2 = false;
              if (t2 && typeof t2 === "function") {
                try {
                  t2 = t2(o.cache.get(u2));
                } catch (e3) {
                  s2 = e3;
                }
              }
              if (!(t2 && typeof t2.then === "function"))
                return [3, 5];
              d2 = true;
              i2.label = 1;
            case 1:
              i2.trys.push([1, 3, , 4]);
              return [4, t2];
            case 2:
              l2 = i2.sent();
              return [3, 4];
            case 3:
              v2 = i2.sent();
              s2 = v2;
              return [3, 4];
            case 4:
              return [3, 6];
            case 5:
              l2 = t2;
              i2.label = 6;
            case 6:
              p2 = function() {
                if (f2 !== _[u2] || c2 !== h[u2]) {
                  if (s2)
                    throw s2;
                  return true;
                }
              };
              if (p2())
                return [2, l2];
              if (typeof l2 !== "undefined") {
                o.cache.set(u2, l2);
              }
              o.cache.set(a2, s2);
              m[u2] = w() - 1;
              if (!!d2)
                return [3, 8];
              return [4, 0];
            case 7:
              i2.sent();
              if (p2())
                return [2, l2];
              i2.label = 8;
            case 8:
              y2 = b[u2];
              if (y2) {
                g2 = [];
                for (j2 = 0; j2 < y2.length; ++j2) {
                  g2.push(y2[j2](!!r2, l2, s2, void 0, j2 > 0));
                }
                return [2, Promise.all(g2).then(function() {
                  if (s2)
                    throw s2;
                  return o.cache.get(u2);
                })];
              }
              if (s2)
                throw s2;
              return [2, l2];
          }
        });
      });
    };
    t.mutate = x;
    function useSWR() {
      var e2 = this;
      var t2 = [];
      for (var r2 = 0; r2 < arguments.length; r2++) {
        t2[r2] = arguments[r2];
      }
      var u2, a2, g2 = {};
      if (t2.length >= 1) {
        u2 = t2[0];
      }
      if (t2.length > 2) {
        a2 = t2[1];
        g2 = t2[2];
      } else {
        if (typeof t2[1] === "function") {
          a2 = t2[1];
        } else if (typeof t2[1] === "object") {
          g2 = t2[1];
        }
      }
      var O2 = o.cache.serializeKey(u2), S2 = O2[0], P = O2[1], V = O2[2], M = O2[3];
      g2 = Object.assign({}, o.default, f.useContext(c.default), g2);
      var D = f.useRef(g2);
      d(function() {
        D.current = g2;
      });
      if (typeof a2 === "undefined") {
        a2 = g2.fetcher;
      }
      var E = function() {
        var e3 = o.cache.get(S2);
        return typeof e3 === "undefined" ? g2.initialData : e3;
      };
      var C = E();
      var I = o.cache.get(V);
      var T = !!o.cache.get(M);
      var W = f.useRef({data: false, error: false, isValidating: false});
      var z = f.useRef({data: C, error: I, isValidating: T});
      f.useDebugValue(z.current.data);
      var R = f.useState(null), q = R[1];
      var k = f.useCallback(function(e3) {
        var t3 = false;
        for (var r3 in e3) {
          if (z.current[r3] === e3[r3]) {
            continue;
          }
          z.current[r3] = e3[r3];
          if (W.current[r3]) {
            t3 = true;
          }
        }
        if (t3 || g2.suspense) {
          if (L.current || !A.current)
            return;
          q({});
        }
      }, []);
      var L = f.useRef(false);
      var K = f.useRef(S2);
      var A = f.useRef(false);
      var H = f.useCallback(function(e3) {
        var t3;
        var r3 = [];
        for (var n2 = 1; n2 < arguments.length; n2++) {
          r3[n2 - 1] = arguments[n2];
        }
        if (L.current)
          return;
        if (!A.current)
          return;
        if (S2 !== K.current)
          return;
        (t3 = D.current)[e3].apply(t3, r3);
      }, [S2]);
      var G = f.useCallback(function(e3, t3) {
        return x(K.current, e3, t3);
      }, []);
      var F = function(e3, t3) {
        if (!t3)
          return;
        if (!e3[S2]) {
          e3[S2] = [t3];
        } else {
          e3[S2].push(t3);
        }
      };
      var B = function(e3, t3) {
        if (e3[S2]) {
          var r3 = e3[S2];
          var n2 = r3.indexOf(t3);
          if (n2 >= 0) {
            r3[n2] = r3[r3.length - 1];
            r3.pop();
          }
        }
      };
      var J = f.useCallback(function(t3) {
        if (t3 === void 0) {
          t3 = {};
        }
        return n(e2, void 0, void 0, function() {
          var e3, r3, n2, u3, f2, c2, l2;
          return i(this, function(i2) {
            switch (i2.label) {
              case 0:
                if (!S2 || !a2)
                  return [2, false];
                if (L.current)
                  return [2, false];
                if (D.current.isPaused())
                  return [2, false];
                t3 = Object.assign({dedupe: false}, t3);
                e3 = true;
                r3 = typeof v[S2] !== "undefined" && t3.dedupe;
                i2.label = 1;
              case 1:
                i2.trys.push([1, 6, , 7]);
                k({isValidating: true});
                o.cache.set(M, true);
                if (!r3) {
                  j(S2, z.current.data, z.current.error, true);
                }
                n2 = void 0;
                u3 = void 0;
                if (!r3)
                  return [3, 3];
                u3 = h[S2];
                return [4, v[S2]];
              case 2:
                n2 = i2.sent();
                return [3, 5];
              case 3:
                if (g2.loadingTimeout && !o.cache.get(S2)) {
                  setTimeout(function() {
                    if (e3)
                      H("onLoadingSlow", S2, g2);
                  }, g2.loadingTimeout);
                }
                if (P !== null) {
                  v[S2] = a2.apply(void 0, P);
                } else {
                  v[S2] = a2(S2);
                }
                h[S2] = u3 = w();
                return [4, v[S2]];
              case 4:
                n2 = i2.sent();
                setTimeout(function() {
                  delete v[S2];
                  delete h[S2];
                }, g2.dedupingInterval);
                H("onSuccess", n2, S2, g2);
                i2.label = 5;
              case 5:
                if (h[S2] > u3) {
                  return [2, false];
                }
                if (_[S2] && (u3 <= _[S2] || u3 <= m[S2] || m[S2] === 0)) {
                  k({isValidating: false});
                  return [2, false];
                }
                o.cache.set(S2, n2);
                o.cache.set(V, void 0);
                o.cache.set(M, false);
                f2 = {isValidating: false};
                if (typeof z.current.error !== "undefined") {
                  f2.error = void 0;
                }
                if (!g2.compare(z.current.data, n2)) {
                  f2.data = n2;
                }
                k(f2);
                if (!r3) {
                  j(S2, n2, f2.error, false);
                }
                return [3, 7];
              case 6:
                c2 = i2.sent();
                delete v[S2];
                delete h[S2];
                if (D.current.isPaused()) {
                  k({isValidating: false});
                  return [2, false];
                }
                o.cache.set(V, c2);
                if (z.current.error !== c2) {
                  k({isValidating: false, error: c2});
                  if (!r3) {
                    j(S2, void 0, c2, false);
                  }
                }
                H("onError", c2, S2, g2);
                if (g2.shouldRetryOnError) {
                  l2 = (t3.retryCount || 0) + 1;
                  H("onErrorRetry", c2, S2, g2, J, Object.assign({dedupe: true}, t3, {retryCount: l2}));
                }
                return [3, 7];
              case 7:
                e3 = false;
                return [2, true];
            }
          });
        });
      }, [S2]);
      d(function() {
        if (!S2)
          return void 0;
        L.current = false;
        A.current = true;
        var e3 = z.current.data;
        var t3 = E();
        if (K.current !== S2) {
          K.current = S2;
        }
        if (!g2.compare(e3, t3)) {
          k({data: t3});
        }
        var r3 = function() {
          return J({dedupe: true});
        };
        if (g2.revalidateOnMount || !g2.initialData && g2.revalidateOnMount === void 0) {
          if (typeof t3 !== "undefined" && !l) {
            s(r3);
          } else {
            r3();
          }
        }
        var n2 = false;
        var i2 = function() {
          if (n2 || !D.current.revalidateOnFocus)
            return;
          n2 = true;
          r3();
          setTimeout(function() {
            return n2 = false;
          }, D.current.focusThrottleInterval);
        };
        var u3 = function() {
          if (D.current.revalidateOnReconnect) {
            r3();
          }
        };
        var a3 = function(e4, t4, n3, i3, u4) {
          if (e4 === void 0) {
            e4 = true;
          }
          if (u4 === void 0) {
            u4 = true;
          }
          var a4 = {};
          var f2 = false;
          if (typeof t4 !== "undefined" && !g2.compare(z.current.data, t4)) {
            a4.data = t4;
            f2 = true;
          }
          if (z.current.error !== n3) {
            a4.error = n3;
            f2 = true;
          }
          if (typeof i3 !== "undefined" && z.current.isValidating !== i3) {
            a4.isValidating = i3;
            f2 = true;
          }
          if (f2) {
            k(a4);
          }
          if (e4) {
            if (u4) {
              return r3();
            } else {
              return J();
            }
          }
          return false;
        };
        F(p, i2);
        F(y, u3);
        F(b, a3);
        return function() {
          k = function() {
            return null;
          };
          L.current = true;
          B(p, i2);
          B(y, u3);
          B(b, a3);
        };
      }, [S2, J]);
      d(function() {
        var t3 = null;
        var r3 = function() {
          return n(e2, void 0, void 0, function() {
            return i(this, function(e3) {
              switch (e3.label) {
                case 0:
                  if (!(!z.current.error && (D.current.refreshWhenHidden || D.current.isDocumentVisible()) && (D.current.refreshWhenOffline || D.current.isOnline())))
                    return [3, 2];
                  return [4, J({dedupe: true})];
                case 1:
                  e3.sent();
                  e3.label = 2;
                case 2:
                  if (D.current.refreshInterval && t3) {
                    t3 = setTimeout(r3, D.current.refreshInterval);
                  }
                  return [2];
              }
            });
          });
        };
        if (D.current.refreshInterval) {
          t3 = setTimeout(r3, D.current.refreshInterval);
        }
        return function() {
          if (t3) {
            clearTimeout(t3);
            t3 = null;
          }
        };
      }, [g2.refreshInterval, g2.refreshWhenHidden, g2.refreshWhenOffline, J]);
      var Q = f.useMemo(function() {
        var e3 = {revalidate: J, mutate: G};
        Object.defineProperties(e3, {error: {get: function() {
          W.current.error = true;
          return K.current === S2 ? z.current.error : I;
        }, enumerable: true}, data: {get: function() {
          W.current.data = true;
          return K.current === S2 ? z.current.data : C;
        }, enumerable: true}, isValidating: {get: function() {
          W.current.isValidating = true;
          return S2 ? z.current.isValidating : false;
        }, enumerable: true}});
        return e3;
      }, [J, C, I, G, S2]);
      if (g2.suspense) {
        var X = o.cache.get(S2);
        var Y = o.cache.get(V);
        if (typeof X === "undefined") {
          X = C;
        }
        if (typeof Y === "undefined") {
          Y = I;
        }
        if (typeof X === "undefined" && typeof Y === "undefined") {
          if (!v[S2]) {
            J();
          }
          if (v[S2] && typeof v[S2].then === "function") {
            throw v[S2];
          }
          X = v[S2];
        }
        if (typeof X === "undefined" && Y) {
          throw Y;
        }
        return {error: Y, data: X, revalidate: J, mutate: G, isValidating: z.current.isValidating};
      }
      return Q;
    }
    var S = c.default.Provider;
    t.SWRConfig = S;
    t.default = useSWR;
  }, 641: function(e, t, r) {
    "use strict";
    var n = this && this.__importDefault || function(e2) {
      return e2 && e2.__esModule ? e2 : {default: e2};
    };
    Object.defineProperty(t, "__esModule", {value: true});
    var i = r(48);
    var u = n(r(722));
    var a = n(r(323));
    var f = new u.default();
    t.cache = f;
    function onErrorRetry(e2, t2, r2, n2, i2) {
      if (!r2.isDocumentVisible()) {
        return;
      }
      if (typeof r2.errorRetryCount === "number" && i2.retryCount > r2.errorRetryCount) {
        return;
      }
      var u2 = Math.min(i2.retryCount || 0, 8);
      var a2 = ~~((Math.random() + 0.5) * (1 << u2)) * r2.errorRetryInterval;
      setTimeout(n2, a2, i2);
    }
    var o = typeof window !== "undefined" && navigator["connection"] && ["slow-2g", "2g"].indexOf(navigator["connection"].effectiveType) !== -1;
    var c = {onLoadingSlow: function() {
    }, onSuccess: function() {
    }, onError: function() {
    }, onErrorRetry, errorRetryInterval: (o ? 10 : 5) * 1e3, focusThrottleInterval: 5 * 1e3, dedupingInterval: 2 * 1e3, loadingTimeout: (o ? 5 : 3) * 1e3, refreshInterval: 0, revalidateOnFocus: true, revalidateOnReconnect: true, refreshWhenHidden: false, refreshWhenOffline: false, shouldRetryOnError: true, suspense: false, compare: i.dequal, fetcher: a.default.fetcher, isOnline: a.default.isOnline, isDocumentVisible: a.default.isDocumentVisible, isPaused: function() {
      return false;
    }};
    t.default = c;
  }, 722: function(e, t, r) {
    "use strict";
    var n = this && this.__importDefault || function(e2) {
      return e2 && e2.__esModule ? e2 : {default: e2};
    };
    Object.defineProperty(t, "__esModule", {value: true});
    var i = n(r(202));
    var u = function() {
      function Cache(e2) {
        if (e2 === void 0) {
          e2 = {};
        }
        this.__cache = new Map(Object.entries(e2));
        this.__listeners = [];
      }
      Cache.prototype.get = function(e2) {
        var t2 = this.serializeKey(e2)[0];
        return this.__cache.get(t2);
      };
      Cache.prototype.set = function(e2, t2) {
        var r2 = this.serializeKey(e2)[0];
        this.__cache.set(r2, t2);
        this.notify();
      };
      Cache.prototype.keys = function() {
        return Array.from(this.__cache.keys());
      };
      Cache.prototype.has = function(e2) {
        var t2 = this.serializeKey(e2)[0];
        return this.__cache.has(t2);
      };
      Cache.prototype.clear = function() {
        this.__cache.clear();
        this.notify();
      };
      Cache.prototype.delete = function(e2) {
        var t2 = this.serializeKey(e2)[0];
        this.__cache.delete(t2);
        this.notify();
      };
      Cache.prototype.serializeKey = function(e2) {
        var t2 = null;
        if (typeof e2 === "function") {
          try {
            e2 = e2();
          } catch (t3) {
            e2 = "";
          }
        }
        if (Array.isArray(e2)) {
          t2 = e2;
          e2 = i.default(e2);
        } else {
          e2 = String(e2 || "");
        }
        var r2 = e2 ? "err@" + e2 : "";
        var n2 = e2 ? "validating@" + e2 : "";
        return [e2, t2, r2, n2];
      };
      Cache.prototype.subscribe = function(e2) {
        var t2 = this;
        if (typeof e2 !== "function") {
          throw new Error("Expected the listener to be a function.");
        }
        var r2 = true;
        this.__listeners.push(e2);
        return function() {
          if (!r2)
            return;
          r2 = false;
          var n2 = t2.__listeners.indexOf(e2);
          if (n2 > -1) {
            t2.__listeners[n2] = t2.__listeners[t2.__listeners.length - 1];
            t2.__listeners.length--;
          }
        };
      };
      Cache.prototype.notify = function() {
        for (var e2 = 0, t2 = this.__listeners; e2 < t2.length; e2++) {
          var r2 = t2[e2];
          r2();
        }
      };
      return Cache;
    }();
    t.default = u;
  }, 942: function(e, t, r) {
    "use strict";
    var n = this && this.__awaiter || function(e2, t2, r2, n2) {
      function adopt(e3) {
        return e3 instanceof r2 ? e3 : new r2(function(t3) {
          t3(e3);
        });
      }
      return new (r2 || (r2 = Promise))(function(r3, i2) {
        function fulfilled(e3) {
          try {
            step(n2.next(e3));
          } catch (e4) {
            i2(e4);
          }
        }
        function rejected(e3) {
          try {
            step(n2["throw"](e3));
          } catch (e4) {
            i2(e4);
          }
        }
        function step(e3) {
          e3.done ? r3(e3.value) : adopt(e3.value).then(fulfilled, rejected);
        }
        step((n2 = n2.apply(e2, t2 || [])).next());
      });
    };
    var i = this && this.__generator || function(e2, t2) {
      var r2 = {label: 0, sent: function() {
        if (u2[0] & 1)
          throw u2[1];
        return u2[1];
      }, trys: [], ops: []}, n2, i2, u2, a2;
      return a2 = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (a2[Symbol.iterator] = function() {
        return this;
      }), a2;
      function verb(e3) {
        return function(t3) {
          return step([e3, t3]);
        };
      }
      function step(a3) {
        if (n2)
          throw new TypeError("Generator is already executing.");
        while (r2)
          try {
            if (n2 = 1, i2 && (u2 = a3[0] & 2 ? i2["return"] : a3[0] ? i2["throw"] || ((u2 = i2["return"]) && u2.call(i2), 0) : i2.next) && !(u2 = u2.call(i2, a3[1])).done)
              return u2;
            if (i2 = 0, u2)
              a3 = [a3[0] & 2, u2.value];
            switch (a3[0]) {
              case 0:
              case 1:
                u2 = a3;
                break;
              case 4:
                r2.label++;
                return {value: a3[1], done: false};
              case 5:
                r2.label++;
                i2 = a3[1];
                a3 = [0];
                continue;
              case 7:
                a3 = r2.ops.pop();
                r2.trys.pop();
                continue;
              default:
                if (!(u2 = r2.trys, u2 = u2.length > 0 && u2[u2.length - 1]) && (a3[0] === 6 || a3[0] === 2)) {
                  r2 = 0;
                  continue;
                }
                if (a3[0] === 3 && (!u2 || a3[1] > u2[0] && a3[1] < u2[3])) {
                  r2.label = a3[1];
                  break;
                }
                if (a3[0] === 6 && r2.label < u2[1]) {
                  r2.label = u2[1];
                  u2 = a3;
                  break;
                }
                if (u2 && r2.label < u2[2]) {
                  r2.label = u2[2];
                  r2.ops.push(a3);
                  break;
                }
                if (u2[2])
                  r2.ops.pop();
                r2.trys.pop();
                continue;
            }
            a3 = t2.call(e2, r2);
          } catch (e3) {
            a3 = [6, e3];
            i2 = 0;
          } finally {
            n2 = u2 = 0;
          }
        if (a3[0] & 5)
          throw a3[1];
        return {value: a3[0] ? a3[1] : void 0, done: true};
      }
    };
    var u = this && this.__rest || function(e2, t2) {
      var r2 = {};
      for (var n2 in e2)
        if (Object.prototype.hasOwnProperty.call(e2, n2) && t2.indexOf(n2) < 0)
          r2[n2] = e2[n2];
      if (e2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, n2 = Object.getOwnPropertySymbols(e2); i2 < n2.length; i2++) {
          if (t2.indexOf(n2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(e2, n2[i2]))
            r2[n2[i2]] = e2[n2[i2]];
        }
      return r2;
    };
    var a = this && this.__importStar || function(e2) {
      if (e2 && e2.__esModule)
        return e2;
      var t2 = {};
      if (e2 != null) {
        for (var r2 in e2)
          if (Object.hasOwnProperty.call(e2, r2))
            t2[r2] = e2[r2];
      }
      t2["default"] = e2;
      return t2;
    };
    var f = this && this.__importDefault || function(e2) {
      return e2 && e2.__esModule ? e2 : {default: e2};
    };
    Object.defineProperty(t, "__esModule", {value: true});
    var o = r(297);
    var c = a(r(641));
    var l = f(r(209));
    var s = f(r(516));
    function useSWRInfinite() {
      var e2 = this;
      var t2 = [];
      for (var r2 = 0; r2 < arguments.length; r2++) {
        t2[r2] = arguments[r2];
      }
      var a2, f2, d = {};
      if (t2.length >= 1) {
        a2 = t2[0];
      }
      if (t2.length > 2) {
        f2 = t2[1];
        d = t2[2];
      } else {
        if (typeof t2[1] === "function") {
          f2 = t2[1];
        } else if (typeof t2[1] === "object") {
          d = t2[1];
        }
      }
      d = Object.assign({}, c.default, o.useContext(l.default), d);
      var v = d.initialSize, h = v === void 0 ? 1 : v, p = d.revalidateAll, y = p === void 0 ? false : p, b = d.persistSize, _ = b === void 0 ? false : b, m = d.fetcher, w = u(d, ["initialSize", "revalidateAll", "persistSize", "fetcher"]);
      if (typeof f2 === "undefined") {
        f2 = m;
      }
      var g = null;
      try {
        g = c.cache.serializeKey(a2(0, null))[0];
      } catch (e3) {
      }
      var O = o.useState(false), j = O[1];
      var x = null;
      if (g) {
        x = "context@" + g;
      }
      var S = null;
      var P;
      if (g) {
        S = "size@" + g;
        P = c.cache.get(S);
      }
      var V = o.useRef(P || h);
      var M = o.useRef(false);
      o.useEffect(function() {
        if (M.current) {
          if (!_) {
            V.current = h;
          }
        } else {
          M.current = true;
        }
      }, [g]);
      var D = o.useRef();
      var E = s.default(g ? ["many", g] : null, function() {
        return n(e2, void 0, void 0, function() {
          var e3, t3, r3, n2, u2, o2, l2, s2, v2, h2, p2;
          return i(this, function(i2) {
            switch (i2.label) {
              case 0:
                e3 = c.cache.get(x) || {}, t3 = e3.originalData, r3 = e3.force;
                n2 = [];
                u2 = null;
                o2 = 0;
                i2.label = 1;
              case 1:
                if (!(o2 < V.current))
                  return [3, 8];
                l2 = c.cache.serializeKey(a2(o2, u2)), s2 = l2[0], v2 = l2[1];
                if (!s2) {
                  return [3, 8];
                }
                h2 = c.cache.get(s2);
                p2 = y || r3 || typeof h2 === "undefined" || typeof r3 === "undefined" && o2 === 0 && typeof D.current !== "undefined" || t3 && !d.compare(t3[o2], h2);
                if (!p2)
                  return [3, 6];
                if (!(v2 !== null))
                  return [3, 3];
                return [4, f2.apply(void 0, v2)];
              case 2:
                h2 = i2.sent();
                return [3, 5];
              case 3:
                return [4, f2(s2)];
              case 4:
                h2 = i2.sent();
                i2.label = 5;
              case 5:
                c.cache.set(s2, h2);
                i2.label = 6;
              case 6:
                n2.push(h2);
                u2 = h2;
                i2.label = 7;
              case 7:
                ++o2;
                return [3, 1];
              case 8:
                c.cache.delete(x);
                return [2, n2];
            }
          });
        });
      }, w);
      o.useEffect(function() {
        D.current = E.data;
      }, [E.data]);
      var C = o.useCallback(function(e3, t3) {
        if (t3 === void 0) {
          t3 = true;
        }
        if (t3 && typeof e3 !== "undefined") {
          var r3 = D.current;
          c.cache.set(x, {originalData: r3, force: false});
        } else if (t3) {
          c.cache.set(x, {force: true});
        }
        return E.mutate(e3, t3);
      }, [x]);
      var I = V.current;
      var T = o.useCallback(function(e3) {
        if (typeof e3 === "function") {
          V.current = e3(V.current);
        } else if (typeof e3 === "number") {
          V.current = e3;
        }
        c.cache.set(S, V.current);
        j(function(e4) {
          return !e4;
        });
        return C(function(e4) {
          return e4;
        });
      }, [C, S]);
      var W = {size: I, setSize: T, mutate: C};
      Object.defineProperties(W, {error: {get: function() {
        return E.error;
      }, enumerable: true}, data: {get: function() {
        return E.data;
      }, enumerable: true}, revalidate: {get: function() {
        return E.revalidate;
      }, enumerable: true}, isValidating: {get: function() {
        return E.isValidating;
      }, enumerable: true}});
      return W;
    }
    t.useSWRInfinite = useSWRInfinite;
  }});
});

// node_modules/.pnpm/node-fetch@2.6.1/node_modules/node-fetch/lib/index.mjs
var require_lib11 = __commonJS((exports2) => {
  __markAsModule(exports2);
  __export(exports2, {
    FetchError: () => FetchError,
    Headers: () => Headers,
    Request: () => Request,
    Response: () => Response,
    default: () => lib_default
  });
  var import_stream = __toModule(require("stream"));
  var import_http = __toModule(require("http"));
  var import_url = __toModule(require("url"));
  var import_https = __toModule(require("https"));
  var import_zlib = __toModule(require("zlib"));
  var Readable = import_stream.default.Readable;
  var BUFFER = Symbol("buffer");
  var TYPE = Symbol("type");
  var Blob2 = class {
    constructor() {
      this[TYPE] = "";
      const blobParts = arguments[0];
      const options = arguments[1];
      const buffers = [];
      let size = 0;
      if (blobParts) {
        const a = blobParts;
        const length = Number(a.length);
        for (let i = 0; i < length; i++) {
          const element = a[i];
          let buffer;
          if (element instanceof Buffer) {
            buffer = element;
          } else if (ArrayBuffer.isView(element)) {
            buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
          } else if (element instanceof ArrayBuffer) {
            buffer = Buffer.from(element);
          } else if (element instanceof Blob2) {
            buffer = element[BUFFER];
          } else {
            buffer = Buffer.from(typeof element === "string" ? element : String(element));
          }
          size += buffer.length;
          buffers.push(buffer);
        }
      }
      this[BUFFER] = Buffer.concat(buffers);
      let type = options && options.type !== void 0 && String(options.type).toLowerCase();
      if (type && !/[^\u0020-\u007E]/.test(type)) {
        this[TYPE] = type;
      }
    }
    get size() {
      return this[BUFFER].length;
    }
    get type() {
      return this[TYPE];
    }
    text() {
      return Promise.resolve(this[BUFFER].toString());
    }
    arrayBuffer() {
      const buf = this[BUFFER];
      const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      return Promise.resolve(ab);
    }
    stream() {
      const readable = new Readable();
      readable._read = function() {
      };
      readable.push(this[BUFFER]);
      readable.push(null);
      return readable;
    }
    toString() {
      return "[object Blob]";
    }
    slice() {
      const size = this.size;
      const start = arguments[0];
      const end = arguments[1];
      let relativeStart, relativeEnd;
      if (start === void 0) {
        relativeStart = 0;
      } else if (start < 0) {
        relativeStart = Math.max(size + start, 0);
      } else {
        relativeStart = Math.min(start, size);
      }
      if (end === void 0) {
        relativeEnd = size;
      } else if (end < 0) {
        relativeEnd = Math.max(size + end, 0);
      } else {
        relativeEnd = Math.min(end, size);
      }
      const span = Math.max(relativeEnd - relativeStart, 0);
      const buffer = this[BUFFER];
      const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
      const blob = new Blob2([], {type: arguments[2]});
      blob[BUFFER] = slicedBuffer;
      return blob;
    }
  };
  Object.defineProperties(Blob2.prototype, {
    size: {enumerable: true},
    type: {enumerable: true},
    slice: {enumerable: true}
  });
  Object.defineProperty(Blob2.prototype, Symbol.toStringTag, {
    value: "Blob",
    writable: false,
    enumerable: false,
    configurable: true
  });
  function FetchError(message, type, systemError) {
    Error.call(this, message);
    this.message = message;
    this.type = type;
    if (systemError) {
      this.code = this.errno = systemError.code;
    }
    Error.captureStackTrace(this, this.constructor);
  }
  FetchError.prototype = Object.create(Error.prototype);
  FetchError.prototype.constructor = FetchError;
  FetchError.prototype.name = "FetchError";
  var convert;
  try {
    convert = require("encoding").convert;
  } catch (e) {
  }
  var INTERNALS = Symbol("Body internals");
  var PassThrough = import_stream.default.PassThrough;
  function Body(body) {
    var _this = this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
    let size = _ref$size === void 0 ? 0 : _ref$size;
    var _ref$timeout = _ref.timeout;
    let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
    if (body == null) {
      body = null;
    } else if (isURLSearchParams(body)) {
      body = Buffer.from(body.toString());
    } else if (isBlob(body))
      ;
    else if (Buffer.isBuffer(body))
      ;
    else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof import_stream.default)
      ;
    else {
      body = Buffer.from(String(body));
    }
    this[INTERNALS] = {
      body,
      disturbed: false,
      error: null
    };
    this.size = size;
    this.timeout = timeout;
    if (body instanceof import_stream.default) {
      body.on("error", function(err) {
        const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
        _this[INTERNALS].error = error;
      });
    }
  }
  Body.prototype = {
    get body() {
      return this[INTERNALS].body;
    },
    get bodyUsed() {
      return this[INTERNALS].disturbed;
    },
    arrayBuffer() {
      return consumeBody.call(this).then(function(buf) {
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      });
    },
    blob() {
      let ct = this.headers && this.headers.get("content-type") || "";
      return consumeBody.call(this).then(function(buf) {
        return Object.assign(new Blob2([], {
          type: ct.toLowerCase()
        }), {
          [BUFFER]: buf
        });
      });
    },
    json() {
      var _this2 = this;
      return consumeBody.call(this).then(function(buffer) {
        try {
          return JSON.parse(buffer.toString());
        } catch (err) {
          return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
        }
      });
    },
    text() {
      return consumeBody.call(this).then(function(buffer) {
        return buffer.toString();
      });
    },
    buffer() {
      return consumeBody.call(this);
    },
    textConverted() {
      var _this3 = this;
      return consumeBody.call(this).then(function(buffer) {
        return convertBody(buffer, _this3.headers);
      });
    }
  };
  Object.defineProperties(Body.prototype, {
    body: {enumerable: true},
    bodyUsed: {enumerable: true},
    arrayBuffer: {enumerable: true},
    blob: {enumerable: true},
    json: {enumerable: true},
    text: {enumerable: true}
  });
  Body.mixIn = function(proto) {
    for (const name of Object.getOwnPropertyNames(Body.prototype)) {
      if (!(name in proto)) {
        const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
        Object.defineProperty(proto, name, desc);
      }
    }
  };
  function consumeBody() {
    var _this4 = this;
    if (this[INTERNALS].disturbed) {
      return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
    }
    this[INTERNALS].disturbed = true;
    if (this[INTERNALS].error) {
      return Body.Promise.reject(this[INTERNALS].error);
    }
    let body = this.body;
    if (body === null) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    if (isBlob(body)) {
      body = body.stream();
    }
    if (Buffer.isBuffer(body)) {
      return Body.Promise.resolve(body);
    }
    if (!(body instanceof import_stream.default)) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    let accum = [];
    let accumBytes = 0;
    let abort = false;
    return new Body.Promise(function(resolve, reject) {
      let resTimeout;
      if (_this4.timeout) {
        resTimeout = setTimeout(function() {
          abort = true;
          reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
        }, _this4.timeout);
      }
      body.on("error", function(err) {
        if (err.name === "AbortError") {
          abort = true;
          reject(err);
        } else {
          reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
        }
      });
      body.on("data", function(chunk) {
        if (abort || chunk === null) {
          return;
        }
        if (_this4.size && accumBytes + chunk.length > _this4.size) {
          abort = true;
          reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
          return;
        }
        accumBytes += chunk.length;
        accum.push(chunk);
      });
      body.on("end", function() {
        if (abort) {
          return;
        }
        clearTimeout(resTimeout);
        try {
          resolve(Buffer.concat(accum, accumBytes));
        } catch (err) {
          reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
        }
      });
    });
  }
  function convertBody(buffer, headers) {
    if (typeof convert !== "function") {
      throw new Error("The package `encoding` must be installed to use the textConverted() function");
    }
    const ct = headers.get("content-type");
    let charset = "utf-8";
    let res, str;
    if (ct) {
      res = /charset=([^;]*)/i.exec(ct);
    }
    str = buffer.slice(0, 1024).toString();
    if (!res && str) {
      res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
    }
    if (!res && str) {
      res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
      if (!res) {
        res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
        if (res) {
          res.pop();
        }
      }
      if (res) {
        res = /charset=(.*)/i.exec(res.pop());
      }
    }
    if (!res && str) {
      res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
    }
    if (res) {
      charset = res.pop();
      if (charset === "gb2312" || charset === "gbk") {
        charset = "gb18030";
      }
    }
    return convert(buffer, "UTF-8", charset).toString();
  }
  function isURLSearchParams(obj) {
    if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
      return false;
    }
    return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
  }
  function isBlob(obj) {
    return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
  }
  function clone(instance2) {
    let p1, p2;
    let body = instance2.body;
    if (instance2.bodyUsed) {
      throw new Error("cannot clone body after it is used");
    }
    if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
      p1 = new PassThrough();
      p2 = new PassThrough();
      body.pipe(p1);
      body.pipe(p2);
      instance2[INTERNALS].body = p1;
      body = p2;
    }
    return body;
  }
  function extractContentType(body) {
    if (body === null) {
      return null;
    } else if (typeof body === "string") {
      return "text/plain;charset=UTF-8";
    } else if (isURLSearchParams(body)) {
      return "application/x-www-form-urlencoded;charset=UTF-8";
    } else if (isBlob(body)) {
      return body.type || null;
    } else if (Buffer.isBuffer(body)) {
      return null;
    } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      return null;
    } else if (ArrayBuffer.isView(body)) {
      return null;
    } else if (typeof body.getBoundary === "function") {
      return `multipart/form-data;boundary=${body.getBoundary()}`;
    } else if (body instanceof import_stream.default) {
      return null;
    } else {
      return "text/plain;charset=UTF-8";
    }
  }
  function getTotalBytes(instance2) {
    const body = instance2.body;
    if (body === null) {
      return 0;
    } else if (isBlob(body)) {
      return body.size;
    } else if (Buffer.isBuffer(body)) {
      return body.length;
    } else if (body && typeof body.getLengthSync === "function") {
      if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
        return body.getLengthSync();
      }
      return null;
    } else {
      return null;
    }
  }
  function writeToStream(dest, instance2) {
    const body = instance2.body;
    if (body === null) {
      dest.end();
    } else if (isBlob(body)) {
      body.stream().pipe(dest);
    } else if (Buffer.isBuffer(body)) {
      dest.write(body);
      dest.end();
    } else {
      body.pipe(dest);
    }
  }
  Body.Promise = global.Promise;
  var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
  var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
  function validateName(name) {
    name = `${name}`;
    if (invalidTokenRegex.test(name) || name === "") {
      throw new TypeError(`${name} is not a legal HTTP header name`);
    }
  }
  function validateValue(value) {
    value = `${value}`;
    if (invalidHeaderCharRegex.test(value)) {
      throw new TypeError(`${value} is not a legal HTTP header value`);
    }
  }
  function find(map, name) {
    name = name.toLowerCase();
    for (const key in map) {
      if (key.toLowerCase() === name) {
        return key;
      }
    }
    return void 0;
  }
  var MAP = Symbol("map");
  var Headers = class {
    constructor() {
      let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
      this[MAP] = Object.create(null);
      if (init instanceof Headers) {
        const rawHeaders = init.raw();
        const headerNames = Object.keys(rawHeaders);
        for (const headerName of headerNames) {
          for (const value of rawHeaders[headerName]) {
            this.append(headerName, value);
          }
        }
        return;
      }
      if (init == null)
        ;
      else if (typeof init === "object") {
        const method = init[Symbol.iterator];
        if (method != null) {
          if (typeof method !== "function") {
            throw new TypeError("Header pairs must be iterable");
          }
          const pairs = [];
          for (const pair of init) {
            if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
              throw new TypeError("Each header pair must be iterable");
            }
            pairs.push(Array.from(pair));
          }
          for (const pair of pairs) {
            if (pair.length !== 2) {
              throw new TypeError("Each header pair must be a name/value tuple");
            }
            this.append(pair[0], pair[1]);
          }
        } else {
          for (const key of Object.keys(init)) {
            const value = init[key];
            this.append(key, value);
          }
        }
      } else {
        throw new TypeError("Provided initializer must be an object");
      }
    }
    get(name) {
      name = `${name}`;
      validateName(name);
      const key = find(this[MAP], name);
      if (key === void 0) {
        return null;
      }
      return this[MAP][key].join(", ");
    }
    forEach(callback) {
      let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
      let pairs = getHeaders(this);
      let i = 0;
      while (i < pairs.length) {
        var _pairs$i = pairs[i];
        const name = _pairs$i[0], value = _pairs$i[1];
        callback.call(thisArg, value, name, this);
        pairs = getHeaders(this);
        i++;
      }
    }
    set(name, value) {
      name = `${name}`;
      value = `${value}`;
      validateName(name);
      validateValue(value);
      const key = find(this[MAP], name);
      this[MAP][key !== void 0 ? key : name] = [value];
    }
    append(name, value) {
      name = `${name}`;
      value = `${value}`;
      validateName(name);
      validateValue(value);
      const key = find(this[MAP], name);
      if (key !== void 0) {
        this[MAP][key].push(value);
      } else {
        this[MAP][name] = [value];
      }
    }
    has(name) {
      name = `${name}`;
      validateName(name);
      return find(this[MAP], name) !== void 0;
    }
    delete(name) {
      name = `${name}`;
      validateName(name);
      const key = find(this[MAP], name);
      if (key !== void 0) {
        delete this[MAP][key];
      }
    }
    raw() {
      return this[MAP];
    }
    keys() {
      return createHeadersIterator(this, "key");
    }
    values() {
      return createHeadersIterator(this, "value");
    }
    [Symbol.iterator]() {
      return createHeadersIterator(this, "key+value");
    }
  };
  Headers.prototype.entries = Headers.prototype[Symbol.iterator];
  Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
    value: "Headers",
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Headers.prototype, {
    get: {enumerable: true},
    forEach: {enumerable: true},
    set: {enumerable: true},
    append: {enumerable: true},
    has: {enumerable: true},
    delete: {enumerable: true},
    keys: {enumerable: true},
    values: {enumerable: true},
    entries: {enumerable: true}
  });
  function getHeaders(headers) {
    let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
    const keys = Object.keys(headers[MAP]).sort();
    return keys.map(kind === "key" ? function(k) {
      return k.toLowerCase();
    } : kind === "value" ? function(k) {
      return headers[MAP][k].join(", ");
    } : function(k) {
      return [k.toLowerCase(), headers[MAP][k].join(", ")];
    });
  }
  var INTERNAL = Symbol("internal");
  function createHeadersIterator(target, kind) {
    const iterator = Object.create(HeadersIteratorPrototype);
    iterator[INTERNAL] = {
      target,
      kind,
      index: 0
    };
    return iterator;
  }
  var HeadersIteratorPrototype = Object.setPrototypeOf({
    next() {
      if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
        throw new TypeError("Value of `this` is not a HeadersIterator");
      }
      var _INTERNAL = this[INTERNAL];
      const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
      const values = getHeaders(target, kind);
      const len = values.length;
      if (index >= len) {
        return {
          value: void 0,
          done: true
        };
      }
      this[INTERNAL].index = index + 1;
      return {
        value: values[index],
        done: false
      };
    }
  }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
  Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
    value: "HeadersIterator",
    writable: false,
    enumerable: false,
    configurable: true
  });
  function exportNodeCompatibleHeaders(headers) {
    const obj = Object.assign({__proto__: null}, headers[MAP]);
    const hostHeaderKey = find(headers[MAP], "Host");
    if (hostHeaderKey !== void 0) {
      obj[hostHeaderKey] = obj[hostHeaderKey][0];
    }
    return obj;
  }
  function createHeadersLenient(obj) {
    const headers = new Headers();
    for (const name of Object.keys(obj)) {
      if (invalidTokenRegex.test(name)) {
        continue;
      }
      if (Array.isArray(obj[name])) {
        for (const val of obj[name]) {
          if (invalidHeaderCharRegex.test(val)) {
            continue;
          }
          if (headers[MAP][name] === void 0) {
            headers[MAP][name] = [val];
          } else {
            headers[MAP][name].push(val);
          }
        }
      } else if (!invalidHeaderCharRegex.test(obj[name])) {
        headers[MAP][name] = [obj[name]];
      }
    }
    return headers;
  }
  var INTERNALS$1 = Symbol("Response internals");
  var STATUS_CODES = import_http.default.STATUS_CODES;
  var Response = class {
    constructor() {
      let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      Body.call(this, body, opts);
      const status = opts.status || 200;
      const headers = new Headers(opts.headers);
      if (body != null && !headers.has("Content-Type")) {
        const contentType = extractContentType(body);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      this[INTERNALS$1] = {
        url: opts.url,
        status,
        statusText: opts.statusText || STATUS_CODES[status],
        headers,
        counter: opts.counter
      };
    }
    get url() {
      return this[INTERNALS$1].url || "";
    }
    get status() {
      return this[INTERNALS$1].status;
    }
    get ok() {
      return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
    }
    get redirected() {
      return this[INTERNALS$1].counter > 0;
    }
    get statusText() {
      return this[INTERNALS$1].statusText;
    }
    get headers() {
      return this[INTERNALS$1].headers;
    }
    clone() {
      return new Response(clone(this), {
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok,
        redirected: this.redirected
      });
    }
  };
  Body.mixIn(Response.prototype);
  Object.defineProperties(Response.prototype, {
    url: {enumerable: true},
    status: {enumerable: true},
    ok: {enumerable: true},
    redirected: {enumerable: true},
    statusText: {enumerable: true},
    headers: {enumerable: true},
    clone: {enumerable: true}
  });
  Object.defineProperty(Response.prototype, Symbol.toStringTag, {
    value: "Response",
    writable: false,
    enumerable: false,
    configurable: true
  });
  var INTERNALS$2 = Symbol("Request internals");
  var parse_url = import_url.default.parse;
  var format_url = import_url.default.format;
  var streamDestructionSupported = "destroy" in import_stream.default.Readable.prototype;
  function isRequest(input) {
    return typeof input === "object" && typeof input[INTERNALS$2] === "object";
  }
  function isAbortSignal(signal) {
    const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
    return !!(proto && proto.constructor.name === "AbortSignal");
  }
  var Request = class {
    constructor(input) {
      let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      let parsedURL;
      if (!isRequest(input)) {
        if (input && input.href) {
          parsedURL = parse_url(input.href);
        } else {
          parsedURL = parse_url(`${input}`);
        }
        input = {};
      } else {
        parsedURL = parse_url(input.url);
      }
      let method = init.method || input.method || "GET";
      method = method.toUpperCase();
      if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
        throw new TypeError("Request with GET/HEAD method cannot have body");
      }
      let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
      Body.call(this, inputBody, {
        timeout: init.timeout || input.timeout || 0,
        size: init.size || input.size || 0
      });
      const headers = new Headers(init.headers || input.headers || {});
      if (inputBody != null && !headers.has("Content-Type")) {
        const contentType = extractContentType(inputBody);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      let signal = isRequest(input) ? input.signal : null;
      if ("signal" in init)
        signal = init.signal;
      if (signal != null && !isAbortSignal(signal)) {
        throw new TypeError("Expected signal to be an instanceof AbortSignal");
      }
      this[INTERNALS$2] = {
        method,
        redirect: init.redirect || input.redirect || "follow",
        headers,
        parsedURL,
        signal
      };
      this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
      this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
      this.counter = init.counter || input.counter || 0;
      this.agent = init.agent || input.agent;
    }
    get method() {
      return this[INTERNALS$2].method;
    }
    get url() {
      return format_url(this[INTERNALS$2].parsedURL);
    }
    get headers() {
      return this[INTERNALS$2].headers;
    }
    get redirect() {
      return this[INTERNALS$2].redirect;
    }
    get signal() {
      return this[INTERNALS$2].signal;
    }
    clone() {
      return new Request(this);
    }
  };
  Body.mixIn(Request.prototype);
  Object.defineProperty(Request.prototype, Symbol.toStringTag, {
    value: "Request",
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Request.prototype, {
    method: {enumerable: true},
    url: {enumerable: true},
    headers: {enumerable: true},
    redirect: {enumerable: true},
    clone: {enumerable: true},
    signal: {enumerable: true}
  });
  function getNodeRequestOptions(request) {
    const parsedURL = request[INTERNALS$2].parsedURL;
    const headers = new Headers(request[INTERNALS$2].headers);
    if (!headers.has("Accept")) {
      headers.set("Accept", "*/*");
    }
    if (!parsedURL.protocol || !parsedURL.hostname) {
      throw new TypeError("Only absolute URLs are supported");
    }
    if (!/^https?:$/.test(parsedURL.protocol)) {
      throw new TypeError("Only HTTP(S) protocols are supported");
    }
    if (request.signal && request.body instanceof import_stream.default.Readable && !streamDestructionSupported) {
      throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
    }
    let contentLengthValue = null;
    if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
      contentLengthValue = "0";
    }
    if (request.body != null) {
      const totalBytes = getTotalBytes(request);
      if (typeof totalBytes === "number") {
        contentLengthValue = String(totalBytes);
      }
    }
    if (contentLengthValue) {
      headers.set("Content-Length", contentLengthValue);
    }
    if (!headers.has("User-Agent")) {
      headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
    }
    if (request.compress && !headers.has("Accept-Encoding")) {
      headers.set("Accept-Encoding", "gzip,deflate");
    }
    let agent = request.agent;
    if (typeof agent === "function") {
      agent = agent(parsedURL);
    }
    if (!headers.has("Connection") && !agent) {
      headers.set("Connection", "close");
    }
    return Object.assign({}, parsedURL, {
      method: request.method,
      headers: exportNodeCompatibleHeaders(headers),
      agent
    });
  }
  function AbortError(message) {
    Error.call(this, message);
    this.type = "aborted";
    this.message = message;
    Error.captureStackTrace(this, this.constructor);
  }
  AbortError.prototype = Object.create(Error.prototype);
  AbortError.prototype.constructor = AbortError;
  AbortError.prototype.name = "AbortError";
  var PassThrough$1 = import_stream.default.PassThrough;
  var resolve_url = import_url.default.resolve;
  function fetch3(url, opts) {
    if (!fetch3.Promise) {
      throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
    }
    Body.Promise = fetch3.Promise;
    return new fetch3.Promise(function(resolve, reject) {
      const request = new Request(url, opts);
      const options = getNodeRequestOptions(request);
      const send = (options.protocol === "https:" ? import_https.default : import_http.default).request;
      const signal = request.signal;
      let response = null;
      const abort = function abort2() {
        let error = new AbortError("The user aborted a request.");
        reject(error);
        if (request.body && request.body instanceof import_stream.default.Readable) {
          request.body.destroy(error);
        }
        if (!response || !response.body)
          return;
        response.body.emit("error", error);
      };
      if (signal && signal.aborted) {
        abort();
        return;
      }
      const abortAndFinalize = function abortAndFinalize2() {
        abort();
        finalize();
      };
      const req = send(options);
      let reqTimeout;
      if (signal) {
        signal.addEventListener("abort", abortAndFinalize);
      }
      function finalize() {
        req.abort();
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
        clearTimeout(reqTimeout);
      }
      if (request.timeout) {
        req.once("socket", function(socket) {
          reqTimeout = setTimeout(function() {
            reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
            finalize();
          }, request.timeout);
        });
      }
      req.on("error", function(err) {
        reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
        finalize();
      });
      req.on("response", function(res) {
        clearTimeout(reqTimeout);
        const headers = createHeadersLenient(res.headers);
        if (fetch3.isRedirect(res.statusCode)) {
          const location = headers.get("Location");
          const locationURL = location === null ? null : resolve_url(request.url, location);
          switch (request.redirect) {
            case "error":
              reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
              finalize();
              return;
            case "manual":
              if (locationURL !== null) {
                try {
                  headers.set("Location", locationURL);
                } catch (err) {
                  reject(err);
                }
              }
              break;
            case "follow":
              if (locationURL === null) {
                break;
              }
              if (request.counter >= request.follow) {
                reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                finalize();
                return;
              }
              const requestOpts = {
                headers: new Headers(request.headers),
                follow: request.follow,
                counter: request.counter + 1,
                agent: request.agent,
                compress: request.compress,
                method: request.method,
                body: request.body,
                signal: request.signal,
                timeout: request.timeout,
                size: request.size
              };
              if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                finalize();
                return;
              }
              if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                requestOpts.method = "GET";
                requestOpts.body = void 0;
                requestOpts.headers.delete("content-length");
              }
              resolve(fetch3(new Request(locationURL, requestOpts)));
              finalize();
              return;
          }
        }
        res.once("end", function() {
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
        });
        let body = res.pipe(new PassThrough$1());
        const response_options = {
          url: request.url,
          status: res.statusCode,
          statusText: res.statusMessage,
          headers,
          size: request.size,
          timeout: request.timeout,
          counter: request.counter
        };
        const codings = headers.get("Content-Encoding");
        if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
          response = new Response(body, response_options);
          resolve(response);
          return;
        }
        const zlibOptions = {
          flush: import_zlib.default.Z_SYNC_FLUSH,
          finishFlush: import_zlib.default.Z_SYNC_FLUSH
        };
        if (codings == "gzip" || codings == "x-gzip") {
          body = body.pipe(import_zlib.default.createGunzip(zlibOptions));
          response = new Response(body, response_options);
          resolve(response);
          return;
        }
        if (codings == "deflate" || codings == "x-deflate") {
          const raw = res.pipe(new PassThrough$1());
          raw.once("data", function(chunk) {
            if ((chunk[0] & 15) === 8) {
              body = body.pipe(import_zlib.default.createInflate());
            } else {
              body = body.pipe(import_zlib.default.createInflateRaw());
            }
            response = new Response(body, response_options);
            resolve(response);
          });
          return;
        }
        if (codings == "br" && typeof import_zlib.default.createBrotliDecompress === "function") {
          body = body.pipe(import_zlib.default.createBrotliDecompress());
          response = new Response(body, response_options);
          resolve(response);
          return;
        }
        response = new Response(body, response_options);
        resolve(response);
      });
      writeToStream(req, request);
    });
  }
  fetch3.isRedirect = function(code) {
    return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
  };
  fetch3.Promise = global.Promise;
  var lib_default = fetch3;
});

// node_modules/.pnpm/agentkeepalive@3.4.1/node_modules/agentkeepalive/lib/_http_agent.js
var require_http_agent = __commonJS((exports2) => {
  "use strict";
  var net = require("net");
  var util = require("util");
  var EventEmitter = require("events");
  var debug = util.debuglog("http");
  function Agent(options) {
    if (!(this instanceof Agent))
      return new Agent(options);
    EventEmitter.call(this);
    var self2 = this;
    self2.defaultPort = 80;
    self2.protocol = "http:";
    self2.options = util._extend({}, options);
    self2.options.path = null;
    self2.requests = {};
    self2.sockets = {};
    self2.freeSockets = {};
    self2.keepAliveMsecs = self2.options.keepAliveMsecs || 1e3;
    self2.keepAlive = self2.options.keepAlive || false;
    self2.maxSockets = self2.options.maxSockets || Agent.defaultMaxSockets;
    self2.maxFreeSockets = self2.options.maxFreeSockets || 256;
    self2.freeSocketKeepAliveTimeout = self2.options.freeSocketKeepAliveTimeout || 0;
    self2.timeout = self2.options.timeout || 0;
    this.socketActiveTTL = this.options.socketActiveTTL || null;
    self2.on("free", function(socket, options2) {
      var name = self2.getName(options2);
      debug("agent.on(free)", name);
      if (socket.writable && self2.requests[name] && self2.requests[name].length) {
        debug("continue handle next request");
        self2.requests[name].shift().onSocket(socket);
        if (self2.requests[name].length === 0) {
          delete self2.requests[name];
        }
      } else {
        var req = socket._httpMessage;
        if (req && req.shouldKeepAlive && socket.writable && self2.keepAlive) {
          var freeSockets = self2.freeSockets[name];
          var freeLen = freeSockets ? freeSockets.length : 0;
          var count = freeLen;
          if (self2.sockets[name])
            count += self2.sockets[name].length;
          if (count > self2.maxSockets || freeLen >= self2.maxFreeSockets) {
            socket.destroy();
          } else {
            freeSockets = freeSockets || [];
            self2.freeSockets[name] = freeSockets;
            socket.setKeepAlive(true, self2.keepAliveMsecs);
            socket.unref();
            socket._httpMessage = null;
            self2.removeSocket(socket, options2);
            freeSockets.push(socket);
            if (socket.listeners("error").length === 0) {
              socket.once("error", freeSocketErrorListener);
            }
            const freeSocketKeepAliveTimeout = socket.freeSocketKeepAliveTimeout || self2.freeSocketKeepAliveTimeout;
            socket.setTimeout(freeSocketKeepAliveTimeout);
            debug(`push to free socket queue and wait for ${freeSocketKeepAliveTimeout}ms`);
          }
        } else {
          socket.destroy();
        }
      }
    });
  }
  util.inherits(Agent, EventEmitter);
  exports2.Agent = Agent;
  function freeSocketErrorListener(err) {
    var socket = this;
    debug("SOCKET ERROR on FREE socket:", err.message, err.stack);
    socket.destroy();
    socket.emit("agentRemove");
  }
  Agent.defaultMaxSockets = Infinity;
  Agent.prototype.createConnection = net.createConnection;
  Agent.prototype.getName = function getName(options) {
    var name = options.host || "localhost";
    name += ":";
    if (options.port)
      name += options.port;
    name += ":";
    if (options.localAddress)
      name += options.localAddress;
    if (options.family === 4 || options.family === 6)
      name += ":" + options.family;
    return name;
  };
  function handleSocketCreation(req) {
    return function(err, newSocket) {
      if (err) {
        process.nextTick(function() {
          req.emit("error", err);
        });
        return;
      }
      req.onSocket(newSocket);
    };
  }
  Agent.prototype.addRequest = function addRequest(req, options, port, localAddress) {
    if (typeof options === "string") {
      options = {
        host: options,
        port,
        localAddress
      };
    }
    options = util._extend({}, options);
    options = util._extend(options, this.options);
    if (!options.servername)
      options.servername = calculateServerName(options, req);
    var name = this.getName(options);
    if (!this.sockets[name]) {
      this.sockets[name] = [];
    }
    var freeLen = this.freeSockets[name] ? this.freeSockets[name].length : 0;
    var sockLen = freeLen + this.sockets[name].length;
    if (freeLen) {
      var socket = this.freeSockets[name].shift();
      debug("have free socket");
      socket.removeListener("error", freeSocketErrorListener);
      socket.setTimeout(this.timeout);
      if (this.socketActiveTTL && Date.now() - socket.createdTime > this.socketActiveTTL) {
        debug(`socket ${socket.createdTime} expired`);
        socket.destroy();
        return this.createSocket(req, options, handleSocketCreation(req));
      }
      if (!this.freeSockets[name].length)
        delete this.freeSockets[name];
      socket.ref();
      req.onSocket(socket);
      this.sockets[name].push(socket);
    } else if (sockLen < this.maxSockets) {
      debug("call onSocket", sockLen, freeLen);
      this.createSocket(req, options, handleSocketCreation(req));
    } else {
      debug("wait for socket");
      if (!this.requests[name]) {
        this.requests[name] = [];
      }
      this.requests[name].push(req);
    }
  };
  Agent.prototype.createSocket = function createSocket(req, options, cb) {
    var self2 = this;
    options = util._extend({}, options);
    options = util._extend(options, self2.options);
    if (!options.servername)
      options.servername = calculateServerName(options, req);
    var name = self2.getName(options);
    options._agentKey = name;
    debug("createConnection", name, options);
    options.encoding = null;
    var called = false;
    const newSocket = self2.createConnection(options, oncreate);
    if (newSocket) {
      oncreate(null, Object.assign(newSocket, {createdTime: Date.now()}));
    }
    function oncreate(err, s) {
      if (called)
        return;
      called = true;
      if (err)
        return cb(err);
      if (!self2.sockets[name]) {
        self2.sockets[name] = [];
      }
      self2.sockets[name].push(s);
      debug("sockets", name, self2.sockets[name].length);
      function onFree() {
        self2.emit("free", s, options);
      }
      s.on("free", onFree);
      function onClose(err2) {
        debug("CLIENT socket onClose");
        self2.removeSocket(s, options);
        self2.emit("close");
      }
      s.on("close", onClose);
      function onTimeout() {
        debug("CLIENT socket onTimeout");
        s.destroy();
        self2.removeSocket(s, options);
        self2.emit("timeout");
      }
      s.on("timeout", onTimeout);
      s.setTimeout(self2.timeout);
      function onRemove() {
        debug("CLIENT socket onRemove");
        self2.removeSocket(s, options);
        s.removeListener("close", onClose);
        s.removeListener("free", onFree);
        s.removeListener("agentRemove", onRemove);
        s.setTimeout(0, onTimeout);
      }
      s.on("agentRemove", onRemove);
      cb(null, s);
    }
  };
  function calculateServerName(options, req) {
    let servername = options.host;
    const hostHeader = req.getHeader("host");
    if (hostHeader) {
      if (hostHeader.startsWith("[")) {
        const index = hostHeader.indexOf("]");
        if (index === -1) {
          servername = hostHeader;
        } else {
          servername = hostHeader.substr(1, index - 1);
        }
      } else {
        servername = hostHeader.split(":", 1)[0];
      }
    }
    return servername;
  }
  Agent.prototype.removeSocket = function removeSocket(s, options) {
    var name = this.getName(options);
    debug("removeSocket", name, "writable:", s.writable);
    var sets = [this.sockets];
    if (!s.writable)
      sets.push(this.freeSockets);
    for (var sk = 0; sk < sets.length; sk++) {
      var sockets = sets[sk];
      if (sockets[name]) {
        var index = sockets[name].indexOf(s);
        if (index !== -1) {
          sockets[name].splice(index, 1);
          if (sockets[name].length === 0)
            delete sockets[name];
        }
      }
    }
    var freeLen = this.freeSockets[name] ? this.freeSockets[name].length : 0;
    var sockLen = freeLen + this.sockets[name] ? this.sockets[name].length : 0;
    if (this.requests[name] && this.requests[name].length && sockLen < this.maxSockets) {
      debug("removeSocket, have a request, make a socket");
      var req = this.requests[name][0];
      this.createSocket(req, options, function(err, newSocket) {
        if (err) {
          process.nextTick(function() {
            req.emit("error", err);
          });
          return;
        }
        newSocket.emit("free");
      });
    }
  };
  Agent.prototype.destroy = function destroy() {
    var sets = [this.freeSockets, this.sockets];
    for (var s = 0; s < sets.length; s++) {
      var set = sets[s];
      var keys = Object.keys(set);
      for (var v = 0; v < keys.length; v++) {
        var setName = set[keys[v]];
        for (var n = 0; n < setName.length; n++) {
          setName[n].destroy();
        }
      }
    }
  };
  exports2.globalAgent = new Agent();
});

// node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js
var require_ms = __commonJS((exports2, module2) => {
  var s = 1e3;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  module2.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse2(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse2(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return void 0;
    }
  }
  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }
  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  }
  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
  }
});

// node_modules/.pnpm/humanize-ms@1.2.1/node_modules/humanize-ms/index.js
var require_humanize_ms = __commonJS((exports2, module2) => {
  /*!
   * humanize-ms - index.js
   * Copyright(c) 2014 dead_horse <dead_horse@qq.com>
   * MIT Licensed
   */
  "use strict";
  var util = require("util");
  var ms = require_ms();
  module2.exports = function(t) {
    if (typeof t === "number")
      return t;
    var r = ms(t);
    if (r === void 0) {
      var err = new Error(util.format("humanize-ms(%j) result undefined", t));
      console.warn(err.stack);
    }
    return r;
  };
});

// node_modules/.pnpm/agentkeepalive@3.4.1/node_modules/agentkeepalive/lib/agent.js
var require_agent = __commonJS((exports2, module2) => {
  "use strict";
  var OriginalAgent = require_http_agent().Agent;
  var ms = require_humanize_ms();
  var Agent = class extends OriginalAgent {
    constructor(options) {
      options = options || {};
      options.keepAlive = options.keepAlive !== false;
      if (options.freeSocketKeepAliveTimeout === void 0) {
        options.freeSocketKeepAliveTimeout = 15e3;
      }
      if (options.keepAliveTimeout) {
        options.freeSocketKeepAliveTimeout = options.keepAliveTimeout;
      }
      options.freeSocketKeepAliveTimeout = ms(options.freeSocketKeepAliveTimeout);
      if (options.timeout === void 0) {
        options.timeout = options.freeSocketKeepAliveTimeout * 2;
        if (options.timeout < 3e4) {
          options.timeout = 3e4;
        }
      }
      options.timeout = ms(options.timeout);
      super(options);
      this.createSocketCount = 0;
      this.createSocketCountLastCheck = 0;
      this.createSocketErrorCount = 0;
      this.createSocketErrorCountLastCheck = 0;
      this.closeSocketCount = 0;
      this.closeSocketCountLastCheck = 0;
      this.errorSocketCount = 0;
      this.errorSocketCountLastCheck = 0;
      this.requestCount = 0;
      this.requestCountLastCheck = 0;
      this.timeoutSocketCount = 0;
      this.timeoutSocketCountLastCheck = 0;
      this.on("free", (s) => {
        this.requestCount++;
        s.lastFreeTime = Date.now();
      });
      this.on("timeout", () => {
        this.timeoutSocketCount++;
      });
      this.on("close", () => {
        this.closeSocketCount++;
      });
      this.on("error", () => {
        this.errorSocketCount++;
      });
    }
    createSocket(req, options, cb) {
      super.createSocket(req, options, (err, socket) => {
        if (err) {
          this.createSocketErrorCount++;
          return cb(err);
        }
        if (this.keepAlive) {
          socket.setNoDelay(true);
        }
        this.createSocketCount++;
        cb(null, socket);
      });
    }
    get statusChanged() {
      const changed = this.createSocketCount !== this.createSocketCountLastCheck || this.createSocketErrorCount !== this.createSocketErrorCountLastCheck || this.closeSocketCount !== this.closeSocketCountLastCheck || this.errorSocketCount !== this.errorSocketCountLastCheck || this.timeoutSocketCount !== this.timeoutSocketCountLastCheck || this.requestCount !== this.requestCountLastCheck;
      if (changed) {
        this.createSocketCountLastCheck = this.createSocketCount;
        this.createSocketErrorCountLastCheck = this.createSocketErrorCount;
        this.closeSocketCountLastCheck = this.closeSocketCount;
        this.errorSocketCountLastCheck = this.errorSocketCount;
        this.timeoutSocketCountLastCheck = this.timeoutSocketCount;
        this.requestCountLastCheck = this.requestCount;
      }
      return changed;
    }
    getCurrentStatus() {
      return {
        createSocketCount: this.createSocketCount,
        createSocketErrorCount: this.createSocketErrorCount,
        closeSocketCount: this.closeSocketCount,
        errorSocketCount: this.errorSocketCount,
        timeoutSocketCount: this.timeoutSocketCount,
        requestCount: this.requestCount,
        freeSockets: inspect(this.freeSockets),
        sockets: inspect(this.sockets),
        requests: inspect(this.requests)
      };
    }
  };
  module2.exports = Agent;
  function inspect(obj) {
    const res = {};
    for (const key in obj) {
      res[key] = obj[key].length;
    }
    return res;
  }
});

// node_modules/.pnpm/agentkeepalive@3.4.1/node_modules/agentkeepalive/lib/https_agent.js
var require_https_agent = __commonJS((exports2, module2) => {
  "use strict";
  var https = require("https");
  var HttpAgent = require_agent();
  var OriginalHttpsAgent = https.Agent;
  var HttpsAgent = class extends HttpAgent {
    constructor(options) {
      super(options);
      this.defaultPort = 443;
      this.protocol = "https:";
      this.maxCachedSessions = this.options.maxCachedSessions;
      if (this.maxCachedSessions === void 0) {
        this.maxCachedSessions = 100;
      }
      this._sessionCache = {
        map: {},
        list: []
      };
    }
  };
  [
    "createConnection",
    "getName",
    "_getSession",
    "_cacheSession",
    "_evictSession"
  ].forEach(function(method) {
    if (typeof OriginalHttpsAgent.prototype[method] === "function") {
      HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];
    }
  });
  module2.exports = HttpsAgent;
});

// node_modules/.pnpm/agentkeepalive@3.4.1/node_modules/agentkeepalive/index.js
var require_agentkeepalive = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = require_agent();
  module2.exports.HttpsAgent = require_https_agent();
});

// node_modules/.pnpm/ms@2.0.0/node_modules/ms/index.js
var require_ms2 = __commonJS((exports2, module2) => {
  var s = 1e3;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module2.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse2(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse2(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return void 0;
    }
  }
  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
      return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
      return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }
  function fmtLong(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
  }
  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
  }
});

// node_modules/.pnpm/debug@3.1.0/node_modules/debug/src/debug.js
var require_debug2 = __commonJS((exports2, module2) => {
  exports2 = module2.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports2.coerce = coerce;
  exports2.disable = disable;
  exports2.enable = enable;
  exports2.enabled = enabled;
  exports2.humanize = require_ms2();
  exports2.instances = [];
  exports2.names = [];
  exports2.skips = [];
  exports2.formatters = {};
  function selectColor(namespace) {
    var hash = 0, i;
    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return exports2.colors[Math.abs(hash) % exports2.colors.length];
  }
  function createDebug(namespace) {
    var prevTime;
    function debug() {
      if (!debug.enabled)
        return;
      var self2 = debug;
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self2.diff = ms;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      args[0] = exports2.coerce(args[0]);
      if (typeof args[0] !== "string") {
        args.unshift("%O");
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        if (match === "%%")
          return match;
        index++;
        var formatter = exports2.formatters[format];
        if (typeof formatter === "function") {
          var val = args[index];
          match = formatter.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      exports2.formatArgs.call(self2, args);
      var logFn = debug.log || exports2.log || console.log.bind(console);
      logFn.apply(self2, args);
    }
    debug.namespace = namespace;
    debug.enabled = exports2.enabled(namespace);
    debug.useColors = exports2.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    if (typeof exports2.init === "function") {
      exports2.init(debug);
    }
    exports2.instances.push(debug);
    return debug;
  }
  function destroy() {
    var index = exports2.instances.indexOf(this);
    if (index !== -1) {
      exports2.instances.splice(index, 1);
      return true;
    } else {
      return false;
    }
  }
  function enable(namespaces) {
    exports2.save(namespaces);
    exports2.names = [];
    exports2.skips = [];
    var i;
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (i = 0; i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports2.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports2.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
    for (i = 0; i < exports2.instances.length; i++) {
      var instance2 = exports2.instances[i];
      instance2.enabled = exports2.enabled(instance2.namespace);
    }
  }
  function disable() {
    exports2.enable("");
  }
  function enabled(name) {
    if (name[name.length - 1] === "*") {
      return true;
    }
    var i, len;
    for (i = 0, len = exports2.skips.length; i < len; i++) {
      if (exports2.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports2.names.length; i < len; i++) {
      if (exports2.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }
  function coerce(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  }
});

// node_modules/.pnpm/debug@3.1.0/node_modules/debug/src/browser.js
var require_browser = __commonJS((exports2, module2) => {
  exports2 = module2.exports = require_debug2();
  exports2.log = log;
  exports2.formatArgs = formatArgs;
  exports2.save = save;
  exports2.load = load;
  exports2.useColors = useColors;
  exports2.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
  exports2.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function useColors() {
    if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
      return true;
    }
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  exports2.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return "[UnexpectedJSONParseError]: " + err.message;
    }
  };
  function formatArgs(args) {
    var useColors2 = this.useColors;
    args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports2.humanize(this.diff);
    if (!useColors2)
      return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if (match === "%%")
        return;
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }
  function log() {
    return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
  }
  function save(namespaces) {
    try {
      if (namespaces == null) {
        exports2.storage.removeItem("debug");
      } else {
        exports2.storage.debug = namespaces;
      }
    } catch (e) {
    }
  }
  function load() {
    var r;
    try {
      r = exports2.storage.debug;
    } catch (e) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  }
  exports2.enable(load());
  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {
    }
  }
});

// node_modules/.pnpm/debug@3.1.0/node_modules/debug/src/node.js
var require_node = __commonJS((exports2, module2) => {
  var tty = require("tty");
  var util = require("util");
  exports2 = module2.exports = require_debug2();
  exports2.init = init;
  exports2.log = log;
  exports2.formatArgs = formatArgs;
  exports2.save = save;
  exports2.load = load;
  exports2.useColors = useColors;
  exports2.colors = [6, 2, 3, 4, 5, 1];
  try {
    supportsColor = require_supports_color2();
    if (supportsColor && supportsColor.level >= 2) {
      exports2.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ];
    }
  } catch (err) {
  }
  var supportsColor;
  exports2.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val))
      val = true;
    else if (/^(no|off|false|disabled)$/i.test(val))
      val = false;
    else if (val === "null")
      val = null;
    else
      val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  function useColors() {
    return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }
  exports2.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports2.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
  function formatArgs(args) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var colorCode = "[3" + (c < 8 ? c : "8;5;" + c);
      var prefix = "  " + colorCode + ";1m" + name + " [0m";
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push(colorCode + "m+" + exports2.humanize(this.diff) + "[0m");
    } else {
      args[0] = getDate() + name + " " + args[0];
    }
  }
  function getDate() {
    if (exports2.inspectOpts.hideDate) {
      return "";
    } else {
      return new Date().toISOString() + " ";
    }
  }
  function log() {
    return process.stderr.write(util.format.apply(util, arguments) + "\n");
  }
  function save(namespaces) {
    if (namespaces == null) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }
  function load() {
    return process.env.DEBUG;
  }
  function init(debug) {
    debug.inspectOpts = {};
    var keys = Object.keys(exports2.inspectOpts);
    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
    }
  }
  exports2.enable(load());
});

// node_modules/.pnpm/debug@3.1.0/node_modules/debug/src/index.js
var require_src2 = __commonJS((exports2, module2) => {
  if (typeof process === "undefined" || process.type === "renderer") {
    module2.exports = require_browser();
  } else {
    module2.exports = require_node();
  }
});

// node_modules/.pnpm/retry@0.12.0/node_modules/retry/lib/retry_operation.js
var require_retry_operation = __commonJS((exports2, module2) => {
  function RetryOperation(timeouts, options) {
    if (typeof options === "boolean") {
      options = {forever: options};
    }
    this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
    this._timeouts = timeouts;
    this._options = options || {};
    this._maxRetryTime = options && options.maxRetryTime || Infinity;
    this._fn = null;
    this._errors = [];
    this._attempts = 1;
    this._operationTimeout = null;
    this._operationTimeoutCb = null;
    this._timeout = null;
    this._operationStart = null;
    if (this._options.forever) {
      this._cachedTimeouts = this._timeouts.slice(0);
    }
  }
  module2.exports = RetryOperation;
  RetryOperation.prototype.reset = function() {
    this._attempts = 1;
    this._timeouts = this._originalTimeouts;
  };
  RetryOperation.prototype.stop = function() {
    if (this._timeout) {
      clearTimeout(this._timeout);
    }
    this._timeouts = [];
    this._cachedTimeouts = null;
  };
  RetryOperation.prototype.retry = function(err) {
    if (this._timeout) {
      clearTimeout(this._timeout);
    }
    if (!err) {
      return false;
    }
    var currentTime = new Date().getTime();
    if (err && currentTime - this._operationStart >= this._maxRetryTime) {
      this._errors.unshift(new Error("RetryOperation timeout occurred"));
      return false;
    }
    this._errors.push(err);
    var timeout = this._timeouts.shift();
    if (timeout === void 0) {
      if (this._cachedTimeouts) {
        this._errors.splice(this._errors.length - 1, this._errors.length);
        this._timeouts = this._cachedTimeouts.slice(0);
        timeout = this._timeouts.shift();
      } else {
        return false;
      }
    }
    var self2 = this;
    var timer = setTimeout(function() {
      self2._attempts++;
      if (self2._operationTimeoutCb) {
        self2._timeout = setTimeout(function() {
          self2._operationTimeoutCb(self2._attempts);
        }, self2._operationTimeout);
        if (self2._options.unref) {
          self2._timeout.unref();
        }
      }
      self2._fn(self2._attempts);
    }, timeout);
    if (this._options.unref) {
      timer.unref();
    }
    return true;
  };
  RetryOperation.prototype.attempt = function(fn, timeoutOps) {
    this._fn = fn;
    if (timeoutOps) {
      if (timeoutOps.timeout) {
        this._operationTimeout = timeoutOps.timeout;
      }
      if (timeoutOps.cb) {
        this._operationTimeoutCb = timeoutOps.cb;
      }
    }
    var self2 = this;
    if (this._operationTimeoutCb) {
      this._timeout = setTimeout(function() {
        self2._operationTimeoutCb();
      }, self2._operationTimeout);
    }
    this._operationStart = new Date().getTime();
    this._fn(this._attempts);
  };
  RetryOperation.prototype.try = function(fn) {
    console.log("Using RetryOperation.try() is deprecated");
    this.attempt(fn);
  };
  RetryOperation.prototype.start = function(fn) {
    console.log("Using RetryOperation.start() is deprecated");
    this.attempt(fn);
  };
  RetryOperation.prototype.start = RetryOperation.prototype.try;
  RetryOperation.prototype.errors = function() {
    return this._errors;
  };
  RetryOperation.prototype.attempts = function() {
    return this._attempts;
  };
  RetryOperation.prototype.mainError = function() {
    if (this._errors.length === 0) {
      return null;
    }
    var counts = {};
    var mainError = null;
    var mainErrorCount = 0;
    for (var i = 0; i < this._errors.length; i++) {
      var error = this._errors[i];
      var message = error.message;
      var count = (counts[message] || 0) + 1;
      counts[message] = count;
      if (count >= mainErrorCount) {
        mainError = error;
        mainErrorCount = count;
      }
    }
    return mainError;
  };
});

// node_modules/.pnpm/retry@0.12.0/node_modules/retry/lib/retry.js
var require_retry = __commonJS((exports2) => {
  var RetryOperation = require_retry_operation();
  exports2.operation = function(options) {
    var timeouts = exports2.timeouts(options);
    return new RetryOperation(timeouts, {
      forever: options && options.forever,
      unref: options && options.unref,
      maxRetryTime: options && options.maxRetryTime
    });
  };
  exports2.timeouts = function(options) {
    if (options instanceof Array) {
      return [].concat(options);
    }
    var opts = {
      retries: 10,
      factor: 2,
      minTimeout: 1 * 1e3,
      maxTimeout: Infinity,
      randomize: false
    };
    for (var key in options) {
      opts[key] = options[key];
    }
    if (opts.minTimeout > opts.maxTimeout) {
      throw new Error("minTimeout is greater than maxTimeout");
    }
    var timeouts = [];
    for (var i = 0; i < opts.retries; i++) {
      timeouts.push(this.createTimeout(i, opts));
    }
    if (options && options.forever && !timeouts.length) {
      timeouts.push(this.createTimeout(i, opts));
    }
    timeouts.sort(function(a, b) {
      return a - b;
    });
    return timeouts;
  };
  exports2.createTimeout = function(attempt, opts) {
    var random = opts.randomize ? Math.random() + 1 : 1;
    var timeout = Math.round(random * opts.minTimeout * Math.pow(opts.factor, attempt));
    timeout = Math.min(timeout, opts.maxTimeout);
    return timeout;
  };
  exports2.wrap = function(obj, options, methods) {
    if (options instanceof Array) {
      methods = options;
      options = null;
    }
    if (!methods) {
      methods = [];
      for (var key in obj) {
        if (typeof obj[key] === "function") {
          methods.push(key);
        }
      }
    }
    for (var i = 0; i < methods.length; i++) {
      var method = methods[i];
      var original = obj[method];
      obj[method] = function retryWrapper(original2) {
        var op = exports2.operation(options);
        var args = Array.prototype.slice.call(arguments, 1);
        var callback = args.pop();
        args.push(function(err) {
          if (op.retry(err)) {
            return;
          }
          if (err) {
            arguments[0] = op.mainError();
          }
          callback.apply(this, arguments);
        });
        op.attempt(function() {
          original2.apply(obj, args);
        });
      }.bind(obj, original);
      obj[method].options = options;
    }
  };
});

// node_modules/.pnpm/retry@0.12.0/node_modules/retry/index.js
var require_retry2 = __commonJS((exports2, module2) => {
  module2.exports = require_retry();
});

// node_modules/.pnpm/async-retry@1.3.1/node_modules/async-retry/lib/index.js
var require_lib12 = __commonJS((exports2, module2) => {
  var retrier = require_retry2();
  function retry(fn, opts) {
    function run(resolve, reject) {
      var options = opts || {};
      if (!("randomize" in options)) {
        options.randomize = true;
      }
      var op = retrier.operation(options);
      function bail(err) {
        reject(err || new Error("Aborted"));
      }
      function onError(err, num) {
        if (err.bail) {
          bail(err);
          return;
        }
        if (!op.retry(err)) {
          reject(op.mainError());
        } else if (options.onRetry) {
          options.onRetry(err, num);
        }
      }
      function runAttempt(num) {
        var val;
        try {
          val = fn(bail, num);
        } catch (err) {
          onError(err, num);
          return;
        }
        Promise.resolve(val).then(resolve).catch(function catchIt(err) {
          onError(err, num);
        });
      }
      op.attempt(runAttempt);
    }
    return new Promise(run);
  }
  module2.exports = retry;
});

// node_modules/.pnpm/@vercel/fetch-retry@5.0.3_node-fetch@2.6.1/node_modules/@vercel/fetch-retry/index.js
var require_fetch_retry = __commonJS((exports2, module2) => {
  var retry = require_lib12();
  var debug = require_src2()("fetch-retry");
  var MIN_TIMEOUT = 10;
  var MAX_RETRIES = 5;
  var MAX_RETRY_AFTER = 20;
  var FACTOR = 6;
  module2.exports = exports2 = setup;
  function isClientError(err) {
    if (!err)
      return false;
    return err.code === "ERR_UNESCAPED_CHARACTERS" || err.message === "Request path contains unescaped characters";
  }
  function setup(fetch3) {
    if (!fetch3) {
      fetch3 = require_lib11();
    }
    async function fetchRetry(url, opts = {}) {
      const retryOpts = Object.assign({
        minTimeout: MIN_TIMEOUT,
        retries: MAX_RETRIES,
        factor: FACTOR,
        maxRetryAfter: MAX_RETRY_AFTER
      }, opts.retry);
      if (opts.onRetry) {
        retryOpts.onRetry = (error) => {
          opts.onRetry(error, opts);
          if (opts.retry && opts.retry.onRetry) {
            opts.retry.onRetry(error);
          }
        };
      }
      try {
        return await retry(async (bail, attempt) => {
          const {method = "GET"} = opts;
          try {
            const res = await fetch3(url, opts);
            debug("status %d", res.status);
            if (res.status >= 500 && res.status < 600 || res.status === 429) {
              const retryAfter = parseInt(res.headers.get("retry-after"), 10);
              if (retryAfter) {
                if (retryAfter > retryOpts.maxRetryAfter) {
                  return res;
                } else {
                  await new Promise((r) => setTimeout(r, retryAfter * 1e3));
                }
              }
              throw new ResponseError(res);
            } else {
              return res;
            }
          } catch (err) {
            const clientError = isClientError(err);
            const isRetry = !clientError && attempt <= retryOpts.retries;
            debug(`${method} ${url} error (status = ${err.status}). ${isRetry ? "retrying" : ""}`, err);
            if (clientError) {
              return bail(err);
            }
            throw err;
          }
        }, retryOpts);
      } catch (err) {
        if (err instanceof ResponseError) {
          return err.res;
        }
        throw err;
      }
    }
    for (const key of Object.keys(fetch3)) {
      fetchRetry[key] = fetch3[key];
    }
    fetchRetry.default = fetchRetry;
    return fetchRetry;
  }
  var ResponseError = class extends Error {
    constructor(res) {
      super(res.statusText);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, ResponseError);
      }
      this.name = this.constructor.name;
      this.res = res;
      this.code = this.status = this.statusCode = res.status;
      this.url = res.url;
    }
  };
  exports2.ResponseError = ResponseError;
});

// node_modules/.pnpm/yallist@3.1.1/node_modules/yallist/iterator.js
var require_iterator2 = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function* () {
      for (let walker = this.head; walker; walker = walker.next) {
        yield walker.value;
      }
    };
  };
});

// node_modules/.pnpm/yallist@3.1.1/node_modules/yallist/yallist.js
var require_yallist2 = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = Yallist;
  Yallist.Node = Node2;
  Yallist.create = Yallist;
  function Yallist(list) {
    var self2 = this;
    if (!(self2 instanceof Yallist)) {
      self2 = new Yallist();
    }
    self2.tail = null;
    self2.head = null;
    self2.length = 0;
    if (list && typeof list.forEach === "function") {
      list.forEach(function(item) {
        self2.push(item);
      });
    } else if (arguments.length > 0) {
      for (var i = 0, l = arguments.length; i < l; i++) {
        self2.push(arguments[i]);
      }
    }
    return self2;
  }
  Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) {
      throw new Error("removing node which does not belong to this list");
    }
    var next = node.next;
    var prev = node.prev;
    if (next) {
      next.prev = prev;
    }
    if (prev) {
      prev.next = next;
    }
    if (node === this.head) {
      this.head = next;
    }
    if (node === this.tail) {
      this.tail = prev;
    }
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
  };
  Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) {
      head.prev = node;
    }
    this.head = node;
    if (!this.tail) {
      this.tail = node;
    }
    this.length++;
  };
  Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) {
      tail.next = node;
    }
    this.tail = node;
    if (!this.head) {
      this.head = node;
    }
    this.length++;
  };
  Yallist.prototype.push = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      push(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.unshift = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      unshift(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.pop = function() {
    if (!this.tail) {
      return void 0;
    }
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) {
      this.tail.next = null;
    } else {
      this.head = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.shift = function() {
    if (!this.head) {
      return void 0;
    }
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) {
      this.head.prev = null;
    } else {
      this.tail = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.head, i = 0; walker !== null; i++) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.next;
    }
  };
  Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.prev;
    }
  };
  Yallist.prototype.get = function(n) {
    for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
      walker = walker.next;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.getReverse = function(n) {
    for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
      walker = walker.prev;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.head; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.next;
    }
    return res;
  };
  Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.tail; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.prev;
    }
    return res;
  };
  Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.head) {
      walker = this.head.next;
      acc = this.head.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = 0; walker !== null; i++) {
      acc = fn(acc, walker.value, i);
      walker = walker.next;
    }
    return acc;
  };
  Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.tail) {
      walker = this.tail.prev;
      acc = this.tail.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = this.length - 1; walker !== null; i--) {
      acc = fn(acc, walker.value, i);
      walker = walker.prev;
    }
    return acc;
  };
  Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.head; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.next;
    }
    return arr;
  };
  Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.tail; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.prev;
    }
    return arr;
  };
  Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
      walker = walker.next;
    }
    for (; walker !== null && i < to; i++, walker = walker.next) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
      walker = walker.prev;
    }
    for (; walker !== null && i > from; i--, walker = walker.prev) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.splice = function(start, deleteCount) {
    if (start > this.length) {
      start = this.length - 1;
    }
    if (start < 0) {
      start = this.length + start;
    }
    for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
      walker = walker.next;
    }
    var ret = [];
    for (var i = 0; walker && i < deleteCount; i++) {
      ret.push(walker.value);
      walker = this.removeNode(walker);
    }
    if (walker === null) {
      walker = this.tail;
    }
    if (walker !== this.head && walker !== this.tail) {
      walker = walker.prev;
    }
    for (var i = 2; i < arguments.length; i++) {
      walker = insert(this, walker, arguments[i]);
    }
    return ret;
  };
  Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for (var walker = head; walker !== null; walker = walker.prev) {
      var p = walker.prev;
      walker.prev = walker.next;
      walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
  };
  function insert(self2, node, value) {
    var inserted = node === self2.head ? new Node2(value, null, node, self2) : new Node2(value, node, node.next, self2);
    if (inserted.next === null) {
      self2.tail = inserted;
    }
    if (inserted.prev === null) {
      self2.head = inserted;
    }
    self2.length++;
    return inserted;
  }
  function push(self2, item) {
    self2.tail = new Node2(item, self2.tail, null, self2);
    if (!self2.head) {
      self2.head = self2.tail;
    }
    self2.length++;
  }
  function unshift(self2, item) {
    self2.head = new Node2(item, null, self2.head, self2);
    if (!self2.tail) {
      self2.tail = self2.head;
    }
    self2.length++;
  }
  function Node2(value, prev, next, list) {
    if (!(this instanceof Node2)) {
      return new Node2(value, prev, next, list);
    }
    this.list = list;
    this.value = value;
    if (prev) {
      prev.next = this;
      this.prev = prev;
    } else {
      this.prev = null;
    }
    if (next) {
      next.prev = this;
      this.next = next;
    } else {
      this.next = null;
    }
  }
  try {
    require_iterator2()(Yallist);
  } catch (er) {
  }
});

// node_modules/.pnpm/lru-cache@5.1.1/node_modules/lru-cache/index.js
var require_lru_cache2 = __commonJS((exports2, module2) => {
  "use strict";
  var Yallist = require_yallist2();
  var MAX = Symbol("max");
  var LENGTH = Symbol("length");
  var LENGTH_CALCULATOR = Symbol("lengthCalculator");
  var ALLOW_STALE = Symbol("allowStale");
  var MAX_AGE = Symbol("maxAge");
  var DISPOSE = Symbol("dispose");
  var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
  var LRU_LIST = Symbol("lruList");
  var CACHE = Symbol("cache");
  var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
  var naiveLength = () => 1;
  var LRUCache = class {
    constructor(options) {
      if (typeof options === "number")
        options = {max: options};
      if (!options)
        options = {};
      if (options.max && (typeof options.max !== "number" || options.max < 0))
        throw new TypeError("max must be a non-negative number");
      const max = this[MAX] = options.max || Infinity;
      const lc = options.length || naiveLength;
      this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
      this[ALLOW_STALE] = options.stale || false;
      if (options.maxAge && typeof options.maxAge !== "number")
        throw new TypeError("maxAge must be a number");
      this[MAX_AGE] = options.maxAge || 0;
      this[DISPOSE] = options.dispose;
      this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
      this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
      this.reset();
    }
    set max(mL) {
      if (typeof mL !== "number" || mL < 0)
        throw new TypeError("max must be a non-negative number");
      this[MAX] = mL || Infinity;
      trim(this);
    }
    get max() {
      return this[MAX];
    }
    set allowStale(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
      return this[ALLOW_STALE];
    }
    set maxAge(mA) {
      if (typeof mA !== "number")
        throw new TypeError("maxAge must be a non-negative number");
      this[MAX_AGE] = mA;
      trim(this);
    }
    get maxAge() {
      return this[MAX_AGE];
    }
    set lengthCalculator(lC) {
      if (typeof lC !== "function")
        lC = naiveLength;
      if (lC !== this[LENGTH_CALCULATOR]) {
        this[LENGTH_CALCULATOR] = lC;
        this[LENGTH] = 0;
        this[LRU_LIST].forEach((hit) => {
          hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
          this[LENGTH] += hit.length;
        });
      }
      trim(this);
    }
    get lengthCalculator() {
      return this[LENGTH_CALCULATOR];
    }
    get length() {
      return this[LENGTH];
    }
    get itemCount() {
      return this[LRU_LIST].length;
    }
    rforEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].tail; walker !== null; ) {
        const prev = walker.prev;
        forEachStep(this, fn, walker, thisp);
        walker = prev;
      }
    }
    forEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].head; walker !== null; ) {
        const next = walker.next;
        forEachStep(this, fn, walker, thisp);
        walker = next;
      }
    }
    keys() {
      return this[LRU_LIST].toArray().map((k) => k.key);
    }
    values() {
      return this[LRU_LIST].toArray().map((k) => k.value);
    }
    reset() {
      if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
        this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
      }
      this[CACHE] = new Map();
      this[LRU_LIST] = new Yallist();
      this[LENGTH] = 0;
    }
    dump() {
      return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter((h) => h);
    }
    dumpLru() {
      return this[LRU_LIST];
    }
    set(key, value, maxAge) {
      maxAge = maxAge || this[MAX_AGE];
      if (maxAge && typeof maxAge !== "number")
        throw new TypeError("maxAge must be a number");
      const now = maxAge ? Date.now() : 0;
      const len = this[LENGTH_CALCULATOR](value, key);
      if (this[CACHE].has(key)) {
        if (len > this[MAX]) {
          del(this, this[CACHE].get(key));
          return false;
        }
        const node = this[CACHE].get(key);
        const item = node.value;
        if (this[DISPOSE]) {
          if (!this[NO_DISPOSE_ON_SET])
            this[DISPOSE](key, item.value);
        }
        item.now = now;
        item.maxAge = maxAge;
        item.value = value;
        this[LENGTH] += len - item.length;
        item.length = len;
        this.get(key);
        trim(this);
        return true;
      }
      const hit = new Entry(key, value, len, now, maxAge);
      if (hit.length > this[MAX]) {
        if (this[DISPOSE])
          this[DISPOSE](key, value);
        return false;
      }
      this[LENGTH] += hit.length;
      this[LRU_LIST].unshift(hit);
      this[CACHE].set(key, this[LRU_LIST].head);
      trim(this);
      return true;
    }
    has(key) {
      if (!this[CACHE].has(key))
        return false;
      const hit = this[CACHE].get(key).value;
      return !isStale(this, hit);
    }
    get(key) {
      return get(this, key, true);
    }
    peek(key) {
      return get(this, key, false);
    }
    pop() {
      const node = this[LRU_LIST].tail;
      if (!node)
        return null;
      del(this, node);
      return node.value;
    }
    del(key) {
      del(this, this[CACHE].get(key));
    }
    load(arr) {
      this.reset();
      const now = Date.now();
      for (let l = arr.length - 1; l >= 0; l--) {
        const hit = arr[l];
        const expiresAt = hit.e || 0;
        if (expiresAt === 0)
          this.set(hit.k, hit.v);
        else {
          const maxAge = expiresAt - now;
          if (maxAge > 0) {
            this.set(hit.k, hit.v, maxAge);
          }
        }
      }
    }
    prune() {
      this[CACHE].forEach((value, key) => get(this, key, false));
    }
  };
  var get = (self2, key, doUse) => {
    const node = self2[CACHE].get(key);
    if (node) {
      const hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          return void 0;
      } else {
        if (doUse) {
          if (self2[UPDATE_AGE_ON_GET])
            node.value.now = Date.now();
          self2[LRU_LIST].unshiftNode(node);
        }
      }
      return hit.value;
    }
  };
  var isStale = (self2, hit) => {
    if (!hit || !hit.maxAge && !self2[MAX_AGE])
      return false;
    const diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
  };
  var trim = (self2) => {
    if (self2[LENGTH] > self2[MAX]) {
      for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
        const prev = walker.prev;
        del(self2, walker);
        walker = prev;
      }
    }
  };
  var del = (self2, node) => {
    if (node) {
      const hit = node.value;
      if (self2[DISPOSE])
        self2[DISPOSE](hit.key, hit.value);
      self2[LENGTH] -= hit.length;
      self2[CACHE].delete(hit.key);
      self2[LRU_LIST].removeNode(node);
    }
  };
  var Entry = class {
    constructor(key, value, length, now, maxAge) {
      this.key = key;
      this.value = value;
      this.length = length;
      this.now = now;
      this.maxAge = maxAge || 0;
    }
  };
  var forEachStep = (self2, fn, node, thisp) => {
    let hit = node.value;
    if (isStale(self2, hit)) {
      del(self2, node);
      if (!self2[ALLOW_STALE])
        hit = void 0;
    }
    if (hit)
      fn.call(thisp, hit.value, hit.key, self2);
  };
  module2.exports = LRUCache;
});

// node_modules/.pnpm/async-retry@1.2.3/node_modules/async-retry/lib/index.js
var require_lib13 = __commonJS((exports2, module2) => {
  var retrier = require_retry2();
  function retry(fn, opts) {
    function run(resolve, reject) {
      var options = opts || {};
      var op = retrier.operation(options);
      function bail(err) {
        reject(err || new Error("Aborted"));
      }
      function onError(err, num) {
        if (err.bail) {
          bail(err);
          return;
        }
        if (!op.retry(err)) {
          reject(op.mainError());
        } else if (options.onRetry) {
          options.onRetry(err, num);
        }
      }
      function runAttempt(num) {
        var val;
        try {
          val = fn(bail, num);
        } catch (err) {
          onError(err, num);
          return;
        }
        Promise.resolve(val).then(resolve).catch(function catchIt(err) {
          onError(err, num);
        });
      }
      op.attempt(runAttempt);
    }
    return new Promise(run);
  }
  module2.exports = retry;
});

// node_modules/.pnpm/@zeit/dns-cached-resolve@2.1.0/node_modules/@zeit/dns-cached-resolve/lib/resolve4.js
var require_resolve4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  function resolve4(host, resolver) {
    return new Promise((resolve, reject) => {
      resolver.resolve4(host, {ttl: true}, (err, res) => {
        if (err)
          return reject(err);
        resolve(res);
      });
    });
  }
  exports2.default = resolve4;
});

// node_modules/.pnpm/@zeit/dns-cached-resolve@2.1.0/node_modules/@zeit/dns-cached-resolve/lib/resolve6.js
var require_resolve6 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  function resolve6(host, resolver) {
    return new Promise((resolve, reject) => {
      resolver.resolve6(host, {ttl: true}, (err, res) => {
        if (err)
          return reject(err);
        resolve(res);
      });
    });
  }
  exports2.default = resolve6;
});

// node_modules/.pnpm/@zeit/dns-cached-resolve@2.1.0/node_modules/@zeit/dns-cached-resolve/lib/dns-resolve.js
var require_dns_resolve = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  var dns_1 = __importDefault(require("dns"));
  var lru_cache_1 = __importDefault(require_lru_cache2());
  var async_retry_1 = __importDefault(require_lib13());
  var resolve4_1 = __importDefault(require_resolve4());
  var resolve6_1 = __importDefault(require_resolve6());
  var lruOptions = {max: 500};
  var cache4;
  var cache6;
  setupCache();
  async function dnsResolve(host, options = {}) {
    const {ipv6 = false, minimumCacheTime = 300, refreshCache = false, retryOpts = {minTimeout: 10, retries: 3, factor: 5}, resolver = dns_1.default} = options;
    const {cache, resolve} = ipv6 ? {cache: cache6, resolve: resolve6_1.default} : {cache: cache4, resolve: resolve4_1.default};
    if (refreshCache) {
      cache.del(host);
    } else {
      const ip = cache.get(host);
      if (ip)
        return await ip;
    }
    const p = (async () => {
      const res = await async_retry_1.default(() => resolve(host, resolver), retryOpts);
      const rec = res[Math.floor(Math.random() * res.length)];
      const ttl = Math.max(rec.ttl, minimumCacheTime);
      cache.set(host, rec.address, ttl * 1e3);
      return rec.address;
    })();
    cache.set(host, p, 5e3);
    return p;
  }
  exports2.default = dnsResolve;
  function setupCache() {
    cache4 = new lru_cache_1.default(lruOptions);
    cache6 = new lru_cache_1.default(lruOptions);
  }
  exports2.setupCache = setupCache;
});

// node_modules/.pnpm/@zeit/dns-cached-resolve@2.1.0/node_modules/@zeit/dns-cached-resolve/lib/index.js
var require_lib14 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var dns_resolve_1 = require_dns_resolve();
  exports2.default = dns_resolve_1.default;
});

// node_modules/.pnpm/@vercel/fetch-cached-dns@2.0.1_node-fetch@2.6.1/node_modules/@vercel/fetch-cached-dns/util.js
var require_util2 = __commonJS((exports2) => {
  exports2.dnsCachedUrl = Symbol("dnsCachedUrl");
});

// node_modules/.pnpm/@vercel/fetch-cached-dns@2.0.1_node-fetch@2.6.1/node_modules/@vercel/fetch-cached-dns/index.js
var require_fetch_cached_dns = __commonJS((exports2, module2) => {
  var {isIP} = require("net");
  var {format, parse: parse2} = require("url");
  var resolve = require_lib14().default;
  var {dnsCachedUrl} = require_util2();
  module2.exports = setup;
  var isRedirect = (v) => (v / 100 | 0) === 3;
  function setup(fetch3) {
    if (!fetch3) {
      fetch3 = require_lib11();
    }
    const {Headers} = fetch3;
    async function fetchCachedDns(url, opts) {
      const parsed = parse2(url);
      const originalHost = parsed.host;
      const ip = isIP(parsed.hostname);
      if (ip === 0) {
        if (!opts)
          opts = {};
        opts.headers = new Headers(opts.headers);
        if (!opts.headers.has("Host")) {
          opts.headers.set("Host", parsed.host);
        }
        opts.redirect = "manual";
        parsed.host = await resolve(parsed.hostname);
        if (parsed.port) {
          parsed.host += `:${parsed.port}`;
        }
        url = format(parsed);
      }
      const res = await fetch3(url, opts);
      res[dnsCachedUrl] = url;
      Object.defineProperty(res, "url", {
        get() {
          return parsed.href;
        }
      });
      if (isRedirect(res.status)) {
        const redirectOpts = Object.assign({}, opts);
        redirectOpts.headers = new Headers(opts.headers);
        if (res.status === 303 || (res.status === 301 || res.status === 302) && opts.method === "POST") {
          redirectOpts.method = "GET";
          redirectOpts.body = null;
          redirectOpts.headers.delete("content-length");
        }
        const location = res.headers.get("Location");
        const parsedLocation = parse2(location);
        if (parsedLocation.host === parsed.host) {
          parsedLocation.host = originalHost;
        }
        redirectOpts.headers.set("Host", parsedLocation.host);
        if (opts.onRedirect) {
          opts.onRedirect(res, redirectOpts);
        }
        return fetchCachedDns(format(parsedLocation), redirectOpts);
      }
      return res;
    }
    for (const key of Object.keys(fetch3)) {
      fetchCachedDns[key] = fetch3[key];
    }
    fetchCachedDns.default = fetchCachedDns;
    return fetchCachedDns;
  }
});

// node_modules/.pnpm/@vercel/fetch@6.1.0_node-fetch@2.6.1/node_modules/@vercel/fetch/index.js
var require_fetch = __commonJS((exports2, module2) => {
  var {parse: parseUrl} = require("url");
  var HttpAgent = require_agentkeepalive();
  var debug = require_src2()("@vercel/fetch");
  var setupFetchRetry = require_fetch_retry();
  var setupFetchCachedDns = require_fetch_cached_dns();
  var urlModule = require("url");
  var {HttpsAgent} = HttpAgent;
  var {URLSearchParams} = urlModule;
  var AGENT_OPTIONS = {
    maxSockets: 200,
    maxFreeSockets: 20,
    timeout: 6e4,
    freeSocketTimeout: 3e4,
    freeSocketKeepAliveTimeout: 3e4
  };
  var defaultHttpGlobalAgent;
  var defaultHttpsGlobalAgent;
  function getDefaultHttpGlobalAgent(agentOpts) {
    return defaultHttpGlobalAgent = defaultHttpGlobalAgent || (debug("init http agent"), new HttpAgent(agentOpts));
  }
  function getDefaultHttpsGlobalAgent(agentOpts) {
    return defaultHttpsGlobalAgent = defaultHttpsGlobalAgent || (debug("init https agent"), new HttpsAgent(agentOpts));
  }
  function getAgent(url, agentOpts) {
    return /^https/.test(url) ? getDefaultHttpsGlobalAgent(agentOpts) : getDefaultHttpGlobalAgent(agentOpts);
  }
  function setupVercelFetch(fetch3, agentOpts = {}) {
    return async function vercelFetch(url, opts = {}) {
      if (!opts.agent) {
        opts.agent = getAgent(url, {AGENT_OPTIONS, ...agentOpts});
      }
      opts.redirect = "manual";
      opts.headers = new fetch3.Headers(opts.headers);
      opts.headers.set("host", opts.headers.get("host") || parseUrl(url).host);
      if (opts.body && !(opts.body instanceof URLSearchParams) && typeof opts.body === "object" && !Buffer.isBuffer(opts.body)) {
        opts.body = JSON.stringify(opts.body);
        opts.headers.set("Content-Type", "application/json");
        opts.headers.set("Content-Length", Buffer.byteLength(opts.body));
      }
      opts.onRedirect = (res, redirectOpts) => {
        redirectOpts.agent = getAgent(res.headers.get("Location"));
      };
      try {
        debug("%s %s", opts.method || "GET", url);
        return await fetch3(url, opts);
      } catch (err) {
        err.url = url;
        err.opts = opts;
        throw err;
      }
    };
  }
  function setup(fetch3, options) {
    if (!fetch3) {
      fetch3 = require_lib11();
    }
    const fd = fetch3.default;
    if (fd) {
      fetch3 = Object.assign((...args) => fd(...args), fd, fetch3);
    }
    if (typeof fetch3 !== "function") {
      throw new Error("fetch() argument isn't a function; did you forget to initialize your `@vercel/fetch` import?");
    }
    fetch3 = setupFetchCachedDns(fetch3);
    fetch3 = setupFetchRetry(fetch3);
    fetch3 = setupVercelFetch(fetch3, options);
    return fetch3;
  }
  module2.exports = setup;
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/high-level-opt.js
var require_high_level_opt = __commonJS((exports2, module2) => {
  "use strict";
  var argmap = new Map([
    ["C", "cwd"],
    ["f", "file"],
    ["z", "gzip"],
    ["P", "preservePaths"],
    ["U", "unlink"],
    ["strip-components", "strip"],
    ["stripComponents", "strip"],
    ["keep-newer", "newer"],
    ["keepNewer", "newer"],
    ["keep-newer-files", "newer"],
    ["keepNewerFiles", "newer"],
    ["k", "keep"],
    ["keep-existing", "keep"],
    ["keepExisting", "keep"],
    ["m", "noMtime"],
    ["no-mtime", "noMtime"],
    ["p", "preserveOwner"],
    ["L", "follow"],
    ["h", "follow"]
  ]);
  module2.exports = (opt) => opt ? Object.keys(opt).map((k) => [
    argmap.has(k) ? argmap.get(k) : k,
    opt[k]
  ]).reduce((set, kv) => (set[kv[0]] = kv[1], set), Object.create(null)) : {};
});

// node_modules/.pnpm/minipass@3.1.3/node_modules/minipass/index.js
var require_minipass = __commonJS((exports2, module2) => {
  "use strict";
  var EE = require("events");
  var Stream = require("stream");
  var Yallist = require_yallist();
  var SD = require("string_decoder").StringDecoder;
  var EOF = Symbol("EOF");
  var MAYBE_EMIT_END = Symbol("maybeEmitEnd");
  var EMITTED_END = Symbol("emittedEnd");
  var EMITTING_END = Symbol("emittingEnd");
  var CLOSED = Symbol("closed");
  var READ = Symbol("read");
  var FLUSH = Symbol("flush");
  var FLUSHCHUNK = Symbol("flushChunk");
  var ENCODING = Symbol("encoding");
  var DECODER = Symbol("decoder");
  var FLOWING = Symbol("flowing");
  var PAUSED = Symbol("paused");
  var RESUME = Symbol("resume");
  var BUFFERLENGTH = Symbol("bufferLength");
  var BUFFERPUSH = Symbol("bufferPush");
  var BUFFERSHIFT = Symbol("bufferShift");
  var OBJECTMODE = Symbol("objectMode");
  var DESTROYED = Symbol("destroyed");
  var doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== "1";
  var ASYNCITERATOR = doIter && Symbol.asyncIterator || Symbol("asyncIterator not implemented");
  var ITERATOR = doIter && Symbol.iterator || Symbol("iterator not implemented");
  var isEndish = (ev) => ev === "end" || ev === "finish" || ev === "prefinish";
  var isArrayBuffer = (b) => b instanceof ArrayBuffer || typeof b === "object" && b.constructor && b.constructor.name === "ArrayBuffer" && b.byteLength >= 0;
  var isArrayBufferView = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);
  module2.exports = class Minipass extends Stream {
    constructor(options) {
      super();
      this[FLOWING] = false;
      this[PAUSED] = false;
      this.pipes = new Yallist();
      this.buffer = new Yallist();
      this[OBJECTMODE] = options && options.objectMode || false;
      if (this[OBJECTMODE])
        this[ENCODING] = null;
      else
        this[ENCODING] = options && options.encoding || null;
      if (this[ENCODING] === "buffer")
        this[ENCODING] = null;
      this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null;
      this[EOF] = false;
      this[EMITTED_END] = false;
      this[EMITTING_END] = false;
      this[CLOSED] = false;
      this.writable = true;
      this.readable = true;
      this[BUFFERLENGTH] = 0;
      this[DESTROYED] = false;
    }
    get bufferLength() {
      return this[BUFFERLENGTH];
    }
    get encoding() {
      return this[ENCODING];
    }
    set encoding(enc) {
      if (this[OBJECTMODE])
        throw new Error("cannot set encoding in objectMode");
      if (this[ENCODING] && enc !== this[ENCODING] && (this[DECODER] && this[DECODER].lastNeed || this[BUFFERLENGTH]))
        throw new Error("cannot change encoding");
      if (this[ENCODING] !== enc) {
        this[DECODER] = enc ? new SD(enc) : null;
        if (this.buffer.length)
          this.buffer = this.buffer.map((chunk) => this[DECODER].write(chunk));
      }
      this[ENCODING] = enc;
    }
    setEncoding(enc) {
      this.encoding = enc;
    }
    get objectMode() {
      return this[OBJECTMODE];
    }
    set objectMode(om) {
      this[OBJECTMODE] = this[OBJECTMODE] || !!om;
    }
    write(chunk, encoding, cb) {
      if (this[EOF])
        throw new Error("write after end");
      if (this[DESTROYED]) {
        this.emit("error", Object.assign(new Error("Cannot call write after a stream was destroyed"), {code: "ERR_STREAM_DESTROYED"}));
        return true;
      }
      if (typeof encoding === "function")
        cb = encoding, encoding = "utf8";
      if (!encoding)
        encoding = "utf8";
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk))
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
        else if (isArrayBuffer(chunk))
          chunk = Buffer.from(chunk);
        else if (typeof chunk !== "string")
          this.objectMode = true;
      }
      if (!this.objectMode && !chunk.length) {
        if (this[BUFFERLENGTH] !== 0)
          this.emit("readable");
        if (cb)
          cb();
        return this.flowing;
      }
      if (typeof chunk === "string" && !this[OBJECTMODE] && !(encoding === this[ENCODING] && !this[DECODER].lastNeed)) {
        chunk = Buffer.from(chunk, encoding);
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING])
        chunk = this[DECODER].write(chunk);
      if (this.flowing) {
        if (this[BUFFERLENGTH] !== 0)
          this[FLUSH](true);
        this.emit("data", chunk);
      } else
        this[BUFFERPUSH](chunk);
      if (this[BUFFERLENGTH] !== 0)
        this.emit("readable");
      if (cb)
        cb();
      return this.flowing;
    }
    read(n) {
      if (this[DESTROYED])
        return null;
      try {
        if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH])
          return null;
        if (this[OBJECTMODE])
          n = null;
        if (this.buffer.length > 1 && !this[OBJECTMODE]) {
          if (this.encoding)
            this.buffer = new Yallist([
              Array.from(this.buffer).join("")
            ]);
          else
            this.buffer = new Yallist([
              Buffer.concat(Array.from(this.buffer), this[BUFFERLENGTH])
            ]);
        }
        return this[READ](n || null, this.buffer.head.value);
      } finally {
        this[MAYBE_EMIT_END]();
      }
    }
    [READ](n, chunk) {
      if (n === chunk.length || n === null)
        this[BUFFERSHIFT]();
      else {
        this.buffer.head.value = chunk.slice(n);
        chunk = chunk.slice(0, n);
        this[BUFFERLENGTH] -= n;
      }
      this.emit("data", chunk);
      if (!this.buffer.length && !this[EOF])
        this.emit("drain");
      return chunk;
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === "function")
        cb = chunk, chunk = null;
      if (typeof encoding === "function")
        cb = encoding, encoding = "utf8";
      if (chunk)
        this.write(chunk, encoding);
      if (cb)
        this.once("end", cb);
      this[EOF] = true;
      this.writable = false;
      if (this.flowing || !this[PAUSED])
        this[MAYBE_EMIT_END]();
      return this;
    }
    [RESUME]() {
      if (this[DESTROYED])
        return;
      this[PAUSED] = false;
      this[FLOWING] = true;
      this.emit("resume");
      if (this.buffer.length)
        this[FLUSH]();
      else if (this[EOF])
        this[MAYBE_EMIT_END]();
      else
        this.emit("drain");
    }
    resume() {
      return this[RESUME]();
    }
    pause() {
      this[FLOWING] = false;
      this[PAUSED] = true;
    }
    get destroyed() {
      return this[DESTROYED];
    }
    get flowing() {
      return this[FLOWING];
    }
    get paused() {
      return this[PAUSED];
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE])
        this[BUFFERLENGTH] += 1;
      else
        this[BUFFERLENGTH] += chunk.length;
      return this.buffer.push(chunk);
    }
    [BUFFERSHIFT]() {
      if (this.buffer.length) {
        if (this[OBJECTMODE])
          this[BUFFERLENGTH] -= 1;
        else
          this[BUFFERLENGTH] -= this.buffer.head.value.length;
      }
      return this.buffer.shift();
    }
    [FLUSH](noDrain) {
      do {
      } while (this[FLUSHCHUNK](this[BUFFERSHIFT]()));
      if (!noDrain && !this.buffer.length && !this[EOF])
        this.emit("drain");
    }
    [FLUSHCHUNK](chunk) {
      return chunk ? (this.emit("data", chunk), this.flowing) : false;
    }
    pipe(dest, opts) {
      if (this[DESTROYED])
        return;
      const ended = this[EMITTED_END];
      opts = opts || {};
      if (dest === process.stdout || dest === process.stderr)
        opts.end = false;
      else
        opts.end = opts.end !== false;
      const p = {dest, opts, ondrain: (_) => this[RESUME]()};
      this.pipes.push(p);
      dest.on("drain", p.ondrain);
      this[RESUME]();
      if (ended && p.opts.end)
        p.dest.end();
      return dest;
    }
    addListener(ev, fn) {
      return this.on(ev, fn);
    }
    on(ev, fn) {
      try {
        return super.on(ev, fn);
      } finally {
        if (ev === "data" && !this.pipes.length && !this.flowing)
          this[RESUME]();
        else if (isEndish(ev) && this[EMITTED_END]) {
          super.emit(ev);
          this.removeAllListeners(ev);
        }
      }
    }
    get emittedEnd() {
      return this[EMITTED_END];
    }
    [MAYBE_EMIT_END]() {
      if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this.buffer.length === 0 && this[EOF]) {
        this[EMITTING_END] = true;
        this.emit("end");
        this.emit("prefinish");
        this.emit("finish");
        if (this[CLOSED])
          this.emit("close");
        this[EMITTING_END] = false;
      }
    }
    emit(ev, data) {
      if (ev !== "error" && ev !== "close" && ev !== DESTROYED && this[DESTROYED])
        return;
      else if (ev === "data") {
        if (!data)
          return;
        if (this.pipes.length)
          this.pipes.forEach((p) => p.dest.write(data) === false && this.pause());
      } else if (ev === "end") {
        if (this[EMITTED_END] === true)
          return;
        this[EMITTED_END] = true;
        this.readable = false;
        if (this[DECODER]) {
          data = this[DECODER].end();
          if (data) {
            this.pipes.forEach((p) => p.dest.write(data));
            super.emit("data", data);
          }
        }
        this.pipes.forEach((p) => {
          p.dest.removeListener("drain", p.ondrain);
          if (p.opts.end)
            p.dest.end();
        });
      } else if (ev === "close") {
        this[CLOSED] = true;
        if (!this[EMITTED_END] && !this[DESTROYED])
          return;
      }
      const args = new Array(arguments.length);
      args[0] = ev;
      args[1] = data;
      if (arguments.length > 2) {
        for (let i = 2; i < arguments.length; i++) {
          args[i] = arguments[i];
        }
      }
      try {
        return super.emit.apply(this, args);
      } finally {
        if (!isEndish(ev))
          this[MAYBE_EMIT_END]();
        else
          this.removeAllListeners(ev);
      }
    }
    collect() {
      const buf = [];
      if (!this[OBJECTMODE])
        buf.dataLength = 0;
      const p = this.promise();
      this.on("data", (c) => {
        buf.push(c);
        if (!this[OBJECTMODE])
          buf.dataLength += c.length;
      });
      return p.then(() => buf);
    }
    concat() {
      return this[OBJECTMODE] ? Promise.reject(new Error("cannot concat in objectMode")) : this.collect().then((buf) => this[OBJECTMODE] ? Promise.reject(new Error("cannot concat in objectMode")) : this[ENCODING] ? buf.join("") : Buffer.concat(buf, buf.dataLength));
    }
    promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error("stream destroyed")));
        this.on("end", () => resolve());
        this.on("error", (er) => reject(er));
      });
    }
    [ASYNCITERATOR]() {
      const next = () => {
        const res = this.read();
        if (res !== null)
          return Promise.resolve({done: false, value: res});
        if (this[EOF])
          return Promise.resolve({done: true});
        let resolve = null;
        let reject = null;
        const onerr = (er) => {
          this.removeListener("data", ondata);
          this.removeListener("end", onend);
          reject(er);
        };
        const ondata = (value) => {
          this.removeListener("error", onerr);
          this.removeListener("end", onend);
          this.pause();
          resolve({value, done: !!this[EOF]});
        };
        const onend = () => {
          this.removeListener("error", onerr);
          this.removeListener("data", ondata);
          resolve({done: true});
        };
        const ondestroy = () => onerr(new Error("stream destroyed"));
        return new Promise((res2, rej) => {
          reject = rej;
          resolve = res2;
          this.once(DESTROYED, ondestroy);
          this.once("error", onerr);
          this.once("end", onend);
          this.once("data", ondata);
        });
      };
      return {next};
    }
    [ITERATOR]() {
      const next = () => {
        const value = this.read();
        const done = value === null;
        return {value, done};
      };
      return {next};
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er)
          this.emit("error", er);
        else
          this.emit(DESTROYED);
        return this;
      }
      this[DESTROYED] = true;
      this.buffer = new Yallist();
      this[BUFFERLENGTH] = 0;
      if (typeof this.close === "function" && !this[CLOSED])
        this.close();
      if (er)
        this.emit("error", er);
      else
        this.emit(DESTROYED);
      return this;
    }
    static isStream(s) {
      return !!s && (s instanceof Minipass || s instanceof Stream || s instanceof EE && (typeof s.pipe === "function" || typeof s.write === "function" && typeof s.end === "function"));
    }
  };
});

// node_modules/.pnpm/minizlib@2.1.2/node_modules/minizlib/constants.js
var require_constants3 = __commonJS((exports2, module2) => {
  var realZlibConstants = require("zlib").constants || {ZLIB_VERNUM: 4736};
  module2.exports = Object.freeze(Object.assign(Object.create(null), {
    Z_NO_FLUSH: 0,
    Z_PARTIAL_FLUSH: 1,
    Z_SYNC_FLUSH: 2,
    Z_FULL_FLUSH: 3,
    Z_FINISH: 4,
    Z_BLOCK: 5,
    Z_OK: 0,
    Z_STREAM_END: 1,
    Z_NEED_DICT: 2,
    Z_ERRNO: -1,
    Z_STREAM_ERROR: -2,
    Z_DATA_ERROR: -3,
    Z_MEM_ERROR: -4,
    Z_BUF_ERROR: -5,
    Z_VERSION_ERROR: -6,
    Z_NO_COMPRESSION: 0,
    Z_BEST_SPEED: 1,
    Z_BEST_COMPRESSION: 9,
    Z_DEFAULT_COMPRESSION: -1,
    Z_FILTERED: 1,
    Z_HUFFMAN_ONLY: 2,
    Z_RLE: 3,
    Z_FIXED: 4,
    Z_DEFAULT_STRATEGY: 0,
    DEFLATE: 1,
    INFLATE: 2,
    GZIP: 3,
    GUNZIP: 4,
    DEFLATERAW: 5,
    INFLATERAW: 6,
    UNZIP: 7,
    BROTLI_DECODE: 8,
    BROTLI_ENCODE: 9,
    Z_MIN_WINDOWBITS: 8,
    Z_MAX_WINDOWBITS: 15,
    Z_DEFAULT_WINDOWBITS: 15,
    Z_MIN_CHUNK: 64,
    Z_MAX_CHUNK: Infinity,
    Z_DEFAULT_CHUNK: 16384,
    Z_MIN_MEMLEVEL: 1,
    Z_MAX_MEMLEVEL: 9,
    Z_DEFAULT_MEMLEVEL: 8,
    Z_MIN_LEVEL: -1,
    Z_MAX_LEVEL: 9,
    Z_DEFAULT_LEVEL: -1,
    BROTLI_OPERATION_PROCESS: 0,
    BROTLI_OPERATION_FLUSH: 1,
    BROTLI_OPERATION_FINISH: 2,
    BROTLI_OPERATION_EMIT_METADATA: 3,
    BROTLI_MODE_GENERIC: 0,
    BROTLI_MODE_TEXT: 1,
    BROTLI_MODE_FONT: 2,
    BROTLI_DEFAULT_MODE: 0,
    BROTLI_MIN_QUALITY: 0,
    BROTLI_MAX_QUALITY: 11,
    BROTLI_DEFAULT_QUALITY: 11,
    BROTLI_MIN_WINDOW_BITS: 10,
    BROTLI_MAX_WINDOW_BITS: 24,
    BROTLI_LARGE_MAX_WINDOW_BITS: 30,
    BROTLI_DEFAULT_WINDOW: 22,
    BROTLI_MIN_INPUT_BLOCK_BITS: 16,
    BROTLI_MAX_INPUT_BLOCK_BITS: 24,
    BROTLI_PARAM_MODE: 0,
    BROTLI_PARAM_QUALITY: 1,
    BROTLI_PARAM_LGWIN: 2,
    BROTLI_PARAM_LGBLOCK: 3,
    BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,
    BROTLI_PARAM_SIZE_HINT: 5,
    BROTLI_PARAM_LARGE_WINDOW: 6,
    BROTLI_PARAM_NPOSTFIX: 7,
    BROTLI_PARAM_NDIRECT: 8,
    BROTLI_DECODER_RESULT_ERROR: 0,
    BROTLI_DECODER_RESULT_SUCCESS: 1,
    BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,
    BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,
    BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,
    BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,
    BROTLI_DECODER_NO_ERROR: 0,
    BROTLI_DECODER_SUCCESS: 1,
    BROTLI_DECODER_NEEDS_MORE_INPUT: 2,
    BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,
    BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,
    BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,
    BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,
    BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,
    BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,
    BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,
    BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,
    BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,
    BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,
    BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,
    BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,
    BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,
    BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,
    BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,
    BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,
    BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,
    BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,
    BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,
    BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,
    BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,
    BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,
    BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,
    BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,
    BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,
    BROTLI_DECODER_ERROR_UNREACHABLE: -31
  }, realZlibConstants));
});

// node_modules/.pnpm/minizlib@2.1.2/node_modules/minizlib/index.js
var require_minizlib = __commonJS((exports2) => {
  "use strict";
  var assert = require("assert");
  var Buffer2 = require("buffer").Buffer;
  var realZlib = require("zlib");
  var constants = exports2.constants = require_constants3();
  var Minipass = require_minipass();
  var OriginalBufferConcat = Buffer2.concat;
  var _superWrite = Symbol("_superWrite");
  var ZlibError = class extends Error {
    constructor(err) {
      super("zlib: " + err.message);
      this.code = err.code;
      this.errno = err.errno;
      if (!this.code)
        this.code = "ZLIB_ERROR";
      this.message = "zlib: " + err.message;
      Error.captureStackTrace(this, this.constructor);
    }
    get name() {
      return "ZlibError";
    }
  };
  var _opts = Symbol("opts");
  var _flushFlag = Symbol("flushFlag");
  var _finishFlushFlag = Symbol("finishFlushFlag");
  var _fullFlushFlag = Symbol("fullFlushFlag");
  var _handle = Symbol("handle");
  var _onError = Symbol("onError");
  var _sawError = Symbol("sawError");
  var _level = Symbol("level");
  var _strategy = Symbol("strategy");
  var _ended = Symbol("ended");
  var _defaultFullFlush = Symbol("_defaultFullFlush");
  var ZlibBase = class extends Minipass {
    constructor(opts, mode) {
      if (!opts || typeof opts !== "object")
        throw new TypeError("invalid options for ZlibBase constructor");
      super(opts);
      this[_sawError] = false;
      this[_ended] = false;
      this[_opts] = opts;
      this[_flushFlag] = opts.flush;
      this[_finishFlushFlag] = opts.finishFlush;
      try {
        this[_handle] = new realZlib[mode](opts);
      } catch (er) {
        throw new ZlibError(er);
      }
      this[_onError] = (err) => {
        if (this[_sawError])
          return;
        this[_sawError] = true;
        this.close();
        this.emit("error", err);
      };
      this[_handle].on("error", (er) => this[_onError](new ZlibError(er)));
      this.once("end", () => this.close);
    }
    close() {
      if (this[_handle]) {
        this[_handle].close();
        this[_handle] = null;
        this.emit("close");
      }
    }
    reset() {
      if (!this[_sawError]) {
        assert(this[_handle], "zlib binding closed");
        return this[_handle].reset();
      }
    }
    flush(flushFlag) {
      if (this.ended)
        return;
      if (typeof flushFlag !== "number")
        flushFlag = this[_fullFlushFlag];
      this.write(Object.assign(Buffer2.alloc(0), {[_flushFlag]: flushFlag}));
    }
    end(chunk, encoding, cb) {
      if (chunk)
        this.write(chunk, encoding);
      this.flush(this[_finishFlushFlag]);
      this[_ended] = true;
      return super.end(null, null, cb);
    }
    get ended() {
      return this[_ended];
    }
    write(chunk, encoding, cb) {
      if (typeof encoding === "function")
        cb = encoding, encoding = "utf8";
      if (typeof chunk === "string")
        chunk = Buffer2.from(chunk, encoding);
      if (this[_sawError])
        return;
      assert(this[_handle], "zlib binding closed");
      const nativeHandle = this[_handle]._handle;
      const originalNativeClose = nativeHandle.close;
      nativeHandle.close = () => {
      };
      const originalClose = this[_handle].close;
      this[_handle].close = () => {
      };
      Buffer2.concat = (args) => args;
      let result;
      try {
        const flushFlag = typeof chunk[_flushFlag] === "number" ? chunk[_flushFlag] : this[_flushFlag];
        result = this[_handle]._processChunk(chunk, flushFlag);
        Buffer2.concat = OriginalBufferConcat;
      } catch (err) {
        Buffer2.concat = OriginalBufferConcat;
        this[_onError](new ZlibError(err));
      } finally {
        if (this[_handle]) {
          this[_handle]._handle = nativeHandle;
          nativeHandle.close = originalNativeClose;
          this[_handle].close = originalClose;
          this[_handle].removeAllListeners("error");
        }
      }
      if (this[_handle])
        this[_handle].on("error", (er) => this[_onError](new ZlibError(er)));
      let writeReturn;
      if (result) {
        if (Array.isArray(result) && result.length > 0) {
          writeReturn = this[_superWrite](Buffer2.from(result[0]));
          for (let i = 1; i < result.length; i++) {
            writeReturn = this[_superWrite](result[i]);
          }
        } else {
          writeReturn = this[_superWrite](Buffer2.from(result));
        }
      }
      if (cb)
        cb();
      return writeReturn;
    }
    [_superWrite](data) {
      return super.write(data);
    }
  };
  var Zlib = class extends ZlibBase {
    constructor(opts, mode) {
      opts = opts || {};
      opts.flush = opts.flush || constants.Z_NO_FLUSH;
      opts.finishFlush = opts.finishFlush || constants.Z_FINISH;
      super(opts, mode);
      this[_fullFlushFlag] = constants.Z_FULL_FLUSH;
      this[_level] = opts.level;
      this[_strategy] = opts.strategy;
    }
    params(level, strategy) {
      if (this[_sawError])
        return;
      if (!this[_handle])
        throw new Error("cannot switch params when binding is closed");
      if (!this[_handle].params)
        throw new Error("not supported in this implementation");
      if (this[_level] !== level || this[_strategy] !== strategy) {
        this.flush(constants.Z_SYNC_FLUSH);
        assert(this[_handle], "zlib binding closed");
        const origFlush = this[_handle].flush;
        this[_handle].flush = (flushFlag, cb) => {
          this.flush(flushFlag);
          cb();
        };
        try {
          this[_handle].params(level, strategy);
        } finally {
          this[_handle].flush = origFlush;
        }
        if (this[_handle]) {
          this[_level] = level;
          this[_strategy] = strategy;
        }
      }
    }
  };
  var Deflate = class extends Zlib {
    constructor(opts) {
      super(opts, "Deflate");
    }
  };
  var Inflate = class extends Zlib {
    constructor(opts) {
      super(opts, "Inflate");
    }
  };
  var _portable = Symbol("_portable");
  var Gzip = class extends Zlib {
    constructor(opts) {
      super(opts, "Gzip");
      this[_portable] = opts && !!opts.portable;
    }
    [_superWrite](data) {
      if (!this[_portable])
        return super[_superWrite](data);
      this[_portable] = false;
      data[9] = 255;
      return super[_superWrite](data);
    }
  };
  var Gunzip = class extends Zlib {
    constructor(opts) {
      super(opts, "Gunzip");
    }
  };
  var DeflateRaw = class extends Zlib {
    constructor(opts) {
      super(opts, "DeflateRaw");
    }
  };
  var InflateRaw = class extends Zlib {
    constructor(opts) {
      super(opts, "InflateRaw");
    }
  };
  var Unzip = class extends Zlib {
    constructor(opts) {
      super(opts, "Unzip");
    }
  };
  var Brotli = class extends ZlibBase {
    constructor(opts, mode) {
      opts = opts || {};
      opts.flush = opts.flush || constants.BROTLI_OPERATION_PROCESS;
      opts.finishFlush = opts.finishFlush || constants.BROTLI_OPERATION_FINISH;
      super(opts, mode);
      this[_fullFlushFlag] = constants.BROTLI_OPERATION_FLUSH;
    }
  };
  var BrotliCompress = class extends Brotli {
    constructor(opts) {
      super(opts, "BrotliCompress");
    }
  };
  var BrotliDecompress = class extends Brotli {
    constructor(opts) {
      super(opts, "BrotliDecompress");
    }
  };
  exports2.Deflate = Deflate;
  exports2.Inflate = Inflate;
  exports2.Gzip = Gzip;
  exports2.Gunzip = Gunzip;
  exports2.DeflateRaw = DeflateRaw;
  exports2.InflateRaw = InflateRaw;
  exports2.Unzip = Unzip;
  if (typeof realZlib.BrotliCompress === "function") {
    exports2.BrotliCompress = BrotliCompress;
    exports2.BrotliDecompress = BrotliDecompress;
  } else {
    exports2.BrotliCompress = exports2.BrotliDecompress = class {
      constructor() {
        throw new Error("Brotli is not supported in this version of Node.js");
      }
    };
  }
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/read-entry.js
var require_read_entry = __commonJS((exports2, module2) => {
  "use strict";
  var MiniPass = require_minipass();
  var SLURP = Symbol("slurp");
  module2.exports = class ReadEntry extends MiniPass {
    constructor(header, ex, gex) {
      super();
      this.pause();
      this.extended = ex;
      this.globalExtended = gex;
      this.header = header;
      this.startBlockSize = 512 * Math.ceil(header.size / 512);
      this.blockRemain = this.startBlockSize;
      this.remain = header.size;
      this.type = header.type;
      this.meta = false;
      this.ignore = false;
      switch (this.type) {
        case "File":
        case "OldFile":
        case "Link":
        case "SymbolicLink":
        case "CharacterDevice":
        case "BlockDevice":
        case "Directory":
        case "FIFO":
        case "ContiguousFile":
        case "GNUDumpDir":
          break;
        case "NextFileHasLongLinkpath":
        case "NextFileHasLongPath":
        case "OldGnuLongPath":
        case "GlobalExtendedHeader":
        case "ExtendedHeader":
        case "OldExtendedHeader":
          this.meta = true;
          break;
        default:
          this.ignore = true;
      }
      this.path = header.path;
      this.mode = header.mode;
      if (this.mode)
        this.mode = this.mode & 4095;
      this.uid = header.uid;
      this.gid = header.gid;
      this.uname = header.uname;
      this.gname = header.gname;
      this.size = header.size;
      this.mtime = header.mtime;
      this.atime = header.atime;
      this.ctime = header.ctime;
      this.linkpath = header.linkpath;
      this.uname = header.uname;
      this.gname = header.gname;
      if (ex)
        this[SLURP](ex);
      if (gex)
        this[SLURP](gex, true);
    }
    write(data) {
      const writeLen = data.length;
      if (writeLen > this.blockRemain)
        throw new Error("writing more to entry than is appropriate");
      const r = this.remain;
      const br = this.blockRemain;
      this.remain = Math.max(0, r - writeLen);
      this.blockRemain = Math.max(0, br - writeLen);
      if (this.ignore)
        return true;
      if (r >= writeLen)
        return super.write(data);
      return super.write(data.slice(0, r));
    }
    [SLURP](ex, global2) {
      for (const k in ex) {
        if (ex[k] !== null && ex[k] !== void 0 && !(global2 && k === "path"))
          this[k] = ex[k];
      }
    }
  };
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/types.js
var require_types = __commonJS((exports2) => {
  "use strict";
  exports2.name = new Map([
    ["0", "File"],
    ["", "OldFile"],
    ["1", "Link"],
    ["2", "SymbolicLink"],
    ["3", "CharacterDevice"],
    ["4", "BlockDevice"],
    ["5", "Directory"],
    ["6", "FIFO"],
    ["7", "ContiguousFile"],
    ["g", "GlobalExtendedHeader"],
    ["x", "ExtendedHeader"],
    ["A", "SolarisACL"],
    ["D", "GNUDumpDir"],
    ["I", "Inode"],
    ["K", "NextFileHasLongLinkpath"],
    ["L", "NextFileHasLongPath"],
    ["M", "ContinuationFile"],
    ["N", "OldGnuLongPath"],
    ["S", "SparseFile"],
    ["V", "TapeVolumeHeader"],
    ["X", "OldExtendedHeader"]
  ]);
  exports2.code = new Map(Array.from(exports2.name).map((kv) => [kv[1], kv[0]]));
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/large-numbers.js
var require_large_numbers = __commonJS((exports2, module2) => {
  "use strict";
  var encode = (num, buf) => {
    if (!Number.isSafeInteger(num))
      throw Error("cannot encode number outside of javascript safe integer range");
    else if (num < 0)
      encodeNegative(num, buf);
    else
      encodePositive(num, buf);
    return buf;
  };
  var encodePositive = (num, buf) => {
    buf[0] = 128;
    for (var i = buf.length; i > 1; i--) {
      buf[i - 1] = num & 255;
      num = Math.floor(num / 256);
    }
  };
  var encodeNegative = (num, buf) => {
    buf[0] = 255;
    var flipped = false;
    num = num * -1;
    for (var i = buf.length; i > 1; i--) {
      var byte = num & 255;
      num = Math.floor(num / 256);
      if (flipped)
        buf[i - 1] = onesComp(byte);
      else if (byte === 0)
        buf[i - 1] = 0;
      else {
        flipped = true;
        buf[i - 1] = twosComp(byte);
      }
    }
  };
  var parse2 = (buf) => {
    const pre = buf[0];
    const value = pre === 128 ? pos(buf.slice(1, buf.length)) : pre === 255 ? twos(buf) : null;
    if (value === null)
      throw Error("invalid base256 encoding");
    if (!Number.isSafeInteger(value))
      throw Error("parsed number outside of javascript safe integer range");
    return value;
  };
  var twos = (buf) => {
    var len = buf.length;
    var sum = 0;
    var flipped = false;
    for (var i = len - 1; i > -1; i--) {
      var byte = buf[i];
      var f;
      if (flipped)
        f = onesComp(byte);
      else if (byte === 0)
        f = byte;
      else {
        flipped = true;
        f = twosComp(byte);
      }
      if (f !== 0)
        sum -= f * Math.pow(256, len - i - 1);
    }
    return sum;
  };
  var pos = (buf) => {
    var len = buf.length;
    var sum = 0;
    for (var i = len - 1; i > -1; i--) {
      var byte = buf[i];
      if (byte !== 0)
        sum += byte * Math.pow(256, len - i - 1);
    }
    return sum;
  };
  var onesComp = (byte) => (255 ^ byte) & 255;
  var twosComp = (byte) => (255 ^ byte) + 1 & 255;
  module2.exports = {
    encode,
    parse: parse2
  };
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/header.js
var require_header = __commonJS((exports2, module2) => {
  "use strict";
  var types = require_types();
  var pathModule = require("path").posix;
  var large = require_large_numbers();
  var SLURP = Symbol("slurp");
  var TYPE = Symbol("type");
  var Header = class {
    constructor(data, off, ex, gex) {
      this.cksumValid = false;
      this.needPax = false;
      this.nullBlock = false;
      this.block = null;
      this.path = null;
      this.mode = null;
      this.uid = null;
      this.gid = null;
      this.size = null;
      this.mtime = null;
      this.cksum = null;
      this[TYPE] = "0";
      this.linkpath = null;
      this.uname = null;
      this.gname = null;
      this.devmaj = 0;
      this.devmin = 0;
      this.atime = null;
      this.ctime = null;
      if (Buffer.isBuffer(data))
        this.decode(data, off || 0, ex, gex);
      else if (data)
        this.set(data);
    }
    decode(buf, off, ex, gex) {
      if (!off)
        off = 0;
      if (!buf || !(buf.length >= off + 512))
        throw new Error("need 512 bytes for header");
      this.path = decString(buf, off, 100);
      this.mode = decNumber(buf, off + 100, 8);
      this.uid = decNumber(buf, off + 108, 8);
      this.gid = decNumber(buf, off + 116, 8);
      this.size = decNumber(buf, off + 124, 12);
      this.mtime = decDate(buf, off + 136, 12);
      this.cksum = decNumber(buf, off + 148, 12);
      this[SLURP](ex);
      this[SLURP](gex, true);
      this[TYPE] = decString(buf, off + 156, 1);
      if (this[TYPE] === "")
        this[TYPE] = "0";
      if (this[TYPE] === "0" && this.path.substr(-1) === "/")
        this[TYPE] = "5";
      if (this[TYPE] === "5")
        this.size = 0;
      this.linkpath = decString(buf, off + 157, 100);
      if (buf.slice(off + 257, off + 265).toString() === "ustar\x0000") {
        this.uname = decString(buf, off + 265, 32);
        this.gname = decString(buf, off + 297, 32);
        this.devmaj = decNumber(buf, off + 329, 8);
        this.devmin = decNumber(buf, off + 337, 8);
        if (buf[off + 475] !== 0) {
          const prefix = decString(buf, off + 345, 155);
          this.path = prefix + "/" + this.path;
        } else {
          const prefix = decString(buf, off + 345, 130);
          if (prefix)
            this.path = prefix + "/" + this.path;
          this.atime = decDate(buf, off + 476, 12);
          this.ctime = decDate(buf, off + 488, 12);
        }
      }
      let sum = 8 * 32;
      for (let i = off; i < off + 148; i++)
        sum += buf[i];
      for (let i = off + 156; i < off + 512; i++)
        sum += buf[i];
      this.cksumValid = sum === this.cksum;
      if (this.cksum === null && sum === 8 * 32)
        this.nullBlock = true;
    }
    [SLURP](ex, global2) {
      for (const k in ex) {
        if (ex[k] !== null && ex[k] !== void 0 && !(global2 && k === "path"))
          this[k] = ex[k];
      }
    }
    encode(buf, off) {
      if (!buf) {
        buf = this.block = Buffer.alloc(512);
        off = 0;
      }
      if (!off)
        off = 0;
      if (!(buf.length >= off + 512))
        throw new Error("need 512 bytes for header");
      const prefixSize = this.ctime || this.atime ? 130 : 155;
      const split = splitPrefix(this.path || "", prefixSize);
      const path2 = split[0];
      const prefix = split[1];
      this.needPax = split[2];
      this.needPax = encString(buf, off, 100, path2) || this.needPax;
      this.needPax = encNumber(buf, off + 100, 8, this.mode) || this.needPax;
      this.needPax = encNumber(buf, off + 108, 8, this.uid) || this.needPax;
      this.needPax = encNumber(buf, off + 116, 8, this.gid) || this.needPax;
      this.needPax = encNumber(buf, off + 124, 12, this.size) || this.needPax;
      this.needPax = encDate(buf, off + 136, 12, this.mtime) || this.needPax;
      buf[off + 156] = this[TYPE].charCodeAt(0);
      this.needPax = encString(buf, off + 157, 100, this.linkpath) || this.needPax;
      buf.write("ustar\x0000", off + 257, 8);
      this.needPax = encString(buf, off + 265, 32, this.uname) || this.needPax;
      this.needPax = encString(buf, off + 297, 32, this.gname) || this.needPax;
      this.needPax = encNumber(buf, off + 329, 8, this.devmaj) || this.needPax;
      this.needPax = encNumber(buf, off + 337, 8, this.devmin) || this.needPax;
      this.needPax = encString(buf, off + 345, prefixSize, prefix) || this.needPax;
      if (buf[off + 475] !== 0)
        this.needPax = encString(buf, off + 345, 155, prefix) || this.needPax;
      else {
        this.needPax = encString(buf, off + 345, 130, prefix) || this.needPax;
        this.needPax = encDate(buf, off + 476, 12, this.atime) || this.needPax;
        this.needPax = encDate(buf, off + 488, 12, this.ctime) || this.needPax;
      }
      let sum = 8 * 32;
      for (let i = off; i < off + 148; i++)
        sum += buf[i];
      for (let i = off + 156; i < off + 512; i++)
        sum += buf[i];
      this.cksum = sum;
      encNumber(buf, off + 148, 8, this.cksum);
      this.cksumValid = true;
      return this.needPax;
    }
    set(data) {
      for (const i in data) {
        if (data[i] !== null && data[i] !== void 0)
          this[i] = data[i];
      }
    }
    get type() {
      return types.name.get(this[TYPE]) || this[TYPE];
    }
    get typeKey() {
      return this[TYPE];
    }
    set type(type) {
      if (types.code.has(type))
        this[TYPE] = types.code.get(type);
      else
        this[TYPE] = type;
    }
  };
  var splitPrefix = (p, prefixSize) => {
    const pathSize = 100;
    let pp = p;
    let prefix = "";
    let ret;
    const root = pathModule.parse(p).root || ".";
    if (Buffer.byteLength(pp) < pathSize)
      ret = [pp, prefix, false];
    else {
      prefix = pathModule.dirname(pp);
      pp = pathModule.basename(pp);
      do {
        if (Buffer.byteLength(pp) <= pathSize && Buffer.byteLength(prefix) <= prefixSize)
          ret = [pp, prefix, false];
        else if (Buffer.byteLength(pp) > pathSize && Buffer.byteLength(prefix) <= prefixSize)
          ret = [pp.substr(0, pathSize - 1), prefix, true];
        else {
          pp = pathModule.join(pathModule.basename(prefix), pp);
          prefix = pathModule.dirname(prefix);
        }
      } while (prefix !== root && !ret);
      if (!ret)
        ret = [p.substr(0, pathSize - 1), "", true];
    }
    return ret;
  };
  var decString = (buf, off, size) => buf.slice(off, off + size).toString("utf8").replace(/\0.*/, "");
  var decDate = (buf, off, size) => numToDate(decNumber(buf, off, size));
  var numToDate = (num) => num === null ? null : new Date(num * 1e3);
  var decNumber = (buf, off, size) => buf[off] & 128 ? large.parse(buf.slice(off, off + size)) : decSmallNumber(buf, off, size);
  var nanNull = (value) => isNaN(value) ? null : value;
  var decSmallNumber = (buf, off, size) => nanNull(parseInt(buf.slice(off, off + size).toString("utf8").replace(/\0.*$/, "").trim(), 8));
  var MAXNUM = {
    12: 8589934591,
    8: 2097151
  };
  var encNumber = (buf, off, size, number) => number === null ? false : number > MAXNUM[size] || number < 0 ? (large.encode(number, buf.slice(off, off + size)), true) : (encSmallNumber(buf, off, size, number), false);
  var encSmallNumber = (buf, off, size, number) => buf.write(octalString(number, size), off, size, "ascii");
  var octalString = (number, size) => padOctal(Math.floor(number).toString(8), size);
  var padOctal = (string, size) => (string.length === size - 1 ? string : new Array(size - string.length - 1).join("0") + string + " ") + "\0";
  var encDate = (buf, off, size, date) => date === null ? false : encNumber(buf, off, size, date.getTime() / 1e3);
  var NULLS = new Array(156).join("\0");
  var encString = (buf, off, size, string) => string === null ? false : (buf.write(string + NULLS, off, size, "utf8"), string.length !== Buffer.byteLength(string) || string.length > size);
  module2.exports = Header;
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/pax.js
var require_pax = __commonJS((exports2, module2) => {
  "use strict";
  var Header = require_header();
  var path2 = require("path");
  var Pax = class {
    constructor(obj, global2) {
      this.atime = obj.atime || null;
      this.charset = obj.charset || null;
      this.comment = obj.comment || null;
      this.ctime = obj.ctime || null;
      this.gid = obj.gid || null;
      this.gname = obj.gname || null;
      this.linkpath = obj.linkpath || null;
      this.mtime = obj.mtime || null;
      this.path = obj.path || null;
      this.size = obj.size || null;
      this.uid = obj.uid || null;
      this.uname = obj.uname || null;
      this.dev = obj.dev || null;
      this.ino = obj.ino || null;
      this.nlink = obj.nlink || null;
      this.global = global2 || false;
    }
    encode() {
      const body = this.encodeBody();
      if (body === "")
        return null;
      const bodyLen = Buffer.byteLength(body);
      const bufLen = 512 * Math.ceil(1 + bodyLen / 512);
      const buf = Buffer.allocUnsafe(bufLen);
      for (let i = 0; i < 512; i++)
        buf[i] = 0;
      new Header({
        path: ("PaxHeader/" + path2.basename(this.path)).slice(0, 99),
        mode: this.mode || 420,
        uid: this.uid || null,
        gid: this.gid || null,
        size: bodyLen,
        mtime: this.mtime || null,
        type: this.global ? "GlobalExtendedHeader" : "ExtendedHeader",
        linkpath: "",
        uname: this.uname || "",
        gname: this.gname || "",
        devmaj: 0,
        devmin: 0,
        atime: this.atime || null,
        ctime: this.ctime || null
      }).encode(buf);
      buf.write(body, 512, bodyLen, "utf8");
      for (let i = bodyLen + 512; i < buf.length; i++)
        buf[i] = 0;
      return buf;
    }
    encodeBody() {
      return this.encodeField("path") + this.encodeField("ctime") + this.encodeField("atime") + this.encodeField("dev") + this.encodeField("ino") + this.encodeField("nlink") + this.encodeField("charset") + this.encodeField("comment") + this.encodeField("gid") + this.encodeField("gname") + this.encodeField("linkpath") + this.encodeField("mtime") + this.encodeField("size") + this.encodeField("uid") + this.encodeField("uname");
    }
    encodeField(field) {
      if (this[field] === null || this[field] === void 0)
        return "";
      const v = this[field] instanceof Date ? this[field].getTime() / 1e3 : this[field];
      const s = " " + (field === "dev" || field === "ino" || field === "nlink" ? "SCHILY." : "") + field + "=" + v + "\n";
      const byteLen = Buffer.byteLength(s);
      let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1;
      if (byteLen + digits >= Math.pow(10, digits))
        digits += 1;
      const len = digits + byteLen;
      return len + s;
    }
  };
  Pax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g);
  var merge = (a, b) => b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a;
  var parseKV = (string) => string.replace(/\n$/, "").split("\n").reduce(parseKVLine, Object.create(null));
  var parseKVLine = (set, line) => {
    const n = parseInt(line, 10);
    if (n !== Buffer.byteLength(line) + 1)
      return set;
    line = line.substr((n + " ").length);
    const kv = line.split("=");
    const k = kv.shift().replace(/^SCHILY\.(dev|ino|nlink)/, "$1");
    if (!k)
      return set;
    const v = kv.join("=");
    set[k] = /^([A-Z]+\.)?([mac]|birth|creation)time$/.test(k) ? new Date(v * 1e3) : /^[0-9]+$/.test(v) ? +v : v;
    return set;
  };
  module2.exports = Pax;
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/warn-mixin.js
var require_warn_mixin = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (Base) => class extends Base {
    warn(code, message, data = {}) {
      if (this.file)
        data.file = this.file;
      if (this.cwd)
        data.cwd = this.cwd;
      data.code = message instanceof Error && message.code || code;
      data.tarCode = code;
      if (!this.strict && data.recoverable !== false) {
        if (message instanceof Error) {
          data = Object.assign(message, data);
          message = message.message;
        }
        this.emit("warn", data.tarCode, message, data);
      } else if (message instanceof Error)
        this.emit("error", Object.assign(message, data));
      else
        this.emit("error", Object.assign(new Error(`${code}: ${message}`), data));
    }
  };
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/winchars.js
var require_winchars = __commonJS((exports2, module2) => {
  "use strict";
  var raw = [
    "|",
    "<",
    ">",
    "?",
    ":"
  ];
  var win = raw.map((char) => String.fromCharCode(61440 + char.charCodeAt(0)));
  var toWin = new Map(raw.map((char, i) => [char, win[i]]));
  var toRaw = new Map(win.map((char, i) => [char, raw[i]]));
  module2.exports = {
    encode: (s) => raw.reduce((s2, c) => s2.split(c).join(toWin.get(c)), s),
    decode: (s) => win.reduce((s2, c) => s2.split(c).join(toRaw.get(c)), s)
  };
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/mode-fix.js
var require_mode_fix = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = (mode, isDir, portable) => {
    mode &= 4095;
    if (portable)
      mode = (mode | 384) & ~18;
    if (isDir) {
      if (mode & 256)
        mode |= 64;
      if (mode & 32)
        mode |= 8;
      if (mode & 4)
        mode |= 1;
    }
    return mode;
  };
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/write-entry.js
var require_write_entry = __commonJS((exports2, module2) => {
  "use strict";
  var MiniPass = require_minipass();
  var Pax = require_pax();
  var Header = require_header();
  var fs2 = require("fs");
  var path2 = require("path");
  var maxReadSize = 16 * 1024 * 1024;
  var PROCESS = Symbol("process");
  var FILE = Symbol("file");
  var DIRECTORY = Symbol("directory");
  var SYMLINK = Symbol("symlink");
  var HARDLINK = Symbol("hardlink");
  var HEADER = Symbol("header");
  var READ = Symbol("read");
  var LSTAT = Symbol("lstat");
  var ONLSTAT = Symbol("onlstat");
  var ONREAD = Symbol("onread");
  var ONREADLINK = Symbol("onreadlink");
  var OPENFILE = Symbol("openfile");
  var ONOPENFILE = Symbol("onopenfile");
  var CLOSE = Symbol("close");
  var MODE = Symbol("mode");
  var warner = require_warn_mixin();
  var winchars = require_winchars();
  var modeFix = require_mode_fix();
  var WriteEntry = warner(class WriteEntry extends MiniPass {
    constructor(p, opt) {
      opt = opt || {};
      super(opt);
      if (typeof p !== "string")
        throw new TypeError("path is required");
      this.path = p;
      this.portable = !!opt.portable;
      this.myuid = process.getuid && process.getuid();
      this.myuser = process.env.USER || "";
      this.maxReadSize = opt.maxReadSize || maxReadSize;
      this.linkCache = opt.linkCache || new Map();
      this.statCache = opt.statCache || new Map();
      this.preservePaths = !!opt.preservePaths;
      this.cwd = opt.cwd || process.cwd();
      this.strict = !!opt.strict;
      this.noPax = !!opt.noPax;
      this.noMtime = !!opt.noMtime;
      this.mtime = opt.mtime || null;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      let pathWarn = false;
      if (!this.preservePaths && path2.win32.isAbsolute(p)) {
        const parsed = path2.win32.parse(p);
        this.path = p.substr(parsed.root.length);
        pathWarn = parsed.root;
      }
      this.win32 = !!opt.win32 || process.platform === "win32";
      if (this.win32) {
        this.path = winchars.decode(this.path.replace(/\\/g, "/"));
        p = p.replace(/\\/g, "/");
      }
      this.absolute = opt.absolute || path2.resolve(this.cwd, p);
      if (this.path === "")
        this.path = "./";
      if (pathWarn) {
        this.warn("TAR_ENTRY_INFO", `stripping ${pathWarn} from absolute path`, {
          entry: this,
          path: pathWarn + this.path
        });
      }
      if (this.statCache.has(this.absolute))
        this[ONLSTAT](this.statCache.get(this.absolute));
      else
        this[LSTAT]();
    }
    [LSTAT]() {
      fs2.lstat(this.absolute, (er, stat) => {
        if (er)
          return this.emit("error", er);
        this[ONLSTAT](stat);
      });
    }
    [ONLSTAT](stat) {
      this.statCache.set(this.absolute, stat);
      this.stat = stat;
      if (!stat.isFile())
        stat.size = 0;
      this.type = getType(stat);
      this.emit("stat", stat);
      this[PROCESS]();
    }
    [PROCESS]() {
      switch (this.type) {
        case "File":
          return this[FILE]();
        case "Directory":
          return this[DIRECTORY]();
        case "SymbolicLink":
          return this[SYMLINK]();
        default:
          return this.end();
      }
    }
    [MODE](mode) {
      return modeFix(mode, this.type === "Directory", this.portable);
    }
    [HEADER]() {
      if (this.type === "Directory" && this.portable)
        this.noMtime = true;
      this.header = new Header({
        path: this.path,
        linkpath: this.linkpath,
        mode: this[MODE](this.stat.mode),
        uid: this.portable ? null : this.stat.uid,
        gid: this.portable ? null : this.stat.gid,
        size: this.stat.size,
        mtime: this.noMtime ? null : this.mtime || this.stat.mtime,
        type: this.type,
        uname: this.portable ? null : this.stat.uid === this.myuid ? this.myuser : "",
        atime: this.portable ? null : this.stat.atime,
        ctime: this.portable ? null : this.stat.ctime
      });
      if (this.header.encode() && !this.noPax) {
        this.write(new Pax({
          atime: this.portable ? null : this.header.atime,
          ctime: this.portable ? null : this.header.ctime,
          gid: this.portable ? null : this.header.gid,
          mtime: this.noMtime ? null : this.mtime || this.header.mtime,
          path: this.path,
          linkpath: this.linkpath,
          size: this.header.size,
          uid: this.portable ? null : this.header.uid,
          uname: this.portable ? null : this.header.uname,
          dev: this.portable ? null : this.stat.dev,
          ino: this.portable ? null : this.stat.ino,
          nlink: this.portable ? null : this.stat.nlink
        }).encode());
      }
      this.write(this.header.block);
    }
    [DIRECTORY]() {
      if (this.path.substr(-1) !== "/")
        this.path += "/";
      this.stat.size = 0;
      this[HEADER]();
      this.end();
    }
    [SYMLINK]() {
      fs2.readlink(this.absolute, (er, linkpath) => {
        if (er)
          return this.emit("error", er);
        this[ONREADLINK](linkpath);
      });
    }
    [ONREADLINK](linkpath) {
      this.linkpath = linkpath.replace(/\\/g, "/");
      this[HEADER]();
      this.end();
    }
    [HARDLINK](linkpath) {
      this.type = "Link";
      this.linkpath = path2.relative(this.cwd, linkpath).replace(/\\/g, "/");
      this.stat.size = 0;
      this[HEADER]();
      this.end();
    }
    [FILE]() {
      if (this.stat.nlink > 1) {
        const linkKey = this.stat.dev + ":" + this.stat.ino;
        if (this.linkCache.has(linkKey)) {
          const linkpath = this.linkCache.get(linkKey);
          if (linkpath.indexOf(this.cwd) === 0)
            return this[HARDLINK](linkpath);
        }
        this.linkCache.set(linkKey, this.absolute);
      }
      this[HEADER]();
      if (this.stat.size === 0)
        return this.end();
      this[OPENFILE]();
    }
    [OPENFILE]() {
      fs2.open(this.absolute, "r", (er, fd) => {
        if (er)
          return this.emit("error", er);
        this[ONOPENFILE](fd);
      });
    }
    [ONOPENFILE](fd) {
      const blockLen = 512 * Math.ceil(this.stat.size / 512);
      const bufLen = Math.min(blockLen, this.maxReadSize);
      const buf = Buffer.allocUnsafe(bufLen);
      this[READ](fd, buf, 0, buf.length, 0, this.stat.size, blockLen);
    }
    [READ](fd, buf, offset, length, pos, remain, blockRemain) {
      fs2.read(fd, buf, offset, length, pos, (er, bytesRead) => {
        if (er) {
          return this[CLOSE](fd, () => this.emit("error", er));
        }
        this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead);
      });
    }
    [CLOSE](fd, cb) {
      fs2.close(fd, cb);
    }
    [ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead) {
      if (bytesRead <= 0 && remain > 0) {
        const er = new Error("encountered unexpected EOF");
        er.path = this.absolute;
        er.syscall = "read";
        er.code = "EOF";
        return this[CLOSE](fd, () => this.emit("error", er));
      }
      if (bytesRead > remain) {
        const er = new Error("did not encounter expected EOF");
        er.path = this.absolute;
        er.syscall = "read";
        er.code = "EOF";
        return this[CLOSE](fd, () => this.emit("error", er));
      }
      if (bytesRead === remain) {
        for (let i = bytesRead; i < length && bytesRead < blockRemain; i++) {
          buf[i + offset] = 0;
          bytesRead++;
          remain++;
        }
      }
      const writeBuf = offset === 0 && bytesRead === buf.length ? buf : buf.slice(offset, offset + bytesRead);
      remain -= bytesRead;
      blockRemain -= bytesRead;
      pos += bytesRead;
      offset += bytesRead;
      this.write(writeBuf);
      if (!remain) {
        if (blockRemain)
          this.write(Buffer.alloc(blockRemain));
        return this[CLOSE](fd, (er) => er ? this.emit("error", er) : this.end());
      }
      if (offset >= length) {
        buf = Buffer.allocUnsafe(length);
        offset = 0;
      }
      length = buf.length - offset;
      this[READ](fd, buf, offset, length, pos, remain, blockRemain);
    }
  });
  var WriteEntrySync = class extends WriteEntry {
    [LSTAT]() {
      this[ONLSTAT](fs2.lstatSync(this.absolute));
    }
    [SYMLINK]() {
      this[ONREADLINK](fs2.readlinkSync(this.absolute));
    }
    [OPENFILE]() {
      this[ONOPENFILE](fs2.openSync(this.absolute, "r"));
    }
    [READ](fd, buf, offset, length, pos, remain, blockRemain) {
      let threw = true;
      try {
        const bytesRead = fs2.readSync(fd, buf, offset, length, pos);
        this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead);
        threw = false;
      } finally {
        if (threw) {
          try {
            this[CLOSE](fd, () => {
            });
          } catch (er) {
          }
        }
      }
    }
    [CLOSE](fd, cb) {
      fs2.closeSync(fd);
      cb();
    }
  };
  var WriteEntryTar = warner(class WriteEntryTar extends MiniPass {
    constructor(readEntry, opt) {
      opt = opt || {};
      super(opt);
      this.preservePaths = !!opt.preservePaths;
      this.portable = !!opt.portable;
      this.strict = !!opt.strict;
      this.noPax = !!opt.noPax;
      this.noMtime = !!opt.noMtime;
      this.readEntry = readEntry;
      this.type = readEntry.type;
      if (this.type === "Directory" && this.portable)
        this.noMtime = true;
      this.path = readEntry.path;
      this.mode = this[MODE](readEntry.mode);
      this.uid = this.portable ? null : readEntry.uid;
      this.gid = this.portable ? null : readEntry.gid;
      this.uname = this.portable ? null : readEntry.uname;
      this.gname = this.portable ? null : readEntry.gname;
      this.size = readEntry.size;
      this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime;
      this.atime = this.portable ? null : readEntry.atime;
      this.ctime = this.portable ? null : readEntry.ctime;
      this.linkpath = readEntry.linkpath;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      let pathWarn = false;
      if (path2.isAbsolute(this.path) && !this.preservePaths) {
        const parsed = path2.parse(this.path);
        pathWarn = parsed.root;
        this.path = this.path.substr(parsed.root.length);
      }
      this.remain = readEntry.size;
      this.blockRemain = readEntry.startBlockSize;
      this.header = new Header({
        path: this.path,
        linkpath: this.linkpath,
        mode: this.mode,
        uid: this.portable ? null : this.uid,
        gid: this.portable ? null : this.gid,
        size: this.size,
        mtime: this.noMtime ? null : this.mtime,
        type: this.type,
        uname: this.portable ? null : this.uname,
        atime: this.portable ? null : this.atime,
        ctime: this.portable ? null : this.ctime
      });
      if (pathWarn) {
        this.warn("TAR_ENTRY_INFO", `stripping ${pathWarn} from absolute path`, {
          entry: this,
          path: pathWarn + this.path
        });
      }
      if (this.header.encode() && !this.noPax) {
        super.write(new Pax({
          atime: this.portable ? null : this.atime,
          ctime: this.portable ? null : this.ctime,
          gid: this.portable ? null : this.gid,
          mtime: this.noMtime ? null : this.mtime,
          path: this.path,
          linkpath: this.linkpath,
          size: this.size,
          uid: this.portable ? null : this.uid,
          uname: this.portable ? null : this.uname,
          dev: this.portable ? null : this.readEntry.dev,
          ino: this.portable ? null : this.readEntry.ino,
          nlink: this.portable ? null : this.readEntry.nlink
        }).encode());
      }
      super.write(this.header.block);
      readEntry.pipe(this);
    }
    [MODE](mode) {
      return modeFix(mode, this.type === "Directory", this.portable);
    }
    write(data) {
      const writeLen = data.length;
      if (writeLen > this.blockRemain)
        throw new Error("writing more to entry than is appropriate");
      this.blockRemain -= writeLen;
      return super.write(data);
    }
    end() {
      if (this.blockRemain)
        this.write(Buffer.alloc(this.blockRemain));
      return super.end();
    }
  });
  WriteEntry.Sync = WriteEntrySync;
  WriteEntry.Tar = WriteEntryTar;
  var getType = (stat) => stat.isFile() ? "File" : stat.isDirectory() ? "Directory" : stat.isSymbolicLink() ? "SymbolicLink" : "Unsupported";
  module2.exports = WriteEntry;
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/pack.js
var require_pack = __commonJS((exports2, module2) => {
  "use strict";
  var PackJob = class {
    constructor(path3, absolute) {
      this.path = path3 || "./";
      this.absolute = absolute;
      this.entry = null;
      this.stat = null;
      this.readdir = null;
      this.pending = false;
      this.ignore = false;
      this.piped = false;
    }
  };
  var MiniPass = require_minipass();
  var zlib = require_minizlib();
  var ReadEntry = require_read_entry();
  var WriteEntry = require_write_entry();
  var WriteEntrySync = WriteEntry.Sync;
  var WriteEntryTar = WriteEntry.Tar;
  var Yallist = require_yallist();
  var EOF = Buffer.alloc(1024);
  var ONSTAT = Symbol("onStat");
  var ENDED = Symbol("ended");
  var QUEUE = Symbol("queue");
  var CURRENT = Symbol("current");
  var PROCESS = Symbol("process");
  var PROCESSING = Symbol("processing");
  var PROCESSJOB = Symbol("processJob");
  var JOBS = Symbol("jobs");
  var JOBDONE = Symbol("jobDone");
  var ADDFSENTRY = Symbol("addFSEntry");
  var ADDTARENTRY = Symbol("addTarEntry");
  var STAT = Symbol("stat");
  var READDIR = Symbol("readdir");
  var ONREADDIR = Symbol("onreaddir");
  var PIPE = Symbol("pipe");
  var ENTRY = Symbol("entry");
  var ENTRYOPT = Symbol("entryOpt");
  var WRITEENTRYCLASS = Symbol("writeEntryClass");
  var WRITE = Symbol("write");
  var ONDRAIN = Symbol("ondrain");
  var fs2 = require("fs");
  var path2 = require("path");
  var warner = require_warn_mixin();
  var Pack = warner(class Pack extends MiniPass {
    constructor(opt) {
      super(opt);
      opt = opt || Object.create(null);
      this.opt = opt;
      this.file = opt.file || "";
      this.cwd = opt.cwd || process.cwd();
      this.maxReadSize = opt.maxReadSize;
      this.preservePaths = !!opt.preservePaths;
      this.strict = !!opt.strict;
      this.noPax = !!opt.noPax;
      this.prefix = (opt.prefix || "").replace(/(\\|\/)+$/, "");
      this.linkCache = opt.linkCache || new Map();
      this.statCache = opt.statCache || new Map();
      this.readdirCache = opt.readdirCache || new Map();
      this[WRITEENTRYCLASS] = WriteEntry;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      this.portable = !!opt.portable;
      this.zip = null;
      if (opt.gzip) {
        if (typeof opt.gzip !== "object")
          opt.gzip = {};
        if (this.portable)
          opt.gzip.portable = true;
        this.zip = new zlib.Gzip(opt.gzip);
        this.zip.on("data", (chunk) => super.write(chunk));
        this.zip.on("end", (_) => super.end());
        this.zip.on("drain", (_) => this[ONDRAIN]());
        this.on("resume", (_) => this.zip.resume());
      } else
        this.on("drain", this[ONDRAIN]);
      this.noDirRecurse = !!opt.noDirRecurse;
      this.follow = !!opt.follow;
      this.noMtime = !!opt.noMtime;
      this.mtime = opt.mtime || null;
      this.filter = typeof opt.filter === "function" ? opt.filter : (_) => true;
      this[QUEUE] = new Yallist();
      this[JOBS] = 0;
      this.jobs = +opt.jobs || 4;
      this[PROCESSING] = false;
      this[ENDED] = false;
    }
    [WRITE](chunk) {
      return super.write(chunk);
    }
    add(path3) {
      this.write(path3);
      return this;
    }
    end(path3) {
      if (path3)
        this.write(path3);
      this[ENDED] = true;
      this[PROCESS]();
      return this;
    }
    write(path3) {
      if (this[ENDED])
        throw new Error("write after end");
      if (path3 instanceof ReadEntry)
        this[ADDTARENTRY](path3);
      else
        this[ADDFSENTRY](path3);
      return this.flowing;
    }
    [ADDTARENTRY](p) {
      const absolute = path2.resolve(this.cwd, p.path);
      if (this.prefix)
        p.path = this.prefix + "/" + p.path.replace(/^\.(\/+|$)/, "");
      if (!this.filter(p.path, p))
        p.resume();
      else {
        const job = new PackJob(p.path, absolute, false);
        job.entry = new WriteEntryTar(p, this[ENTRYOPT](job));
        job.entry.on("end", (_) => this[JOBDONE](job));
        this[JOBS] += 1;
        this[QUEUE].push(job);
      }
      this[PROCESS]();
    }
    [ADDFSENTRY](p) {
      const absolute = path2.resolve(this.cwd, p);
      if (this.prefix)
        p = this.prefix + "/" + p.replace(/^\.(\/+|$)/, "");
      this[QUEUE].push(new PackJob(p, absolute));
      this[PROCESS]();
    }
    [STAT](job) {
      job.pending = true;
      this[JOBS] += 1;
      const stat = this.follow ? "stat" : "lstat";
      fs2[stat](job.absolute, (er, stat2) => {
        job.pending = false;
        this[JOBS] -= 1;
        if (er)
          this.emit("error", er);
        else
          this[ONSTAT](job, stat2);
      });
    }
    [ONSTAT](job, stat) {
      this.statCache.set(job.absolute, stat);
      job.stat = stat;
      if (!this.filter(job.path, stat))
        job.ignore = true;
      this[PROCESS]();
    }
    [READDIR](job) {
      job.pending = true;
      this[JOBS] += 1;
      fs2.readdir(job.absolute, (er, entries) => {
        job.pending = false;
        this[JOBS] -= 1;
        if (er)
          return this.emit("error", er);
        this[ONREADDIR](job, entries);
      });
    }
    [ONREADDIR](job, entries) {
      this.readdirCache.set(job.absolute, entries);
      job.readdir = entries;
      this[PROCESS]();
    }
    [PROCESS]() {
      if (this[PROCESSING])
        return;
      this[PROCESSING] = true;
      for (let w = this[QUEUE].head; w !== null && this[JOBS] < this.jobs; w = w.next) {
        this[PROCESSJOB](w.value);
        if (w.value.ignore) {
          const p = w.next;
          this[QUEUE].removeNode(w);
          w.next = p;
        }
      }
      this[PROCESSING] = false;
      if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {
        if (this.zip)
          this.zip.end(EOF);
        else {
          super.write(EOF);
          super.end();
        }
      }
    }
    get [CURRENT]() {
      return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value;
    }
    [JOBDONE](job) {
      this[QUEUE].shift();
      this[JOBS] -= 1;
      this[PROCESS]();
    }
    [PROCESSJOB](job) {
      if (job.pending)
        return;
      if (job.entry) {
        if (job === this[CURRENT] && !job.piped)
          this[PIPE](job);
        return;
      }
      if (!job.stat) {
        if (this.statCache.has(job.absolute))
          this[ONSTAT](job, this.statCache.get(job.absolute));
        else
          this[STAT](job);
      }
      if (!job.stat)
        return;
      if (job.ignore)
        return;
      if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {
        if (this.readdirCache.has(job.absolute))
          this[ONREADDIR](job, this.readdirCache.get(job.absolute));
        else
          this[READDIR](job);
        if (!job.readdir)
          return;
      }
      job.entry = this[ENTRY](job);
      if (!job.entry) {
        job.ignore = true;
        return;
      }
      if (job === this[CURRENT] && !job.piped)
        this[PIPE](job);
    }
    [ENTRYOPT](job) {
      return {
        onwarn: (code, msg, data) => this.warn(code, msg, data),
        noPax: this.noPax,
        cwd: this.cwd,
        absolute: job.absolute,
        preservePaths: this.preservePaths,
        maxReadSize: this.maxReadSize,
        strict: this.strict,
        portable: this.portable,
        linkCache: this.linkCache,
        statCache: this.statCache,
        noMtime: this.noMtime,
        mtime: this.mtime
      };
    }
    [ENTRY](job) {
      this[JOBS] += 1;
      try {
        return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job)).on("end", () => this[JOBDONE](job)).on("error", (er) => this.emit("error", er));
      } catch (er) {
        this.emit("error", er);
      }
    }
    [ONDRAIN]() {
      if (this[CURRENT] && this[CURRENT].entry)
        this[CURRENT].entry.resume();
    }
    [PIPE](job) {
      job.piped = true;
      if (job.readdir) {
        job.readdir.forEach((entry) => {
          const p = this.prefix ? job.path.slice(this.prefix.length + 1) || "./" : job.path;
          const base = p === "./" ? "" : p.replace(/\/*$/, "/");
          this[ADDFSENTRY](base + entry);
        });
      }
      const source = job.entry;
      const zip = this.zip;
      if (zip) {
        source.on("data", (chunk) => {
          if (!zip.write(chunk))
            source.pause();
        });
      } else {
        source.on("data", (chunk) => {
          if (!super.write(chunk))
            source.pause();
        });
      }
    }
    pause() {
      if (this.zip)
        this.zip.pause();
      return super.pause();
    }
  });
  var PackSync = class extends Pack {
    constructor(opt) {
      super(opt);
      this[WRITEENTRYCLASS] = WriteEntrySync;
    }
    pause() {
    }
    resume() {
    }
    [STAT](job) {
      const stat = this.follow ? "statSync" : "lstatSync";
      this[ONSTAT](job, fs2[stat](job.absolute));
    }
    [READDIR](job, stat) {
      this[ONREADDIR](job, fs2.readdirSync(job.absolute));
    }
    [PIPE](job) {
      const source = job.entry;
      const zip = this.zip;
      if (job.readdir) {
        job.readdir.forEach((entry) => {
          const p = this.prefix ? job.path.slice(this.prefix.length + 1) || "./" : job.path;
          const base = p === "./" ? "" : p.replace(/\/*$/, "/");
          this[ADDFSENTRY](base + entry);
        });
      }
      if (zip) {
        source.on("data", (chunk) => {
          zip.write(chunk);
        });
      } else {
        source.on("data", (chunk) => {
          super[WRITE](chunk);
        });
      }
    }
  };
  Pack.Sync = PackSync;
  module2.exports = Pack;
});

// node_modules/.pnpm/fs-minipass@2.1.0/node_modules/fs-minipass/index.js
var require_fs_minipass = __commonJS((exports2) => {
  "use strict";
  var MiniPass = require_minipass();
  var EE = require("events").EventEmitter;
  var fs2 = require("fs");
  var writev = fs2.writev;
  if (!writev) {
    const binding = process.binding("fs");
    const FSReqWrap = binding.FSReqWrap || binding.FSReqCallback;
    writev = (fd, iovec, pos, cb) => {
      const done = (er, bw) => cb(er, bw, iovec);
      const req = new FSReqWrap();
      req.oncomplete = done;
      binding.writeBuffers(fd, iovec, pos, req);
    };
  }
  var _autoClose = Symbol("_autoClose");
  var _close = Symbol("_close");
  var _ended = Symbol("_ended");
  var _fd = Symbol("_fd");
  var _finished = Symbol("_finished");
  var _flags = Symbol("_flags");
  var _flush = Symbol("_flush");
  var _handleChunk = Symbol("_handleChunk");
  var _makeBuf = Symbol("_makeBuf");
  var _mode = Symbol("_mode");
  var _needDrain = Symbol("_needDrain");
  var _onerror = Symbol("_onerror");
  var _onopen = Symbol("_onopen");
  var _onread = Symbol("_onread");
  var _onwrite = Symbol("_onwrite");
  var _open = Symbol("_open");
  var _path = Symbol("_path");
  var _pos = Symbol("_pos");
  var _queue = Symbol("_queue");
  var _read = Symbol("_read");
  var _readSize = Symbol("_readSize");
  var _reading = Symbol("_reading");
  var _remain = Symbol("_remain");
  var _size = Symbol("_size");
  var _write = Symbol("_write");
  var _writing = Symbol("_writing");
  var _defaultFlag = Symbol("_defaultFlag");
  var _errored = Symbol("_errored");
  var ReadStream = class extends MiniPass {
    constructor(path2, opt) {
      opt = opt || {};
      super(opt);
      this.readable = true;
      this.writable = false;
      if (typeof path2 !== "string")
        throw new TypeError("path must be a string");
      this[_errored] = false;
      this[_fd] = typeof opt.fd === "number" ? opt.fd : null;
      this[_path] = path2;
      this[_readSize] = opt.readSize || 16 * 1024 * 1024;
      this[_reading] = false;
      this[_size] = typeof opt.size === "number" ? opt.size : Infinity;
      this[_remain] = this[_size];
      this[_autoClose] = typeof opt.autoClose === "boolean" ? opt.autoClose : true;
      if (typeof this[_fd] === "number")
        this[_read]();
      else
        this[_open]();
    }
    get fd() {
      return this[_fd];
    }
    get path() {
      return this[_path];
    }
    write() {
      throw new TypeError("this is a readable stream");
    }
    end() {
      throw new TypeError("this is a readable stream");
    }
    [_open]() {
      fs2.open(this[_path], "r", (er, fd) => this[_onopen](er, fd));
    }
    [_onopen](er, fd) {
      if (er)
        this[_onerror](er);
      else {
        this[_fd] = fd;
        this.emit("open", fd);
        this[_read]();
      }
    }
    [_makeBuf]() {
      return Buffer.allocUnsafe(Math.min(this[_readSize], this[_remain]));
    }
    [_read]() {
      if (!this[_reading]) {
        this[_reading] = true;
        const buf = this[_makeBuf]();
        if (buf.length === 0)
          return process.nextTick(() => this[_onread](null, 0, buf));
        fs2.read(this[_fd], buf, 0, buf.length, null, (er, br, buf2) => this[_onread](er, br, buf2));
      }
    }
    [_onread](er, br, buf) {
      this[_reading] = false;
      if (er)
        this[_onerror](er);
      else if (this[_handleChunk](br, buf))
        this[_read]();
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === "number") {
        const fd = this[_fd];
        this[_fd] = null;
        fs2.close(fd, (er) => er ? this.emit("error", er) : this.emit("close"));
      }
    }
    [_onerror](er) {
      this[_reading] = true;
      this[_close]();
      this.emit("error", er);
    }
    [_handleChunk](br, buf) {
      let ret = false;
      this[_remain] -= br;
      if (br > 0)
        ret = super.write(br < buf.length ? buf.slice(0, br) : buf);
      if (br === 0 || this[_remain] <= 0) {
        ret = false;
        this[_close]();
        super.end();
      }
      return ret;
    }
    emit(ev, data) {
      switch (ev) {
        case "prefinish":
        case "finish":
          break;
        case "drain":
          if (typeof this[_fd] === "number")
            this[_read]();
          break;
        case "error":
          if (this[_errored])
            return;
          this[_errored] = true;
          return super.emit(ev, data);
        default:
          return super.emit(ev, data);
      }
    }
  };
  var ReadStreamSync = class extends ReadStream {
    [_open]() {
      let threw = true;
      try {
        this[_onopen](null, fs2.openSync(this[_path], "r"));
        threw = false;
      } finally {
        if (threw)
          this[_close]();
      }
    }
    [_read]() {
      let threw = true;
      try {
        if (!this[_reading]) {
          this[_reading] = true;
          do {
            const buf = this[_makeBuf]();
            const br = buf.length === 0 ? 0 : fs2.readSync(this[_fd], buf, 0, buf.length, null);
            if (!this[_handleChunk](br, buf))
              break;
          } while (true);
          this[_reading] = false;
        }
        threw = false;
      } finally {
        if (threw)
          this[_close]();
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === "number") {
        const fd = this[_fd];
        this[_fd] = null;
        fs2.closeSync(fd);
        this.emit("close");
      }
    }
  };
  var WriteStream = class extends EE {
    constructor(path2, opt) {
      opt = opt || {};
      super(opt);
      this.readable = false;
      this.writable = true;
      this[_errored] = false;
      this[_writing] = false;
      this[_ended] = false;
      this[_needDrain] = false;
      this[_queue] = [];
      this[_path] = path2;
      this[_fd] = typeof opt.fd === "number" ? opt.fd : null;
      this[_mode] = opt.mode === void 0 ? 438 : opt.mode;
      this[_pos] = typeof opt.start === "number" ? opt.start : null;
      this[_autoClose] = typeof opt.autoClose === "boolean" ? opt.autoClose : true;
      const defaultFlag = this[_pos] !== null ? "r+" : "w";
      this[_defaultFlag] = opt.flags === void 0;
      this[_flags] = this[_defaultFlag] ? defaultFlag : opt.flags;
      if (this[_fd] === null)
        this[_open]();
    }
    emit(ev, data) {
      if (ev === "error") {
        if (this[_errored])
          return;
        this[_errored] = true;
      }
      return super.emit(ev, data);
    }
    get fd() {
      return this[_fd];
    }
    get path() {
      return this[_path];
    }
    [_onerror](er) {
      this[_close]();
      this[_writing] = true;
      this.emit("error", er);
    }
    [_open]() {
      fs2.open(this[_path], this[_flags], this[_mode], (er, fd) => this[_onopen](er, fd));
    }
    [_onopen](er, fd) {
      if (this[_defaultFlag] && this[_flags] === "r+" && er && er.code === "ENOENT") {
        this[_flags] = "w";
        this[_open]();
      } else if (er)
        this[_onerror](er);
      else {
        this[_fd] = fd;
        this.emit("open", fd);
        this[_flush]();
      }
    }
    end(buf, enc) {
      if (buf)
        this.write(buf, enc);
      this[_ended] = true;
      if (!this[_writing] && !this[_queue].length && typeof this[_fd] === "number")
        this[_onwrite](null, 0);
      return this;
    }
    write(buf, enc) {
      if (typeof buf === "string")
        buf = Buffer.from(buf, enc);
      if (this[_ended]) {
        this.emit("error", new Error("write() after end()"));
        return false;
      }
      if (this[_fd] === null || this[_writing] || this[_queue].length) {
        this[_queue].push(buf);
        this[_needDrain] = true;
        return false;
      }
      this[_writing] = true;
      this[_write](buf);
      return true;
    }
    [_write](buf) {
      fs2.write(this[_fd], buf, 0, buf.length, this[_pos], (er, bw) => this[_onwrite](er, bw));
    }
    [_onwrite](er, bw) {
      if (er)
        this[_onerror](er);
      else {
        if (this[_pos] !== null)
          this[_pos] += bw;
        if (this[_queue].length)
          this[_flush]();
        else {
          this[_writing] = false;
          if (this[_ended] && !this[_finished]) {
            this[_finished] = true;
            this[_close]();
            this.emit("finish");
          } else if (this[_needDrain]) {
            this[_needDrain] = false;
            this.emit("drain");
          }
        }
      }
    }
    [_flush]() {
      if (this[_queue].length === 0) {
        if (this[_ended])
          this[_onwrite](null, 0);
      } else if (this[_queue].length === 1)
        this[_write](this[_queue].pop());
      else {
        const iovec = this[_queue];
        this[_queue] = [];
        writev(this[_fd], iovec, this[_pos], (er, bw) => this[_onwrite](er, bw));
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === "number") {
        const fd = this[_fd];
        this[_fd] = null;
        fs2.close(fd, (er) => er ? this.emit("error", er) : this.emit("close"));
      }
    }
  };
  var WriteStreamSync = class extends WriteStream {
    [_open]() {
      let fd;
      if (this[_defaultFlag] && this[_flags] === "r+") {
        try {
          fd = fs2.openSync(this[_path], this[_flags], this[_mode]);
        } catch (er) {
          if (er.code === "ENOENT") {
            this[_flags] = "w";
            return this[_open]();
          } else
            throw er;
        }
      } else
        fd = fs2.openSync(this[_path], this[_flags], this[_mode]);
      this[_onopen](null, fd);
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === "number") {
        const fd = this[_fd];
        this[_fd] = null;
        fs2.closeSync(fd);
        this.emit("close");
      }
    }
    [_write](buf) {
      let threw = true;
      try {
        this[_onwrite](null, fs2.writeSync(this[_fd], buf, 0, buf.length, this[_pos]));
        threw = false;
      } finally {
        if (threw)
          try {
            this[_close]();
          } catch (_) {
          }
      }
    }
  };
  exports2.ReadStream = ReadStream;
  exports2.ReadStreamSync = ReadStreamSync;
  exports2.WriteStream = WriteStream;
  exports2.WriteStreamSync = WriteStreamSync;
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/parse.js
var require_parse4 = __commonJS((exports2, module2) => {
  "use strict";
  var warner = require_warn_mixin();
  var Header = require_header();
  var EE = require("events");
  var Yallist = require_yallist();
  var maxMetaEntrySize = 1024 * 1024;
  var Entry = require_read_entry();
  var Pax = require_pax();
  var zlib = require_minizlib();
  var gzipHeader = Buffer.from([31, 139]);
  var STATE = Symbol("state");
  var WRITEENTRY = Symbol("writeEntry");
  var READENTRY = Symbol("readEntry");
  var NEXTENTRY = Symbol("nextEntry");
  var PROCESSENTRY = Symbol("processEntry");
  var EX = Symbol("extendedHeader");
  var GEX = Symbol("globalExtendedHeader");
  var META = Symbol("meta");
  var EMITMETA = Symbol("emitMeta");
  var BUFFER = Symbol("buffer");
  var QUEUE = Symbol("queue");
  var ENDED = Symbol("ended");
  var EMITTEDEND = Symbol("emittedEnd");
  var EMIT = Symbol("emit");
  var UNZIP = Symbol("unzip");
  var CONSUMECHUNK = Symbol("consumeChunk");
  var CONSUMECHUNKSUB = Symbol("consumeChunkSub");
  var CONSUMEBODY = Symbol("consumeBody");
  var CONSUMEMETA = Symbol("consumeMeta");
  var CONSUMEHEADER = Symbol("consumeHeader");
  var CONSUMING = Symbol("consuming");
  var BUFFERCONCAT = Symbol("bufferConcat");
  var MAYBEEND = Symbol("maybeEnd");
  var WRITING = Symbol("writing");
  var ABORTED = Symbol("aborted");
  var DONE = Symbol("onDone");
  var SAW_VALID_ENTRY = Symbol("sawValidEntry");
  var SAW_NULL_BLOCK = Symbol("sawNullBlock");
  var SAW_EOF = Symbol("sawEOF");
  var noop = (_) => true;
  module2.exports = warner(class Parser extends EE {
    constructor(opt) {
      opt = opt || {};
      super(opt);
      this.file = opt.file || "";
      this[SAW_VALID_ENTRY] = null;
      this.on(DONE, (_) => {
        if (this[STATE] === "begin" || this[SAW_VALID_ENTRY] === false) {
          this.warn("TAR_BAD_ARCHIVE", "Unrecognized archive format");
        }
      });
      if (opt.ondone)
        this.on(DONE, opt.ondone);
      else {
        this.on(DONE, (_) => {
          this.emit("prefinish");
          this.emit("finish");
          this.emit("end");
          this.emit("close");
        });
      }
      this.strict = !!opt.strict;
      this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize;
      this.filter = typeof opt.filter === "function" ? opt.filter : noop;
      this.writable = true;
      this.readable = false;
      this[QUEUE] = new Yallist();
      this[BUFFER] = null;
      this[READENTRY] = null;
      this[WRITEENTRY] = null;
      this[STATE] = "begin";
      this[META] = "";
      this[EX] = null;
      this[GEX] = null;
      this[ENDED] = false;
      this[UNZIP] = null;
      this[ABORTED] = false;
      this[SAW_NULL_BLOCK] = false;
      this[SAW_EOF] = false;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      if (typeof opt.onentry === "function")
        this.on("entry", opt.onentry);
    }
    [CONSUMEHEADER](chunk, position) {
      if (this[SAW_VALID_ENTRY] === null)
        this[SAW_VALID_ENTRY] = false;
      let header;
      try {
        header = new Header(chunk, position, this[EX], this[GEX]);
      } catch (er) {
        return this.warn("TAR_ENTRY_INVALID", er);
      }
      if (header.nullBlock) {
        if (this[SAW_NULL_BLOCK]) {
          this[SAW_EOF] = true;
          if (this[STATE] === "begin")
            this[STATE] = "header";
          this[EMIT]("eof");
        } else {
          this[SAW_NULL_BLOCK] = true;
          this[EMIT]("nullBlock");
        }
      } else {
        this[SAW_NULL_BLOCK] = false;
        if (!header.cksumValid)
          this.warn("TAR_ENTRY_INVALID", "checksum failure", {header});
        else if (!header.path)
          this.warn("TAR_ENTRY_INVALID", "path is required", {header});
        else {
          const type = header.type;
          if (/^(Symbolic)?Link$/.test(type) && !header.linkpath)
            this.warn("TAR_ENTRY_INVALID", "linkpath required", {header});
          else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath)
            this.warn("TAR_ENTRY_INVALID", "linkpath forbidden", {header});
          else {
            const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX]);
            if (!this[SAW_VALID_ENTRY]) {
              if (entry.remain) {
                const onend = () => {
                  if (!entry.invalid)
                    this[SAW_VALID_ENTRY] = true;
                };
                entry.on("end", onend);
              } else
                this[SAW_VALID_ENTRY] = true;
            }
            if (entry.meta) {
              if (entry.size > this.maxMetaEntrySize) {
                entry.ignore = true;
                this[EMIT]("ignoredEntry", entry);
                this[STATE] = "ignore";
                entry.resume();
              } else if (entry.size > 0) {
                this[META] = "";
                entry.on("data", (c) => this[META] += c);
                this[STATE] = "meta";
              }
            } else {
              this[EX] = null;
              entry.ignore = entry.ignore || !this.filter(entry.path, entry);
              if (entry.ignore) {
                this[EMIT]("ignoredEntry", entry);
                this[STATE] = entry.remain ? "ignore" : "header";
                entry.resume();
              } else {
                if (entry.remain)
                  this[STATE] = "body";
                else {
                  this[STATE] = "header";
                  entry.end();
                }
                if (!this[READENTRY]) {
                  this[QUEUE].push(entry);
                  this[NEXTENTRY]();
                } else
                  this[QUEUE].push(entry);
              }
            }
          }
        }
      }
    }
    [PROCESSENTRY](entry) {
      let go = true;
      if (!entry) {
        this[READENTRY] = null;
        go = false;
      } else if (Array.isArray(entry))
        this.emit.apply(this, entry);
      else {
        this[READENTRY] = entry;
        this.emit("entry", entry);
        if (!entry.emittedEnd) {
          entry.on("end", (_) => this[NEXTENTRY]());
          go = false;
        }
      }
      return go;
    }
    [NEXTENTRY]() {
      do {
      } while (this[PROCESSENTRY](this[QUEUE].shift()));
      if (!this[QUEUE].length) {
        const re = this[READENTRY];
        const drainNow = !re || re.flowing || re.size === re.remain;
        if (drainNow) {
          if (!this[WRITING])
            this.emit("drain");
        } else
          re.once("drain", (_) => this.emit("drain"));
      }
    }
    [CONSUMEBODY](chunk, position) {
      const entry = this[WRITEENTRY];
      const br = entry.blockRemain;
      const c = br >= chunk.length && position === 0 ? chunk : chunk.slice(position, position + br);
      entry.write(c);
      if (!entry.blockRemain) {
        this[STATE] = "header";
        this[WRITEENTRY] = null;
        entry.end();
      }
      return c.length;
    }
    [CONSUMEMETA](chunk, position) {
      const entry = this[WRITEENTRY];
      const ret = this[CONSUMEBODY](chunk, position);
      if (!this[WRITEENTRY])
        this[EMITMETA](entry);
      return ret;
    }
    [EMIT](ev, data, extra) {
      if (!this[QUEUE].length && !this[READENTRY])
        this.emit(ev, data, extra);
      else
        this[QUEUE].push([ev, data, extra]);
    }
    [EMITMETA](entry) {
      this[EMIT]("meta", this[META]);
      switch (entry.type) {
        case "ExtendedHeader":
        case "OldExtendedHeader":
          this[EX] = Pax.parse(this[META], this[EX], false);
          break;
        case "GlobalExtendedHeader":
          this[GEX] = Pax.parse(this[META], this[GEX], true);
          break;
        case "NextFileHasLongPath":
        case "OldGnuLongPath":
          this[EX] = this[EX] || Object.create(null);
          this[EX].path = this[META].replace(/\0.*/, "");
          break;
        case "NextFileHasLongLinkpath":
          this[EX] = this[EX] || Object.create(null);
          this[EX].linkpath = this[META].replace(/\0.*/, "");
          break;
        default:
          throw new Error("unknown meta: " + entry.type);
      }
    }
    abort(error) {
      this[ABORTED] = true;
      this.emit("abort", error);
      this.warn("TAR_ABORT", error, {recoverable: false});
    }
    write(chunk) {
      if (this[ABORTED])
        return;
      if (this[UNZIP] === null && chunk) {
        if (this[BUFFER]) {
          chunk = Buffer.concat([this[BUFFER], chunk]);
          this[BUFFER] = null;
        }
        if (chunk.length < gzipHeader.length) {
          this[BUFFER] = chunk;
          return true;
        }
        for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {
          if (chunk[i] !== gzipHeader[i])
            this[UNZIP] = false;
        }
        if (this[UNZIP] === null) {
          const ended = this[ENDED];
          this[ENDED] = false;
          this[UNZIP] = new zlib.Unzip();
          this[UNZIP].on("data", (chunk2) => this[CONSUMECHUNK](chunk2));
          this[UNZIP].on("error", (er) => this.abort(er));
          this[UNZIP].on("end", (_) => {
            this[ENDED] = true;
            this[CONSUMECHUNK]();
          });
          this[WRITING] = true;
          const ret2 = this[UNZIP][ended ? "end" : "write"](chunk);
          this[WRITING] = false;
          return ret2;
        }
      }
      this[WRITING] = true;
      if (this[UNZIP])
        this[UNZIP].write(chunk);
      else
        this[CONSUMECHUNK](chunk);
      this[WRITING] = false;
      const ret = this[QUEUE].length ? false : this[READENTRY] ? this[READENTRY].flowing : true;
      if (!ret && !this[QUEUE].length)
        this[READENTRY].once("drain", (_) => this.emit("drain"));
      return ret;
    }
    [BUFFERCONCAT](c) {
      if (c && !this[ABORTED])
        this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c;
    }
    [MAYBEEND]() {
      if (this[ENDED] && !this[EMITTEDEND] && !this[ABORTED] && !this[CONSUMING]) {
        this[EMITTEDEND] = true;
        const entry = this[WRITEENTRY];
        if (entry && entry.blockRemain) {
          const have = this[BUFFER] ? this[BUFFER].length : 0;
          this.warn("TAR_BAD_ARCHIVE", `Truncated input (needed ${entry.blockRemain} more bytes, only ${have} available)`, {entry});
          if (this[BUFFER])
            entry.write(this[BUFFER]);
          entry.end();
        }
        this[EMIT](DONE);
      }
    }
    [CONSUMECHUNK](chunk) {
      if (this[CONSUMING])
        this[BUFFERCONCAT](chunk);
      else if (!chunk && !this[BUFFER])
        this[MAYBEEND]();
      else {
        this[CONSUMING] = true;
        if (this[BUFFER]) {
          this[BUFFERCONCAT](chunk);
          const c = this[BUFFER];
          this[BUFFER] = null;
          this[CONSUMECHUNKSUB](c);
        } else
          this[CONSUMECHUNKSUB](chunk);
        while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED] && !this[SAW_EOF]) {
          const c = this[BUFFER];
          this[BUFFER] = null;
          this[CONSUMECHUNKSUB](c);
        }
        this[CONSUMING] = false;
      }
      if (!this[BUFFER] || this[ENDED])
        this[MAYBEEND]();
    }
    [CONSUMECHUNKSUB](chunk) {
      let position = 0;
      const length = chunk.length;
      while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {
        switch (this[STATE]) {
          case "begin":
          case "header":
            this[CONSUMEHEADER](chunk, position);
            position += 512;
            break;
          case "ignore":
          case "body":
            position += this[CONSUMEBODY](chunk, position);
            break;
          case "meta":
            position += this[CONSUMEMETA](chunk, position);
            break;
          default:
            throw new Error("invalid state: " + this[STATE]);
        }
      }
      if (position < length) {
        if (this[BUFFER])
          this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]]);
        else
          this[BUFFER] = chunk.slice(position);
      }
    }
    end(chunk) {
      if (!this[ABORTED]) {
        if (this[UNZIP])
          this[UNZIP].end(chunk);
        else {
          this[ENDED] = true;
          this.write(chunk);
        }
      }
    }
  });
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/list.js
var require_list = __commonJS((exports2, module2) => {
  "use strict";
  var hlo = require_high_level_opt();
  var Parser = require_parse4();
  var fs2 = require("fs");
  var fsm = require_fs_minipass();
  var path2 = require("path");
  module2.exports = (opt_, files, cb) => {
    if (typeof opt_ === "function")
      cb = opt_, files = null, opt_ = {};
    else if (Array.isArray(opt_))
      files = opt_, opt_ = {};
    if (typeof files === "function")
      cb = files, files = null;
    if (!files)
      files = [];
    else
      files = Array.from(files);
    const opt = hlo(opt_);
    if (opt.sync && typeof cb === "function")
      throw new TypeError("callback not supported for sync tar functions");
    if (!opt.file && typeof cb === "function")
      throw new TypeError("callback only supported with file option");
    if (files.length)
      filesFilter(opt, files);
    if (!opt.noResume)
      onentryFunction(opt);
    return opt.file && opt.sync ? listFileSync(opt) : opt.file ? listFile(opt, cb) : list(opt);
  };
  var onentryFunction = (opt) => {
    const onentry = opt.onentry;
    opt.onentry = onentry ? (e) => {
      onentry(e);
      e.resume();
    } : (e) => e.resume();
  };
  var filesFilter = (opt, files) => {
    const map = new Map(files.map((f) => [f.replace(/\/+$/, ""), true]));
    const filter = opt.filter;
    const mapHas = (file, r) => {
      const root = r || path2.parse(file).root || ".";
      const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path2.dirname(file), root);
      map.set(file, ret);
      return ret;
    };
    opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\/+$/, "")) : (file) => mapHas(file.replace(/\/+$/, ""));
  };
  var listFileSync = (opt) => {
    const p = list(opt);
    const file = opt.file;
    let threw = true;
    let fd;
    try {
      const stat = fs2.statSync(file);
      const readSize = opt.maxReadSize || 16 * 1024 * 1024;
      if (stat.size < readSize)
        p.end(fs2.readFileSync(file));
      else {
        let pos = 0;
        const buf = Buffer.allocUnsafe(readSize);
        fd = fs2.openSync(file, "r");
        while (pos < stat.size) {
          const bytesRead = fs2.readSync(fd, buf, 0, readSize, pos);
          pos += bytesRead;
          p.write(buf.slice(0, bytesRead));
        }
        p.end();
      }
      threw = false;
    } finally {
      if (threw && fd) {
        try {
          fs2.closeSync(fd);
        } catch (er) {
        }
      }
    }
  };
  var listFile = (opt, cb) => {
    const parse2 = new Parser(opt);
    const readSize = opt.maxReadSize || 16 * 1024 * 1024;
    const file = opt.file;
    const p = new Promise((resolve, reject) => {
      parse2.on("error", reject);
      parse2.on("end", resolve);
      fs2.stat(file, (er, stat) => {
        if (er)
          reject(er);
        else {
          const stream = new fsm.ReadStream(file, {
            readSize,
            size: stat.size
          });
          stream.on("error", reject);
          stream.pipe(parse2);
        }
      });
    });
    return cb ? p.then(cb, cb) : p;
  };
  var list = (opt) => new Parser(opt);
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/create.js
var require_create = __commonJS((exports2, module2) => {
  "use strict";
  var hlo = require_high_level_opt();
  var Pack = require_pack();
  var fsm = require_fs_minipass();
  var t = require_list();
  var path2 = require("path");
  module2.exports = (opt_, files, cb) => {
    if (typeof files === "function")
      cb = files;
    if (Array.isArray(opt_))
      files = opt_, opt_ = {};
    if (!files || !Array.isArray(files) || !files.length)
      throw new TypeError("no files or directories specified");
    files = Array.from(files);
    const opt = hlo(opt_);
    if (opt.sync && typeof cb === "function")
      throw new TypeError("callback not supported for sync tar functions");
    if (!opt.file && typeof cb === "function")
      throw new TypeError("callback only supported with file option");
    return opt.file && opt.sync ? createFileSync(opt, files) : opt.file ? createFile(opt, files, cb) : opt.sync ? createSync(opt, files) : create(opt, files);
  };
  var createFileSync = (opt, files) => {
    const p = new Pack.Sync(opt);
    const stream = new fsm.WriteStreamSync(opt.file, {
      mode: opt.mode || 438
    });
    p.pipe(stream);
    addFilesSync(p, files);
  };
  var createFile = (opt, files, cb) => {
    const p = new Pack(opt);
    const stream = new fsm.WriteStream(opt.file, {
      mode: opt.mode || 438
    });
    p.pipe(stream);
    const promise = new Promise((res, rej) => {
      stream.on("error", rej);
      stream.on("close", res);
      p.on("error", rej);
    });
    addFilesAsync(p, files);
    return cb ? promise.then(cb, cb) : promise;
  };
  var addFilesSync = (p, files) => {
    files.forEach((file) => {
      if (file.charAt(0) === "@") {
        t({
          file: path2.resolve(p.cwd, file.substr(1)),
          sync: true,
          noResume: true,
          onentry: (entry) => p.add(entry)
        });
      } else
        p.add(file);
    });
    p.end();
  };
  var addFilesAsync = (p, files) => {
    while (files.length) {
      const file = files.shift();
      if (file.charAt(0) === "@") {
        return t({
          file: path2.resolve(p.cwd, file.substr(1)),
          noResume: true,
          onentry: (entry) => p.add(entry)
        }).then((_) => addFilesAsync(p, files));
      } else
        p.add(file);
    }
    p.end();
  };
  var createSync = (opt, files) => {
    const p = new Pack.Sync(opt);
    addFilesSync(p, files);
    return p;
  };
  var create = (opt, files) => {
    const p = new Pack(opt);
    addFilesAsync(p, files);
    return p;
  };
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/replace.js
var require_replace = __commonJS((exports2, module2) => {
  "use strict";
  var hlo = require_high_level_opt();
  var Pack = require_pack();
  var fs2 = require("fs");
  var fsm = require_fs_minipass();
  var t = require_list();
  var path2 = require("path");
  var Header = require_header();
  module2.exports = (opt_, files, cb) => {
    const opt = hlo(opt_);
    if (!opt.file)
      throw new TypeError("file is required");
    if (opt.gzip)
      throw new TypeError("cannot append to compressed archives");
    if (!files || !Array.isArray(files) || !files.length)
      throw new TypeError("no files or directories specified");
    files = Array.from(files);
    return opt.sync ? replaceSync(opt, files) : replace(opt, files, cb);
  };
  var replaceSync = (opt, files) => {
    const p = new Pack.Sync(opt);
    let threw = true;
    let fd;
    let position;
    try {
      try {
        fd = fs2.openSync(opt.file, "r+");
      } catch (er) {
        if (er.code === "ENOENT")
          fd = fs2.openSync(opt.file, "w+");
        else
          throw er;
      }
      const st = fs2.fstatSync(fd);
      const headBuf = Buffer.alloc(512);
      POSITION:
        for (position = 0; position < st.size; position += 512) {
          for (let bufPos = 0, bytes = 0; bufPos < 512; bufPos += bytes) {
            bytes = fs2.readSync(fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos);
            if (position === 0 && headBuf[0] === 31 && headBuf[1] === 139)
              throw new Error("cannot append to compressed archives");
            if (!bytes)
              break POSITION;
          }
          const h = new Header(headBuf);
          if (!h.cksumValid)
            break;
          const entryBlockSize = 512 * Math.ceil(h.size / 512);
          if (position + entryBlockSize + 512 > st.size)
            break;
          position += entryBlockSize;
          if (opt.mtimeCache)
            opt.mtimeCache.set(h.path, h.mtime);
        }
      threw = false;
      streamSync(opt, p, position, fd, files);
    } finally {
      if (threw) {
        try {
          fs2.closeSync(fd);
        } catch (er) {
        }
      }
    }
  };
  var streamSync = (opt, p, position, fd, files) => {
    const stream = new fsm.WriteStreamSync(opt.file, {
      fd,
      start: position
    });
    p.pipe(stream);
    addFilesSync(p, files);
  };
  var replace = (opt, files, cb) => {
    files = Array.from(files);
    const p = new Pack(opt);
    const getPos = (fd, size, cb_) => {
      const cb2 = (er, pos) => {
        if (er)
          fs2.close(fd, (_) => cb_(er));
        else
          cb_(null, pos);
      };
      let position = 0;
      if (size === 0)
        return cb2(null, 0);
      let bufPos = 0;
      const headBuf = Buffer.alloc(512);
      const onread = (er, bytes) => {
        if (er)
          return cb2(er);
        bufPos += bytes;
        if (bufPos < 512 && bytes) {
          return fs2.read(fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos, onread);
        }
        if (position === 0 && headBuf[0] === 31 && headBuf[1] === 139)
          return cb2(new Error("cannot append to compressed archives"));
        if (bufPos < 512)
          return cb2(null, position);
        const h = new Header(headBuf);
        if (!h.cksumValid)
          return cb2(null, position);
        const entryBlockSize = 512 * Math.ceil(h.size / 512);
        if (position + entryBlockSize + 512 > size)
          return cb2(null, position);
        position += entryBlockSize + 512;
        if (position >= size)
          return cb2(null, position);
        if (opt.mtimeCache)
          opt.mtimeCache.set(h.path, h.mtime);
        bufPos = 0;
        fs2.read(fd, headBuf, 0, 512, position, onread);
      };
      fs2.read(fd, headBuf, 0, 512, position, onread);
    };
    const promise = new Promise((resolve, reject) => {
      p.on("error", reject);
      let flag = "r+";
      const onopen = (er, fd) => {
        if (er && er.code === "ENOENT" && flag === "r+") {
          flag = "w+";
          return fs2.open(opt.file, flag, onopen);
        }
        if (er)
          return reject(er);
        fs2.fstat(fd, (er2, st) => {
          if (er2)
            return reject(er2);
          getPos(fd, st.size, (er3, position) => {
            if (er3)
              return reject(er3);
            const stream = new fsm.WriteStream(opt.file, {
              fd,
              start: position
            });
            p.pipe(stream);
            stream.on("error", reject);
            stream.on("close", resolve);
            addFilesAsync(p, files);
          });
        });
      };
      fs2.open(opt.file, flag, onopen);
    });
    return cb ? promise.then(cb, cb) : promise;
  };
  var addFilesSync = (p, files) => {
    files.forEach((file) => {
      if (file.charAt(0) === "@") {
        t({
          file: path2.resolve(p.cwd, file.substr(1)),
          sync: true,
          noResume: true,
          onentry: (entry) => p.add(entry)
        });
      } else
        p.add(file);
    });
    p.end();
  };
  var addFilesAsync = (p, files) => {
    while (files.length) {
      const file = files.shift();
      if (file.charAt(0) === "@") {
        return t({
          file: path2.resolve(p.cwd, file.substr(1)),
          noResume: true,
          onentry: (entry) => p.add(entry)
        }).then((_) => addFilesAsync(p, files));
      } else
        p.add(file);
    }
    p.end();
  };
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/update.js
var require_update = __commonJS((exports2, module2) => {
  "use strict";
  var hlo = require_high_level_opt();
  var r = require_replace();
  module2.exports = (opt_, files, cb) => {
    const opt = hlo(opt_);
    if (!opt.file)
      throw new TypeError("file is required");
    if (opt.gzip)
      throw new TypeError("cannot append to compressed archives");
    if (!files || !Array.isArray(files) || !files.length)
      throw new TypeError("no files or directories specified");
    files = Array.from(files);
    mtimeFilter(opt);
    return r(opt, files, cb);
  };
  var mtimeFilter = (opt) => {
    const filter = opt.filter;
    if (!opt.mtimeCache)
      opt.mtimeCache = new Map();
    opt.filter = filter ? (path2, stat) => filter(path2, stat) && !(opt.mtimeCache.get(path2) > stat.mtime) : (path2, stat) => !(opt.mtimeCache.get(path2) > stat.mtime);
  };
});

// node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/opts-arg.js
var require_opts_arg = __commonJS((exports2, module2) => {
  var {promisify} = require("util");
  var fs2 = require("fs");
  var optsArg = (opts) => {
    if (!opts)
      opts = {mode: 511, fs: fs2};
    else if (typeof opts === "object")
      opts = {mode: 511, fs: fs2, ...opts};
    else if (typeof opts === "number")
      opts = {mode: opts, fs: fs2};
    else if (typeof opts === "string")
      opts = {mode: parseInt(opts, 8), fs: fs2};
    else
      throw new TypeError("invalid options argument");
    opts.mkdir = opts.mkdir || opts.fs.mkdir || fs2.mkdir;
    opts.mkdirAsync = promisify(opts.mkdir);
    opts.stat = opts.stat || opts.fs.stat || fs2.stat;
    opts.statAsync = promisify(opts.stat);
    opts.statSync = opts.statSync || opts.fs.statSync || fs2.statSync;
    opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs2.mkdirSync;
    return opts;
  };
  module2.exports = optsArg;
});

// node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/path-arg.js
var require_path_arg = __commonJS((exports2, module2) => {
  var platform = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform;
  var {resolve, parse: parse2} = require("path");
  var pathArg = (path2) => {
    if (/\0/.test(path2)) {
      throw Object.assign(new TypeError("path must be a string without null bytes"), {
        path: path2,
        code: "ERR_INVALID_ARG_VALUE"
      });
    }
    path2 = resolve(path2);
    if (platform === "win32") {
      const badWinChars = /[*|"<>?:]/;
      const {root} = parse2(path2);
      if (badWinChars.test(path2.substr(root.length))) {
        throw Object.assign(new Error("Illegal characters in path."), {
          path: path2,
          code: "EINVAL"
        });
      }
    }
    return path2;
  };
  module2.exports = pathArg;
});

// node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/find-made.js
var require_find_made = __commonJS((exports2, module2) => {
  var {dirname} = require("path");
  var findMade = (opts, parent, path2 = void 0) => {
    if (path2 === parent)
      return Promise.resolve();
    return opts.statAsync(parent).then((st) => st.isDirectory() ? path2 : void 0, (er) => er.code === "ENOENT" ? findMade(opts, dirname(parent), parent) : void 0);
  };
  var findMadeSync = (opts, parent, path2 = void 0) => {
    if (path2 === parent)
      return void 0;
    try {
      return opts.statSync(parent).isDirectory() ? path2 : void 0;
    } catch (er) {
      return er.code === "ENOENT" ? findMadeSync(opts, dirname(parent), parent) : void 0;
    }
  };
  module2.exports = {findMade, findMadeSync};
});

// node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-manual.js
var require_mkdirp_manual = __commonJS((exports2, module2) => {
  var {dirname} = require("path");
  var mkdirpManual = (path2, opts, made) => {
    opts.recursive = false;
    const parent = dirname(path2);
    if (parent === path2) {
      return opts.mkdirAsync(path2, opts).catch((er) => {
        if (er.code !== "EISDIR")
          throw er;
      });
    }
    return opts.mkdirAsync(path2, opts).then(() => made || path2, (er) => {
      if (er.code === "ENOENT")
        return mkdirpManual(parent, opts).then((made2) => mkdirpManual(path2, opts, made2));
      if (er.code !== "EEXIST" && er.code !== "EROFS")
        throw er;
      return opts.statAsync(path2).then((st) => {
        if (st.isDirectory())
          return made;
        else
          throw er;
      }, () => {
        throw er;
      });
    });
  };
  var mkdirpManualSync = (path2, opts, made) => {
    const parent = dirname(path2);
    opts.recursive = false;
    if (parent === path2) {
      try {
        return opts.mkdirSync(path2, opts);
      } catch (er) {
        if (er.code !== "EISDIR")
          throw er;
        else
          return;
      }
    }
    try {
      opts.mkdirSync(path2, opts);
      return made || path2;
    } catch (er) {
      if (er.code === "ENOENT")
        return mkdirpManualSync(path2, opts, mkdirpManualSync(parent, opts, made));
      if (er.code !== "EEXIST" && er.code !== "EROFS")
        throw er;
      try {
        if (!opts.statSync(path2).isDirectory())
          throw er;
      } catch (_) {
        throw er;
      }
    }
  };
  module2.exports = {mkdirpManual, mkdirpManualSync};
});

// node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-native.js
var require_mkdirp_native = __commonJS((exports2, module2) => {
  var {dirname} = require("path");
  var {findMade, findMadeSync} = require_find_made();
  var {mkdirpManual, mkdirpManualSync} = require_mkdirp_manual();
  var mkdirpNative = (path2, opts) => {
    opts.recursive = true;
    const parent = dirname(path2);
    if (parent === path2)
      return opts.mkdirAsync(path2, opts);
    return findMade(opts, path2).then((made) => opts.mkdirAsync(path2, opts).then(() => made).catch((er) => {
      if (er.code === "ENOENT")
        return mkdirpManual(path2, opts);
      else
        throw er;
    }));
  };
  var mkdirpNativeSync = (path2, opts) => {
    opts.recursive = true;
    const parent = dirname(path2);
    if (parent === path2)
      return opts.mkdirSync(path2, opts);
    const made = findMadeSync(opts, path2);
    try {
      opts.mkdirSync(path2, opts);
      return made;
    } catch (er) {
      if (er.code === "ENOENT")
        return mkdirpManualSync(path2, opts);
      else
        throw er;
    }
  };
  module2.exports = {mkdirpNative, mkdirpNativeSync};
});

// node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/use-native.js
var require_use_native = __commonJS((exports2, module2) => {
  var fs2 = require("fs");
  var version = process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version;
  var versArr = version.replace(/^v/, "").split(".");
  var hasNative = +versArr[0] > 10 || +versArr[0] === 10 && +versArr[1] >= 12;
  var useNative = !hasNative ? () => false : (opts) => opts.mkdir === fs2.mkdir;
  var useNativeSync = !hasNative ? () => false : (opts) => opts.mkdirSync === fs2.mkdirSync;
  module2.exports = {useNative, useNativeSync};
});

// node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/index.js
var require_mkdirp = __commonJS((exports2, module2) => {
  var optsArg = require_opts_arg();
  var pathArg = require_path_arg();
  var {mkdirpNative, mkdirpNativeSync} = require_mkdirp_native();
  var {mkdirpManual, mkdirpManualSync} = require_mkdirp_manual();
  var {useNative, useNativeSync} = require_use_native();
  var mkdirp = (path2, opts) => {
    path2 = pathArg(path2);
    opts = optsArg(opts);
    return useNative(opts) ? mkdirpNative(path2, opts) : mkdirpManual(path2, opts);
  };
  var mkdirpSync = (path2, opts) => {
    path2 = pathArg(path2);
    opts = optsArg(opts);
    return useNativeSync(opts) ? mkdirpNativeSync(path2, opts) : mkdirpManualSync(path2, opts);
  };
  mkdirp.sync = mkdirpSync;
  mkdirp.native = (path2, opts) => mkdirpNative(pathArg(path2), optsArg(opts));
  mkdirp.manual = (path2, opts) => mkdirpManual(pathArg(path2), optsArg(opts));
  mkdirp.nativeSync = (path2, opts) => mkdirpNativeSync(pathArg(path2), optsArg(opts));
  mkdirp.manualSync = (path2, opts) => mkdirpManualSync(pathArg(path2), optsArg(opts));
  module2.exports = mkdirp;
});

// node_modules/.pnpm/chownr@2.0.0/node_modules/chownr/chownr.js
var require_chownr = __commonJS((exports2, module2) => {
  "use strict";
  var fs2 = require("fs");
  var path2 = require("path");
  var LCHOWN = fs2.lchown ? "lchown" : "chown";
  var LCHOWNSYNC = fs2.lchownSync ? "lchownSync" : "chownSync";
  var needEISDIRHandled = fs2.lchown && !process.version.match(/v1[1-9]+\./) && !process.version.match(/v10\.[6-9]/);
  var lchownSync = (path3, uid, gid) => {
    try {
      return fs2[LCHOWNSYNC](path3, uid, gid);
    } catch (er) {
      if (er.code !== "ENOENT")
        throw er;
    }
  };
  var chownSync = (path3, uid, gid) => {
    try {
      return fs2.chownSync(path3, uid, gid);
    } catch (er) {
      if (er.code !== "ENOENT")
        throw er;
    }
  };
  var handleEISDIR = needEISDIRHandled ? (path3, uid, gid, cb) => (er) => {
    if (!er || er.code !== "EISDIR")
      cb(er);
    else
      fs2.chown(path3, uid, gid, cb);
  } : (_, __, ___, cb) => cb;
  var handleEISDirSync = needEISDIRHandled ? (path3, uid, gid) => {
    try {
      return lchownSync(path3, uid, gid);
    } catch (er) {
      if (er.code !== "EISDIR")
        throw er;
      chownSync(path3, uid, gid);
    }
  } : (path3, uid, gid) => lchownSync(path3, uid, gid);
  var nodeVersion = process.version;
  var readdir = (path3, options, cb) => fs2.readdir(path3, options, cb);
  var readdirSync = (path3, options) => fs2.readdirSync(path3, options);
  if (/^v4\./.test(nodeVersion))
    readdir = (path3, options, cb) => fs2.readdir(path3, cb);
  var chown = (cpath, uid, gid, cb) => {
    fs2[LCHOWN](cpath, uid, gid, handleEISDIR(cpath, uid, gid, (er) => {
      cb(er && er.code !== "ENOENT" ? er : null);
    }));
  };
  var chownrKid = (p, child, uid, gid, cb) => {
    if (typeof child === "string")
      return fs2.lstat(path2.resolve(p, child), (er, stats) => {
        if (er)
          return cb(er.code !== "ENOENT" ? er : null);
        stats.name = child;
        chownrKid(p, stats, uid, gid, cb);
      });
    if (child.isDirectory()) {
      chownr(path2.resolve(p, child.name), uid, gid, (er) => {
        if (er)
          return cb(er);
        const cpath = path2.resolve(p, child.name);
        chown(cpath, uid, gid, cb);
      });
    } else {
      const cpath = path2.resolve(p, child.name);
      chown(cpath, uid, gid, cb);
    }
  };
  var chownr = (p, uid, gid, cb) => {
    readdir(p, {withFileTypes: true}, (er, children) => {
      if (er) {
        if (er.code === "ENOENT")
          return cb();
        else if (er.code !== "ENOTDIR" && er.code !== "ENOTSUP")
          return cb(er);
      }
      if (er || !children.length)
        return chown(p, uid, gid, cb);
      let len = children.length;
      let errState = null;
      const then = (er2) => {
        if (errState)
          return;
        if (er2)
          return cb(errState = er2);
        if (--len === 0)
          return chown(p, uid, gid, cb);
      };
      children.forEach((child) => chownrKid(p, child, uid, gid, then));
    });
  };
  var chownrKidSync = (p, child, uid, gid) => {
    if (typeof child === "string") {
      try {
        const stats = fs2.lstatSync(path2.resolve(p, child));
        stats.name = child;
        child = stats;
      } catch (er) {
        if (er.code === "ENOENT")
          return;
        else
          throw er;
      }
    }
    if (child.isDirectory())
      chownrSync(path2.resolve(p, child.name), uid, gid);
    handleEISDirSync(path2.resolve(p, child.name), uid, gid);
  };
  var chownrSync = (p, uid, gid) => {
    let children;
    try {
      children = readdirSync(p, {withFileTypes: true});
    } catch (er) {
      if (er.code === "ENOENT")
        return;
      else if (er.code === "ENOTDIR" || er.code === "ENOTSUP")
        return handleEISDirSync(p, uid, gid);
      else
        throw er;
    }
    if (children && children.length)
      children.forEach((child) => chownrKidSync(p, child, uid, gid));
    return handleEISDirSync(p, uid, gid);
  };
  module2.exports = chownr;
  chownr.sync = chownrSync;
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/mkdir.js
var require_mkdir = __commonJS((exports2, module2) => {
  "use strict";
  var mkdirp = require_mkdirp();
  var fs2 = require("fs");
  var path2 = require("path");
  var chownr = require_chownr();
  var SymlinkError = class extends Error {
    constructor(symlink, path3) {
      super("Cannot extract through symbolic link");
      this.path = path3;
      this.symlink = symlink;
    }
    get name() {
      return "SylinkError";
    }
  };
  var CwdError = class extends Error {
    constructor(path3, code) {
      super(code + ": Cannot cd into '" + path3 + "'");
      this.path = path3;
      this.code = code;
    }
    get name() {
      return "CwdError";
    }
  };
  module2.exports = (dir, opt, cb) => {
    const umask = opt.umask;
    const mode = opt.mode | 448;
    const needChmod = (mode & umask) !== 0;
    const uid = opt.uid;
    const gid = opt.gid;
    const doChown = typeof uid === "number" && typeof gid === "number" && (uid !== opt.processUid || gid !== opt.processGid);
    const preserve = opt.preserve;
    const unlink = opt.unlink;
    const cache = opt.cache;
    const cwd = opt.cwd;
    const done = (er, created) => {
      if (er)
        cb(er);
      else {
        cache.set(dir, true);
        if (created && doChown)
          chownr(created, uid, gid, (er2) => done(er2));
        else if (needChmod)
          fs2.chmod(dir, mode, cb);
        else
          cb();
      }
    };
    if (cache && cache.get(dir) === true)
      return done();
    if (dir === cwd) {
      return fs2.stat(dir, (er, st) => {
        if (er || !st.isDirectory())
          er = new CwdError(dir, er && er.code || "ENOTDIR");
        done(er);
      });
    }
    if (preserve)
      return mkdirp(dir, {mode}).then((made) => done(null, made), done);
    const sub = path2.relative(cwd, dir);
    const parts = sub.split(/\/|\\/);
    mkdir_(cwd, parts, mode, cache, unlink, cwd, null, done);
  };
  var mkdir_ = (base, parts, mode, cache, unlink, cwd, created, cb) => {
    if (!parts.length)
      return cb(null, created);
    const p = parts.shift();
    const part = base + "/" + p;
    if (cache.get(part))
      return mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
    fs2.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb));
  };
  var onmkdir = (part, parts, mode, cache, unlink, cwd, created, cb) => (er) => {
    if (er) {
      if (er.path && path2.dirname(er.path) === cwd && (er.code === "ENOTDIR" || er.code === "ENOENT"))
        return cb(new CwdError(cwd, er.code));
      fs2.lstat(part, (statEr, st) => {
        if (statEr)
          cb(statEr);
        else if (st.isDirectory())
          mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
        else if (unlink) {
          fs2.unlink(part, (er2) => {
            if (er2)
              return cb(er2);
            fs2.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb));
          });
        } else if (st.isSymbolicLink())
          return cb(new SymlinkError(part, part + "/" + parts.join("/")));
        else
          cb(er);
      });
    } else {
      created = created || part;
      mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
    }
  };
  module2.exports.sync = (dir, opt) => {
    const umask = opt.umask;
    const mode = opt.mode | 448;
    const needChmod = (mode & umask) !== 0;
    const uid = opt.uid;
    const gid = opt.gid;
    const doChown = typeof uid === "number" && typeof gid === "number" && (uid !== opt.processUid || gid !== opt.processGid);
    const preserve = opt.preserve;
    const unlink = opt.unlink;
    const cache = opt.cache;
    const cwd = opt.cwd;
    const done = (created2) => {
      cache.set(dir, true);
      if (created2 && doChown)
        chownr.sync(created2, uid, gid);
      if (needChmod)
        fs2.chmodSync(dir, mode);
    };
    if (cache && cache.get(dir) === true)
      return done();
    if (dir === cwd) {
      let ok = false;
      let code = "ENOTDIR";
      try {
        ok = fs2.statSync(dir).isDirectory();
      } catch (er) {
        code = er.code;
      } finally {
        if (!ok)
          throw new CwdError(dir, code);
      }
      done();
      return;
    }
    if (preserve)
      return done(mkdirp.sync(dir, mode));
    const sub = path2.relative(cwd, dir);
    const parts = sub.split(/\/|\\/);
    let created = null;
    for (let p = parts.shift(), part = cwd; p && (part += "/" + p); p = parts.shift()) {
      if (cache.get(part))
        continue;
      try {
        fs2.mkdirSync(part, mode);
        created = created || part;
        cache.set(part, true);
      } catch (er) {
        if (er.path && path2.dirname(er.path) === cwd && (er.code === "ENOTDIR" || er.code === "ENOENT"))
          return new CwdError(cwd, er.code);
        const st = fs2.lstatSync(part);
        if (st.isDirectory()) {
          cache.set(part, true);
          continue;
        } else if (unlink) {
          fs2.unlinkSync(part);
          fs2.mkdirSync(part, mode);
          created = created || part;
          cache.set(part, true);
          continue;
        } else if (st.isSymbolicLink())
          return new SymlinkError(part, part + "/" + parts.join("/"));
      }
    }
    return done(created);
  };
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/path-reservations.js
var require_path_reservations = __commonJS((exports2, module2) => {
  var assert = require("assert");
  module2.exports = () => {
    const queues = new Map();
    const reservations = new Map();
    const {join} = require("path");
    const getDirs = (path2) => join(path2).split(/[\\/]/).slice(0, -1).reduce((set, path3) => set.length ? set.concat(join(set[set.length - 1], path3)) : [path3], []);
    const running = new Set();
    const getQueues = (fn) => {
      const res = reservations.get(fn);
      if (!res)
        throw new Error("function does not have any path reservations");
      return {
        paths: res.paths.map((path2) => queues.get(path2)),
        dirs: [...res.dirs].map((path2) => queues.get(path2))
      };
    };
    const check = (fn) => {
      const {paths, dirs} = getQueues(fn);
      return paths.every((q) => q[0] === fn) && dirs.every((q) => q[0] instanceof Set && q[0].has(fn));
    };
    const run = (fn) => {
      if (running.has(fn) || !check(fn))
        return false;
      running.add(fn);
      fn(() => clear(fn));
      return true;
    };
    const clear = (fn) => {
      if (!running.has(fn))
        return false;
      const {paths, dirs} = reservations.get(fn);
      const next = new Set();
      paths.forEach((path2) => {
        const q = queues.get(path2);
        assert.equal(q[0], fn);
        if (q.length === 1)
          queues.delete(path2);
        else {
          q.shift();
          if (typeof q[0] === "function")
            next.add(q[0]);
          else
            q[0].forEach((fn2) => next.add(fn2));
        }
      });
      dirs.forEach((dir) => {
        const q = queues.get(dir);
        assert(q[0] instanceof Set);
        if (q[0].size === 1 && q.length === 1)
          queues.delete(dir);
        else if (q[0].size === 1) {
          q.shift();
          next.add(q[0]);
        } else
          q[0].delete(fn);
      });
      running.delete(fn);
      next.forEach((fn2) => run(fn2));
      return true;
    };
    const reserve = (paths, fn) => {
      const dirs = new Set(paths.map((path2) => getDirs(path2)).reduce((a, b) => a.concat(b)));
      reservations.set(fn, {dirs, paths});
      paths.forEach((path2) => {
        const q = queues.get(path2);
        if (!q)
          queues.set(path2, [fn]);
        else
          q.push(fn);
      });
      dirs.forEach((dir) => {
        const q = queues.get(dir);
        if (!q)
          queues.set(dir, [new Set([fn])]);
        else if (q[q.length - 1] instanceof Set)
          q[q.length - 1].add(fn);
        else
          q.push(new Set([fn]));
      });
      return run(fn);
    };
    return {check, reserve};
  };
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/get-write-flag.js
var require_get_write_flag = __commonJS((exports2, module2) => {
  var platform = process.env.__FAKE_PLATFORM__ || process.platform;
  var isWindows = platform === "win32";
  var fs2 = global.__FAKE_TESTING_FS__ || require("fs");
  var {O_CREAT, O_TRUNC, O_WRONLY, UV_FS_O_FILEMAP = 0} = fs2.constants;
  var fMapEnabled = isWindows && !!UV_FS_O_FILEMAP;
  var fMapLimit = 512 * 1024;
  var fMapFlag = UV_FS_O_FILEMAP | O_TRUNC | O_CREAT | O_WRONLY;
  module2.exports = !fMapEnabled ? () => "w" : (size) => size < fMapLimit ? fMapFlag : "w";
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/unpack.js
var require_unpack = __commonJS((exports2, module2) => {
  "use strict";
  var assert = require("assert");
  var Parser = require_parse4();
  var fs2 = require("fs");
  var fsm = require_fs_minipass();
  var path2 = require("path");
  var mkdir = require_mkdir();
  var wc = require_winchars();
  var pathReservations = require_path_reservations();
  var ONENTRY = Symbol("onEntry");
  var CHECKFS = Symbol("checkFs");
  var CHECKFS2 = Symbol("checkFs2");
  var ISREUSABLE = Symbol("isReusable");
  var MAKEFS = Symbol("makeFs");
  var FILE = Symbol("file");
  var DIRECTORY = Symbol("directory");
  var LINK = Symbol("link");
  var SYMLINK = Symbol("symlink");
  var HARDLINK = Symbol("hardlink");
  var UNSUPPORTED = Symbol("unsupported");
  var CHECKPATH = Symbol("checkPath");
  var MKDIR = Symbol("mkdir");
  var ONERROR = Symbol("onError");
  var PENDING = Symbol("pending");
  var PEND = Symbol("pend");
  var UNPEND = Symbol("unpend");
  var ENDED = Symbol("ended");
  var MAYBECLOSE = Symbol("maybeClose");
  var SKIP = Symbol("skip");
  var DOCHOWN = Symbol("doChown");
  var UID = Symbol("uid");
  var GID = Symbol("gid");
  var crypto = require("crypto");
  var getFlag = require_get_write_flag();
  var neverCalled = () => {
    throw new Error("sync function called cb somehow?!?");
  };
  var unlinkFile = (path3, cb) => {
    if (process.platform !== "win32")
      return fs2.unlink(path3, cb);
    const name = path3 + ".DELETE." + crypto.randomBytes(16).toString("hex");
    fs2.rename(path3, name, (er) => {
      if (er)
        return cb(er);
      fs2.unlink(name, cb);
    });
  };
  var unlinkFileSync = (path3) => {
    if (process.platform !== "win32")
      return fs2.unlinkSync(path3);
    const name = path3 + ".DELETE." + crypto.randomBytes(16).toString("hex");
    fs2.renameSync(path3, name);
    fs2.unlinkSync(name);
  };
  var uint32 = (a, b, c) => a === a >>> 0 ? a : b === b >>> 0 ? b : c;
  var Unpack = class extends Parser {
    constructor(opt) {
      if (!opt)
        opt = {};
      opt.ondone = (_) => {
        this[ENDED] = true;
        this[MAYBECLOSE]();
      };
      super(opt);
      this.reservations = pathReservations();
      this.transform = typeof opt.transform === "function" ? opt.transform : null;
      this.writable = true;
      this.readable = false;
      this[PENDING] = 0;
      this[ENDED] = false;
      this.dirCache = opt.dirCache || new Map();
      if (typeof opt.uid === "number" || typeof opt.gid === "number") {
        if (typeof opt.uid !== "number" || typeof opt.gid !== "number")
          throw new TypeError("cannot set owner without number uid and gid");
        if (opt.preserveOwner) {
          throw new TypeError("cannot preserve owner in archive and also set owner explicitly");
        }
        this.uid = opt.uid;
        this.gid = opt.gid;
        this.setOwner = true;
      } else {
        this.uid = null;
        this.gid = null;
        this.setOwner = false;
      }
      if (opt.preserveOwner === void 0 && typeof opt.uid !== "number")
        this.preserveOwner = process.getuid && process.getuid() === 0;
      else
        this.preserveOwner = !!opt.preserveOwner;
      this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ? process.getuid() : null;
      this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ? process.getgid() : null;
      this.forceChown = opt.forceChown === true;
      this.win32 = !!opt.win32 || process.platform === "win32";
      this.newer = !!opt.newer;
      this.keep = !!opt.keep;
      this.noMtime = !!opt.noMtime;
      this.preservePaths = !!opt.preservePaths;
      this.unlink = !!opt.unlink;
      this.cwd = path2.resolve(opt.cwd || process.cwd());
      this.strip = +opt.strip || 0;
      this.processUmask = opt.noChmod ? 0 : process.umask();
      this.umask = typeof opt.umask === "number" ? opt.umask : this.processUmask;
      this.dmode = opt.dmode || 511 & ~this.umask;
      this.fmode = opt.fmode || 438 & ~this.umask;
      this.on("entry", (entry) => this[ONENTRY](entry));
    }
    warn(code, msg, data = {}) {
      if (code === "TAR_BAD_ARCHIVE" || code === "TAR_ABORT")
        data.recoverable = false;
      return super.warn(code, msg, data);
    }
    [MAYBECLOSE]() {
      if (this[ENDED] && this[PENDING] === 0) {
        this.emit("prefinish");
        this.emit("finish");
        this.emit("end");
        this.emit("close");
      }
    }
    [CHECKPATH](entry) {
      if (this.strip) {
        const parts = entry.path.split(/\/|\\/);
        if (parts.length < this.strip)
          return false;
        entry.path = parts.slice(this.strip).join("/");
        if (entry.type === "Link") {
          const linkparts = entry.linkpath.split(/\/|\\/);
          if (linkparts.length >= this.strip)
            entry.linkpath = linkparts.slice(this.strip).join("/");
        }
      }
      if (!this.preservePaths) {
        const p = entry.path;
        if (p.match(/(^|\/|\\)\.\.(\\|\/|$)/)) {
          this.warn("TAR_ENTRY_ERROR", `path contains '..'`, {
            entry,
            path: p
          });
          return false;
        }
        if (path2.win32.isAbsolute(p)) {
          const parsed = path2.win32.parse(p);
          entry.path = p.substr(parsed.root.length);
          const r = parsed.root;
          this.warn("TAR_ENTRY_INFO", `stripping ${r} from absolute path`, {
            entry,
            path: p
          });
        }
      }
      if (this.win32) {
        const parsed = path2.win32.parse(entry.path);
        entry.path = parsed.root === "" ? wc.encode(entry.path) : parsed.root + wc.encode(entry.path.substr(parsed.root.length));
      }
      if (path2.isAbsolute(entry.path))
        entry.absolute = entry.path;
      else
        entry.absolute = path2.resolve(this.cwd, entry.path);
      return true;
    }
    [ONENTRY](entry) {
      if (!this[CHECKPATH](entry))
        return entry.resume();
      assert.equal(typeof entry.absolute, "string");
      switch (entry.type) {
        case "Directory":
        case "GNUDumpDir":
          if (entry.mode)
            entry.mode = entry.mode | 448;
        case "File":
        case "OldFile":
        case "ContiguousFile":
        case "Link":
        case "SymbolicLink":
          return this[CHECKFS](entry);
        case "CharacterDevice":
        case "BlockDevice":
        case "FIFO":
        default:
          return this[UNSUPPORTED](entry);
      }
    }
    [ONERROR](er, entry) {
      if (er.name === "CwdError")
        this.emit("error", er);
      else {
        this.warn("TAR_ENTRY_ERROR", er, {entry});
        this[UNPEND]();
        entry.resume();
      }
    }
    [MKDIR](dir, mode, cb) {
      mkdir(dir, {
        uid: this.uid,
        gid: this.gid,
        processUid: this.processUid,
        processGid: this.processGid,
        umask: this.processUmask,
        preserve: this.preservePaths,
        unlink: this.unlink,
        cache: this.dirCache,
        cwd: this.cwd,
        mode,
        noChmod: this.noChmod
      }, cb);
    }
    [DOCHOWN](entry) {
      return this.forceChown || this.preserveOwner && (typeof entry.uid === "number" && entry.uid !== this.processUid || typeof entry.gid === "number" && entry.gid !== this.processGid) || (typeof this.uid === "number" && this.uid !== this.processUid || typeof this.gid === "number" && this.gid !== this.processGid);
    }
    [UID](entry) {
      return uint32(this.uid, entry.uid, this.processUid);
    }
    [GID](entry) {
      return uint32(this.gid, entry.gid, this.processGid);
    }
    [FILE](entry, fullyDone) {
      const mode = entry.mode & 4095 || this.fmode;
      const stream = new fsm.WriteStream(entry.absolute, {
        flags: getFlag(entry.size),
        mode,
        autoClose: false
      });
      stream.on("error", (er) => this[ONERROR](er, entry));
      let actions = 1;
      const done = (er) => {
        if (er)
          return this[ONERROR](er, entry);
        if (--actions === 0) {
          fs2.close(stream.fd, (er2) => {
            fullyDone();
            er2 ? this[ONERROR](er2, entry) : this[UNPEND]();
          });
        }
      };
      stream.on("finish", (_) => {
        const abs = entry.absolute;
        const fd = stream.fd;
        if (entry.mtime && !this.noMtime) {
          actions++;
          const atime = entry.atime || new Date();
          const mtime = entry.mtime;
          fs2.futimes(fd, atime, mtime, (er) => er ? fs2.utimes(abs, atime, mtime, (er2) => done(er2 && er)) : done());
        }
        if (this[DOCHOWN](entry)) {
          actions++;
          const uid = this[UID](entry);
          const gid = this[GID](entry);
          fs2.fchown(fd, uid, gid, (er) => er ? fs2.chown(abs, uid, gid, (er2) => done(er2 && er)) : done());
        }
        done();
      });
      const tx = this.transform ? this.transform(entry) || entry : entry;
      if (tx !== entry) {
        tx.on("error", (er) => this[ONERROR](er, entry));
        entry.pipe(tx);
      }
      tx.pipe(stream);
    }
    [DIRECTORY](entry, fullyDone) {
      const mode = entry.mode & 4095 || this.dmode;
      this[MKDIR](entry.absolute, mode, (er) => {
        if (er) {
          fullyDone();
          return this[ONERROR](er, entry);
        }
        let actions = 1;
        const done = (_) => {
          if (--actions === 0) {
            fullyDone();
            this[UNPEND]();
            entry.resume();
          }
        };
        if (entry.mtime && !this.noMtime) {
          actions++;
          fs2.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done);
        }
        if (this[DOCHOWN](entry)) {
          actions++;
          fs2.chown(entry.absolute, this[UID](entry), this[GID](entry), done);
        }
        done();
      });
    }
    [UNSUPPORTED](entry) {
      entry.unsupported = true;
      this.warn("TAR_ENTRY_UNSUPPORTED", `unsupported entry type: ${entry.type}`, {entry});
      entry.resume();
    }
    [SYMLINK](entry, done) {
      this[LINK](entry, entry.linkpath, "symlink", done);
    }
    [HARDLINK](entry, done) {
      this[LINK](entry, path2.resolve(this.cwd, entry.linkpath), "link", done);
    }
    [PEND]() {
      this[PENDING]++;
    }
    [UNPEND]() {
      this[PENDING]--;
      this[MAYBECLOSE]();
    }
    [SKIP](entry) {
      this[UNPEND]();
      entry.resume();
    }
    [ISREUSABLE](entry, st) {
      return entry.type === "File" && !this.unlink && st.isFile() && st.nlink <= 1 && process.platform !== "win32";
    }
    [CHECKFS](entry) {
      this[PEND]();
      const paths = [entry.path];
      if (entry.linkpath)
        paths.push(entry.linkpath);
      this.reservations.reserve(paths, (done) => this[CHECKFS2](entry, done));
    }
    [CHECKFS2](entry, done) {
      this[MKDIR](path2.dirname(entry.absolute), this.dmode, (er) => {
        if (er) {
          done();
          return this[ONERROR](er, entry);
        }
        fs2.lstat(entry.absolute, (er2, st) => {
          if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {
            this[SKIP](entry);
            done();
          } else if (er2 || this[ISREUSABLE](entry, st))
            this[MAKEFS](null, entry, done);
          else if (st.isDirectory()) {
            if (entry.type === "Directory") {
              if (!this.noChmod && (!entry.mode || (st.mode & 4095) === entry.mode))
                this[MAKEFS](null, entry, done);
              else {
                fs2.chmod(entry.absolute, entry.mode, (er3) => this[MAKEFS](er3, entry, done));
              }
            } else
              fs2.rmdir(entry.absolute, (er3) => this[MAKEFS](er3, entry, done));
          } else
            unlinkFile(entry.absolute, (er3) => this[MAKEFS](er3, entry, done));
        });
      });
    }
    [MAKEFS](er, entry, done) {
      if (er)
        return this[ONERROR](er, entry);
      switch (entry.type) {
        case "File":
        case "OldFile":
        case "ContiguousFile":
          return this[FILE](entry, done);
        case "Link":
          return this[HARDLINK](entry, done);
        case "SymbolicLink":
          return this[SYMLINK](entry, done);
        case "Directory":
        case "GNUDumpDir":
          return this[DIRECTORY](entry, done);
      }
    }
    [LINK](entry, linkpath, link, done) {
      fs2[link](linkpath, entry.absolute, (er) => {
        if (er)
          return this[ONERROR](er, entry);
        done();
        this[UNPEND]();
        entry.resume();
      });
    }
  };
  var UnpackSync = class extends Unpack {
    [CHECKFS](entry) {
      const er = this[MKDIR](path2.dirname(entry.absolute), this.dmode, neverCalled);
      if (er)
        return this[ONERROR](er, entry);
      try {
        const st = fs2.lstatSync(entry.absolute);
        if (this.keep || this.newer && st.mtime > entry.mtime)
          return this[SKIP](entry);
        else if (this[ISREUSABLE](entry, st))
          return this[MAKEFS](null, entry, neverCalled);
        else {
          try {
            if (st.isDirectory()) {
              if (entry.type === "Directory") {
                if (!this.noChmod && entry.mode && (st.mode & 4095) !== entry.mode)
                  fs2.chmodSync(entry.absolute, entry.mode);
              } else
                fs2.rmdirSync(entry.absolute);
            } else
              unlinkFileSync(entry.absolute);
            return this[MAKEFS](null, entry, neverCalled);
          } catch (er2) {
            return this[ONERROR](er2, entry);
          }
        }
      } catch (er2) {
        return this[MAKEFS](null, entry, neverCalled);
      }
    }
    [FILE](entry, _) {
      const mode = entry.mode & 4095 || this.fmode;
      const oner = (er) => {
        let closeError;
        try {
          fs2.closeSync(fd);
        } catch (e) {
          closeError = e;
        }
        if (er || closeError)
          this[ONERROR](er || closeError, entry);
      };
      let fd;
      try {
        fd = fs2.openSync(entry.absolute, getFlag(entry.size), mode);
      } catch (er) {
        return oner(er);
      }
      const tx = this.transform ? this.transform(entry) || entry : entry;
      if (tx !== entry) {
        tx.on("error", (er) => this[ONERROR](er, entry));
        entry.pipe(tx);
      }
      tx.on("data", (chunk) => {
        try {
          fs2.writeSync(fd, chunk, 0, chunk.length);
        } catch (er) {
          oner(er);
        }
      });
      tx.on("end", (_2) => {
        let er = null;
        if (entry.mtime && !this.noMtime) {
          const atime = entry.atime || new Date();
          const mtime = entry.mtime;
          try {
            fs2.futimesSync(fd, atime, mtime);
          } catch (futimeser) {
            try {
              fs2.utimesSync(entry.absolute, atime, mtime);
            } catch (utimeser) {
              er = futimeser;
            }
          }
        }
        if (this[DOCHOWN](entry)) {
          const uid = this[UID](entry);
          const gid = this[GID](entry);
          try {
            fs2.fchownSync(fd, uid, gid);
          } catch (fchowner) {
            try {
              fs2.chownSync(entry.absolute, uid, gid);
            } catch (chowner) {
              er = er || fchowner;
            }
          }
        }
        oner(er);
      });
    }
    [DIRECTORY](entry, _) {
      const mode = entry.mode & 4095 || this.dmode;
      const er = this[MKDIR](entry.absolute, mode);
      if (er)
        return this[ONERROR](er, entry);
      if (entry.mtime && !this.noMtime) {
        try {
          fs2.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime);
        } catch (er2) {
        }
      }
      if (this[DOCHOWN](entry)) {
        try {
          fs2.chownSync(entry.absolute, this[UID](entry), this[GID](entry));
        } catch (er2) {
        }
      }
      entry.resume();
    }
    [MKDIR](dir, mode) {
      try {
        return mkdir.sync(dir, {
          uid: this.uid,
          gid: this.gid,
          processUid: this.processUid,
          processGid: this.processGid,
          umask: this.processUmask,
          preserve: this.preservePaths,
          unlink: this.unlink,
          cache: this.dirCache,
          cwd: this.cwd,
          mode
        });
      } catch (er) {
        return er;
      }
    }
    [LINK](entry, linkpath, link, _) {
      try {
        fs2[link + "Sync"](linkpath, entry.absolute);
        entry.resume();
      } catch (er) {
        return this[ONERROR](er, entry);
      }
    }
  };
  Unpack.Sync = UnpackSync;
  module2.exports = Unpack;
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/lib/extract.js
var require_extract = __commonJS((exports2, module2) => {
  "use strict";
  var hlo = require_high_level_opt();
  var Unpack = require_unpack();
  var fs2 = require("fs");
  var fsm = require_fs_minipass();
  var path2 = require("path");
  module2.exports = (opt_, files, cb) => {
    if (typeof opt_ === "function")
      cb = opt_, files = null, opt_ = {};
    else if (Array.isArray(opt_))
      files = opt_, opt_ = {};
    if (typeof files === "function")
      cb = files, files = null;
    if (!files)
      files = [];
    else
      files = Array.from(files);
    const opt = hlo(opt_);
    if (opt.sync && typeof cb === "function")
      throw new TypeError("callback not supported for sync tar functions");
    if (!opt.file && typeof cb === "function")
      throw new TypeError("callback only supported with file option");
    if (files.length)
      filesFilter(opt, files);
    return opt.file && opt.sync ? extractFileSync(opt) : opt.file ? extractFile(opt, cb) : opt.sync ? extractSync(opt) : extract(opt);
  };
  var filesFilter = (opt, files) => {
    const map = new Map(files.map((f) => [f.replace(/\/+$/, ""), true]));
    const filter = opt.filter;
    const mapHas = (file, r) => {
      const root = r || path2.parse(file).root || ".";
      const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path2.dirname(file), root);
      map.set(file, ret);
      return ret;
    };
    opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\/+$/, "")) : (file) => mapHas(file.replace(/\/+$/, ""));
  };
  var extractFileSync = (opt) => {
    const u = new Unpack.Sync(opt);
    const file = opt.file;
    const stat = fs2.statSync(file);
    const readSize = opt.maxReadSize || 16 * 1024 * 1024;
    const stream = new fsm.ReadStreamSync(file, {
      readSize,
      size: stat.size
    });
    stream.pipe(u);
  };
  var extractFile = (opt, cb) => {
    const u = new Unpack(opt);
    const readSize = opt.maxReadSize || 16 * 1024 * 1024;
    const file = opt.file;
    const p = new Promise((resolve, reject) => {
      u.on("error", reject);
      u.on("close", resolve);
      fs2.stat(file, (er, stat) => {
        if (er)
          reject(er);
        else {
          const stream = new fsm.ReadStream(file, {
            readSize,
            size: stat.size
          });
          stream.on("error", reject);
          stream.pipe(u);
        }
      });
    });
    return cb ? p.then(cb, cb) : p;
  };
  var extractSync = (opt) => new Unpack.Sync(opt);
  var extract = (opt) => new Unpack(opt);
});

// node_modules/.pnpm/tar@6.1.0/node_modules/tar/index.js
var require_tar = __commonJS((exports2) => {
  "use strict";
  exports2.c = exports2.create = require_create();
  exports2.r = exports2.replace = require_replace();
  exports2.t = exports2.list = require_list();
  exports2.u = exports2.update = require_update();
  exports2.x = exports2.extract = require_extract();
  exports2.Pack = require_pack();
  exports2.Unpack = require_unpack();
  exports2.Parse = require_parse4();
  exports2.ReadEntry = require_read_entry();
  exports2.WriteEntry = require_write_entry();
  exports2.Header = require_header();
  exports2.Pax = require_pax();
  exports2.types = require_types();
});

// node_modules/.pnpm/fs.realpath@1.0.0/node_modules/fs.realpath/old.js
var require_old = __commonJS((exports2) => {
  var pathModule = require("path");
  var isWindows = process.platform === "win32";
  var fs2 = require("fs");
  var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);
  function rethrow() {
    var callback;
    if (DEBUG) {
      var backtrace = new Error();
      callback = debugCallback;
    } else
      callback = missingCallback;
    return callback;
    function debugCallback(err) {
      if (err) {
        backtrace.message = err.message;
        err = backtrace;
        missingCallback(err);
      }
    }
    function missingCallback(err) {
      if (err) {
        if (process.throwDeprecation)
          throw err;
        else if (!process.noDeprecation) {
          var msg = "fs: missing callback " + (err.stack || err.message);
          if (process.traceDeprecation)
            console.trace(msg);
          else
            console.error(msg);
        }
      }
    }
  }
  function maybeCallback(cb) {
    return typeof cb === "function" ? cb : rethrow();
  }
  var normalize = pathModule.normalize;
  if (isWindows) {
    nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
  } else {
    nextPartRe = /(.*?)(?:[\/]+|$)/g;
  }
  var nextPartRe;
  if (isWindows) {
    splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
  } else {
    splitRootRe = /^[\/]*/;
  }
  var splitRootRe;
  exports2.realpathSync = function realpathSync(p, cache) {
    p = pathModule.resolve(p);
    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
      return cache[p];
    }
    var original = p, seenLinks = {}, knownHard = {};
    var pos;
    var current;
    var base;
    var previous;
    start();
    function start() {
      var m = splitRootRe.exec(p);
      pos = m[0].length;
      current = m[0];
      base = m[0];
      previous = "";
      if (isWindows && !knownHard[base]) {
        fs2.lstatSync(base);
        knownHard[base] = true;
      }
    }
    while (pos < p.length) {
      nextPartRe.lastIndex = pos;
      var result = nextPartRe.exec(p);
      previous = current;
      current += result[0];
      base = previous + result[1];
      pos = nextPartRe.lastIndex;
      if (knownHard[base] || cache && cache[base] === base) {
        continue;
      }
      var resolvedLink;
      if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
        resolvedLink = cache[base];
      } else {
        var stat = fs2.lstatSync(base);
        if (!stat.isSymbolicLink()) {
          knownHard[base] = true;
          if (cache)
            cache[base] = base;
          continue;
        }
        var linkTarget = null;
        if (!isWindows) {
          var id = stat.dev.toString(32) + ":" + stat.ino.toString(32);
          if (seenLinks.hasOwnProperty(id)) {
            linkTarget = seenLinks[id];
          }
        }
        if (linkTarget === null) {
          fs2.statSync(base);
          linkTarget = fs2.readlinkSync(base);
        }
        resolvedLink = pathModule.resolve(previous, linkTarget);
        if (cache)
          cache[base] = resolvedLink;
        if (!isWindows)
          seenLinks[id] = linkTarget;
      }
      p = pathModule.resolve(resolvedLink, p.slice(pos));
      start();
    }
    if (cache)
      cache[original] = p;
    return p;
  };
  exports2.realpath = function realpath(p, cache, cb) {
    if (typeof cb !== "function") {
      cb = maybeCallback(cache);
      cache = null;
    }
    p = pathModule.resolve(p);
    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
      return process.nextTick(cb.bind(null, null, cache[p]));
    }
    var original = p, seenLinks = {}, knownHard = {};
    var pos;
    var current;
    var base;
    var previous;
    start();
    function start() {
      var m = splitRootRe.exec(p);
      pos = m[0].length;
      current = m[0];
      base = m[0];
      previous = "";
      if (isWindows && !knownHard[base]) {
        fs2.lstat(base, function(err) {
          if (err)
            return cb(err);
          knownHard[base] = true;
          LOOP();
        });
      } else {
        process.nextTick(LOOP);
      }
    }
    function LOOP() {
      if (pos >= p.length) {
        if (cache)
          cache[original] = p;
        return cb(null, p);
      }
      nextPartRe.lastIndex = pos;
      var result = nextPartRe.exec(p);
      previous = current;
      current += result[0];
      base = previous + result[1];
      pos = nextPartRe.lastIndex;
      if (knownHard[base] || cache && cache[base] === base) {
        return process.nextTick(LOOP);
      }
      if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
        return gotResolvedLink(cache[base]);
      }
      return fs2.lstat(base, gotStat);
    }
    function gotStat(err, stat) {
      if (err)
        return cb(err);
      if (!stat.isSymbolicLink()) {
        knownHard[base] = true;
        if (cache)
          cache[base] = base;
        return process.nextTick(LOOP);
      }
      if (!isWindows) {
        var id = stat.dev.toString(32) + ":" + stat.ino.toString(32);
        if (seenLinks.hasOwnProperty(id)) {
          return gotTarget(null, seenLinks[id], base);
        }
      }
      fs2.stat(base, function(err2) {
        if (err2)
          return cb(err2);
        fs2.readlink(base, function(err3, target) {
          if (!isWindows)
            seenLinks[id] = target;
          gotTarget(err3, target);
        });
      });
    }
    function gotTarget(err, target, base2) {
      if (err)
        return cb(err);
      var resolvedLink = pathModule.resolve(previous, target);
      if (cache)
        cache[base2] = resolvedLink;
      gotResolvedLink(resolvedLink);
    }
    function gotResolvedLink(resolvedLink) {
      p = pathModule.resolve(resolvedLink, p.slice(pos));
      start();
    }
  };
});

// node_modules/.pnpm/fs.realpath@1.0.0/node_modules/fs.realpath/index.js
var require_fs = __commonJS((exports2, module2) => {
  module2.exports = realpath;
  realpath.realpath = realpath;
  realpath.sync = realpathSync;
  realpath.realpathSync = realpathSync;
  realpath.monkeypatch = monkeypatch;
  realpath.unmonkeypatch = unmonkeypatch;
  var fs2 = require("fs");
  var origRealpath = fs2.realpath;
  var origRealpathSync = fs2.realpathSync;
  var version = process.version;
  var ok = /^v[0-5]\./.test(version);
  var old = require_old();
  function newError(er) {
    return er && er.syscall === "realpath" && (er.code === "ELOOP" || er.code === "ENOMEM" || er.code === "ENAMETOOLONG");
  }
  function realpath(p, cache, cb) {
    if (ok) {
      return origRealpath(p, cache, cb);
    }
    if (typeof cache === "function") {
      cb = cache;
      cache = null;
    }
    origRealpath(p, cache, function(er, result) {
      if (newError(er)) {
        old.realpath(p, cache, cb);
      } else {
        cb(er, result);
      }
    });
  }
  function realpathSync(p, cache) {
    if (ok) {
      return origRealpathSync(p, cache);
    }
    try {
      return origRealpathSync(p, cache);
    } catch (er) {
      if (newError(er)) {
        return old.realpathSync(p, cache);
      } else {
        throw er;
      }
    }
  }
  function monkeypatch() {
    fs2.realpath = realpath;
    fs2.realpathSync = realpathSync;
  }
  function unmonkeypatch() {
    fs2.realpath = origRealpath;
    fs2.realpathSync = origRealpathSync;
  }
});

// node_modules/.pnpm/concat-map@0.0.1/node_modules/concat-map/index.js
var require_concat_map = __commonJS((exports2, module2) => {
  module2.exports = function(xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      var x = fn(xs[i], i);
      if (isArray(x))
        res.push.apply(res, x);
      else
        res.push(x);
    }
    return res;
  };
  var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
  };
});

// node_modules/.pnpm/balanced-match@1.0.0/node_modules/balanced-match/index.js
var require_balanced_match = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = balanced;
  function balanced(a, b, str) {
    if (a instanceof RegExp)
      a = maybeMatch(a, str);
    if (b instanceof RegExp)
      b = maybeMatch(b, str);
    var r = range(a, b, str);
    return r && {
      start: r[0],
      end: r[1],
      pre: str.slice(0, r[0]),
      body: str.slice(r[0] + a.length, r[1]),
      post: str.slice(r[1] + b.length)
    };
  }
  function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
  }
  balanced.range = range;
  function range(a, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;
    if (ai >= 0 && bi > 0) {
      begs = [];
      left = str.length;
      while (i >= 0 && !result) {
        if (i == ai) {
          begs.push(i);
          ai = str.indexOf(a, i + 1);
        } else if (begs.length == 1) {
          result = [begs.pop(), bi];
        } else {
          beg = begs.pop();
          if (beg < left) {
            left = beg;
            right = bi;
          }
          bi = str.indexOf(b, i + 1);
        }
        i = ai < bi && ai >= 0 ? ai : bi;
      }
      if (begs.length) {
        result = [left, right];
      }
    }
    return result;
  }
});

// node_modules/.pnpm/brace-expansion@1.1.11/node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS((exports2, module2) => {
  var concatMap = require_concat_map();
  var balanced = require_balanced_match();
  module2.exports = expandTop;
  var escSlash = "\0SLASH" + Math.random() + "\0";
  var escOpen = "\0OPEN" + Math.random() + "\0";
  var escClose = "\0CLOSE" + Math.random() + "\0";
  var escComma = "\0COMMA" + Math.random() + "\0";
  var escPeriod = "\0PERIOD" + Math.random() + "\0";
  function numeric(str) {
    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
  }
  function escapeBraces(str) {
    return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
  }
  function unescapeBraces(str) {
    return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
  }
  function parseCommaParts(str) {
    if (!str)
      return [""];
    var parts = [];
    var m = balanced("{", "}", str);
    if (!m)
      return str.split(",");
    var pre = m.pre;
    var body = m.body;
    var post = m.post;
    var p = pre.split(",");
    p[p.length - 1] += "{" + body + "}";
    var postParts = parseCommaParts(post);
    if (post.length) {
      p[p.length - 1] += postParts.shift();
      p.push.apply(p, postParts);
    }
    parts.push.apply(parts, p);
    return parts;
  }
  function expandTop(str) {
    if (!str)
      return [];
    if (str.substr(0, 2) === "{}") {
      str = "\\{\\}" + str.substr(2);
    }
    return expand(escapeBraces(str), true).map(unescapeBraces);
  }
  function embrace(str) {
    return "{" + str + "}";
  }
  function isPadded(el) {
    return /^-?0\d/.test(el);
  }
  function lte(i, y) {
    return i <= y;
  }
  function gte(i, y) {
    return i >= y;
  }
  function expand(str, isTop) {
    var expansions = [];
    var m = balanced("{", "}", str);
    if (!m || /\$$/.test(m.pre))
      return [str];
    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = m.body.indexOf(",") >= 0;
    if (!isSequence && !isOptions) {
      if (m.post.match(/,.*\}/)) {
        str = m.pre + "{" + m.body + escClose + m.post;
        return expand(str);
      }
      return [str];
    }
    var n;
    if (isSequence) {
      n = m.body.split(/\.\./);
    } else {
      n = parseCommaParts(m.body);
      if (n.length === 1) {
        n = expand(n[0], false).map(embrace);
        if (n.length === 1) {
          var post = m.post.length ? expand(m.post, false) : [""];
          return post.map(function(p) {
            return m.pre + n[0] + p;
          });
        }
      }
    }
    var pre = m.pre;
    var post = m.post.length ? expand(m.post, false) : [""];
    var N;
    if (isSequence) {
      var x = numeric(n[0]);
      var y = numeric(n[1]);
      var width = Math.max(n[0].length, n[1].length);
      var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
      var test = lte;
      var reverse = y < x;
      if (reverse) {
        incr *= -1;
        test = gte;
      }
      var pad = n.some(isPadded);
      N = [];
      for (var i = x; test(i, y); i += incr) {
        var c;
        if (isAlphaSequence) {
          c = String.fromCharCode(i);
          if (c === "\\")
            c = "";
        } else {
          c = String(i);
          if (pad) {
            var need = width - c.length;
            if (need > 0) {
              var z = new Array(need + 1).join("0");
              if (i < 0)
                c = "-" + z + c.slice(1);
              else
                c = z + c;
            }
          }
        }
        N.push(c);
      }
    } else {
      N = concatMap(n, function(el) {
        return expand(el, false);
      });
    }
    for (var j = 0; j < N.length; j++) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion)
          expansions.push(expansion);
      }
    }
    return expansions;
  }
});

// node_modules/.pnpm/minimatch@3.0.4/node_modules/minimatch/minimatch.js
var require_minimatch = __commonJS((exports2, module2) => {
  module2.exports = minimatch;
  minimatch.Minimatch = Minimatch;
  var path2 = {sep: "/"};
  try {
    path2 = require("path");
  } catch (er) {
  }
  var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
  var expand = require_brace_expansion();
  var plTypes = {
    "!": {open: "(?:(?!(?:", close: "))[^/]*?)"},
    "?": {open: "(?:", close: ")?"},
    "+": {open: "(?:", close: ")+"},
    "*": {open: "(?:", close: ")*"},
    "@": {open: "(?:", close: ")"}
  };
  var qmark = "[^/]";
  var star = qmark + "*?";
  var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
  var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
  var reSpecials = charSet("().*{}+?[]^$\\!");
  function charSet(s) {
    return s.split("").reduce(function(set, c) {
      set[c] = true;
      return set;
    }, {});
  }
  var slashSplit = /\/+/;
  minimatch.filter = filter;
  function filter(pattern, options) {
    options = options || {};
    return function(p, i, list) {
      return minimatch(p, pattern, options);
    };
  }
  function ext(a, b) {
    a = a || {};
    b = b || {};
    var t = {};
    Object.keys(b).forEach(function(k) {
      t[k] = b[k];
    });
    Object.keys(a).forEach(function(k) {
      t[k] = a[k];
    });
    return t;
  }
  minimatch.defaults = function(def) {
    if (!def || !Object.keys(def).length)
      return minimatch;
    var orig = minimatch;
    var m = function minimatch2(p, pattern, options) {
      return orig.minimatch(p, pattern, ext(def, options));
    };
    m.Minimatch = function Minimatch2(pattern, options) {
      return new orig.Minimatch(pattern, ext(def, options));
    };
    return m;
  };
  Minimatch.defaults = function(def) {
    if (!def || !Object.keys(def).length)
      return Minimatch;
    return minimatch.defaults(def).Minimatch;
  };
  function minimatch(p, pattern, options) {
    if (typeof pattern !== "string") {
      throw new TypeError("glob pattern string required");
    }
    if (!options)
      options = {};
    if (!options.nocomment && pattern.charAt(0) === "#") {
      return false;
    }
    if (pattern.trim() === "")
      return p === "";
    return new Minimatch(pattern, options).match(p);
  }
  function Minimatch(pattern, options) {
    if (!(this instanceof Minimatch)) {
      return new Minimatch(pattern, options);
    }
    if (typeof pattern !== "string") {
      throw new TypeError("glob pattern string required");
    }
    if (!options)
      options = {};
    pattern = pattern.trim();
    if (path2.sep !== "/") {
      pattern = pattern.split(path2.sep).join("/");
    }
    this.options = options;
    this.set = [];
    this.pattern = pattern;
    this.regexp = null;
    this.negate = false;
    this.comment = false;
    this.empty = false;
    this.make();
  }
  Minimatch.prototype.debug = function() {
  };
  Minimatch.prototype.make = make;
  function make() {
    if (this._made)
      return;
    var pattern = this.pattern;
    var options = this.options;
    if (!options.nocomment && pattern.charAt(0) === "#") {
      this.comment = true;
      return;
    }
    if (!pattern) {
      this.empty = true;
      return;
    }
    this.parseNegate();
    var set = this.globSet = this.braceExpand();
    if (options.debug)
      this.debug = console.error;
    this.debug(this.pattern, set);
    set = this.globParts = set.map(function(s) {
      return s.split(slashSplit);
    });
    this.debug(this.pattern, set);
    set = set.map(function(s, si, set2) {
      return s.map(this.parse, this);
    }, this);
    this.debug(this.pattern, set);
    set = set.filter(function(s) {
      return s.indexOf(false) === -1;
    });
    this.debug(this.pattern, set);
    this.set = set;
  }
  Minimatch.prototype.parseNegate = parseNegate;
  function parseNegate() {
    var pattern = this.pattern;
    var negate = false;
    var options = this.options;
    var negateOffset = 0;
    if (options.nonegate)
      return;
    for (var i = 0, l = pattern.length; i < l && pattern.charAt(i) === "!"; i++) {
      negate = !negate;
      negateOffset++;
    }
    if (negateOffset)
      this.pattern = pattern.substr(negateOffset);
    this.negate = negate;
  }
  minimatch.braceExpand = function(pattern, options) {
    return braceExpand(pattern, options);
  };
  Minimatch.prototype.braceExpand = braceExpand;
  function braceExpand(pattern, options) {
    if (!options) {
      if (this instanceof Minimatch) {
        options = this.options;
      } else {
        options = {};
      }
    }
    pattern = typeof pattern === "undefined" ? this.pattern : pattern;
    if (typeof pattern === "undefined") {
      throw new TypeError("undefined pattern");
    }
    if (options.nobrace || !pattern.match(/\{.*\}/)) {
      return [pattern];
    }
    return expand(pattern);
  }
  Minimatch.prototype.parse = parse2;
  var SUBPARSE = {};
  function parse2(pattern, isSub) {
    if (pattern.length > 1024 * 64) {
      throw new TypeError("pattern is too long");
    }
    var options = this.options;
    if (!options.noglobstar && pattern === "**")
      return GLOBSTAR;
    if (pattern === "")
      return "";
    var re = "";
    var hasMagic = !!options.nocase;
    var escaping = false;
    var patternListStack = [];
    var negativeLists = [];
    var stateChar;
    var inClass = false;
    var reClassStart = -1;
    var classStart = -1;
    var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
    var self2 = this;
    function clearStateChar() {
      if (stateChar) {
        switch (stateChar) {
          case "*":
            re += star;
            hasMagic = true;
            break;
          case "?":
            re += qmark;
            hasMagic = true;
            break;
          default:
            re += "\\" + stateChar;
            break;
        }
        self2.debug("clearStateChar %j %j", stateChar, re);
        stateChar = false;
      }
    }
    for (var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++) {
      this.debug("%s	%s %s %j", pattern, i, re, c);
      if (escaping && reSpecials[c]) {
        re += "\\" + c;
        escaping = false;
        continue;
      }
      switch (c) {
        case "/":
          return false;
        case "\\":
          clearStateChar();
          escaping = true;
          continue;
        case "?":
        case "*":
        case "+":
        case "@":
        case "!":
          this.debug("%s	%s %s %j <-- stateChar", pattern, i, re, c);
          if (inClass) {
            this.debug("  in class");
            if (c === "!" && i === classStart + 1)
              c = "^";
            re += c;
            continue;
          }
          self2.debug("call clearStateChar %j", stateChar);
          clearStateChar();
          stateChar = c;
          if (options.noext)
            clearStateChar();
          continue;
        case "(":
          if (inClass) {
            re += "(";
            continue;
          }
          if (!stateChar) {
            re += "\\(";
            continue;
          }
          patternListStack.push({
            type: stateChar,
            start: i - 1,
            reStart: re.length,
            open: plTypes[stateChar].open,
            close: plTypes[stateChar].close
          });
          re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
          this.debug("plType %j %j", stateChar, re);
          stateChar = false;
          continue;
        case ")":
          if (inClass || !patternListStack.length) {
            re += "\\)";
            continue;
          }
          clearStateChar();
          hasMagic = true;
          var pl = patternListStack.pop();
          re += pl.close;
          if (pl.type === "!") {
            negativeLists.push(pl);
          }
          pl.reEnd = re.length;
          continue;
        case "|":
          if (inClass || !patternListStack.length || escaping) {
            re += "\\|";
            escaping = false;
            continue;
          }
          clearStateChar();
          re += "|";
          continue;
        case "[":
          clearStateChar();
          if (inClass) {
            re += "\\" + c;
            continue;
          }
          inClass = true;
          classStart = i;
          reClassStart = re.length;
          re += c;
          continue;
        case "]":
          if (i === classStart + 1 || !inClass) {
            re += "\\" + c;
            escaping = false;
            continue;
          }
          if (inClass) {
            var cs = pattern.substring(classStart + 1, i);
            try {
              RegExp("[" + cs + "]");
            } catch (er) {
              var sp = this.parse(cs, SUBPARSE);
              re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
              hasMagic = hasMagic || sp[1];
              inClass = false;
              continue;
            }
          }
          hasMagic = true;
          inClass = false;
          re += c;
          continue;
        default:
          clearStateChar();
          if (escaping) {
            escaping = false;
          } else if (reSpecials[c] && !(c === "^" && inClass)) {
            re += "\\";
          }
          re += c;
      }
    }
    if (inClass) {
      cs = pattern.substr(classStart + 1);
      sp = this.parse(cs, SUBPARSE);
      re = re.substr(0, reClassStart) + "\\[" + sp[0];
      hasMagic = hasMagic || sp[1];
    }
    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
      var tail = re.slice(pl.reStart + pl.open.length);
      this.debug("setting tail", re, pl);
      tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_, $1, $2) {
        if (!$2) {
          $2 = "\\";
        }
        return $1 + $1 + $2 + "|";
      });
      this.debug("tail=%j\n   %s", tail, tail, pl, re);
      var t = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
      hasMagic = true;
      re = re.slice(0, pl.reStart) + t + "\\(" + tail;
    }
    clearStateChar();
    if (escaping) {
      re += "\\\\";
    }
    var addPatternStart = false;
    switch (re.charAt(0)) {
      case ".":
      case "[":
      case "(":
        addPatternStart = true;
    }
    for (var n = negativeLists.length - 1; n > -1; n--) {
      var nl = negativeLists[n];
      var nlBefore = re.slice(0, nl.reStart);
      var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
      var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
      var nlAfter = re.slice(nl.reEnd);
      nlLast += nlAfter;
      var openParensBefore = nlBefore.split("(").length - 1;
      var cleanAfter = nlAfter;
      for (i = 0; i < openParensBefore; i++) {
        cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
      }
      nlAfter = cleanAfter;
      var dollar = "";
      if (nlAfter === "" && isSub !== SUBPARSE) {
        dollar = "$";
      }
      var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
      re = newRe;
    }
    if (re !== "" && hasMagic) {
      re = "(?=.)" + re;
    }
    if (addPatternStart) {
      re = patternStart + re;
    }
    if (isSub === SUBPARSE) {
      return [re, hasMagic];
    }
    if (!hasMagic) {
      return globUnescape(pattern);
    }
    var flags = options.nocase ? "i" : "";
    try {
      var regExp = new RegExp("^" + re + "$", flags);
    } catch (er) {
      return new RegExp("$.");
    }
    regExp._glob = pattern;
    regExp._src = re;
    return regExp;
  }
  minimatch.makeRe = function(pattern, options) {
    return new Minimatch(pattern, options || {}).makeRe();
  };
  Minimatch.prototype.makeRe = makeRe;
  function makeRe() {
    if (this.regexp || this.regexp === false)
      return this.regexp;
    var set = this.set;
    if (!set.length) {
      this.regexp = false;
      return this.regexp;
    }
    var options = this.options;
    var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
    var flags = options.nocase ? "i" : "";
    var re = set.map(function(pattern) {
      return pattern.map(function(p) {
        return p === GLOBSTAR ? twoStar : typeof p === "string" ? regExpEscape(p) : p._src;
      }).join("\\/");
    }).join("|");
    re = "^(?:" + re + ")$";
    if (this.negate)
      re = "^(?!" + re + ").*$";
    try {
      this.regexp = new RegExp(re, flags);
    } catch (ex) {
      this.regexp = false;
    }
    return this.regexp;
  }
  minimatch.match = function(list, pattern, options) {
    options = options || {};
    var mm = new Minimatch(pattern, options);
    list = list.filter(function(f) {
      return mm.match(f);
    });
    if (mm.options.nonull && !list.length) {
      list.push(pattern);
    }
    return list;
  };
  Minimatch.prototype.match = match;
  function match(f, partial) {
    this.debug("match", f, this.pattern);
    if (this.comment)
      return false;
    if (this.empty)
      return f === "";
    if (f === "/" && partial)
      return true;
    var options = this.options;
    if (path2.sep !== "/") {
      f = f.split(path2.sep).join("/");
    }
    f = f.split(slashSplit);
    this.debug(this.pattern, "split", f);
    var set = this.set;
    this.debug(this.pattern, "set", set);
    var filename;
    var i;
    for (i = f.length - 1; i >= 0; i--) {
      filename = f[i];
      if (filename)
        break;
    }
    for (i = 0; i < set.length; i++) {
      var pattern = set[i];
      var file = f;
      if (options.matchBase && pattern.length === 1) {
        file = [filename];
      }
      var hit = this.matchOne(file, pattern, partial);
      if (hit) {
        if (options.flipNegate)
          return true;
        return !this.negate;
      }
    }
    if (options.flipNegate)
      return false;
    return this.negate;
  }
  Minimatch.prototype.matchOne = function(file, pattern, partial) {
    var options = this.options;
    this.debug("matchOne", {this: this, file, pattern});
    this.debug("matchOne", file.length, pattern.length);
    for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
      this.debug("matchOne loop");
      var p = pattern[pi];
      var f = file[fi];
      this.debug(pattern, p, f);
      if (p === false)
        return false;
      if (p === GLOBSTAR) {
        this.debug("GLOBSTAR", [pattern, p, f]);
        var fr = fi;
        var pr = pi + 1;
        if (pr === pl) {
          this.debug("** at the end");
          for (; fi < fl; fi++) {
            if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
              return false;
          }
          return true;
        }
        while (fr < fl) {
          var swallowee = file[fr];
          this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
            this.debug("globstar found match!", fr, fl, swallowee);
            return true;
          } else {
            if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
              this.debug("dot detected!", file, fr, pattern, pr);
              break;
            }
            this.debug("globstar swallow a segment, and continue");
            fr++;
          }
        }
        if (partial) {
          this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
          if (fr === fl)
            return true;
        }
        return false;
      }
      var hit;
      if (typeof p === "string") {
        if (options.nocase) {
          hit = f.toLowerCase() === p.toLowerCase();
        } else {
          hit = f === p;
        }
        this.debug("string match", p, f, hit);
      } else {
        hit = f.match(p);
        this.debug("pattern match", p, f, hit);
      }
      if (!hit)
        return false;
    }
    if (fi === fl && pi === pl) {
      return true;
    } else if (fi === fl) {
      return partial;
    } else if (pi === pl) {
      var emptyFileEnd = fi === fl - 1 && file[fi] === "";
      return emptyFileEnd;
    }
    throw new Error("wtf?");
  };
  function globUnescape(s) {
    return s.replace(/\\(.)/g, "$1");
  }
  function regExpEscape(s) {
    return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
});

// node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS((exports2, module2) => {
  if (typeof Object.create === "function") {
    module2.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    module2.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
});

// node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js
var require_inherits = __commonJS((exports2, module2) => {
  try {
    util = require("util");
    if (typeof util.inherits !== "function")
      throw "";
    module2.exports = util.inherits;
  } catch (e) {
    module2.exports = require_inherits_browser();
  }
  var util;
});

// node_modules/.pnpm/path-is-absolute@1.0.1/node_modules/path-is-absolute/index.js
var require_path_is_absolute = __commonJS((exports2, module2) => {
  "use strict";
  function posix(path2) {
    return path2.charAt(0) === "/";
  }
  function win32(path2) {
    var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
    var result = splitDeviceRe.exec(path2);
    var device = result[1] || "";
    var isUnc = Boolean(device && device.charAt(1) !== ":");
    return Boolean(result[2] || isUnc);
  }
  module2.exports = process.platform === "win32" ? win32 : posix;
  module2.exports.posix = posix;
  module2.exports.win32 = win32;
});

// node_modules/.pnpm/glob@7.1.6/node_modules/glob/common.js
var require_common = __commonJS((exports2) => {
  exports2.alphasort = alphasort;
  exports2.alphasorti = alphasorti;
  exports2.setopts = setopts;
  exports2.ownProp = ownProp;
  exports2.makeAbs = makeAbs;
  exports2.finish = finish;
  exports2.mark = mark;
  exports2.isIgnored = isIgnored;
  exports2.childrenIgnored = childrenIgnored;
  function ownProp(obj, field) {
    return Object.prototype.hasOwnProperty.call(obj, field);
  }
  var path2 = require("path");
  var minimatch = require_minimatch();
  var isAbsolute = require_path_is_absolute();
  var Minimatch = minimatch.Minimatch;
  function alphasorti(a, b) {
    return a.toLowerCase().localeCompare(b.toLowerCase());
  }
  function alphasort(a, b) {
    return a.localeCompare(b);
  }
  function setupIgnores(self2, options) {
    self2.ignore = options.ignore || [];
    if (!Array.isArray(self2.ignore))
      self2.ignore = [self2.ignore];
    if (self2.ignore.length) {
      self2.ignore = self2.ignore.map(ignoreMap);
    }
  }
  function ignoreMap(pattern) {
    var gmatcher = null;
    if (pattern.slice(-3) === "/**") {
      var gpattern = pattern.replace(/(\/\*\*)+$/, "");
      gmatcher = new Minimatch(gpattern, {dot: true});
    }
    return {
      matcher: new Minimatch(pattern, {dot: true}),
      gmatcher
    };
  }
  function setopts(self2, pattern, options) {
    if (!options)
      options = {};
    if (options.matchBase && pattern.indexOf("/") === -1) {
      if (options.noglobstar) {
        throw new Error("base matching requires globstar");
      }
      pattern = "**/" + pattern;
    }
    self2.silent = !!options.silent;
    self2.pattern = pattern;
    self2.strict = options.strict !== false;
    self2.realpath = !!options.realpath;
    self2.realpathCache = options.realpathCache || Object.create(null);
    self2.follow = !!options.follow;
    self2.dot = !!options.dot;
    self2.mark = !!options.mark;
    self2.nodir = !!options.nodir;
    if (self2.nodir)
      self2.mark = true;
    self2.sync = !!options.sync;
    self2.nounique = !!options.nounique;
    self2.nonull = !!options.nonull;
    self2.nosort = !!options.nosort;
    self2.nocase = !!options.nocase;
    self2.stat = !!options.stat;
    self2.noprocess = !!options.noprocess;
    self2.absolute = !!options.absolute;
    self2.maxLength = options.maxLength || Infinity;
    self2.cache = options.cache || Object.create(null);
    self2.statCache = options.statCache || Object.create(null);
    self2.symlinks = options.symlinks || Object.create(null);
    setupIgnores(self2, options);
    self2.changedCwd = false;
    var cwd = process.cwd();
    if (!ownProp(options, "cwd"))
      self2.cwd = cwd;
    else {
      self2.cwd = path2.resolve(options.cwd);
      self2.changedCwd = self2.cwd !== cwd;
    }
    self2.root = options.root || path2.resolve(self2.cwd, "/");
    self2.root = path2.resolve(self2.root);
    if (process.platform === "win32")
      self2.root = self2.root.replace(/\\/g, "/");
    self2.cwdAbs = isAbsolute(self2.cwd) ? self2.cwd : makeAbs(self2, self2.cwd);
    if (process.platform === "win32")
      self2.cwdAbs = self2.cwdAbs.replace(/\\/g, "/");
    self2.nomount = !!options.nomount;
    options.nonegate = true;
    options.nocomment = true;
    self2.minimatch = new Minimatch(pattern, options);
    self2.options = self2.minimatch.options;
  }
  function finish(self2) {
    var nou = self2.nounique;
    var all = nou ? [] : Object.create(null);
    for (var i = 0, l = self2.matches.length; i < l; i++) {
      var matches = self2.matches[i];
      if (!matches || Object.keys(matches).length === 0) {
        if (self2.nonull) {
          var literal = self2.minimatch.globSet[i];
          if (nou)
            all.push(literal);
          else
            all[literal] = true;
        }
      } else {
        var m = Object.keys(matches);
        if (nou)
          all.push.apply(all, m);
        else
          m.forEach(function(m2) {
            all[m2] = true;
          });
      }
    }
    if (!nou)
      all = Object.keys(all);
    if (!self2.nosort)
      all = all.sort(self2.nocase ? alphasorti : alphasort);
    if (self2.mark) {
      for (var i = 0; i < all.length; i++) {
        all[i] = self2._mark(all[i]);
      }
      if (self2.nodir) {
        all = all.filter(function(e) {
          var notDir = !/\/$/.test(e);
          var c = self2.cache[e] || self2.cache[makeAbs(self2, e)];
          if (notDir && c)
            notDir = c !== "DIR" && !Array.isArray(c);
          return notDir;
        });
      }
    }
    if (self2.ignore.length)
      all = all.filter(function(m2) {
        return !isIgnored(self2, m2);
      });
    self2.found = all;
  }
  function mark(self2, p) {
    var abs = makeAbs(self2, p);
    var c = self2.cache[abs];
    var m = p;
    if (c) {
      var isDir = c === "DIR" || Array.isArray(c);
      var slash = p.slice(-1) === "/";
      if (isDir && !slash)
        m += "/";
      else if (!isDir && slash)
        m = m.slice(0, -1);
      if (m !== p) {
        var mabs = makeAbs(self2, m);
        self2.statCache[mabs] = self2.statCache[abs];
        self2.cache[mabs] = self2.cache[abs];
      }
    }
    return m;
  }
  function makeAbs(self2, f) {
    var abs = f;
    if (f.charAt(0) === "/") {
      abs = path2.join(self2.root, f);
    } else if (isAbsolute(f) || f === "") {
      abs = f;
    } else if (self2.changedCwd) {
      abs = path2.resolve(self2.cwd, f);
    } else {
      abs = path2.resolve(f);
    }
    if (process.platform === "win32")
      abs = abs.replace(/\\/g, "/");
    return abs;
  }
  function isIgnored(self2, path3) {
    if (!self2.ignore.length)
      return false;
    return self2.ignore.some(function(item) {
      return item.matcher.match(path3) || !!(item.gmatcher && item.gmatcher.match(path3));
    });
  }
  function childrenIgnored(self2, path3) {
    if (!self2.ignore.length)
      return false;
    return self2.ignore.some(function(item) {
      return !!(item.gmatcher && item.gmatcher.match(path3));
    });
  }
});

// node_modules/.pnpm/glob@7.1.6/node_modules/glob/sync.js
var require_sync2 = __commonJS((exports2, module2) => {
  module2.exports = globSync;
  globSync.GlobSync = GlobSync;
  var fs2 = require("fs");
  var rp = require_fs();
  var minimatch = require_minimatch();
  var Minimatch = minimatch.Minimatch;
  var Glob = require_glob().Glob;
  var util = require("util");
  var path2 = require("path");
  var assert = require("assert");
  var isAbsolute = require_path_is_absolute();
  var common = require_common();
  var alphasort = common.alphasort;
  var alphasorti = common.alphasorti;
  var setopts = common.setopts;
  var ownProp = common.ownProp;
  var childrenIgnored = common.childrenIgnored;
  var isIgnored = common.isIgnored;
  function globSync(pattern, options) {
    if (typeof options === "function" || arguments.length === 3)
      throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
    return new GlobSync(pattern, options).found;
  }
  function GlobSync(pattern, options) {
    if (!pattern)
      throw new Error("must provide pattern");
    if (typeof options === "function" || arguments.length === 3)
      throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
    if (!(this instanceof GlobSync))
      return new GlobSync(pattern, options);
    setopts(this, pattern, options);
    if (this.noprocess)
      return this;
    var n = this.minimatch.set.length;
    this.matches = new Array(n);
    for (var i = 0; i < n; i++) {
      this._process(this.minimatch.set[i], i, false);
    }
    this._finish();
  }
  GlobSync.prototype._finish = function() {
    assert(this instanceof GlobSync);
    if (this.realpath) {
      var self2 = this;
      this.matches.forEach(function(matchset, index) {
        var set = self2.matches[index] = Object.create(null);
        for (var p in matchset) {
          try {
            p = self2._makeAbs(p);
            var real = rp.realpathSync(p, self2.realpathCache);
            set[real] = true;
          } catch (er) {
            if (er.syscall === "stat")
              set[self2._makeAbs(p)] = true;
            else
              throw er;
          }
        }
      });
    }
    common.finish(this);
  };
  GlobSync.prototype._process = function(pattern, index, inGlobStar) {
    assert(this instanceof GlobSync);
    var n = 0;
    while (typeof pattern[n] === "string") {
      n++;
    }
    var prefix;
    switch (n) {
      case pattern.length:
        this._processSimple(pattern.join("/"), index);
        return;
      case 0:
        prefix = null;
        break;
      default:
        prefix = pattern.slice(0, n).join("/");
        break;
    }
    var remain = pattern.slice(n);
    var read2;
    if (prefix === null)
      read2 = ".";
    else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
      if (!prefix || !isAbsolute(prefix))
        prefix = "/" + prefix;
      read2 = prefix;
    } else
      read2 = prefix;
    var abs = this._makeAbs(read2);
    if (childrenIgnored(this, read2))
      return;
    var isGlobStar = remain[0] === minimatch.GLOBSTAR;
    if (isGlobStar)
      this._processGlobStar(prefix, read2, abs, remain, index, inGlobStar);
    else
      this._processReaddir(prefix, read2, abs, remain, index, inGlobStar);
  };
  GlobSync.prototype._processReaddir = function(prefix, read2, abs, remain, index, inGlobStar) {
    var entries = this._readdir(abs, inGlobStar);
    if (!entries)
      return;
    var pn = remain[0];
    var negate = !!this.minimatch.negate;
    var rawGlob = pn._glob;
    var dotOk = this.dot || rawGlob.charAt(0) === ".";
    var matchedEntries = [];
    for (var i = 0; i < entries.length; i++) {
      var e = entries[i];
      if (e.charAt(0) !== "." || dotOk) {
        var m;
        if (negate && !prefix) {
          m = !e.match(pn);
        } else {
          m = e.match(pn);
        }
        if (m)
          matchedEntries.push(e);
      }
    }
    var len = matchedEntries.length;
    if (len === 0)
      return;
    if (remain.length === 1 && !this.mark && !this.stat) {
      if (!this.matches[index])
        this.matches[index] = Object.create(null);
      for (var i = 0; i < len; i++) {
        var e = matchedEntries[i];
        if (prefix) {
          if (prefix.slice(-1) !== "/")
            e = prefix + "/" + e;
          else
            e = prefix + e;
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path2.join(this.root, e);
        }
        this._emitMatch(index, e);
      }
      return;
    }
    remain.shift();
    for (var i = 0; i < len; i++) {
      var e = matchedEntries[i];
      var newPattern;
      if (prefix)
        newPattern = [prefix, e];
      else
        newPattern = [e];
      this._process(newPattern.concat(remain), index, inGlobStar);
    }
  };
  GlobSync.prototype._emitMatch = function(index, e) {
    if (isIgnored(this, e))
      return;
    var abs = this._makeAbs(e);
    if (this.mark)
      e = this._mark(e);
    if (this.absolute) {
      e = abs;
    }
    if (this.matches[index][e])
      return;
    if (this.nodir) {
      var c = this.cache[abs];
      if (c === "DIR" || Array.isArray(c))
        return;
    }
    this.matches[index][e] = true;
    if (this.stat)
      this._stat(e);
  };
  GlobSync.prototype._readdirInGlobStar = function(abs) {
    if (this.follow)
      return this._readdir(abs, false);
    var entries;
    var lstat;
    var stat;
    try {
      lstat = fs2.lstatSync(abs);
    } catch (er) {
      if (er.code === "ENOENT") {
        return null;
      }
    }
    var isSym = lstat && lstat.isSymbolicLink();
    this.symlinks[abs] = isSym;
    if (!isSym && lstat && !lstat.isDirectory())
      this.cache[abs] = "FILE";
    else
      entries = this._readdir(abs, false);
    return entries;
  };
  GlobSync.prototype._readdir = function(abs, inGlobStar) {
    var entries;
    if (inGlobStar && !ownProp(this.symlinks, abs))
      return this._readdirInGlobStar(abs);
    if (ownProp(this.cache, abs)) {
      var c = this.cache[abs];
      if (!c || c === "FILE")
        return null;
      if (Array.isArray(c))
        return c;
    }
    try {
      return this._readdirEntries(abs, fs2.readdirSync(abs));
    } catch (er) {
      this._readdirError(abs, er);
      return null;
    }
  };
  GlobSync.prototype._readdirEntries = function(abs, entries) {
    if (!this.mark && !this.stat) {
      for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        if (abs === "/")
          e = abs + e;
        else
          e = abs + "/" + e;
        this.cache[e] = true;
      }
    }
    this.cache[abs] = entries;
    return entries;
  };
  GlobSync.prototype._readdirError = function(f, er) {
    switch (er.code) {
      case "ENOTSUP":
      case "ENOTDIR":
        var abs = this._makeAbs(f);
        this.cache[abs] = "FILE";
        if (abs === this.cwdAbs) {
          var error = new Error(er.code + " invalid cwd " + this.cwd);
          error.path = this.cwd;
          error.code = er.code;
          throw error;
        }
        break;
      case "ENOENT":
      case "ELOOP":
      case "ENAMETOOLONG":
      case "UNKNOWN":
        this.cache[this._makeAbs(f)] = false;
        break;
      default:
        this.cache[this._makeAbs(f)] = false;
        if (this.strict)
          throw er;
        if (!this.silent)
          console.error("glob error", er);
        break;
    }
  };
  GlobSync.prototype._processGlobStar = function(prefix, read2, abs, remain, index, inGlobStar) {
    var entries = this._readdir(abs, inGlobStar);
    if (!entries)
      return;
    var remainWithoutGlobStar = remain.slice(1);
    var gspref = prefix ? [prefix] : [];
    var noGlobStar = gspref.concat(remainWithoutGlobStar);
    this._process(noGlobStar, index, false);
    var len = entries.length;
    var isSym = this.symlinks[abs];
    if (isSym && inGlobStar)
      return;
    for (var i = 0; i < len; i++) {
      var e = entries[i];
      if (e.charAt(0) === "." && !this.dot)
        continue;
      var instead = gspref.concat(entries[i], remainWithoutGlobStar);
      this._process(instead, index, true);
      var below = gspref.concat(entries[i], remain);
      this._process(below, index, true);
    }
  };
  GlobSync.prototype._processSimple = function(prefix, index) {
    var exists = this._stat(prefix);
    if (!this.matches[index])
      this.matches[index] = Object.create(null);
    if (!exists)
      return;
    if (prefix && isAbsolute(prefix) && !this.nomount) {
      var trail = /[\/\\]$/.test(prefix);
      if (prefix.charAt(0) === "/") {
        prefix = path2.join(this.root, prefix);
      } else {
        prefix = path2.resolve(this.root, prefix);
        if (trail)
          prefix += "/";
      }
    }
    if (process.platform === "win32")
      prefix = prefix.replace(/\\/g, "/");
    this._emitMatch(index, prefix);
  };
  GlobSync.prototype._stat = function(f) {
    var abs = this._makeAbs(f);
    var needDir = f.slice(-1) === "/";
    if (f.length > this.maxLength)
      return false;
    if (!this.stat && ownProp(this.cache, abs)) {
      var c = this.cache[abs];
      if (Array.isArray(c))
        c = "DIR";
      if (!needDir || c === "DIR")
        return c;
      if (needDir && c === "FILE")
        return false;
    }
    var exists;
    var stat = this.statCache[abs];
    if (!stat) {
      var lstat;
      try {
        lstat = fs2.lstatSync(abs);
      } catch (er) {
        if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
          this.statCache[abs] = false;
          return false;
        }
      }
      if (lstat && lstat.isSymbolicLink()) {
        try {
          stat = fs2.statSync(abs);
        } catch (er) {
          stat = lstat;
        }
      } else {
        stat = lstat;
      }
    }
    this.statCache[abs] = stat;
    var c = true;
    if (stat)
      c = stat.isDirectory() ? "DIR" : "FILE";
    this.cache[abs] = this.cache[abs] || c;
    if (needDir && c === "FILE")
      return false;
    return c;
  };
  GlobSync.prototype._mark = function(p) {
    return common.mark(this, p);
  };
  GlobSync.prototype._makeAbs = function(f) {
    return common.makeAbs(this, f);
  };
});

// node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS((exports2, module2) => {
  module2.exports = wrappy;
  function wrappy(fn, cb) {
    if (fn && cb)
      return wrappy(fn)(cb);
    if (typeof fn !== "function")
      throw new TypeError("need wrapper function");
    Object.keys(fn).forEach(function(k) {
      wrapper[k] = fn[k];
    });
    return wrapper;
    function wrapper() {
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      var ret = fn.apply(this, args);
      var cb2 = args[args.length - 1];
      if (typeof ret === "function" && ret !== cb2) {
        Object.keys(cb2).forEach(function(k) {
          ret[k] = cb2[k];
        });
      }
      return ret;
    }
  }
});

// node_modules/.pnpm/once@1.4.0/node_modules/once/once.js
var require_once = __commonJS((exports2, module2) => {
  var wrappy = require_wrappy();
  module2.exports = wrappy(once);
  module2.exports.strict = wrappy(onceStrict);
  once.proto = once(function() {
    Object.defineProperty(Function.prototype, "once", {
      value: function() {
        return once(this);
      },
      configurable: true
    });
    Object.defineProperty(Function.prototype, "onceStrict", {
      value: function() {
        return onceStrict(this);
      },
      configurable: true
    });
  });
  function once(fn) {
    var f = function() {
      if (f.called)
        return f.value;
      f.called = true;
      return f.value = fn.apply(this, arguments);
    };
    f.called = false;
    return f;
  }
  function onceStrict(fn) {
    var f = function() {
      if (f.called)
        throw new Error(f.onceError);
      f.called = true;
      return f.value = fn.apply(this, arguments);
    };
    var name = fn.name || "Function wrapped with `once`";
    f.onceError = name + " shouldn't be called more than once";
    f.called = false;
    return f;
  }
});

// node_modules/.pnpm/inflight@1.0.6/node_modules/inflight/inflight.js
var require_inflight = __commonJS((exports2, module2) => {
  var wrappy = require_wrappy();
  var reqs = Object.create(null);
  var once = require_once();
  module2.exports = wrappy(inflight);
  function inflight(key, cb) {
    if (reqs[key]) {
      reqs[key].push(cb);
      return null;
    } else {
      reqs[key] = [cb];
      return makeres(key);
    }
  }
  function makeres(key) {
    return once(function RES() {
      var cbs = reqs[key];
      var len = cbs.length;
      var args = slice(arguments);
      try {
        for (var i = 0; i < len; i++) {
          cbs[i].apply(null, args);
        }
      } finally {
        if (cbs.length > len) {
          cbs.splice(0, len);
          process.nextTick(function() {
            RES.apply(null, args);
          });
        } else {
          delete reqs[key];
        }
      }
    });
  }
  function slice(args) {
    var length = args.length;
    var array = [];
    for (var i = 0; i < length; i++)
      array[i] = args[i];
    return array;
  }
});

// node_modules/.pnpm/glob@7.1.6/node_modules/glob/glob.js
var require_glob = __commonJS((exports2, module2) => {
  module2.exports = glob;
  var fs2 = require("fs");
  var rp = require_fs();
  var minimatch = require_minimatch();
  var Minimatch = minimatch.Minimatch;
  var inherits = require_inherits();
  var EE = require("events").EventEmitter;
  var path2 = require("path");
  var assert = require("assert");
  var isAbsolute = require_path_is_absolute();
  var globSync = require_sync2();
  var common = require_common();
  var alphasort = common.alphasort;
  var alphasorti = common.alphasorti;
  var setopts = common.setopts;
  var ownProp = common.ownProp;
  var inflight = require_inflight();
  var util = require("util");
  var childrenIgnored = common.childrenIgnored;
  var isIgnored = common.isIgnored;
  var once = require_once();
  function glob(pattern, options, cb) {
    if (typeof options === "function")
      cb = options, options = {};
    if (!options)
      options = {};
    if (options.sync) {
      if (cb)
        throw new TypeError("callback provided to sync glob");
      return globSync(pattern, options);
    }
    return new Glob(pattern, options, cb);
  }
  glob.sync = globSync;
  var GlobSync = glob.GlobSync = globSync.GlobSync;
  glob.glob = glob;
  function extend(origin, add) {
    if (add === null || typeof add !== "object") {
      return origin;
    }
    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  glob.hasMagic = function(pattern, options_) {
    var options = extend({}, options_);
    options.noprocess = true;
    var g = new Glob(pattern, options);
    var set = g.minimatch.set;
    if (!pattern)
      return false;
    if (set.length > 1)
      return true;
    for (var j = 0; j < set[0].length; j++) {
      if (typeof set[0][j] !== "string")
        return true;
    }
    return false;
  };
  glob.Glob = Glob;
  inherits(Glob, EE);
  function Glob(pattern, options, cb) {
    if (typeof options === "function") {
      cb = options;
      options = null;
    }
    if (options && options.sync) {
      if (cb)
        throw new TypeError("callback provided to sync glob");
      return new GlobSync(pattern, options);
    }
    if (!(this instanceof Glob))
      return new Glob(pattern, options, cb);
    setopts(this, pattern, options);
    this._didRealPath = false;
    var n = this.minimatch.set.length;
    this.matches = new Array(n);
    if (typeof cb === "function") {
      cb = once(cb);
      this.on("error", cb);
      this.on("end", function(matches) {
        cb(null, matches);
      });
    }
    var self2 = this;
    this._processing = 0;
    this._emitQueue = [];
    this._processQueue = [];
    this.paused = false;
    if (this.noprocess)
      return this;
    if (n === 0)
      return done();
    var sync = true;
    for (var i = 0; i < n; i++) {
      this._process(this.minimatch.set[i], i, false, done);
    }
    sync = false;
    function done() {
      --self2._processing;
      if (self2._processing <= 0) {
        if (sync) {
          process.nextTick(function() {
            self2._finish();
          });
        } else {
          self2._finish();
        }
      }
    }
  }
  Glob.prototype._finish = function() {
    assert(this instanceof Glob);
    if (this.aborted)
      return;
    if (this.realpath && !this._didRealpath)
      return this._realpath();
    common.finish(this);
    this.emit("end", this.found);
  };
  Glob.prototype._realpath = function() {
    if (this._didRealpath)
      return;
    this._didRealpath = true;
    var n = this.matches.length;
    if (n === 0)
      return this._finish();
    var self2 = this;
    for (var i = 0; i < this.matches.length; i++)
      this._realpathSet(i, next);
    function next() {
      if (--n === 0)
        self2._finish();
    }
  };
  Glob.prototype._realpathSet = function(index, cb) {
    var matchset = this.matches[index];
    if (!matchset)
      return cb();
    var found = Object.keys(matchset);
    var self2 = this;
    var n = found.length;
    if (n === 0)
      return cb();
    var set = this.matches[index] = Object.create(null);
    found.forEach(function(p, i) {
      p = self2._makeAbs(p);
      rp.realpath(p, self2.realpathCache, function(er, real) {
        if (!er)
          set[real] = true;
        else if (er.syscall === "stat")
          set[p] = true;
        else
          self2.emit("error", er);
        if (--n === 0) {
          self2.matches[index] = set;
          cb();
        }
      });
    });
  };
  Glob.prototype._mark = function(p) {
    return common.mark(this, p);
  };
  Glob.prototype._makeAbs = function(f) {
    return common.makeAbs(this, f);
  };
  Glob.prototype.abort = function() {
    this.aborted = true;
    this.emit("abort");
  };
  Glob.prototype.pause = function() {
    if (!this.paused) {
      this.paused = true;
      this.emit("pause");
    }
  };
  Glob.prototype.resume = function() {
    if (this.paused) {
      this.emit("resume");
      this.paused = false;
      if (this._emitQueue.length) {
        var eq = this._emitQueue.slice(0);
        this._emitQueue.length = 0;
        for (var i = 0; i < eq.length; i++) {
          var e = eq[i];
          this._emitMatch(e[0], e[1]);
        }
      }
      if (this._processQueue.length) {
        var pq = this._processQueue.slice(0);
        this._processQueue.length = 0;
        for (var i = 0; i < pq.length; i++) {
          var p = pq[i];
          this._processing--;
          this._process(p[0], p[1], p[2], p[3]);
        }
      }
    }
  };
  Glob.prototype._process = function(pattern, index, inGlobStar, cb) {
    assert(this instanceof Glob);
    assert(typeof cb === "function");
    if (this.aborted)
      return;
    this._processing++;
    if (this.paused) {
      this._processQueue.push([pattern, index, inGlobStar, cb]);
      return;
    }
    var n = 0;
    while (typeof pattern[n] === "string") {
      n++;
    }
    var prefix;
    switch (n) {
      case pattern.length:
        this._processSimple(pattern.join("/"), index, cb);
        return;
      case 0:
        prefix = null;
        break;
      default:
        prefix = pattern.slice(0, n).join("/");
        break;
    }
    var remain = pattern.slice(n);
    var read2;
    if (prefix === null)
      read2 = ".";
    else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
      if (!prefix || !isAbsolute(prefix))
        prefix = "/" + prefix;
      read2 = prefix;
    } else
      read2 = prefix;
    var abs = this._makeAbs(read2);
    if (childrenIgnored(this, read2))
      return cb();
    var isGlobStar = remain[0] === minimatch.GLOBSTAR;
    if (isGlobStar)
      this._processGlobStar(prefix, read2, abs, remain, index, inGlobStar, cb);
    else
      this._processReaddir(prefix, read2, abs, remain, index, inGlobStar, cb);
  };
  Glob.prototype._processReaddir = function(prefix, read2, abs, remain, index, inGlobStar, cb) {
    var self2 = this;
    this._readdir(abs, inGlobStar, function(er, entries) {
      return self2._processReaddir2(prefix, read2, abs, remain, index, inGlobStar, entries, cb);
    });
  };
  Glob.prototype._processReaddir2 = function(prefix, read2, abs, remain, index, inGlobStar, entries, cb) {
    if (!entries)
      return cb();
    var pn = remain[0];
    var negate = !!this.minimatch.negate;
    var rawGlob = pn._glob;
    var dotOk = this.dot || rawGlob.charAt(0) === ".";
    var matchedEntries = [];
    for (var i = 0; i < entries.length; i++) {
      var e = entries[i];
      if (e.charAt(0) !== "." || dotOk) {
        var m;
        if (negate && !prefix) {
          m = !e.match(pn);
        } else {
          m = e.match(pn);
        }
        if (m)
          matchedEntries.push(e);
      }
    }
    var len = matchedEntries.length;
    if (len === 0)
      return cb();
    if (remain.length === 1 && !this.mark && !this.stat) {
      if (!this.matches[index])
        this.matches[index] = Object.create(null);
      for (var i = 0; i < len; i++) {
        var e = matchedEntries[i];
        if (prefix) {
          if (prefix !== "/")
            e = prefix + "/" + e;
          else
            e = prefix + e;
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path2.join(this.root, e);
        }
        this._emitMatch(index, e);
      }
      return cb();
    }
    remain.shift();
    for (var i = 0; i < len; i++) {
      var e = matchedEntries[i];
      var newPattern;
      if (prefix) {
        if (prefix !== "/")
          e = prefix + "/" + e;
        else
          e = prefix + e;
      }
      this._process([e].concat(remain), index, inGlobStar, cb);
    }
    cb();
  };
  Glob.prototype._emitMatch = function(index, e) {
    if (this.aborted)
      return;
    if (isIgnored(this, e))
      return;
    if (this.paused) {
      this._emitQueue.push([index, e]);
      return;
    }
    var abs = isAbsolute(e) ? e : this._makeAbs(e);
    if (this.mark)
      e = this._mark(e);
    if (this.absolute)
      e = abs;
    if (this.matches[index][e])
      return;
    if (this.nodir) {
      var c = this.cache[abs];
      if (c === "DIR" || Array.isArray(c))
        return;
    }
    this.matches[index][e] = true;
    var st = this.statCache[abs];
    if (st)
      this.emit("stat", e, st);
    this.emit("match", e);
  };
  Glob.prototype._readdirInGlobStar = function(abs, cb) {
    if (this.aborted)
      return;
    if (this.follow)
      return this._readdir(abs, false, cb);
    var lstatkey = "lstat\0" + abs;
    var self2 = this;
    var lstatcb = inflight(lstatkey, lstatcb_);
    if (lstatcb)
      fs2.lstat(abs, lstatcb);
    function lstatcb_(er, lstat) {
      if (er && er.code === "ENOENT")
        return cb();
      var isSym = lstat && lstat.isSymbolicLink();
      self2.symlinks[abs] = isSym;
      if (!isSym && lstat && !lstat.isDirectory()) {
        self2.cache[abs] = "FILE";
        cb();
      } else
        self2._readdir(abs, false, cb);
    }
  };
  Glob.prototype._readdir = function(abs, inGlobStar, cb) {
    if (this.aborted)
      return;
    cb = inflight("readdir\0" + abs + "\0" + inGlobStar, cb);
    if (!cb)
      return;
    if (inGlobStar && !ownProp(this.symlinks, abs))
      return this._readdirInGlobStar(abs, cb);
    if (ownProp(this.cache, abs)) {
      var c = this.cache[abs];
      if (!c || c === "FILE")
        return cb();
      if (Array.isArray(c))
        return cb(null, c);
    }
    var self2 = this;
    fs2.readdir(abs, readdirCb(this, abs, cb));
  };
  function readdirCb(self2, abs, cb) {
    return function(er, entries) {
      if (er)
        self2._readdirError(abs, er, cb);
      else
        self2._readdirEntries(abs, entries, cb);
    };
  }
  Glob.prototype._readdirEntries = function(abs, entries, cb) {
    if (this.aborted)
      return;
    if (!this.mark && !this.stat) {
      for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        if (abs === "/")
          e = abs + e;
        else
          e = abs + "/" + e;
        this.cache[e] = true;
      }
    }
    this.cache[abs] = entries;
    return cb(null, entries);
  };
  Glob.prototype._readdirError = function(f, er, cb) {
    if (this.aborted)
      return;
    switch (er.code) {
      case "ENOTSUP":
      case "ENOTDIR":
        var abs = this._makeAbs(f);
        this.cache[abs] = "FILE";
        if (abs === this.cwdAbs) {
          var error = new Error(er.code + " invalid cwd " + this.cwd);
          error.path = this.cwd;
          error.code = er.code;
          this.emit("error", error);
          this.abort();
        }
        break;
      case "ENOENT":
      case "ELOOP":
      case "ENAMETOOLONG":
      case "UNKNOWN":
        this.cache[this._makeAbs(f)] = false;
        break;
      default:
        this.cache[this._makeAbs(f)] = false;
        if (this.strict) {
          this.emit("error", er);
          this.abort();
        }
        if (!this.silent)
          console.error("glob error", er);
        break;
    }
    return cb();
  };
  Glob.prototype._processGlobStar = function(prefix, read2, abs, remain, index, inGlobStar, cb) {
    var self2 = this;
    this._readdir(abs, inGlobStar, function(er, entries) {
      self2._processGlobStar2(prefix, read2, abs, remain, index, inGlobStar, entries, cb);
    });
  };
  Glob.prototype._processGlobStar2 = function(prefix, read2, abs, remain, index, inGlobStar, entries, cb) {
    if (!entries)
      return cb();
    var remainWithoutGlobStar = remain.slice(1);
    var gspref = prefix ? [prefix] : [];
    var noGlobStar = gspref.concat(remainWithoutGlobStar);
    this._process(noGlobStar, index, false, cb);
    var isSym = this.symlinks[abs];
    var len = entries.length;
    if (isSym && inGlobStar)
      return cb();
    for (var i = 0; i < len; i++) {
      var e = entries[i];
      if (e.charAt(0) === "." && !this.dot)
        continue;
      var instead = gspref.concat(entries[i], remainWithoutGlobStar);
      this._process(instead, index, true, cb);
      var below = gspref.concat(entries[i], remain);
      this._process(below, index, true, cb);
    }
    cb();
  };
  Glob.prototype._processSimple = function(prefix, index, cb) {
    var self2 = this;
    this._stat(prefix, function(er, exists) {
      self2._processSimple2(prefix, index, er, exists, cb);
    });
  };
  Glob.prototype._processSimple2 = function(prefix, index, er, exists, cb) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null);
    if (!exists)
      return cb();
    if (prefix && isAbsolute(prefix) && !this.nomount) {
      var trail = /[\/\\]$/.test(prefix);
      if (prefix.charAt(0) === "/") {
        prefix = path2.join(this.root, prefix);
      } else {
        prefix = path2.resolve(this.root, prefix);
        if (trail)
          prefix += "/";
      }
    }
    if (process.platform === "win32")
      prefix = prefix.replace(/\\/g, "/");
    this._emitMatch(index, prefix);
    cb();
  };
  Glob.prototype._stat = function(f, cb) {
    var abs = this._makeAbs(f);
    var needDir = f.slice(-1) === "/";
    if (f.length > this.maxLength)
      return cb();
    if (!this.stat && ownProp(this.cache, abs)) {
      var c = this.cache[abs];
      if (Array.isArray(c))
        c = "DIR";
      if (!needDir || c === "DIR")
        return cb(null, c);
      if (needDir && c === "FILE")
        return cb();
    }
    var exists;
    var stat = this.statCache[abs];
    if (stat !== void 0) {
      if (stat === false)
        return cb(null, stat);
      else {
        var type = stat.isDirectory() ? "DIR" : "FILE";
        if (needDir && type === "FILE")
          return cb();
        else
          return cb(null, type, stat);
      }
    }
    var self2 = this;
    var statcb = inflight("stat\0" + abs, lstatcb_);
    if (statcb)
      fs2.lstat(abs, statcb);
    function lstatcb_(er, lstat) {
      if (lstat && lstat.isSymbolicLink()) {
        return fs2.stat(abs, function(er2, stat2) {
          if (er2)
            self2._stat2(f, abs, null, lstat, cb);
          else
            self2._stat2(f, abs, er2, stat2, cb);
        });
      } else {
        self2._stat2(f, abs, er, lstat, cb);
      }
    }
  };
  Glob.prototype._stat2 = function(f, abs, er, stat, cb) {
    if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
      this.statCache[abs] = false;
      return cb();
    }
    var needDir = f.slice(-1) === "/";
    this.statCache[abs] = stat;
    if (abs.slice(-1) === "/" && stat && !stat.isDirectory())
      return cb(null, false, stat);
    var c = true;
    if (stat)
      c = stat.isDirectory() ? "DIR" : "FILE";
    this.cache[abs] = this.cache[abs] || c;
    if (needDir && c === "FILE")
      return cb();
    return cb(null, c, stat);
  };
});

// node_modules/.pnpm/rimraf@3.0.2/node_modules/rimraf/rimraf.js
var require_rimraf = __commonJS((exports2, module2) => {
  var assert = require("assert");
  var path2 = require("path");
  var fs2 = require("fs");
  var glob = void 0;
  try {
    glob = require_glob();
  } catch (_err) {
  }
  var defaultGlobOpts = {
    nosort: true,
    silent: true
  };
  var timeout = 0;
  var isWindows = process.platform === "win32";
  var defaults = (options) => {
    const methods = [
      "unlink",
      "chmod",
      "stat",
      "lstat",
      "rmdir",
      "readdir"
    ];
    methods.forEach((m) => {
      options[m] = options[m] || fs2[m];
      m = m + "Sync";
      options[m] = options[m] || fs2[m];
    });
    options.maxBusyTries = options.maxBusyTries || 3;
    options.emfileWait = options.emfileWait || 1e3;
    if (options.glob === false) {
      options.disableGlob = true;
    }
    if (options.disableGlob !== true && glob === void 0) {
      throw Error("glob dependency not found, set `options.disableGlob = true` if intentional");
    }
    options.disableGlob = options.disableGlob || false;
    options.glob = options.glob || defaultGlobOpts;
  };
  var rimraf = (p, options, cb) => {
    if (typeof options === "function") {
      cb = options;
      options = {};
    }
    assert(p, "rimraf: missing path");
    assert.equal(typeof p, "string", "rimraf: path should be a string");
    assert.equal(typeof cb, "function", "rimraf: callback function required");
    assert(options, "rimraf: invalid options argument provided");
    assert.equal(typeof options, "object", "rimraf: options should be object");
    defaults(options);
    let busyTries = 0;
    let errState = null;
    let n = 0;
    const next = (er) => {
      errState = errState || er;
      if (--n === 0)
        cb(errState);
    };
    const afterGlob = (er, results) => {
      if (er)
        return cb(er);
      n = results.length;
      if (n === 0)
        return cb();
      results.forEach((p2) => {
        const CB = (er2) => {
          if (er2) {
            if ((er2.code === "EBUSY" || er2.code === "ENOTEMPTY" || er2.code === "EPERM") && busyTries < options.maxBusyTries) {
              busyTries++;
              return setTimeout(() => rimraf_(p2, options, CB), busyTries * 100);
            }
            if (er2.code === "EMFILE" && timeout < options.emfileWait) {
              return setTimeout(() => rimraf_(p2, options, CB), timeout++);
            }
            if (er2.code === "ENOENT")
              er2 = null;
          }
          timeout = 0;
          next(er2);
        };
        rimraf_(p2, options, CB);
      });
    };
    if (options.disableGlob || !glob.hasMagic(p))
      return afterGlob(null, [p]);
    options.lstat(p, (er, stat) => {
      if (!er)
        return afterGlob(null, [p]);
      glob(p, options.glob, afterGlob);
    });
  };
  var rimraf_ = (p, options, cb) => {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.lstat(p, (er, st) => {
      if (er && er.code === "ENOENT")
        return cb(null);
      if (er && er.code === "EPERM" && isWindows)
        fixWinEPERM(p, options, er, cb);
      if (st && st.isDirectory())
        return rmdir(p, options, er, cb);
      options.unlink(p, (er2) => {
        if (er2) {
          if (er2.code === "ENOENT")
            return cb(null);
          if (er2.code === "EPERM")
            return isWindows ? fixWinEPERM(p, options, er2, cb) : rmdir(p, options, er2, cb);
          if (er2.code === "EISDIR")
            return rmdir(p, options, er2, cb);
        }
        return cb(er2);
      });
    });
  };
  var fixWinEPERM = (p, options, er, cb) => {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.chmod(p, 438, (er2) => {
      if (er2)
        cb(er2.code === "ENOENT" ? null : er);
      else
        options.stat(p, (er3, stats) => {
          if (er3)
            cb(er3.code === "ENOENT" ? null : er);
          else if (stats.isDirectory())
            rmdir(p, options, er, cb);
          else
            options.unlink(p, cb);
        });
    });
  };
  var fixWinEPERMSync = (p, options, er) => {
    assert(p);
    assert(options);
    try {
      options.chmodSync(p, 438);
    } catch (er2) {
      if (er2.code === "ENOENT")
        return;
      else
        throw er;
    }
    let stats;
    try {
      stats = options.statSync(p);
    } catch (er3) {
      if (er3.code === "ENOENT")
        return;
      else
        throw er;
    }
    if (stats.isDirectory())
      rmdirSync(p, options, er);
    else
      options.unlinkSync(p);
  };
  var rmdir = (p, options, originalEr, cb) => {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.rmdir(p, (er) => {
      if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
        rmkids(p, options, cb);
      else if (er && er.code === "ENOTDIR")
        cb(originalEr);
      else
        cb(er);
    });
  };
  var rmkids = (p, options, cb) => {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.readdir(p, (er, files) => {
      if (er)
        return cb(er);
      let n = files.length;
      if (n === 0)
        return options.rmdir(p, cb);
      let errState;
      files.forEach((f) => {
        rimraf(path2.join(p, f), options, (er2) => {
          if (errState)
            return;
          if (er2)
            return cb(errState = er2);
          if (--n === 0)
            options.rmdir(p, cb);
        });
      });
    });
  };
  var rimrafSync = (p, options) => {
    options = options || {};
    defaults(options);
    assert(p, "rimraf: missing path");
    assert.equal(typeof p, "string", "rimraf: path should be a string");
    assert(options, "rimraf: missing options");
    assert.equal(typeof options, "object", "rimraf: options should be object");
    let results;
    if (options.disableGlob || !glob.hasMagic(p)) {
      results = [p];
    } else {
      try {
        options.lstatSync(p);
        results = [p];
      } catch (er) {
        results = glob.sync(p, options.glob);
      }
    }
    if (!results.length)
      return;
    for (let i = 0; i < results.length; i++) {
      const p2 = results[i];
      let st;
      try {
        st = options.lstatSync(p2);
      } catch (er) {
        if (er.code === "ENOENT")
          return;
        if (er.code === "EPERM" && isWindows)
          fixWinEPERMSync(p2, options, er);
      }
      try {
        if (st && st.isDirectory())
          rmdirSync(p2, options, null);
        else
          options.unlinkSync(p2);
      } catch (er) {
        if (er.code === "ENOENT")
          return;
        if (er.code === "EPERM")
          return isWindows ? fixWinEPERMSync(p2, options, er) : rmdirSync(p2, options, er);
        if (er.code !== "EISDIR")
          throw er;
        rmdirSync(p2, options, er);
      }
    }
  };
  var rmdirSync = (p, options, originalEr) => {
    assert(p);
    assert(options);
    try {
      options.rmdirSync(p);
    } catch (er) {
      if (er.code === "ENOENT")
        return;
      if (er.code === "ENOTDIR")
        throw originalEr;
      if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
        rmkidsSync(p, options);
    }
  };
  var rmkidsSync = (p, options) => {
    assert(p);
    assert(options);
    options.readdirSync(p).forEach((f) => rimrafSync(path2.join(p, f), options));
    const retries = isWindows ? 100 : 1;
    let i = 0;
    do {
      let threw = true;
      try {
        const ret = options.rmdirSync(p, options);
        threw = false;
        return ret;
      } finally {
        if (++i < retries && threw)
          continue;
      }
    } while (true);
  };
  module2.exports = rimraf;
  rimraf.sync = rimrafSync;
});

// node_modules/.pnpm/tmp@0.2.1/node_modules/tmp/lib/tmp.js
var require_tmp = __commonJS((exports2, module2) => {
  /*!
   * Tmp
   *
   * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>
   *
   * MIT Licensed
   */
  var fs2 = require("fs");
  var os = require("os");
  var path2 = require("path");
  var crypto = require("crypto");
  var _c = {fs: fs2.constants, os: os.constants};
  var rimraf = require_rimraf();
  var RANDOM_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  var TEMPLATE_PATTERN = /XXXXXX/;
  var DEFAULT_TRIES = 3;
  var CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR);
  var IS_WIN32 = os.platform() === "win32";
  var EBADF = _c.EBADF || _c.os.errno.EBADF;
  var ENOENT = _c.ENOENT || _c.os.errno.ENOENT;
  var DIR_MODE = 448;
  var FILE_MODE = 384;
  var EXIT = "exit";
  var _removeObjects = [];
  var FN_RMDIR_SYNC = fs2.rmdirSync.bind(fs2);
  var FN_RIMRAF_SYNC = rimraf.sync;
  var _gracefulCleanup = false;
  function tmpName(options, callback) {
    const args = _parseArguments(options, callback), opts = args[0], cb = args[1];
    try {
      _assertAndSanitizeOptions(opts);
    } catch (err) {
      return cb(err);
    }
    let tries = opts.tries;
    (function _getUniqueName() {
      try {
        const name = _generateTmpName(opts);
        fs2.stat(name, function(err) {
          if (!err) {
            if (tries-- > 0)
              return _getUniqueName();
            return cb(new Error("Could not get a unique tmp filename, max tries reached " + name));
          }
          cb(null, name);
        });
      } catch (err) {
        cb(err);
      }
    })();
  }
  function tmpNameSync(options) {
    const args = _parseArguments(options), opts = args[0];
    _assertAndSanitizeOptions(opts);
    let tries = opts.tries;
    do {
      const name = _generateTmpName(opts);
      try {
        fs2.statSync(name);
      } catch (e) {
        return name;
      }
    } while (tries-- > 0);
    throw new Error("Could not get a unique tmp filename, max tries reached");
  }
  function file(options, callback) {
    const args = _parseArguments(options, callback), opts = args[0], cb = args[1];
    tmpName(opts, function _tmpNameCreated(err, name) {
      if (err)
        return cb(err);
      fs2.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err2, fd) {
        if (err2)
          return cb(err2);
        if (opts.discardDescriptor) {
          return fs2.close(fd, function _discardCallback(possibleErr) {
            return cb(possibleErr, name, void 0, _prepareTmpFileRemoveCallback(name, -1, opts, false));
          });
        } else {
          const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;
          cb(null, name, fd, _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts, false));
        }
      });
    });
  }
  function fileSync(options) {
    const args = _parseArguments(options), opts = args[0];
    const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;
    const name = tmpNameSync(opts);
    var fd = fs2.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);
    if (opts.discardDescriptor) {
      fs2.closeSync(fd);
      fd = void 0;
    }
    return {
      name,
      fd,
      removeCallback: _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts, true)
    };
  }
  function dir(options, callback) {
    const args = _parseArguments(options, callback), opts = args[0], cb = args[1];
    tmpName(opts, function _tmpNameCreated(err, name) {
      if (err)
        return cb(err);
      fs2.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err2) {
        if (err2)
          return cb(err2);
        cb(null, name, _prepareTmpDirRemoveCallback(name, opts, false));
      });
    });
  }
  function dirSync(options) {
    const args = _parseArguments(options), opts = args[0];
    const name = tmpNameSync(opts);
    fs2.mkdirSync(name, opts.mode || DIR_MODE);
    return {
      name,
      removeCallback: _prepareTmpDirRemoveCallback(name, opts, true)
    };
  }
  function _removeFileAsync(fdPath, next) {
    const _handler = function(err) {
      if (err && !_isENOENT(err)) {
        return next(err);
      }
      next();
    };
    if (0 <= fdPath[0])
      fs2.close(fdPath[0], function() {
        fs2.unlink(fdPath[1], _handler);
      });
    else
      fs2.unlink(fdPath[1], _handler);
  }
  function _removeFileSync(fdPath) {
    let rethrownException = null;
    try {
      if (0 <= fdPath[0])
        fs2.closeSync(fdPath[0]);
    } catch (e) {
      if (!_isEBADF(e) && !_isENOENT(e))
        throw e;
    } finally {
      try {
        fs2.unlinkSync(fdPath[1]);
      } catch (e) {
        if (!_isENOENT(e))
          rethrownException = e;
      }
    }
    if (rethrownException !== null) {
      throw rethrownException;
    }
  }
  function _prepareTmpFileRemoveCallback(name, fd, opts, sync) {
    const removeCallbackSync = _prepareRemoveCallback(_removeFileSync, [fd, name], sync);
    const removeCallback = _prepareRemoveCallback(_removeFileAsync, [fd, name], sync, removeCallbackSync);
    if (!opts.keep)
      _removeObjects.unshift(removeCallbackSync);
    return sync ? removeCallbackSync : removeCallback;
  }
  function _prepareTmpDirRemoveCallback(name, opts, sync) {
    const removeFunction = opts.unsafeCleanup ? rimraf : fs2.rmdir.bind(fs2);
    const removeFunctionSync = opts.unsafeCleanup ? FN_RIMRAF_SYNC : FN_RMDIR_SYNC;
    const removeCallbackSync = _prepareRemoveCallback(removeFunctionSync, name, sync);
    const removeCallback = _prepareRemoveCallback(removeFunction, name, sync, removeCallbackSync);
    if (!opts.keep)
      _removeObjects.unshift(removeCallbackSync);
    return sync ? removeCallbackSync : removeCallback;
  }
  function _prepareRemoveCallback(removeFunction, fileOrDirName, sync, cleanupCallbackSync) {
    let called = false;
    return function _cleanupCallback(next) {
      if (!called) {
        const toRemove = cleanupCallbackSync || _cleanupCallback;
        const index = _removeObjects.indexOf(toRemove);
        if (index >= 0)
          _removeObjects.splice(index, 1);
        called = true;
        if (sync || removeFunction === FN_RMDIR_SYNC || removeFunction === FN_RIMRAF_SYNC) {
          return removeFunction(fileOrDirName);
        } else {
          return removeFunction(fileOrDirName, next || function() {
          });
        }
      }
    };
  }
  function _garbageCollector() {
    if (!_gracefulCleanup)
      return;
    while (_removeObjects.length) {
      try {
        _removeObjects[0]();
      } catch (e) {
      }
    }
  }
  function _randomChars(howMany) {
    let value = [], rnd = null;
    try {
      rnd = crypto.randomBytes(howMany);
    } catch (e) {
      rnd = crypto.pseudoRandomBytes(howMany);
    }
    for (var i = 0; i < howMany; i++) {
      value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);
    }
    return value.join("");
  }
  function _isBlank(s) {
    return s === null || _isUndefined(s) || !s.trim();
  }
  function _isUndefined(obj) {
    return typeof obj === "undefined";
  }
  function _parseArguments(options, callback) {
    if (typeof options === "function") {
      return [{}, options];
    }
    if (_isUndefined(options)) {
      return [{}, callback];
    }
    const actualOptions = {};
    for (const key of Object.getOwnPropertyNames(options)) {
      actualOptions[key] = options[key];
    }
    return [actualOptions, callback];
  }
  function _generateTmpName(opts) {
    const tmpDir = opts.tmpdir;
    if (!_isUndefined(opts.name))
      return path2.join(tmpDir, opts.dir, opts.name);
    if (!_isUndefined(opts.template))
      return path2.join(tmpDir, opts.dir, opts.template).replace(TEMPLATE_PATTERN, _randomChars(6));
    const name = [
      opts.prefix ? opts.prefix : "tmp",
      "-",
      process.pid,
      "-",
      _randomChars(12),
      opts.postfix ? "-" + opts.postfix : ""
    ].join("");
    return path2.join(tmpDir, opts.dir, name);
  }
  function _assertAndSanitizeOptions(options) {
    options.tmpdir = _getTmpDir(options);
    const tmpDir = options.tmpdir;
    if (!_isUndefined(options.name))
      _assertIsRelative(options.name, "name", tmpDir);
    if (!_isUndefined(options.dir))
      _assertIsRelative(options.dir, "dir", tmpDir);
    if (!_isUndefined(options.template)) {
      _assertIsRelative(options.template, "template", tmpDir);
      if (!options.template.match(TEMPLATE_PATTERN))
        throw new Error(`Invalid template, found "${options.template}".`);
    }
    if (!_isUndefined(options.tries) && isNaN(options.tries) || options.tries < 0)
      throw new Error(`Invalid tries, found "${options.tries}".`);
    options.tries = _isUndefined(options.name) ? options.tries || DEFAULT_TRIES : 1;
    options.keep = !!options.keep;
    options.detachDescriptor = !!options.detachDescriptor;
    options.discardDescriptor = !!options.discardDescriptor;
    options.unsafeCleanup = !!options.unsafeCleanup;
    options.dir = _isUndefined(options.dir) ? "" : path2.relative(tmpDir, _resolvePath(options.dir, tmpDir));
    options.template = _isUndefined(options.template) ? void 0 : path2.relative(tmpDir, _resolvePath(options.template, tmpDir));
    options.template = _isBlank(options.template) ? void 0 : path2.relative(options.dir, options.template);
    options.name = _isUndefined(options.name) ? void 0 : _sanitizeName(options.name);
    options.prefix = _isUndefined(options.prefix) ? "" : options.prefix;
    options.postfix = _isUndefined(options.postfix) ? "" : options.postfix;
  }
  function _resolvePath(name, tmpDir) {
    const sanitizedName = _sanitizeName(name);
    if (sanitizedName.startsWith(tmpDir)) {
      return path2.resolve(sanitizedName);
    } else {
      return path2.resolve(path2.join(tmpDir, sanitizedName));
    }
  }
  function _sanitizeName(name) {
    if (_isBlank(name)) {
      return name;
    }
    return name.replace(/["']/g, "");
  }
  function _assertIsRelative(name, option, tmpDir) {
    if (option === "name") {
      if (path2.isAbsolute(name))
        throw new Error(`${option} option must not contain an absolute path, found "${name}".`);
      let basename = path2.basename(name);
      if (basename === ".." || basename === "." || basename !== name)
        throw new Error(`${option} option must not contain a path, found "${name}".`);
    } else {
      if (path2.isAbsolute(name) && !name.startsWith(tmpDir)) {
        throw new Error(`${option} option must be relative to "${tmpDir}", found "${name}".`);
      }
      let resolvedPath = _resolvePath(name, tmpDir);
      if (!resolvedPath.startsWith(tmpDir))
        throw new Error(`${option} option must be relative to "${tmpDir}", found "${resolvedPath}".`);
    }
  }
  function _isEBADF(error) {
    return _isExpectedError(error, -EBADF, "EBADF");
  }
  function _isENOENT(error) {
    return _isExpectedError(error, -ENOENT, "ENOENT");
  }
  function _isExpectedError(error, errno, code) {
    return IS_WIN32 ? error.code === code : error.code === code && error.errno === errno;
  }
  function setGracefulCleanup() {
    _gracefulCleanup = true;
  }
  function _getTmpDir(options) {
    return path2.resolve(_sanitizeName(options && options.tmpdir || os.tmpdir()));
  }
  process.addListener(EXIT, _garbageCollector);
  Object.defineProperty(module2.exports, "tmpdir", {
    enumerable: true,
    configurable: false,
    get: function() {
      return _getTmpDir();
    }
  });
  module2.exports.dir = dir;
  module2.exports.dirSync = dirSync;
  module2.exports.file = file;
  module2.exports.fileSync = fileSync;
  module2.exports.tmpName = tmpName;
  module2.exports.tmpNameSync = tmpNameSync;
  module2.exports.setGracefulCleanup = setGracefulCleanup;
});

// node_modules/.pnpm/promise-any-polyfill@0.1.2/node_modules/promise-any-polyfill/js/implementation.js
var require_implementation2 = __commonJS((exports2) => {
  "use strict";
  var __awaiter = exports2 && exports2.__awaiter || function(t, e, n, i) {
    return new (n || (n = Promise))(function(o, r) {
      function c(t2) {
        try {
          u(i.next(t2));
        } catch (t3) {
          r(t3);
        }
      }
      function a(t2) {
        try {
          u(i.throw(t2));
        } catch (t3) {
          r(t3);
        }
      }
      function u(t2) {
        var e2;
        t2.done ? o(t2.value) : (e2 = t2.value, e2 instanceof n ? e2 : new n(function(t3) {
          t3(e2);
        })).then(c, a);
      }
      u((i = i.apply(t, e || [])).next());
    });
  };
  Object.defineProperty(exports2, "__esModule", {value: true}), Promise.any = (t) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((e, n) => {
      let i = false, o = 0, r = [];
      const c = (t2) => {
        i || (i = true, e(t2));
      }, a = (t2) => {
        r.push(t2), r.length >= o && n(r);
      };
      for (let e2 of t)
        if (o++, e2.then !== void 0) {
          let t2 = e2;
          if (t2.then((t3) => c(t3)), e2.catch !== void 0) {
            t2.catch((t3) => a(t3));
          }
        }
    });
  });
});

// src/index.ts
var import_child_process = __toModule(require("child_process"));
var import_fs = __toModule(require("fs"));
var import_git_url_parse = __toModule(require_lib6());
var import_meow = __toModule(require_meow());
var import_path = __toModule(require("path"));

// src/Search.tsx
var import_ink = __toModule(require_build3());
var import_ink_select_input = __toModule(require_build4());
var import_ink_text_input = __toModule(require_build5());
var import_qs = __toModule(require_lib10());
var import_react = __toModule(require_react());
var import_swr = __toModule(require_dist2());

// src/fetch.ts
var _fetch = __toModule(require_lib11());
var import_fetch = __toModule(require_fetch());
var fetch2 = import_fetch.default(_fetch);

// src/Search.tsx
var ItemComponent = ({
  isSelected = false,
  label,
  description,
  maxLabelWidth
}) => /* @__PURE__ */ import_react.default.createElement(import_ink.Box, {
  flexDirection: "row"
}, /* @__PURE__ */ import_react.default.createElement(import_ink.Box, {
  width: maxLabelWidth,
  marginRight: 1
}, /* @__PURE__ */ import_react.default.createElement(import_ink.Text, {
  color: isSelected ? "blue" : "whiteBright"
}, label)), /* @__PURE__ */ import_react.default.createElement(import_ink.Box, {
  justifyContent: "flex-end"
}, /* @__PURE__ */ import_react.default.createElement(import_ink.Text, {
  wrap: "truncate-end",
  color: "white",
  dimColor: !isSelected
}, "| ", description == null ? void 0 : description.slice(0, 48))));
var query = {q: "", limit: 20, per_page: 8};
async function getDefaultData() {
  var _a2, _b;
  const resp = await fetch2("https://trends.now.sh/api/repos");
  const json = await resp.json();
  json.total_count = (_b = (_a2 = json.items) == null ? void 0 : _a2.length) != null ? _b : 0;
  if (!json.items) {
    json.items = [];
  }
  if (json.items.length > query.per_page) {
    json.items = json.items.slice(0, query.per_page);
  }
  return [resp, json];
}
async function searchGithubRepository(_search, write) {
  const search = _search.slice(1);
  query.q = search;
  let resp;
  let body;
  if (!search.trim().length) {
    const defaults = await getDefaultData();
    resp = defaults[0];
    body = defaults[1];
  } else {
    resp = await fetch2(`https://api.github.com/search/repositories?${import_qs.default.stringify(query)}`, {
      headers: {
        Accept: "application/vnd.github.v3+json"
      }
    });
    if (resp.ok) {
      body = await resp.json();
    }
  }
  if (resp.ok) {
    if (!Number.isFinite(body.total_count)) {
      console.log("GitHub search API request failed.");
      process.exit(1);
    }
    const results = new Array(Math.min(body.total_count, 20, body.items.length));
    let maxLabelWidth = 0;
    for (let i = 0; i < results.length; i++) {
      const item = body.items[i];
      results[i] = {
        value: `https://github.com/${item.full_name}.git#${item.default_branch}`,
        label: item.full_name.slice(0, 24),
        description: item.description
      };
      maxLabelWidth = maxLabelWidth < results[i].label.length ? results[i].label.length : maxLabelWidth;
    }
    for (let result of results) {
      result.maxLabelWidth = maxLabelWidth;
    }
    return results;
  } else {
    write("GitHub search API request failed with status:" + resp.status);
    return [];
  }
}
var SearchInput = ({onSelect, initialQuery = ""}) => {
  const [query2, setQuery] = import_react.useState(initialQuery || "");
  const {data: results, error} = import_swr.default(["/" + query2.trim()], searchGithubRepository, {
    isDocumentVisible: () => true,
    isOnline: () => true,
    isPaused: () => false
  });
  const lastResults = import_react.default.useRef();
  import_react.default.useEffect(() => {
    if (results == null ? void 0 : results.length) {
      lastResults.current = results;
    }
  }, [results, lastResults]);
  const onSelectItem = import_react.default.useCallback((item) => onSelect(item.value), [
    onSelect
  ]);
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement(import_ink.Text, {
    color: "black"
  }, "Search Github repositories:"), /* @__PURE__ */ import_react.default.createElement(import_ink.Text, null, "> ", /* @__PURE__ */ import_react.default.createElement(import_ink_text_input.default, {
    value: query2,
    onChange: setQuery
  })), /* @__PURE__ */ import_react.default.createElement(import_ink_select_input.default, {
    items: results || lastResults.current,
    onSelect: onSelectItem,
    itemComponent: ItemComponent
  }));
};
function renderInk(query2) {
  return new Promise((resolve, reject) => {
    let result;
    let didResolve = false;
    async function didSelect(value) {
      didResolve = true;
      result.unmount();
      result.cleanup();
      resolve(value);
      result = null;
    }
    try {
      result = import_ink.render(/* @__PURE__ */ import_react.default.createElement(SearchInput, {
        onSelect: didSelect,
        initialQuery: query2
      }), {});
    } catch (exception) {
      if (result) {
        result.unmount();
        result.cleanup();
      }
      console.error(exception);
      reject(exception);
    }
    result.waitUntilExit().then(() => {
      if (!didResolve) {
        process.exit();
      }
    });
  });
}

// src/index.ts
var import_tar = __toModule(require_tar());
var import_tmp = __toModule(require_tmp());
if (typeof Promise.any !== "function") {
  require_implementation2();
}
var didRemove = false;
var tmpobj;
var instance;
function doExit() {
  if (!didRemove) {
    tmpobj == null ? void 0 : tmpobj.removeCallback();
    didRemove = true;
    this.log("\u{1F5D1}  Deleted temp repo");
  }
  if (instance == null ? void 0 : instance.slowTask) {
    instance.slowTask.kill("SIGHUP");
    instance.slowTask = null;
  }
}
var Command = class {
  constructor() {
    this.didFinish = false;
    this.slowTask = null;
    this.didUseFallback = false;
  }
  log(text) {
    console.log(text);
  }
  async _prefetchGithub(repo, owner, filepath, ref, destination) {
    const url = `https://cdn.jsdelivr.net/gh/${owner}/${repo}@${ref}/${filepath || "README.md"}`;
    const resp = await fetch2(url, {
      redirect: "follow"
    });
    if (!resp.ok || resp.status === 404) {
      return false;
    }
    const text = await resp.text();
    if (text.trim().length) {
      await import_fs.default.promises.mkdir(import_path.default.dirname(destination), {recursive: true});
      await import_fs.default.promises.writeFile(destination, text, "utf8");
      return true;
    }
    return false;
  }
  prefetchGithub(repo, owner, filepath, ref, fallback, destination) {
    return Promise.any([
      this._prefetchGithub(repo, owner, filepath, ref, destination),
      this._prefetchGithub(repo, owner, filepath, fallback, destination)
    ]);
  }
  search(input) {
    return renderInk(input);
  }
  async _unzip(source) {
    const response = await fetch2(source, {
      redirect: "follow"
    });
    if (response.ok) {
      return response.body;
    } else {
      throw response.text();
    }
  }
  async unzip(owner, name, ref, fallback, to) {
    const archive = await this.getArchive(`https://api.github.com/repos/${owner}/${name}/tarball/${ref}`, `https://api.github.com/repos/${owner}/${name}/tarball/${fallback}`);
    this.log("\u23F3 Extracting repository to temp folder...");
    archive.pipe(import_tar.default.x({
      cwd: to,
      strip: 1,
      onentry(entry) {
      },
      onwarn(message, data) {
        console.warn(message);
      }
    }));
    return await new Promise((resolve, reject) => {
      archive.on("end", () => {
        this.log("\u{1F4BF} Finished downloading repository!");
        resolve();
      });
      archive.on("error", (error) => {
        this.log("\u{1F4BF} Failed to download repository!");
        reject(error);
      });
    });
  }
  clone(source, to) {
    const git = `git clone --filter=tree:0 --single-branch --depth=1 ${source} ${to}`;
    this.log(`Cloning ${source} to temp folder...`);
    return new Promise((resolve, reject) => {
      const child = import_child_process.default.exec(git, {});
      child.stderr.pipe(process.stderr);
      child.once("close", () => {
        resolve();
      });
      child.once("exit", () => {
        resolve();
      });
      child.once("error", (err) => {
        reject(err);
      });
    });
  }
  parse() {
    const cli = import_meow.default(`
      USAGE
        $ git-peek [git link or github link or search query or repository file path]

      EXAMPLES
        git peek https://github.com/evanw/esbuild/blob/master/lib/common.ts
        git peek https://github.com/ylukem/pin-go
        git peek https://github.com/jarred-sumner/atbuild
        git peek hanford/trends
        git peek react
        git peek https://github.com/jarred-sumner/fastbench.dev/tree/master/src

      OPTIONS
        -e, --editor=editor  [default: auto] editor to open with, possible values:
                             auto, code, vim, subl. By default, it will search
                             $EDITOR. If not found, it will try code, then subl,
                             then vim.

        -h, --help           show CLI help

    `.trim() + "\n", {
      flags: {
        help: {
          type: "boolean",
          default: false,
          alias: "h",
          isRequired: false
        },
        version: {
          type: "boolean",
          default: false,
          alias: "v",
          isRequired: false
        },
        editor: {
          type: "string",
          isMultiple: false,
          isRequired: false,
          default: "auto",
          alias: "e",
          description: `editor to open with, possible values: auto, code, vim, subl. By default, it will search $EDITOR. If not found, it will try code, then subl, then vim.`
        }
      }
    });
    return cli;
  }
  async getArchive(source, fallbackSource) {
    let archive;
    try {
      archive = await this._unzip(source);
    } catch (exception) {
      try {
        this.didUseFallback = true;
        archive = await this._unzip(fallbackSource);
      } catch (exception2) {
        console.error(`Invalid repository link. Tried:
-  ${source}
-  ${fallbackSource}`);
        doExit();
        process.exit();
      }
    }
    return archive;
  }
  async run() {
    var _a2, _b;
    const cli = this.parse();
    const {help, version} = cli.flags;
    let url = (_b = (_a2 = cli.input[0]) == null ? void 0 : _a2.trim()) != null ? _b : "";
    if (help) {
      cli.showHelp(0);
      process.exit(0);
    }
    if (version) {
      cli.showVersion();
      process.exit(0);
    }
    const {
      flags: {editor: _editor = "auto"}
    } = cli;
    let link;
    if (!url.includes("://") && url.split("/").length === 2) {
      const [owner, repo] = url.split("/");
      url = `https://github.com/${owner}/${repo}`;
    }
    let isMalformed = !url || !url.includes("/") || url.includes(" ");
    while (!link) {
      if (isMalformed) {
        url = await this.search(url);
        isMalformed = !url || !url.includes("/") || url.includes(" ");
      }
      try {
        link = import_git_url_parse.default(url);
      } catch (exception) {
        try {
          url = await this.search(url);
          isMalformed = !url || !url.includes("/") || url.includes(" ");
        } catch (exception2) {
          console.log(exception2);
        }
      }
    }
    const start = new Date().getTime();
    tmpobj = import_tmp.default.dirSync({
      unsafeCleanup: true
    });
    didRemove = false;
    process.once("beforeExit", doExit);
    process.once("SIGABRT", doExit);
    process.once("SIGQUIT", doExit);
    let ref = link.ref;
    if (!ref) {
      ref = "master";
    }
    let specificFile = link.filepath;
    if (!specificFile) {
      specificFile = "README.md";
    }
    let openPath = import_path.default.join(tmpobj.name, specificFile);
    if (link.resource === "github.com") {
      let fallback = ref === "main" ? "master" : "main";
      await Promise.any([
        this.prefetchGithub(link.name, link.owner, specificFile, ref, fallback, openPath).catch(console.error),
        this.unzip(link.owner, link.name, ref, fallback, tmpobj.name)
      ]);
    } else {
      await this.clone(link.href, tmpobj.name);
    }
    let chosenEditor = !_editor || _editor === "auto" ? process.env.EDITOR : _editor;
    if (!(chosenEditor == null ? void 0 : chosenEditor.trim().length)) {
      let editorsToTry = ["code", "subl", "vim"];
      for (let editor of editorsToTry) {
        try {
          chosenEditor = import_child_process.default.execSync(`which ${editor}`).toString().trim();
          chosenEditor += " --wait";
          break;
        } catch (exception) {
        }
      }
    }
    let editorSpecificCommands = [];
    if (chosenEditor.includes("code")) {
      editorSpecificCommands.push("--new-window");
      if (specificFile) {
        editorSpecificCommands.push(`-g "${import_path.default.resolve(openPath)}":0:0`);
      }
    } else if (chosenEditor.includes("subl")) {
      editorSpecificCommands.push("--new-window");
      if (specificFile) {
        editorSpecificCommands.push(`"${import_path.default.resolve(openPath)}":0:0`);
      }
    }
    const cmd = `${chosenEditor} "${import_path.default.join(tmpobj.name)}" ${editorSpecificCommands.join(" ")}`.trim();
    await new Promise((resolve, reject) => {
      this.slowTask = import_child_process.default.exec(cmd, {
        env: process.env,
        stdio: "inherit",
        cwd: tmpobj.name
      }, (err, res) => err ? reject(err) : resolve(res));
      this.log(`\u{1F4BB} Launched editor in ${((new Date().getTime() - start) / 1e3).toFixed(2)}s`);
    });
    if (this.slowTask && !this.slowTask.killed) {
      this.slowTask.kill("SIGHUP");
      this.slowTask = null;
    }
    tmpobj.removeCallback();
    didRemove = true;
    this.log("\u{1F5D1}  Deleted temp repo");
    process.exit(0);
  }
};
Command.description = "Quickly open a remote Git repository with your local text editor into a temporary folder.";
Command.usage = "[git link or github link]";
Command.args = [{name: "url"}];
process.on("unhandledRejection", (reason) => console.error(reason));
process.on("unhandledException", (reason) => console.error(reason));
instance = new Command();
instance.run();
